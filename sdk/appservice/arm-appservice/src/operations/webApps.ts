/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/webAppsMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a WebApps. */
export class WebApps {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a WebApps.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * Description for Get all apps for a subscription.
   * @summary Get all apps for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebAppCollection>, callback?: msRest.ServiceCallback<Models.WebAppCollection>): Promise<Models.WebAppsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.WebAppsListResponse>;
  }

  /**
   * Description for Gets all web, mobile, and API apps in the specified resource group.
   * @summary Gets all web, mobile, and API apps in the specified resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.WebAppsListByResourceGroupOptionalParams): Promise<Models.WebAppsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.WebAppsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.WebAppsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.WebAppCollection>, callback?: msRest.ServiceCallback<Models.WebAppCollection>): Promise<Models.WebAppsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.WebAppsListByResourceGroupResponse>;
  }

  /**
   * Description for Gets the details of a web, mobile, or API app.
   * @summary Gets the details of a web, mobile, or API app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetResponse>
   */
  get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  get(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.Site>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Site>): void;
  get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Site>, callback?: msRest.ServiceCallback<Models.Site>): Promise<Models.WebAppsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.WebAppsGetResponse>;
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates
   * an existing app.
   * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot,
   * use the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, name: string, siteEnvelope: Models.Site, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,name,siteEnvelope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsCreateOrUpdateResponse>;
  }

  /**
   * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
   * @summary Deletes a web, mobile, or API app, or one of the deployment slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, name: string, options?: Models.WebAppsDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app to delete.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, name: string, options: Models.WebAppsDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, name: string, options?: Models.WebAppsDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates
   * an existing app.
   * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot,
   * use the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateResponse>
   */
  update(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot,
   * use the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param callback The callback
   */
  update(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, callback: msRest.ServiceCallback<Models.Site>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot,
   * use the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Site>): void;
  update(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Site>, callback?: msRest.ServiceCallback<Models.Site>): Promise<Models.WebAppsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteEnvelope,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.WebAppsUpdateResponse>;
  }

  /**
   * Description for Analyze a custom hostname.
   * @summary Analyze a custom hostname.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsAnalyzeCustomHostnameResponse>
   */
  analyzeCustomHostname(resourceGroupName: string, name: string, options?: Models.WebAppsAnalyzeCustomHostnameOptionalParams): Promise<Models.WebAppsAnalyzeCustomHostnameResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  analyzeCustomHostname(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  analyzeCustomHostname(resourceGroupName: string, name: string, options: Models.WebAppsAnalyzeCustomHostnameOptionalParams, callback: msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>): void;
  analyzeCustomHostname(resourceGroupName: string, name: string, options?: Models.WebAppsAnalyzeCustomHostnameOptionalParams | msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>, callback?: msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>): Promise<Models.WebAppsAnalyzeCustomHostnameResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      analyzeCustomHostnameOperationSpec,
      callback) as Promise<Models.WebAppsAnalyzeCustomHostnameResponse>;
  }

  /**
   * Description for Applies the configuration settings from the target slot onto the current slot.
   * @summary Applies the configuration settings from the target slot onto the current slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param callback The callback
   */
  applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        options
      },
      applySlotConfigToProductionOperationSpec,
      callback);
  }

  /**
   * Description for Creates a backup of an app.
   * @summary Creates a backup of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Backup configuration. You can use the JSON response from the POST action as input
   * here.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsBackupResponse>
   */
  backup(resourceGroupName: string, name: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsBackupResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Backup configuration. You can use the JSON response from the POST action as input
   * here.
   * @param callback The callback
   */
  backup(resourceGroupName: string, name: string, request: Models.BackupRequest, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Backup configuration. You can use the JSON response from the POST action as input
   * here.
   * @param options The optional parameters
   * @param callback The callback
   */
  backup(resourceGroupName: string, name: string, request: Models.BackupRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  backup(resourceGroupName: string, name: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.WebAppsBackupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        options
      },
      backupOperationSpec,
      callback) as Promise<Models.WebAppsBackupResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @summary Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListBackupsResponse>
   */
  listBackups(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listBackups(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBackups(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listBackups(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.WebAppsListBackupsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listBackupsOperationSpec,
      callback) as Promise<Models.WebAppsListBackupsResponse>;
  }

  /**
   * Description for Gets a backup of an app by its ID.
   * @summary Gets a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetBackupStatusResponse>
   */
  getBackupStatus(resourceGroupName: string, name: string, backupId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetBackupStatusResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param callback The callback
   */
  getBackupStatus(resourceGroupName: string, name: string, backupId: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBackupStatus(resourceGroupName: string, name: string, backupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  getBackupStatus(resourceGroupName: string, name: string, backupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.WebAppsGetBackupStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        options
      },
      getBackupStatusOperationSpec,
      callback) as Promise<Models.WebAppsGetBackupStatusResponse>;
  }

  /**
   * Description for Deletes a backup of an app by its ID.
   * @summary Deletes a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteBackup(resourceGroupName: string, name: string, backupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param callback The callback
   */
  deleteBackup(resourceGroupName: string, name: string, backupId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBackup(resourceGroupName: string, name: string, backupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteBackup(resourceGroupName: string, name: string, backupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        options
      },
      deleteBackupOperationSpec,
      callback);
  }

  /**
   * Description for Gets status of a web app backup that may be in progress, including secrets
   * associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the
   * SAS URL for the backup if a new URL is passed in the request body.
   * @summary Gets status of a web app backup that may be in progress, including secrets associated
   * with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for
   * the backup if a new URL is passed in the request body.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param backupId ID of backup.
   * @param request Information on backup request.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListBackupStatusSecretsResponse>
   */
  listBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupStatusSecretsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param backupId ID of backup.
   * @param request Information on backup request.
   * @param callback The callback
   */
  listBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param backupId ID of backup.
   * @param request Information on backup request.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  listBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.WebAppsListBackupStatusSecretsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        request,
        options
      },
      listBackupStatusSecretsOperationSpec,
      callback) as Promise<Models.WebAppsListBackupStatusSecretsResponse>;
  }

  /**
   * Description for Restores a specific backup to another app (or deployment slot, if specified).
   * @summary Restores a specific backup to another app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param request Information on restore request .
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restore(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestore(resourceGroupName,name,backupId,request,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for List the configurations of an app
   * @summary List the configurations of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListConfigurationsResponse>
   */
  listConfigurations(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listConfigurations(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConfigurations(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
  listConfigurations(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResourceCollection>, callback?: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): Promise<Models.WebAppsListConfigurationsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listConfigurationsOperationSpec,
      callback) as Promise<Models.WebAppsListConfigurationsResponse>;
  }

  /**
   * Description for Replaces the application settings of an app.
   * @summary Replaces the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettings Application settings of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateApplicationSettingsResponse>
   */
  updateApplicationSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateApplicationSettingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettings Application settings of the app.
   * @param callback The callback
   */
  updateApplicationSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettings Application settings of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateApplicationSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  updateApplicationSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.WebAppsUpdateApplicationSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        appSettings,
        options
      },
      updateApplicationSettingsOperationSpec,
      callback) as Promise<Models.WebAppsUpdateApplicationSettingsResponse>;
  }

  /**
   * Description for Gets the application settings of an app.
   * @summary Gets the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListApplicationSettingsResponse>
   */
  listApplicationSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListApplicationSettingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listApplicationSettings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listApplicationSettings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listApplicationSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.WebAppsListApplicationSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listApplicationSettingsOperationSpec,
      callback) as Promise<Models.WebAppsListApplicationSettingsResponse>;
  }

  /**
   * Description for Updates the Authentication / Authorization settings associated with web app.
   * @summary Updates the Authentication / Authorization settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param siteAuthSettings Auth settings associated with web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateAuthSettingsResponse>
   */
  updateAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateAuthSettingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param siteAuthSettings Auth settings associated with web app.
   * @param callback The callback
   */
  updateAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param siteAuthSettings Auth settings associated with web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  updateAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteAuthSettings>, callback?: msRest.ServiceCallback<Models.SiteAuthSettings>): Promise<Models.WebAppsUpdateAuthSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteAuthSettings,
        options
      },
      updateAuthSettingsOperationSpec,
      callback) as Promise<Models.WebAppsUpdateAuthSettingsResponse>;
  }

  /**
   * Description for Gets the Authentication/Authorization settings of an app.
   * @summary Gets the Authentication/Authorization settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetAuthSettingsResponse>
   */
  getAuthSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetAuthSettingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  getAuthSettings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthSettings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  getAuthSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteAuthSettings>, callback?: msRest.ServiceCallback<Models.SiteAuthSettings>): Promise<Models.WebAppsGetAuthSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getAuthSettingsOperationSpec,
      callback) as Promise<Models.WebAppsGetAuthSettingsResponse>;
  }

  /**
   * Description for Updates the Azure storage account configurations of an app.
   * @summary Updates the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param azureStorageAccounts Azure storage accounts of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateAzureStorageAccountsResponse>
   */
  updateAzureStorageAccounts(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateAzureStorageAccountsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param azureStorageAccounts Azure storage accounts of the app.
   * @param callback The callback
   */
  updateAzureStorageAccounts(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param azureStorageAccounts Azure storage accounts of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateAzureStorageAccounts(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
  updateAzureStorageAccounts(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>, callback?: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): Promise<Models.WebAppsUpdateAzureStorageAccountsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        azureStorageAccounts,
        options
      },
      updateAzureStorageAccountsOperationSpec,
      callback) as Promise<Models.WebAppsUpdateAzureStorageAccountsResponse>;
  }

  /**
   * Description for Gets the Azure storage account configurations of an app.
   * @summary Gets the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListAzureStorageAccountsResponse>
   */
  listAzureStorageAccounts(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListAzureStorageAccountsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listAzureStorageAccounts(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAzureStorageAccounts(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
  listAzureStorageAccounts(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>, callback?: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): Promise<Models.WebAppsListAzureStorageAccountsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listAzureStorageAccountsOperationSpec,
      callback) as Promise<Models.WebAppsListAzureStorageAccountsResponse>;
  }

  /**
   * Description for Updates the backup configuration of an app.
   * @summary Updates the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Edited backup configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateBackupConfigurationResponse>
   */
  updateBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateBackupConfigurationResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Edited backup configuration.
   * @param callback The callback
   */
  updateBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Edited backup configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  updateBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupRequest>, callback?: msRest.ServiceCallback<Models.BackupRequest>): Promise<Models.WebAppsUpdateBackupConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        options
      },
      updateBackupConfigurationOperationSpec,
      callback) as Promise<Models.WebAppsUpdateBackupConfigurationResponse>;
  }

  /**
   * Description for Deletes the backup configuration of an app.
   * @summary Deletes the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteBackupConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  deleteBackupConfiguration(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBackupConfiguration(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteBackupConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteBackupConfigurationOperationSpec,
      callback);
  }

  /**
   * Description for Gets the backup configuration of an app.
   * @summary Gets the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetBackupConfigurationResponse>
   */
  getBackupConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetBackupConfigurationResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  getBackupConfiguration(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBackupConfiguration(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  getBackupConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupRequest>, callback?: msRest.ServiceCallback<Models.BackupRequest>): Promise<Models.WebAppsGetBackupConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getBackupConfigurationOperationSpec,
      callback) as Promise<Models.WebAppsGetBackupConfigurationResponse>;
  }

  /**
   * Description for Gets the config reference app settings and status of an app
   * @summary Gets the config reference app settings and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetAppSettingsKeyVaultReferencesResponse>
   */
  getAppSettingsKeyVaultReferences(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetAppSettingsKeyVaultReferencesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  getAppSettingsKeyVaultReferences(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.KeyVaultReferenceCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAppSettingsKeyVaultReferences(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyVaultReferenceCollection>): void;
  getAppSettingsKeyVaultReferences(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyVaultReferenceCollection>, callback?: msRest.ServiceCallback<Models.KeyVaultReferenceCollection>): Promise<Models.WebAppsGetAppSettingsKeyVaultReferencesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getAppSettingsKeyVaultReferencesOperationSpec,
      callback) as Promise<Models.WebAppsGetAppSettingsKeyVaultReferencesResponse>;
  }

  /**
   * Description for Gets the config reference and status of an app
   * @summary Gets the config reference and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettingKey App Setting key name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetAppSettingKeyVaultReferenceResponse>
   */
  getAppSettingKeyVaultReference(resourceGroupName: string, name: string, appSettingKey: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetAppSettingKeyVaultReferenceResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettingKey App Setting key name.
   * @param callback The callback
   */
  getAppSettingKeyVaultReference(resourceGroupName: string, name: string, appSettingKey: string, callback: msRest.ServiceCallback<Models.KeyVaultReferenceResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettingKey App Setting key name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAppSettingKeyVaultReference(resourceGroupName: string, name: string, appSettingKey: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyVaultReferenceResource>): void;
  getAppSettingKeyVaultReference(resourceGroupName: string, name: string, appSettingKey: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyVaultReferenceResource>, callback?: msRest.ServiceCallback<Models.KeyVaultReferenceResource>): Promise<Models.WebAppsGetAppSettingKeyVaultReferenceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        appSettingKey,
        options
      },
      getAppSettingKeyVaultReferenceOperationSpec,
      callback) as Promise<Models.WebAppsGetAppSettingKeyVaultReferenceResponse>;
  }

  /**
   * Description for Replaces the connection strings of an app.
   * @summary Replaces the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionStrings Connection strings of the app or deployment slot. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateConnectionStringsResponse>
   */
  updateConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateConnectionStringsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionStrings Connection strings of the app or deployment slot. See example.
   * @param callback The callback
   */
  updateConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionStrings Connection strings of the app or deployment slot. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  updateConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionStringDictionary>, callback?: msRest.ServiceCallback<Models.ConnectionStringDictionary>): Promise<Models.WebAppsUpdateConnectionStringsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        connectionStrings,
        options
      },
      updateConnectionStringsOperationSpec,
      callback) as Promise<Models.WebAppsUpdateConnectionStringsResponse>;
  }

  /**
   * Description for Gets the connection strings of an app.
   * @summary Gets the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListConnectionStringsResponse>
   */
  listConnectionStrings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConnectionStringsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listConnectionStrings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnectionStrings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  listConnectionStrings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionStringDictionary>, callback?: msRest.ServiceCallback<Models.ConnectionStringDictionary>): Promise<Models.WebAppsListConnectionStringsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listConnectionStringsOperationSpec,
      callback) as Promise<Models.WebAppsListConnectionStringsResponse>;
  }

  /**
   * Description for Gets the logging configuration of an app.
   * @summary Gets the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetDiagnosticLogsConfigurationResponse>
   */
  getDiagnosticLogsConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDiagnosticLogsConfigurationResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  getDiagnosticLogsConfiguration(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDiagnosticLogsConfiguration(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  getDiagnosticLogsConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteLogsConfig>, callback?: msRest.ServiceCallback<Models.SiteLogsConfig>): Promise<Models.WebAppsGetDiagnosticLogsConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getDiagnosticLogsConfigurationOperationSpec,
      callback) as Promise<Models.WebAppsGetDiagnosticLogsConfigurationResponse>;
  }

  /**
   * Description for Updates the logging configuration of an app.
   * @summary Updates the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
   * change in the "properties" property.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateDiagnosticLogsConfigResponse>
   */
  updateDiagnosticLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateDiagnosticLogsConfigResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
   * change in the "properties" property.
   * @param callback The callback
   */
  updateDiagnosticLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
   * change in the "properties" property.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDiagnosticLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  updateDiagnosticLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteLogsConfig>, callback?: msRest.ServiceCallback<Models.SiteLogsConfig>): Promise<Models.WebAppsUpdateDiagnosticLogsConfigResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteLogsConfig,
        options
      },
      updateDiagnosticLogsConfigOperationSpec,
      callback) as Promise<Models.WebAppsUpdateDiagnosticLogsConfigResponse>;
  }

  /**
   * Description for Replaces the metadata of an app.
   * @summary Replaces the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param metadata Edited metadata of the app or deployment slot. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateMetadataResponse>
   */
  updateMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateMetadataResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param metadata Edited metadata of the app or deployment slot. See example.
   * @param callback The callback
   */
  updateMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param metadata Edited metadata of the app or deployment slot. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  updateMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.WebAppsUpdateMetadataResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        metadata,
        options
      },
      updateMetadataOperationSpec,
      callback) as Promise<Models.WebAppsUpdateMetadataResponse>;
  }

  /**
   * Description for Gets the metadata of an app.
   * @summary Gets the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListMetadataResponse>
   */
  listMetadata(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListMetadataResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listMetadata(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMetadata(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listMetadata(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.WebAppsListMetadataResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listMetadataOperationSpec,
      callback) as Promise<Models.WebAppsListMetadataResponse>;
  }

  /**
   * Description for Gets the Git/FTP publishing credentials of an app.
   * @summary Gets the Git/FTP publishing credentials of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPublishingCredentialsResponse>
   */
  listPublishingCredentials(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublishingCredentialsResponse> {
    return this.beginListPublishingCredentials(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsListPublishingCredentialsResponse>;
  }

  /**
   * Description for Updates the Push settings associated with web app.
   * @summary Updates the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param pushSettings Push settings associated with web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateSitePushSettingsResponse>
   */
  updateSitePushSettings(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSitePushSettingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param pushSettings Push settings associated with web app.
   * @param callback The callback
   */
  updateSitePushSettings(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, callback: msRest.ServiceCallback<Models.PushSettings>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param pushSettings Push settings associated with web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSitePushSettings(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PushSettings>): void;
  updateSitePushSettings(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PushSettings>, callback?: msRest.ServiceCallback<Models.PushSettings>): Promise<Models.WebAppsUpdateSitePushSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        pushSettings,
        options
      },
      updateSitePushSettingsOperationSpec,
      callback) as Promise<Models.WebAppsUpdateSitePushSettingsResponse>;
  }

  /**
   * Description for Gets the Push settings associated with web app.
   * @summary Gets the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSitePushSettingsResponse>
   */
  listSitePushSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSitePushSettingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  listSitePushSettings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.PushSettings>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSitePushSettings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PushSettings>): void;
  listSitePushSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PushSettings>, callback?: msRest.ServiceCallback<Models.PushSettings>): Promise<Models.WebAppsListSitePushSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSitePushSettingsOperationSpec,
      callback) as Promise<Models.WebAppsListSitePushSettingsResponse>;
  }

  /**
   * Description for Gets the names of app settings and connection strings that stick to the slot
   * (not swapped).
   * @summary Gets the names of app settings and connection strings that stick to the slot (not
   * swapped).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSlotConfigurationNamesResponse>
   */
  listSlotConfigurationNames(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotConfigurationNamesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listSlotConfigurationNames(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSlotConfigurationNames(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
  listSlotConfigurationNames(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotConfigNamesResource>, callback?: msRest.ServiceCallback<Models.SlotConfigNamesResource>): Promise<Models.WebAppsListSlotConfigurationNamesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSlotConfigurationNamesOperationSpec,
      callback) as Promise<Models.WebAppsListSlotConfigurationNamesResponse>;
  }

  /**
   * Description for Updates the names of application settings and connection string that remain with
   * the slot during swap operation.
   * @summary Updates the names of application settings and connection string that remain with the
   * slot during swap operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotConfigNames Names of application settings and connection strings. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateSlotConfigurationNamesResponse>
   */
  updateSlotConfigurationNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSlotConfigurationNamesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotConfigNames Names of application settings and connection strings. See example.
   * @param callback The callback
   */
  updateSlotConfigurationNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotConfigNames Names of application settings and connection strings. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSlotConfigurationNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
  updateSlotConfigurationNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotConfigNamesResource>, callback?: msRest.ServiceCallback<Models.SlotConfigNamesResource>): Promise<Models.WebAppsUpdateSlotConfigurationNamesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotConfigNames,
        options
      },
      updateSlotConfigurationNamesOperationSpec,
      callback) as Promise<Models.WebAppsUpdateSlotConfigurationNamesResponse>;
  }

  /**
   * Description for Gets the configuration of an app, such as platform version and bitness, default
   * documents, virtual applications, Always On, etc.
   * @summary Gets the configuration of an app, such as platform version and bitness, default
   * documents, virtual applications, Always On, etc.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetConfigurationResponse>
   */
  getConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetConfigurationResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  getConfiguration(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getConfiguration(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  getConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResource>, callback?: msRest.ServiceCallback<Models.SiteConfigResource>): Promise<Models.WebAppsGetConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getConfigurationOperationSpec,
      callback) as Promise<Models.WebAppsGetConfigurationResponse>;
  }

  /**
   * Description for Updates the configuration of an app.
   * @summary Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateConfigurationResponse>
   */
  createOrUpdateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateConfigurationResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param callback The callback
   */
  createOrUpdateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  createOrUpdateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResource>, callback?: msRest.ServiceCallback<Models.SiteConfigResource>): Promise<Models.WebAppsCreateOrUpdateConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteConfig,
        options
      },
      createOrUpdateConfigurationOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateConfigurationResponse>;
  }

  /**
   * Description for Updates the configuration of an app.
   * @summary Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateConfigurationResponse>
   */
  updateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateConfigurationResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param callback The callback
   */
  updateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  updateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResource>, callback?: msRest.ServiceCallback<Models.SiteConfigResource>): Promise<Models.WebAppsUpdateConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteConfig,
        options
      },
      updateConfigurationOperationSpec,
      callback) as Promise<Models.WebAppsUpdateConfigurationResponse>;
  }

  /**
   * Description for Gets a list of web app configuration snapshots identifiers. Each element of the
   * list contains a timestamp and the ID of the snapshot.
   * @summary Gets a list of web app configuration snapshots identifiers. Each element of the list
   * contains a timestamp and the ID of the snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListConfigurationSnapshotInfoResponse>
   */
  listConfigurationSnapshotInfo(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationSnapshotInfoResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listConfigurationSnapshotInfo(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConfigurationSnapshotInfo(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
  listConfigurationSnapshotInfo(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>, callback?: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): Promise<Models.WebAppsListConfigurationSnapshotInfoResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listConfigurationSnapshotInfoOperationSpec,
      callback) as Promise<Models.WebAppsListConfigurationSnapshotInfoResponse>;
  }

  /**
   * Description for Gets a snapshot of the configuration of an app at a previous point in time.
   * @summary Gets a snapshot of the configuration of an app at a previous point in time.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetConfigurationSnapshotResponse>
   */
  getConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetConfigurationSnapshotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param callback The callback
   */
  getConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param options The optional parameters
   * @param callback The callback
   */
  getConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  getConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResource>, callback?: msRest.ServiceCallback<Models.SiteConfigResource>): Promise<Models.WebAppsGetConfigurationSnapshotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        snapshotId,
        options
      },
      getConfigurationSnapshotOperationSpec,
      callback) as Promise<Models.WebAppsGetConfigurationSnapshotResponse>;
  }

  /**
   * Description for Reverts the configuration of an app to a previous snapshot.
   * @summary Reverts the configuration of an app to a previous snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  recoverSiteConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param callback The callback
   */
  recoverSiteConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param options The optional parameters
   * @param callback The callback
   */
  recoverSiteConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  recoverSiteConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        snapshotId,
        options
      },
      recoverSiteConfigurationSnapshotOperationSpec,
      callback);
  }

  /**
   * Description for Gets the last lines of docker logs for the given site
   * @summary Gets the last lines of docker logs for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetWebSiteContainerLogsResponse>
   */
  getWebSiteContainerLogs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetWebSiteContainerLogsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  getWebSiteContainerLogs(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getWebSiteContainerLogs(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getWebSiteContainerLogs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.WebAppsGetWebSiteContainerLogsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getWebSiteContainerLogsOperationSpec,
      callback) as Promise<Models.WebAppsGetWebSiteContainerLogsResponse>;
  }

  /**
   * Description for Gets the ZIP archived docker log files for the given site
   * @summary Gets the ZIP archived docker log files for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetContainerLogsZipResponse>
   */
  getContainerLogsZip(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetContainerLogsZipResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  getContainerLogsZip(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getContainerLogsZip(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getContainerLogsZip(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.WebAppsGetContainerLogsZipResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getContainerLogsZipOperationSpec,
      callback) as Promise<Models.WebAppsGetContainerLogsZipResponse>;
  }

  /**
   * Description for List continuous web jobs for an app, or a deployment slot.
   * @summary List continuous web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListContinuousWebJobsResponse>
   */
  listContinuousWebJobs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListContinuousWebJobsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param callback The callback
   */
  listContinuousWebJobs(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listContinuousWebJobs(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
  listContinuousWebJobs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContinuousWebJobCollection>, callback?: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): Promise<Models.WebAppsListContinuousWebJobsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listContinuousWebJobsOperationSpec,
      callback) as Promise<Models.WebAppsListContinuousWebJobsResponse>;
  }

  /**
   * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
   * @summary Gets a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetContinuousWebJobResponse>
   */
  getContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetContinuousWebJobResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param callback The callback
   */
  getContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<Models.ContinuousWebJob>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The optional parameters
   * @param callback The callback
   */
  getContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJob>): void;
  getContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContinuousWebJob>, callback?: msRest.ServiceCallback<Models.ContinuousWebJob>): Promise<Models.WebAppsGetContinuousWebJobResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        options
      },
      getContinuousWebJobOperationSpec,
      callback) as Promise<Models.WebAppsGetContinuousWebJobResponse>;
  }

  /**
   * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
   * @summary Delete a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param callback The callback
   */
  deleteContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        options
      },
      deleteContinuousWebJobOperationSpec,
      callback);
  }

  /**
   * Description for Start a continuous web job for an app, or a deployment slot.
   * @summary Start a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param callback The callback
   */
  startContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The optional parameters
   * @param callback The callback
   */
  startContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  startContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        options
      },
      startContinuousWebJobOperationSpec,
      callback);
  }

  /**
   * Description for Stop a continuous web job for an app, or a deployment slot.
   * @summary Stop a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stopContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param callback The callback
   */
  stopContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The optional parameters
   * @param callback The callback
   */
  stopContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stopContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        options
      },
      stopContinuousWebJobOperationSpec,
      callback);
  }

  /**
   * Description for List deployments for an app, or a deployment slot.
   * @summary List deployments for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListDeploymentsResponse>
   */
  listDeployments(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listDeployments(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeployments(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  listDeployments(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.WebAppsListDeploymentsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listDeploymentsOperationSpec,
      callback) as Promise<Models.WebAppsListDeploymentsResponse>;
  }

  /**
   * Description for Get a deployment by its ID for an app, or a deployment slot.
   * @summary Get a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetDeploymentResponse>
   */
  getDeployment(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDeploymentResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param callback The callback
   */
  getDeployment(resourceGroupName: string, name: string, id: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployment(resourceGroupName: string, name: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  getDeployment(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.WebAppsGetDeploymentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        options
      },
      getDeploymentOperationSpec,
      callback) as Promise<Models.WebAppsGetDeploymentResponse>;
  }

  /**
   * Description for Create a deployment for an app, or a deployment slot.
   * @summary Create a deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id ID of an existing deployment.
   * @param deployment Deployment details.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateDeploymentResponse>
   */
  createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateDeploymentResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id ID of an existing deployment.
   * @param deployment Deployment details.
   * @param callback The callback
   */
  createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id ID of an existing deployment.
   * @param deployment Deployment details.
   * @param options The optional parameters
   * @param callback The callback
   */
  createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.WebAppsCreateDeploymentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        deployment,
        options
      },
      createDeploymentOperationSpec,
      callback) as Promise<Models.WebAppsCreateDeploymentResponse>;
  }

  /**
   * Description for Delete a deployment by its ID for an app, or a deployment slot.
   * @summary Delete a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDeployment(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param callback The callback
   */
  deleteDeployment(resourceGroupName: string, name: string, id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDeployment(resourceGroupName: string, name: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDeployment(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        options
      },
      deleteDeploymentOperationSpec,
      callback);
  }

  /**
   * Description for List deployment log for specific deployment for an app, or a deployment slot.
   * @summary List deployment log for specific deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id The ID of a specific deployment. This is the value of the name property in the JSON
   * response from "GET /api/sites/{siteName}/deployments".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListDeploymentLogResponse>
   */
  listDeploymentLog(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentLogResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id The ID of a specific deployment. This is the value of the name property in the JSON
   * response from "GET /api/sites/{siteName}/deployments".
   * @param callback The callback
   */
  listDeploymentLog(resourceGroupName: string, name: string, id: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id The ID of a specific deployment. This is the value of the name property in the JSON
   * response from "GET /api/sites/{siteName}/deployments".
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentLog(resourceGroupName: string, name: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  listDeploymentLog(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.WebAppsListDeploymentLogResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        options
      },
      listDeploymentLogOperationSpec,
      callback) as Promise<Models.WebAppsListDeploymentLogResponse>;
  }

  /**
   * Description for Discovers an existing app backup that can be restored from a blob in Azure
   * storage. Use this to get information about the databases stored in a backup.
   * @summary Discovers an existing app backup that can be restored from a blob in Azure storage. Use
   * this to get information about the databases stored in a backup.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request A RestoreRequest object that includes Azure storage URL and blog name for
   * discovery of backup.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsDiscoverBackupResponse>
   */
  discoverBackup(resourceGroupName: string, name: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsDiscoverBackupResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request A RestoreRequest object that includes Azure storage URL and blog name for
   * discovery of backup.
   * @param callback The callback
   */
  discoverBackup(resourceGroupName: string, name: string, request: Models.RestoreRequest, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request A RestoreRequest object that includes Azure storage URL and blog name for
   * discovery of backup.
   * @param options The optional parameters
   * @param callback The callback
   */
  discoverBackup(resourceGroupName: string, name: string, request: Models.RestoreRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
  discoverBackup(resourceGroupName: string, name: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RestoreRequest>, callback?: msRest.ServiceCallback<Models.RestoreRequest>): Promise<Models.WebAppsDiscoverBackupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        options
      },
      discoverBackupOperationSpec,
      callback) as Promise<Models.WebAppsDiscoverBackupResponse>;
  }

  /**
   * Description for Lists ownership identifiers for domain associated with web app.
   * @summary Lists ownership identifiers for domain associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListDomainOwnershipIdentifiersResponse>
   */
  listDomainOwnershipIdentifiers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDomainOwnershipIdentifiersResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listDomainOwnershipIdentifiers(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDomainOwnershipIdentifiers(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  listDomainOwnershipIdentifiers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IdentifierCollection>, callback?: msRest.ServiceCallback<Models.IdentifierCollection>): Promise<Models.WebAppsListDomainOwnershipIdentifiersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listDomainOwnershipIdentifiersOperationSpec,
      callback) as Promise<Models.WebAppsListDomainOwnershipIdentifiersResponse>;
  }

  /**
   * Description for Get domain ownership identifier for web app.
   * @summary Get domain ownership identifier for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetDomainOwnershipIdentifierResponse>
   */
  getDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDomainOwnershipIdentifierResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param callback The callback
   */
  getDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, callback: msRest.ServiceCallback<Models.Identifier>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
  getDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Identifier>, callback?: msRest.ServiceCallback<Models.Identifier>): Promise<Models.WebAppsGetDomainOwnershipIdentifierResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        options
      },
      getDomainOwnershipIdentifierOperationSpec,
      callback) as Promise<Models.WebAppsGetDomainOwnershipIdentifierResponse>;
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing
   * ownership identifier.
   * @summary Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse>
   */
  createOrUpdateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param callback The callback
   */
  createOrUpdateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, callback: msRest.ServiceCallback<Models.Identifier>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
  createOrUpdateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Identifier>, callback?: msRest.ServiceCallback<Models.Identifier>): Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        domainOwnershipIdentifier,
        options
      },
      createOrUpdateDomainOwnershipIdentifierOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse>;
  }

  /**
   * Description for Deletes a domain ownership identifier for a web app.
   * @summary Deletes a domain ownership identifier for a web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param callback The callback
   */
  deleteDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        options
      },
      deleteDomainOwnershipIdentifierOperationSpec,
      callback);
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing
   * ownership identifier.
   * @summary Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateDomainOwnershipIdentifierResponse>
   */
  updateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateDomainOwnershipIdentifierResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param callback The callback
   */
  updateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, callback: msRest.ServiceCallback<Models.Identifier>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
  updateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Identifier>, callback?: msRest.ServiceCallback<Models.Identifier>): Promise<Models.WebAppsUpdateDomainOwnershipIdentifierResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        domainOwnershipIdentifier,
        options
      },
      updateDomainOwnershipIdentifierOperationSpec,
      callback) as Promise<Models.WebAppsUpdateDomainOwnershipIdentifierResponse>;
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @summary Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetMSDeployStatusResponse>
   */
  getMSDeployStatus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMSDeployStatusResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  getMSDeployStatus(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMSDeployStatus(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
  getMSDeployStatus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MSDeployStatus>, callback?: msRest.ServiceCallback<Models.MSDeployStatus>): Promise<Models.WebAppsGetMSDeployStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getMSDeployStatusOperationSpec,
      callback) as Promise<Models.WebAppsGetMSDeployStatusResponse>;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @summary Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param mSDeploy Details of MSDeploy operation
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateMSDeployOperationResponse>
   */
  createMSDeployOperation(resourceGroupName: string, name: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateMSDeployOperationResponse> {
    return this.beginCreateMSDeployOperation(resourceGroupName,name,mSDeploy,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsCreateMSDeployOperationResponse>;
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @summary Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetMSDeployLogResponse>
   */
  getMSDeployLog(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMSDeployLogResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  getMSDeployLog(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMSDeployLog(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
  getMSDeployLog(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MSDeployLog>, callback?: msRest.ServiceCallback<Models.MSDeployLog>): Promise<Models.WebAppsGetMSDeployLogResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getMSDeployLogOperationSpec,
      callback) as Promise<Models.WebAppsGetMSDeployLogResponse>;
  }

  /**
   * Description for List the functions for a web site, or a deployment slot.
   * @summary List the functions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListFunctionsResponse>
   */
  listFunctions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListFunctionsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param callback The callback
   */
  listFunctions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFunctions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
  listFunctions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionEnvelopeCollection>, callback?: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): Promise<Models.WebAppsListFunctionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listFunctionsOperationSpec,
      callback) as Promise<Models.WebAppsListFunctionsResponse>;
  }

  /**
   * Description for Fetch a short lived token that can be exchanged for a master key.
   * @summary Fetch a short lived token that can be exchanged for a master key.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetFunctionsAdminTokenResponse>
   */
  getFunctionsAdminToken(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetFunctionsAdminTokenResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  getFunctionsAdminToken(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFunctionsAdminToken(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getFunctionsAdminToken(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.WebAppsGetFunctionsAdminTokenResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getFunctionsAdminTokenOperationSpec,
      callback) as Promise<Models.WebAppsGetFunctionsAdminTokenResponse>;
  }

  /**
   * Description for Get function information by its ID for web site, or a deployment slot.
   * @summary Get function information by its ID for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetFunctionResponse>
   */
  getFunction(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetFunctionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param callback The callback
   */
  getFunction(resourceGroupName: string, name: string, functionName: string, callback: msRest.ServiceCallback<Models.FunctionEnvelope>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFunction(resourceGroupName: string, name: string, functionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelope>): void;
  getFunction(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionEnvelope>, callback?: msRest.ServiceCallback<Models.FunctionEnvelope>): Promise<Models.WebAppsGetFunctionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        options
      },
      getFunctionOperationSpec,
      callback) as Promise<Models.WebAppsGetFunctionResponse>;
  }

  /**
   * Description for Create function for web site, or a deployment slot.
   * @summary Create function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param functionEnvelope Function details.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateFunctionResponse>
   */
  createFunction(resourceGroupName: string, name: string, functionName: string, functionEnvelope: Models.FunctionEnvelope, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateFunctionResponse> {
    return this.beginCreateFunction(resourceGroupName,name,functionName,functionEnvelope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsCreateFunctionResponse>;
  }

  /**
   * Description for Delete a function for web site, or a deployment slot.
   * @summary Delete a function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteFunction(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param callback The callback
   */
  deleteFunction(resourceGroupName: string, name: string, functionName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteFunction(resourceGroupName: string, name: string, functionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteFunction(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        options
      },
      deleteFunctionOperationSpec,
      callback);
  }

  /**
   * Description for Add or update a function secret.
   * @summary Add or update a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param key The key to create or update
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateFunctionSecretResponse>
   */
  createOrUpdateFunctionSecret(resourceGroupName: string, name: string, functionName: string, keyName: string, key: Models.KeyInfo, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateFunctionSecretResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param key The key to create or update
   * @param callback The callback
   */
  createOrUpdateFunctionSecret(resourceGroupName: string, name: string, functionName: string, keyName: string, key: Models.KeyInfo, callback: msRest.ServiceCallback<Models.KeyInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param key The key to create or update
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateFunctionSecret(resourceGroupName: string, name: string, functionName: string, keyName: string, key: Models.KeyInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyInfo>): void;
  createOrUpdateFunctionSecret(resourceGroupName: string, name: string, functionName: string, keyName: string, key: Models.KeyInfo, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyInfo>, callback?: msRest.ServiceCallback<Models.KeyInfo>): Promise<Models.WebAppsCreateOrUpdateFunctionSecretResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        keyName,
        key,
        options
      },
      createOrUpdateFunctionSecretOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateFunctionSecretResponse>;
  }

  /**
   * Description for Delete a function secret.
   * @summary Delete a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteFunctionSecret(resourceGroupName: string, name: string, functionName: string, keyName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param callback The callback
   */
  deleteFunctionSecret(resourceGroupName: string, name: string, functionName: string, keyName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteFunctionSecret(resourceGroupName: string, name: string, functionName: string, keyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteFunctionSecret(resourceGroupName: string, name: string, functionName: string, keyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        keyName,
        options
      },
      deleteFunctionSecretOperationSpec,
      callback);
  }

  /**
   * Description for Get function keys for a function in a web site, or a deployment slot.
   * @summary Get function keys for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListFunctionKeysResponse>
   */
  listFunctionKeys(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListFunctionKeysResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param callback The callback
   */
  listFunctionKeys(resourceGroupName: string, name: string, functionName: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFunctionKeys(resourceGroupName: string, name: string, functionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listFunctionKeys(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.WebAppsListFunctionKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        options
      },
      listFunctionKeysOperationSpec,
      callback) as Promise<Models.WebAppsListFunctionKeysResponse>;
  }

  /**
   * Description for Get function secrets for a function in a web site, or a deployment slot.
   * @summary Get function secrets for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListFunctionSecretsResponse>
   */
  listFunctionSecrets(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListFunctionSecretsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param callback The callback
   */
  listFunctionSecrets(resourceGroupName: string, name: string, functionName: string, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFunctionSecrets(resourceGroupName: string, name: string, functionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
  listFunctionSecrets(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionSecrets>, callback?: msRest.ServiceCallback<Models.FunctionSecrets>): Promise<Models.WebAppsListFunctionSecretsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        options
      },
      listFunctionSecretsOperationSpec,
      callback) as Promise<Models.WebAppsListFunctionSecretsResponse>;
  }

  /**
   * Description for Get host secrets for a function app.
   * @summary Get host secrets for a function app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListHostKeysResponse>
   */
  listHostKeys(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHostKeysResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param callback The callback
   */
  listHostKeys(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HostKeys>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHostKeys(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostKeys>): void;
  listHostKeys(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostKeys>, callback?: msRest.ServiceCallback<Models.HostKeys>): Promise<Models.WebAppsListHostKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listHostKeysOperationSpec,
      callback) as Promise<Models.WebAppsListHostKeysResponse>;
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @summary This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  listSyncStatus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listSyncStatus(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSyncStatus(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  listSyncStatus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSyncStatusOperationSpec,
      callback);
  }

  /**
   * Description for Syncs function trigger metadata to the management database
   * @summary Syncs function trigger metadata to the management database
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  syncFunctions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  syncFunctions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  syncFunctions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  syncFunctions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      syncFunctionsOperationSpec,
      callback);
  }

  /**
   * Description for Add or update a host level secret.
   * @summary Add or update a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param key The key to create or update
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateHostSecretResponse>
   */
  createOrUpdateHostSecret(resourceGroupName: string, name: string, keyType: string, keyName: string, key: Models.KeyInfo, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateHostSecretResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param key The key to create or update
   * @param callback The callback
   */
  createOrUpdateHostSecret(resourceGroupName: string, name: string, keyType: string, keyName: string, key: Models.KeyInfo, callback: msRest.ServiceCallback<Models.KeyInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param key The key to create or update
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateHostSecret(resourceGroupName: string, name: string, keyType: string, keyName: string, key: Models.KeyInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyInfo>): void;
  createOrUpdateHostSecret(resourceGroupName: string, name: string, keyType: string, keyName: string, key: Models.KeyInfo, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyInfo>, callback?: msRest.ServiceCallback<Models.KeyInfo>): Promise<Models.WebAppsCreateOrUpdateHostSecretResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        keyType,
        keyName,
        key,
        options
      },
      createOrUpdateHostSecretOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateHostSecretResponse>;
  }

  /**
   * Description for Delete a host level secret.
   * @summary Delete a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteHostSecret(resourceGroupName: string, name: string, keyType: string, keyName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param callback The callback
   */
  deleteHostSecret(resourceGroupName: string, name: string, keyType: string, keyName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteHostSecret(resourceGroupName: string, name: string, keyType: string, keyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteHostSecret(resourceGroupName: string, name: string, keyType: string, keyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        keyType,
        keyName,
        options
      },
      deleteHostSecretOperationSpec,
      callback);
  }

  /**
   * Description for Get hostname bindings for an app or a deployment slot.
   * @summary Get hostname bindings for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListHostNameBindingsResponse>
   */
  listHostNameBindings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHostNameBindingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listHostNameBindings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHostNameBindings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  listHostNameBindings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBindingCollection>, callback?: msRest.ServiceCallback<Models.HostNameBindingCollection>): Promise<Models.WebAppsListHostNameBindingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listHostNameBindingsOperationSpec,
      callback) as Promise<Models.WebAppsListHostNameBindingsResponse>;
  }

  /**
   * Description for Get the named hostname binding for an app (or deployment slot, if specified).
   * @summary Get the named hostname binding for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetHostNameBindingResponse>
   */
  getHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetHostNameBindingResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param callback The callback
   */
  getHostNameBinding(resourceGroupName: string, name: string, hostName: string, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostNameBinding(resourceGroupName: string, name: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  getHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBinding>, callback?: msRest.ServiceCallback<Models.HostNameBinding>): Promise<Models.WebAppsGetHostNameBindingResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        hostName,
        options
      },
      getHostNameBindingOperationSpec,
      callback) as Promise<Models.WebAppsGetHostNameBindingResponse>;
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @summary Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
   * object.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateHostNameBindingResponse>
   */
  createOrUpdateHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateHostNameBindingResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
   * object.
   * @param callback The callback
   */
  createOrUpdateHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
   * object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  createOrUpdateHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBinding>, callback?: msRest.ServiceCallback<Models.HostNameBinding>): Promise<Models.WebAppsCreateOrUpdateHostNameBindingResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        hostName,
        hostNameBinding,
        options
      },
      createOrUpdateHostNameBindingOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateHostNameBindingResponse>;
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @summary Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param callback The callback
   */
  deleteHostNameBinding(resourceGroupName: string, name: string, hostName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        hostName,
        options
      },
      deleteHostNameBindingOperationSpec,
      callback);
  }

  /**
   * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
   * @summary Retrieves a specific Service Bus Hybrid Connection used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetHybridConnectionResponse>
   */
  getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetHybridConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param callback The callback
   */
  getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnection>, callback?: msRest.ServiceCallback<Models.HybridConnection>): Promise<Models.WebAppsGetHybridConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options
      },
      getHybridConnectionOperationSpec,
      callback) as Promise<Models.WebAppsGetHybridConnectionResponse>;
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @summary Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateHybridConnectionResponse>
   */
  createOrUpdateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateHybridConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param callback The callback
   */
  createOrUpdateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  createOrUpdateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnection>, callback?: msRest.ServiceCallback<Models.HybridConnection>): Promise<Models.WebAppsCreateOrUpdateHybridConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        connectionEnvelope,
        options
      },
      createOrUpdateHybridConnectionOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateHybridConnectionResponse>;
  }

  /**
   * Description for Removes a Hybrid Connection from this site.
   * @summary Removes a Hybrid Connection from this site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param callback The callback
   */
  deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options
      },
      deleteHybridConnectionOperationSpec,
      callback);
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @summary Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateHybridConnectionResponse>
   */
  updateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateHybridConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param callback The callback
   */
  updateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  updateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnection>, callback?: msRest.ServiceCallback<Models.HybridConnection>): Promise<Models.WebAppsUpdateHybridConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        connectionEnvelope,
        options
      },
      updateHybridConnectionOperationSpec,
      callback) as Promise<Models.WebAppsUpdateHybridConnectionResponse>;
  }

  /**
   * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
   * @summary Retrieves all Service Bus Hybrid Connections used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListHybridConnectionsResponse>
   */
  listHybridConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHybridConnectionsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param callback The callback
   */
  listHybridConnections(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHybridConnections(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  listHybridConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnection>, callback?: msRest.ServiceCallback<Models.HybridConnection>): Promise<Models.WebAppsListHybridConnectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listHybridConnectionsOperationSpec,
      callback) as Promise<Models.WebAppsListHybridConnectionsResponse>;
  }

  /**
   * Description for Gets hybrid connections configured for an app (or deployment slot, if
   * specified).
   * @summary Gets hybrid connections configured for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListRelayServiceConnectionsResponse>
   */
  listRelayServiceConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListRelayServiceConnectionsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listRelayServiceConnections(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRelayServiceConnections(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  listRelayServiceConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.WebAppsListRelayServiceConnectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listRelayServiceConnectionsOperationSpec,
      callback) as Promise<Models.WebAppsListRelayServiceConnectionsResponse>;
  }

  /**
   * Description for Gets a hybrid connection configuration by its name.
   * @summary Gets a hybrid connection configuration by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetRelayServiceConnectionResponse>
   */
  getRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetRelayServiceConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection.
   * @param callback The callback
   */
  getRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection.
   * @param options The optional parameters
   * @param callback The callback
   */
  getRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  getRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.WebAppsGetRelayServiceConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        options
      },
      getRelayServiceConnectionOperationSpec,
      callback) as Promise<Models.WebAppsGetRelayServiceConnectionResponse>;
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @summary Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionResponse>
   */
  createOrUpdateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param callback The callback
   */
  createOrUpdateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  createOrUpdateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        connectionEnvelope,
        options
      },
      createOrUpdateRelayServiceConnectionOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionResponse>;
  }

  /**
   * Description for Deletes a relay service connection by its name.
   * @summary Deletes a relay service connection by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param callback The callback
   */
  deleteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        options
      },
      deleteRelayServiceConnectionOperationSpec,
      callback);
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @summary Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateRelayServiceConnectionResponse>
   */
  updateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateRelayServiceConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param callback The callback
   */
  updateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  updateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.WebAppsUpdateRelayServiceConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        connectionEnvelope,
        options
      },
      updateRelayServiceConnectionOperationSpec,
      callback) as Promise<Models.WebAppsUpdateRelayServiceConnectionResponse>;
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @summary Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceIdentifiersResponse>
   */
  listInstanceIdentifiers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceIdentifiersResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listInstanceIdentifiers(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceIdentifiers(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
  listInstanceIdentifiers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebAppInstanceCollection>, callback?: msRest.ServiceCallback<Models.WebAppInstanceCollection>): Promise<Models.WebAppsListInstanceIdentifiersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listInstanceIdentifiersOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceIdentifiersResponse>;
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @summary Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceInfoResponse>
   */
  getInstanceInfo(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceInfoResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param instanceId
   * @param callback The callback
   */
  getInstanceInfo(resourceGroupName: string, name: string, instanceId: string, callback: msRest.ServiceCallback<Models.WebSiteInstanceStatus>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceInfo(resourceGroupName: string, name: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebSiteInstanceStatus>): void;
  getInstanceInfo(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebSiteInstanceStatus>, callback?: msRest.ServiceCallback<Models.WebSiteInstanceStatus>): Promise<Models.WebAppsGetInstanceInfoResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        instanceId,
        options
      },
      getInstanceInfoOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceInfoResponse>;
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @summary Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceMsDeployStatusResponse>
   */
  getInstanceMsDeployStatus(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceMsDeployStatusResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param callback The callback
   */
  getInstanceMsDeployStatus(resourceGroupName: string, name: string, instanceId: string, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceMsDeployStatus(resourceGroupName: string, name: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
  getInstanceMsDeployStatus(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MSDeployStatus>, callback?: msRest.ServiceCallback<Models.MSDeployStatus>): Promise<Models.WebAppsGetInstanceMsDeployStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        instanceId,
        options
      },
      getInstanceMsDeployStatusOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceMsDeployStatusResponse>;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @summary Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param mSDeploy Details of MSDeploy operation
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateInstanceMSDeployOperationResponse>
   */
  createInstanceMSDeployOperation(resourceGroupName: string, name: string, instanceId: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateInstanceMSDeployOperationResponse> {
    return this.beginCreateInstanceMSDeployOperation(resourceGroupName,name,instanceId,mSDeploy,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsCreateInstanceMSDeployOperationResponse>;
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @summary Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceMSDeployLogResponse>
   */
  getInstanceMSDeployLog(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceMSDeployLogResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param callback The callback
   */
  getInstanceMSDeployLog(resourceGroupName: string, name: string, instanceId: string, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceMSDeployLog(resourceGroupName: string, name: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
  getInstanceMSDeployLog(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MSDeployLog>, callback?: msRest.ServiceCallback<Models.MSDeployLog>): Promise<Models.WebAppsGetInstanceMSDeployLogResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        instanceId,
        options
      },
      getInstanceMSDeployLogOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceMSDeployLogResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @summary Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessesResponse>
   */
  listInstanceProcesses(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  listInstanceProcesses(resourceGroupName: string, name: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcesses(resourceGroupName: string, name: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  listInstanceProcesses(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessInfoCollection>): Promise<Models.WebAppsListInstanceProcessesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        instanceId,
        options
      },
      listInstanceProcessesOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessesResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web
   * site.
   * @summary Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceProcessResponse>
   */
  getInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  getInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
  getInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfo>, callback?: msRest.ServiceCallback<Models.ProcessInfo>): Promise<Models.WebAppsGetInstanceProcessResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        options
      },
      getInstanceProcessOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceProcessResponse>;
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @summary Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  deleteInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        options
      },
      deleteInstanceProcessOperationSpec,
      callback);
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceProcessDumpResponse>
   */
  getInstanceProcessDump(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessDumpResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  getInstanceProcessDump(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceProcessDump(resourceGroupName: string, name: string, processId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getInstanceProcessDump(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.WebAppsGetInstanceProcessDumpResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        options
      },
      getInstanceProcessDumpOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceProcessDumpResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out
   * instance in a web site.
   * @summary List module information for a process by its ID for a specific scaled-out instance in a
   * web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessModulesResponse>
   */
  listInstanceProcessModules(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessModulesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  listInstanceProcessModules(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessModules(resourceGroupName: string, name: string, processId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  listInstanceProcessModules(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): Promise<Models.WebAppsListInstanceProcessModulesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        options
      },
      listInstanceProcessModulesOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessModulesResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web
   * site.
   * @summary Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceProcessModuleResponse>
   */
  getInstanceProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessModuleResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  getInstanceProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
  getInstanceProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfo>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfo>): Promise<Models.WebAppsGetInstanceProcessModuleResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        baseAddress,
        instanceId,
        options
      },
      getInstanceProcessModuleOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceProcessModuleResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessThreadsResponse>
   */
  listInstanceProcessThreads(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessThreadsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  listInstanceProcessThreads(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessThreads(resourceGroupName: string, name: string, processId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  listInstanceProcessThreads(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessThreadInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): Promise<Models.WebAppsListInstanceProcessThreadsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        options
      },
      listInstanceProcessThreadsOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessThreadsResponse>;
  }

  /**
   * Description for Shows whether an app can be cloned to another resource group or subscription.
   * @summary Shows whether an app can be cloned to another resource group or subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsIsCloneableResponse>
   */
  isCloneable(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsIsCloneableResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  isCloneable(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  isCloneable(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
  isCloneable(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteCloneability>, callback?: msRest.ServiceCallback<Models.SiteCloneability>): Promise<Models.WebAppsIsCloneableResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      isCloneableOperationSpec,
      callback) as Promise<Models.WebAppsIsCloneableResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @summary Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSiteBackupsResponse>
   */
  listSiteBackups(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteBackupsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listSiteBackups(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteBackups(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listSiteBackups(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.WebAppsListSiteBackupsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSiteBackupsOperationSpec,
      callback) as Promise<Models.WebAppsListSiteBackupsResponse>;
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @summary This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSyncFunctionTriggersResponse>
   */
  listSyncFunctionTriggers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSyncFunctionTriggersResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listSyncFunctionTriggers(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSyncFunctionTriggers(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
  listSyncFunctionTriggers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionSecrets>, callback?: msRest.ServiceCallback<Models.FunctionSecrets>): Promise<Models.WebAppsListSyncFunctionTriggersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSyncFunctionTriggersOperationSpec,
      callback) as Promise<Models.WebAppsListSyncFunctionTriggersResponse>;
  }

  /**
   * Description for Restores a web app.
   * @summary Restores a web app.
   * @param subscriptionName Azure subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param migrationOptions Migration migrationOptions.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsMigrateStorageResponse>
   */
  migrateStorage(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: Models.StorageMigrationOptions, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsMigrateStorageResponse> {
    return this.beginMigrateStorage(subscriptionName,resourceGroupName,name,migrationOptions,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsMigrateStorageResponse>;
  }

  /**
   * Description for Migrates a local (in-app) MySql database to a remote MySql database.
   * @summary Migrates a local (in-app) MySql database to a remote MySql database.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param migrationRequestEnvelope MySql migration options.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsMigrateMySqlResponse>
   */
  migrateMySql(resourceGroupName: string, name: string, migrationRequestEnvelope: Models.MigrateMySqlRequest, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsMigrateMySqlResponse> {
    return this.beginMigrateMySql(resourceGroupName,name,migrationRequestEnvelope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsMigrateMySqlResponse>;
  }

  /**
   * Description for Returns the status of MySql in app migration, if one is active, and whether or
   * not MySql in app is enabled
   * @summary Returns the status of MySql in app migration, if one is active, and whether or not
   * MySql in app is enabled
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetMigrateMySqlStatusResponse>
   */
  getMigrateMySqlStatus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMigrateMySqlStatusResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  getMigrateMySqlStatus(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.MigrateMySqlStatus>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMigrateMySqlStatus(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MigrateMySqlStatus>): void;
  getMigrateMySqlStatus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MigrateMySqlStatus>, callback?: msRest.ServiceCallback<Models.MigrateMySqlStatus>): Promise<Models.WebAppsGetMigrateMySqlStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getMigrateMySqlStatusOperationSpec,
      callback) as Promise<Models.WebAppsGetMigrateMySqlStatusResponse>;
  }

  /**
   * Description for Gets a Swift Virtual Network connection.
   * @summary Gets a Swift Virtual Network connection.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionResponse>
   */
  getSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  getSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  getSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SwiftVirtualNetwork>, callback?: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSwiftVirtualNetworkConnectionOperationSpec,
      callback) as Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionResponse>;
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet
   * has already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @summary Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported"
   * is true when doing a GET against this resource, and 2) that the target Subnet has already been
   * delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionResponse>
   */
  createOrUpdateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param callback The callback
   */
  createOrUpdateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  createOrUpdateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SwiftVirtualNetwork>, callback?: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        connectionEnvelope,
        options
      },
      createOrUpdateSwiftVirtualNetworkConnectionOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionResponse>;
  }

  /**
   * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
   * @summary Deletes a Swift Virtual Network connection from an app (or deployment slot).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSwiftVirtualNetwork(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  deleteSwiftVirtualNetwork(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSwiftVirtualNetwork(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSwiftVirtualNetwork(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteSwiftVirtualNetworkOperationSpec,
      callback);
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet
   * has already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @summary Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported"
   * is true when doing a GET against this resource, and 2) that the target Subnet has already been
   * delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionResponse>
   */
  updateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param callback The callback
   */
  updateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  updateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SwiftVirtualNetwork>, callback?: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        connectionEnvelope,
        options
      },
      updateSwiftVirtualNetworkConnectionOperationSpec,
      callback) as Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionResponse>;
  }

  /**
   * Description for Gets all network features used by the app (or deployment slot, if specified).
   * @summary Gets all network features used by the app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListNetworkFeaturesResponse>
   */
  listNetworkFeatures(resourceGroupName: string, name: string, view: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListNetworkFeaturesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param callback The callback
   */
  listNetworkFeatures(resourceGroupName: string, name: string, view: string, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param options The optional parameters
   * @param callback The callback
   */
  listNetworkFeatures(resourceGroupName: string, name: string, view: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
  listNetworkFeatures(resourceGroupName: string, name: string, view: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkFeatures>, callback?: msRest.ServiceCallback<Models.NetworkFeatures>): Promise<Models.WebAppsListNetworkFeaturesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        view,
        options
      },
      listNetworkFeaturesOperationSpec,
      callback) as Promise<Models.WebAppsListNetworkFeaturesResponse>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @summary Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetNetworkTraceOperationResponse>
   */
  getNetworkTraceOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTraceOperationResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param callback The callback
   */
  getNetworkTraceOperation(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkTraceOperation(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  getNetworkTraceOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkTrace[]>, callback?: msRest.ServiceCallback<Models.NetworkTrace[]>): Promise<Models.WebAppsGetNetworkTraceOperationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        options
      },
      getNetworkTraceOperationOperationSpec,
      callback) as Promise<Models.WebAppsGetNetworkTraceOperationResponse>;
  }

  /**
   * Description for Start capturing network packets for the site (To be deprecated).
   * @summary Start capturing network packets for the site (To be deprecated).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceResponse>
   */
  startWebSiteNetworkTrace(resourceGroupName: string, name: string, options?: Models.WebAppsStartWebSiteNetworkTraceOptionalParams): Promise<Models.WebAppsStartWebSiteNetworkTraceResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param callback The callback
   */
  startWebSiteNetworkTrace(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  startWebSiteNetworkTrace(resourceGroupName: string, name: string, options: Models.WebAppsStartWebSiteNetworkTraceOptionalParams, callback: msRest.ServiceCallback<string>): void;
  startWebSiteNetworkTrace(resourceGroupName: string, name: string, options?: Models.WebAppsStartWebSiteNetworkTraceOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.WebAppsStartWebSiteNetworkTraceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      startWebSiteNetworkTraceOperationSpec,
      callback) as Promise<Models.WebAppsStartWebSiteNetworkTraceResponse>;
  }

  /**
   * Description for Start capturing network packets for the site.
   * @summary Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceOperationResponse>
   */
  startWebSiteNetworkTraceOperation(resourceGroupName: string, name: string, options?: Models.WebAppsStartWebSiteNetworkTraceOperationOptionalParams): Promise<Models.WebAppsStartWebSiteNetworkTraceOperationResponse> {
    return this.beginStartWebSiteNetworkTraceOperation(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsStartWebSiteNetworkTraceOperationResponse>;
  }

  /**
   * Description for Stop ongoing capturing network packets for the site.
   * @summary Stop ongoing capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stopWebSiteNetworkTrace(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param callback The callback
   */
  stopWebSiteNetworkTrace(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  stopWebSiteNetworkTrace(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stopWebSiteNetworkTrace(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      stopWebSiteNetworkTraceOperationSpec,
      callback);
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @summary Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetNetworkTracesResponse>
   */
  getNetworkTraces(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTracesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param callback The callback
   */
  getNetworkTraces(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkTraces(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  getNetworkTraces(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkTrace[]>, callback?: msRest.ServiceCallback<Models.NetworkTrace[]>): Promise<Models.WebAppsGetNetworkTracesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        options
      },
      getNetworkTracesOperationSpec,
      callback) as Promise<Models.WebAppsGetNetworkTracesResponse>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @summary Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetNetworkTraceOperationV2Response>
   */
  getNetworkTraceOperationV2(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTraceOperationV2Response>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param callback The callback
   */
  getNetworkTraceOperationV2(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkTraceOperationV2(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  getNetworkTraceOperationV2(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkTrace[]>, callback?: msRest.ServiceCallback<Models.NetworkTrace[]>): Promise<Models.WebAppsGetNetworkTraceOperationV2Response> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        options
      },
      getNetworkTraceOperationV2OperationSpec,
      callback) as Promise<Models.WebAppsGetNetworkTraceOperationV2Response>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @summary Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetNetworkTracesV2Response>
   */
  getNetworkTracesV2(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTracesV2Response>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param callback The callback
   */
  getNetworkTracesV2(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkTracesV2(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  getNetworkTracesV2(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkTrace[]>, callback?: msRest.ServiceCallback<Models.NetworkTrace[]>): Promise<Models.WebAppsGetNetworkTracesV2Response> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        options
      },
      getNetworkTracesV2OperationSpec,
      callback) as Promise<Models.WebAppsGetNetworkTracesV2Response>;
  }

  /**
   * Description for Generates a new publishing password for an app (or deployment slot, if
   * specified).
   * @summary Generates a new publishing password for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  generateNewSitePublishingPassword(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  generateNewSitePublishingPassword(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  generateNewSitePublishingPassword(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  generateNewSitePublishingPassword(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      generateNewSitePublishingPasswordOperationSpec,
      callback);
  }

  /**
   * Description for Gets perfmon counters for web app.
   * @summary Gets perfmon counters for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPerfMonCountersResponse>
   */
  listPerfMonCounters(resourceGroupName: string, name: string, options?: Models.WebAppsListPerfMonCountersOptionalParams): Promise<Models.WebAppsListPerfMonCountersResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  listPerfMonCounters(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPerfMonCounters(resourceGroupName: string, name: string, options: Models.WebAppsListPerfMonCountersOptionalParams, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
  listPerfMonCounters(resourceGroupName: string, name: string, options?: Models.WebAppsListPerfMonCountersOptionalParams | msRest.ServiceCallback<Models.PerfMonCounterCollection>, callback?: msRest.ServiceCallback<Models.PerfMonCounterCollection>): Promise<Models.WebAppsListPerfMonCountersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listPerfMonCountersOperationSpec,
      callback) as Promise<Models.WebAppsListPerfMonCountersResponse>;
  }

  /**
   * Description for Gets web app's event logs.
   * @summary Gets web app's event logs.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetSitePhpErrorLogFlagResponse>
   */
  getSitePhpErrorLogFlag(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSitePhpErrorLogFlagResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  getSitePhpErrorLogFlag(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SitePhpErrorLogFlag>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSitePhpErrorLogFlag(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SitePhpErrorLogFlag>): void;
  getSitePhpErrorLogFlag(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SitePhpErrorLogFlag>, callback?: msRest.ServiceCallback<Models.SitePhpErrorLogFlag>): Promise<Models.WebAppsGetSitePhpErrorLogFlagResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSitePhpErrorLogFlagOperationSpec,
      callback) as Promise<Models.WebAppsGetSitePhpErrorLogFlagResponse>;
  }

  /**
   * Description for Gets the premier add-ons of an app.
   * @summary Gets the premier add-ons of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPremierAddOnsResponse>
   */
  listPremierAddOns(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPremierAddOnsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listPremierAddOns(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPremierAddOns(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  listPremierAddOns(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PremierAddOn>, callback?: msRest.ServiceCallback<Models.PremierAddOn>): Promise<Models.WebAppsListPremierAddOnsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listPremierAddOnsOperationSpec,
      callback) as Promise<Models.WebAppsListPremierAddOnsResponse>;
  }

  /**
   * Description for Gets a named add-on of an app.
   * @summary Gets a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetPremierAddOnResponse>
   */
  getPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPremierAddOnResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param callback The callback
   */
  getPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  getPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PremierAddOn>, callback?: msRest.ServiceCallback<Models.PremierAddOn>): Promise<Models.WebAppsGetPremierAddOnResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        options
      },
      getPremierAddOnOperationSpec,
      callback) as Promise<Models.WebAppsGetPremierAddOnResponse>;
  }

  /**
   * Description for Updates a named add-on of an app.
   * @summary Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsAddPremierAddOnResponse>
   */
  addPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsAddPremierAddOnResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param callback The callback
   */
  addPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param options The optional parameters
   * @param callback The callback
   */
  addPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  addPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PremierAddOn>, callback?: msRest.ServiceCallback<Models.PremierAddOn>): Promise<Models.WebAppsAddPremierAddOnResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        premierAddOn,
        options
      },
      addPremierAddOnOperationSpec,
      callback) as Promise<Models.WebAppsAddPremierAddOnResponse>;
  }

  /**
   * Description for Delete a premier add-on from an app.
   * @summary Delete a premier add-on from an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param callback The callback
   */
  deletePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        options
      },
      deletePremierAddOnOperationSpec,
      callback);
  }

  /**
   * Description for Updates a named add-on of an app.
   * @summary Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdatePremierAddOnResponse>
   */
  updatePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdatePremierAddOnResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param callback The callback
   */
  updatePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  updatePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PremierAddOn>, callback?: msRest.ServiceCallback<Models.PremierAddOn>): Promise<Models.WebAppsUpdatePremierAddOnResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        premierAddOn,
        options
      },
      updatePremierAddOnOperationSpec,
      callback) as Promise<Models.WebAppsUpdatePremierAddOnResponse>;
  }

  /**
   * Description for Gets data around private site access enablement and authorized Virtual Networks
   * that can access the site.
   * @summary Gets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetPrivateAccessResponse>
   */
  getPrivateAccess(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPrivateAccessResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param callback The callback
   */
  getPrivateAccess(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPrivateAccess(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
  getPrivateAccess(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateAccess>, callback?: msRest.ServiceCallback<Models.PrivateAccess>): Promise<Models.WebAppsGetPrivateAccessResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getPrivateAccessOperationSpec,
      callback) as Promise<Models.WebAppsGetPrivateAccessResponse>;
  }

  /**
   * Description for Sets data around private site access enablement and authorized Virtual Networks
   * that can access the site.
   * @summary Sets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param access The information for the private access
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsPutPrivateAccessVnetResponse>
   */
  putPrivateAccessVnet(resourceGroupName: string, name: string, access: Models.PrivateAccess, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsPutPrivateAccessVnetResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param access The information for the private access
   * @param callback The callback
   */
  putPrivateAccessVnet(resourceGroupName: string, name: string, access: Models.PrivateAccess, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param access The information for the private access
   * @param options The optional parameters
   * @param callback The callback
   */
  putPrivateAccessVnet(resourceGroupName: string, name: string, access: Models.PrivateAccess, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
  putPrivateAccessVnet(resourceGroupName: string, name: string, access: Models.PrivateAccess, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateAccess>, callback?: msRest.ServiceCallback<Models.PrivateAccess>): Promise<Models.WebAppsPutPrivateAccessVnetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        access,
        options
      },
      putPrivateAccessVnetOperationSpec,
      callback) as Promise<Models.WebAppsPutPrivateAccessVnetResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @summary Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessesResponse>
   */
  listProcesses(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param callback The callback
   */
  listProcesses(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcesses(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  listProcesses(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessInfoCollection>): Promise<Models.WebAppsListProcessesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listProcessesOperationSpec,
      callback) as Promise<Models.WebAppsListProcessesResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web
   * site.
   * @summary Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetProcessResponse>
   */
  getProcess(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param callback The callback
   */
  getProcess(resourceGroupName: string, name: string, processId: string, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getProcess(resourceGroupName: string, name: string, processId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
  getProcess(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfo>, callback?: msRest.ServiceCallback<Models.ProcessInfo>): Promise<Models.WebAppsGetProcessResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        options
      },
      getProcessOperationSpec,
      callback) as Promise<Models.WebAppsGetProcessResponse>;
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @summary Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteProcess(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param callback The callback
   */
  deleteProcess(resourceGroupName: string, name: string, processId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteProcess(resourceGroupName: string, name: string, processId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteProcess(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        options
      },
      deleteProcessOperationSpec,
      callback);
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetProcessDumpResponse>
   */
  getProcessDump(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessDumpResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param callback The callback
   */
  getProcessDump(resourceGroupName: string, name: string, processId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getProcessDump(resourceGroupName: string, name: string, processId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getProcessDump(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.WebAppsGetProcessDumpResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        options
      },
      getProcessDumpOperationSpec,
      callback) as Promise<Models.WebAppsGetProcessDumpResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out
   * instance in a web site.
   * @summary List module information for a process by its ID for a specific scaled-out instance in a
   * web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessModulesResponse>
   */
  listProcessModules(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessModulesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param callback The callback
   */
  listProcessModules(resourceGroupName: string, name: string, processId: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessModules(resourceGroupName: string, name: string, processId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  listProcessModules(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): Promise<Models.WebAppsListProcessModulesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        options
      },
      listProcessModulesOperationSpec,
      callback) as Promise<Models.WebAppsListProcessModulesResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web
   * site.
   * @summary Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetProcessModuleResponse>
   */
  getProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessModuleResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param callback The callback
   */
  getProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param options The optional parameters
   * @param callback The callback
   */
  getProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
  getProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfo>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfo>): Promise<Models.WebAppsGetProcessModuleResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        baseAddress,
        options
      },
      getProcessModuleOperationSpec,
      callback) as Promise<Models.WebAppsGetProcessModuleResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessThreadsResponse>
   */
  listProcessThreads(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessThreadsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param callback The callback
   */
  listProcessThreads(resourceGroupName: string, name: string, processId: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessThreads(resourceGroupName: string, name: string, processId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  listProcessThreads(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessThreadInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): Promise<Models.WebAppsListProcessThreadsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        options
      },
      listProcessThreadsOperationSpec,
      callback) as Promise<Models.WebAppsListProcessThreadsResponse>;
  }

  /**
   * Description for Get public certificates for an app or a deployment slot.
   * @summary Get public certificates for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPublicCertificatesResponse>
   */
  listPublicCertificates(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublicCertificatesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listPublicCertificates(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPublicCertificates(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
  listPublicCertificates(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PublicCertificateCollection>, callback?: msRest.ServiceCallback<Models.PublicCertificateCollection>): Promise<Models.WebAppsListPublicCertificatesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listPublicCertificatesOperationSpec,
      callback) as Promise<Models.WebAppsListPublicCertificatesResponse>;
  }

  /**
   * Description for Get the named public certificate for an app (or deployment slot, if specified).
   * @summary Get the named public certificate for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetPublicCertificateResponse>
   */
  getPublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPublicCertificateResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param callback The callback
   */
  getPublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
  getPublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PublicCertificate>, callback?: msRest.ServiceCallback<Models.PublicCertificate>): Promise<Models.WebAppsGetPublicCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publicCertificateName,
        options
      },
      getPublicCertificateOperationSpec,
      callback) as Promise<Models.WebAppsGetPublicCertificateResponse>;
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @summary Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param publicCertificate Public certificate details. This is the JSON representation of a
   * PublicCertificate object.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdatePublicCertificateResponse>
   */
  createOrUpdatePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdatePublicCertificateResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param publicCertificate Public certificate details. This is the JSON representation of a
   * PublicCertificate object.
   * @param callback The callback
   */
  createOrUpdatePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param publicCertificate Public certificate details. This is the JSON representation of a
   * PublicCertificate object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdatePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
  createOrUpdatePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PublicCertificate>, callback?: msRest.ServiceCallback<Models.PublicCertificate>): Promise<Models.WebAppsCreateOrUpdatePublicCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publicCertificateName,
        publicCertificate,
        options
      },
      createOrUpdatePublicCertificateOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdatePublicCertificateResponse>;
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @summary Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param callback The callback
   */
  deletePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publicCertificateName,
        options
      },
      deletePublicCertificateOperationSpec,
      callback);
  }

  /**
   * Description for Gets the publishing profile for an app (or deployment slot, if specified).
   * @summary Gets the publishing profile for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
   * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPublishingProfileXmlWithSecretsResponse>
   */
  listPublishingProfileXmlWithSecrets(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublishingProfileXmlWithSecretsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
   * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
   * @param callback The callback
   */
  listPublishingProfileXmlWithSecrets(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
   * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPublishingProfileXmlWithSecrets(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  listPublishingProfileXmlWithSecrets(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.WebAppsListPublishingProfileXmlWithSecretsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publishingProfileOptions,
        options
      },
      listPublishingProfileXmlWithSecretsOperationSpec,
      callback) as Promise<Models.WebAppsListPublishingProfileXmlWithSecretsResponse>;
  }

  /**
   * Description for Resets the configuration settings of the current slot if they were previously
   * modified by calling the API with POST.
   * @summary Resets the configuration settings of the current slot if they were previously modified
   * by calling the API with POST.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetProductionSlotConfig(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  resetProductionSlotConfig(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  resetProductionSlotConfig(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resetProductionSlotConfig(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      resetProductionSlotConfigOperationSpec,
      callback);
  }

  /**
   * Description for Restarts an app (or deployment slot, if specified).
   * @summary Restarts an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restart(resourceGroupName: string, name: string, options?: Models.WebAppsRestartOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  restart(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  restart(resourceGroupName: string, name: string, options: Models.WebAppsRestartOptionalParams, callback: msRest.ServiceCallback<void>): void;
  restart(resourceGroupName: string, name: string, options?: Models.WebAppsRestartOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      restartOperationSpec,
      callback);
  }

  /**
   * Description for Restores an app from a backup blob in Azure Storage.
   * @summary Restores an app from a backup blob in Azure Storage.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Information on restore request .
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restoreFromBackupBlob(resourceGroupName: string, name: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestoreFromBackupBlob(resourceGroupName,name,request,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for Restores a deleted web app to this web app.
   * @summary Restores a deleted web app to this web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Deleted web app restore information.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restoreFromDeletedApp(resourceGroupName: string, name: string, restoreRequest: Models.DeletedAppRestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestoreFromDeletedApp(resourceGroupName,name,restoreRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for Restores a web app from a snapshot.
   * @summary Restores a web app from a snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
   * GetDeletedSites or GetSiteSnapshots API.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restoreSnapshot(resourceGroupName: string, name: string, restoreRequest: Models.SnapshotRestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestoreSnapshot(resourceGroupName,name,restoreRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for Get list of siteextensions for a web site, or a deployment slot.
   * @summary Get list of siteextensions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSiteExtensionsResponse>
   */
  listSiteExtensions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteExtensionsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param callback The callback
   */
  listSiteExtensions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteExtensions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
  listSiteExtensions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteExtensionInfoCollection>, callback?: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): Promise<Models.WebAppsListSiteExtensionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSiteExtensionsOperationSpec,
      callback) as Promise<Models.WebAppsListSiteExtensionsResponse>;
  }

  /**
   * Description for Get site extension information by its ID for a web site, or a deployment slot.
   * @summary Get site extension information by its ID for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetSiteExtensionResponse>
   */
  getSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSiteExtensionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param callback The callback
   */
  getSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfo>): void;
  getSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteExtensionInfo>, callback?: msRest.ServiceCallback<Models.SiteExtensionInfo>): Promise<Models.WebAppsGetSiteExtensionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteExtensionId,
        options
      },
      getSiteExtensionOperationSpec,
      callback) as Promise<Models.WebAppsGetSiteExtensionResponse>;
  }

  /**
   * Description for Install site extension on a web site, or a deployment slot.
   * @summary Install site extension on a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsInstallSiteExtensionResponse>
   */
  installSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsInstallSiteExtensionResponse> {
    return this.beginInstallSiteExtension(resourceGroupName,name,siteExtensionId,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsInstallSiteExtensionResponse>;
  }

  /**
   * Description for Remove a site extension from a web site, or a deployment slot.
   * @summary Remove a site extension from a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param callback The callback
   */
  deleteSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteExtensionId,
        options
      },
      deleteSiteExtensionOperationSpec,
      callback);
  }

  /**
   * Description for Copies a deployment slot to another deployment slot of an app.
   * @summary Copies a deployment slot to another deployment slot of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param copySlotEntity JSON object that contains the target slot name and site config properties
   * to override the source slot config. See example.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  copyProductionSlot(resourceGroupName: string, name: string, copySlotEntity: Models.CsmCopySlotEntity, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginCopyProductionSlot(resourceGroupName,name,copySlotEntity,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for Gets an app's deployment slots.
   * @summary Gets an app's deployment slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSlotsResponse>
   */
  listSlots(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listSlots(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSlots(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  listSlots(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebAppCollection>, callback?: msRest.ServiceCallback<Models.WebAppCollection>): Promise<Models.WebAppsListSlotsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSlotsOperationSpec,
      callback) as Promise<Models.WebAppsListSlotsResponse>;
  }

  /**
   * Description for Gets the details of a web, mobile, or API app.
   * @summary Gets the details of a web, mobile, or API app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. By default, this API returns the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetSlotResponse>
   */
  getSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. By default, this API returns the production slot.
   * @param callback The callback
   */
  getSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.Site>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. By default, this API returns the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Site>): void;
  getSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Site>, callback?: msRest.ServiceCallback<Models.Site>): Promise<Models.WebAppsGetSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetSlotResponse>;
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates
   * an existing app.
   * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot,
   * use the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param slot Name of the deployment slot to create or update. By default, this API attempts to
   * create or modify the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateSlotResponse>
   */
  createOrUpdateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.Site, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateSlotResponse> {
    return this.beginCreateOrUpdateSlot(resourceGroupName,name,siteEnvelope,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsCreateOrUpdateSlotResponse>;
  }

  /**
   * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
   * @summary Deletes a web, mobile, or API app, or one of the deployment slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app to delete.
   * @param slot Name of the deployment slot to delete. By default, the API deletes the production
   * slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsDeleteSlotOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app to delete.
   * @param slot Name of the deployment slot to delete. By default, the API deletes the production
   * slot.
   * @param callback The callback
   */
  deleteSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app to delete.
   * @param slot Name of the deployment slot to delete. By default, the API deletes the production
   * slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsDeleteSlotOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsDeleteSlotOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      deleteSlotOperationSpec,
      callback);
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates
   * an existing app.
   * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot,
   * use the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param slot Name of the deployment slot to create or update. By default, this API attempts to
   * create or modify the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateSlotResponse>
   */
  updateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot,
   * use the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param slot Name of the deployment slot to create or update. By default, this API attempts to
   * create or modify the production slot.
   * @param callback The callback
   */
  updateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, slot: string, callback: msRest.ServiceCallback<Models.Site>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot,
   * use the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param slot Name of the deployment slot to create or update. By default, this API attempts to
   * create or modify the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Site>): void;
  updateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Site>, callback?: msRest.ServiceCallback<Models.Site>): Promise<Models.WebAppsUpdateSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteEnvelope,
        slot,
        options
      },
      updateSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateSlotResponse>;
  }

  /**
   * Description for Analyze a custom hostname.
   * @summary Analyze a custom hostname.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsAnalyzeCustomHostnameSlotResponse>
   */
  analyzeCustomHostnameSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsAnalyzeCustomHostnameSlotOptionalParams): Promise<Models.WebAppsAnalyzeCustomHostnameSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  analyzeCustomHostnameSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  analyzeCustomHostnameSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsAnalyzeCustomHostnameSlotOptionalParams, callback: msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>): void;
  analyzeCustomHostnameSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsAnalyzeCustomHostnameSlotOptionalParams | msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>, callback?: msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>): Promise<Models.WebAppsAnalyzeCustomHostnameSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      analyzeCustomHostnameSlotOperationSpec,
      callback) as Promise<Models.WebAppsAnalyzeCustomHostnameSlotResponse>;
  }

  /**
   * Description for Applies the configuration settings from the target slot onto the current slot.
   * @summary Applies the configuration settings from the target slot onto the current slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
   * the source slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  applySlotConfigurationSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
   * the source slot.
   * @param callback The callback
   */
  applySlotConfigurationSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
   * the source slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  applySlotConfigurationSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  applySlotConfigurationSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        slot,
        options
      },
      applySlotConfigurationSlotOperationSpec,
      callback);
  }

  /**
   * Description for Creates a backup of an app.
   * @summary Creates a backup of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Backup configuration. You can use the JSON response from the POST action as input
   * here.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
   * backup for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsBackupSlotResponse>
   */
  backupSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsBackupSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Backup configuration. You can use the JSON response from the POST action as input
   * here.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
   * backup for the production slot.
   * @param callback The callback
   */
  backupSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Backup configuration. You can use the JSON response from the POST action as input
   * here.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
   * backup for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  backupSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  backupSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.WebAppsBackupSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        slot,
        options
      },
      backupSlotOperationSpec,
      callback) as Promise<Models.WebAppsBackupSlotResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @summary Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of
   * the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListBackupsSlotResponse>
   */
  listBackupsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of
   * the production slot.
   * @param callback The callback
   */
  listBackupsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of
   * the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBackupsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listBackupsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.WebAppsListBackupsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listBackupsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListBackupsSlotResponse>;
  }

  /**
   * Description for Gets a backup of an app by its ID.
   * @summary Gets a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup
   * of the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetBackupStatusSlotResponse>
   */
  getBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetBackupStatusSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup
   * of the production slot.
   * @param callback The callback
   */
  getBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup
   * of the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  getBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.WebAppsGetBackupStatusSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        slot,
        options
      },
      getBackupStatusSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetBackupStatusSlotResponse>;
  }

  /**
   * Description for Deletes a backup of an app by its ID.
   * @summary Deletes a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
   * backup of the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
   * backup of the production slot.
   * @param callback The callback
   */
  deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
   * backup of the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        slot,
        options
      },
      deleteBackupSlotOperationSpec,
      callback);
  }

  /**
   * Description for Gets status of a web app backup that may be in progress, including secrets
   * associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the
   * SAS URL for the backup if a new URL is passed in the request body.
   * @summary Gets status of a web app backup that may be in progress, including secrets associated
   * with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for
   * the backup if a new URL is passed in the request body.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param backupId ID of backup.
   * @param request Information on backup request.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListBackupStatusSecretsSlotResponse>
   */
  listBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupStatusSecretsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param backupId ID of backup.
   * @param request Information on backup request.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  listBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param backupId ID of backup.
   * @param request Information on backup request.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  listBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.WebAppsListBackupStatusSecretsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        request,
        slot,
        options
      },
      listBackupStatusSecretsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListBackupStatusSecretsSlotResponse>;
  }

  /**
   * Description for Restores a specific backup to another app (or deployment slot, if specified).
   * @summary Restores a specific backup to another app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param request Information on restore request .
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
   * backup of the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restoreSlot(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestoreSlot(resourceGroupName,name,backupId,request,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for List the configurations of an app
   * @summary List the configurations of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListConfigurationsSlotResponse>
   */
  listConfigurationsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param callback The callback
   */
  listConfigurationsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConfigurationsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
  listConfigurationsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResourceCollection>, callback?: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): Promise<Models.WebAppsListConfigurationsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listConfigurationsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListConfigurationsSlotResponse>;
  }

  /**
   * Description for Replaces the application settings of an app.
   * @summary Replaces the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettings Application settings of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * application settings for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateApplicationSettingsSlotResponse>
   */
  updateApplicationSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateApplicationSettingsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettings Application settings of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * application settings for the production slot.
   * @param callback The callback
   */
  updateApplicationSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettings Application settings of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * application settings for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateApplicationSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  updateApplicationSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.WebAppsUpdateApplicationSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        appSettings,
        slot,
        options
      },
      updateApplicationSettingsSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateApplicationSettingsSlotResponse>;
  }

  /**
   * Description for Gets the application settings of an app.
   * @summary Gets the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * application settings for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListApplicationSettingsSlotResponse>
   */
  listApplicationSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListApplicationSettingsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * application settings for the production slot.
   * @param callback The callback
   */
  listApplicationSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * application settings for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listApplicationSettingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listApplicationSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.WebAppsListApplicationSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listApplicationSettingsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListApplicationSettingsSlotResponse>;
  }

  /**
   * Description for Updates the Authentication / Authorization settings associated with web app.
   * @summary Updates the Authentication / Authorization settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param siteAuthSettings Auth settings associated with web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateAuthSettingsSlotResponse>
   */
  updateAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateAuthSettingsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param siteAuthSettings Auth settings associated with web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  updateAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param siteAuthSettings Auth settings associated with web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  updateAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteAuthSettings>, callback?: msRest.ServiceCallback<Models.SiteAuthSettings>): Promise<Models.WebAppsUpdateAuthSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteAuthSettings,
        slot,
        options
      },
      updateAuthSettingsSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateAuthSettingsSlotResponse>;
  }

  /**
   * Description for Gets the Authentication/Authorization settings of an app.
   * @summary Gets the Authentication/Authorization settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * settings for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetAuthSettingsSlotResponse>
   */
  getAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetAuthSettingsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * settings for the production slot.
   * @param callback The callback
   */
  getAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * settings for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  getAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteAuthSettings>, callback?: msRest.ServiceCallback<Models.SiteAuthSettings>): Promise<Models.WebAppsGetAuthSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getAuthSettingsSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetAuthSettingsSlotResponse>;
  }

  /**
   * Description for Updates the Azure storage account configurations of an app.
   * @summary Updates the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param azureStorageAccounts Azure storage accounts of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * Azure storage account configurations for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateAzureStorageAccountsSlotResponse>
   */
  updateAzureStorageAccountsSlot(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateAzureStorageAccountsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param azureStorageAccounts Azure storage accounts of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * Azure storage account configurations for the production slot.
   * @param callback The callback
   */
  updateAzureStorageAccountsSlot(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, slot: string, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param azureStorageAccounts Azure storage accounts of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * Azure storage account configurations for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateAzureStorageAccountsSlot(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
  updateAzureStorageAccountsSlot(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>, callback?: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): Promise<Models.WebAppsUpdateAzureStorageAccountsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        azureStorageAccounts,
        slot,
        options
      },
      updateAzureStorageAccountsSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateAzureStorageAccountsSlotResponse>;
  }

  /**
   * Description for Gets the Azure storage account configurations of an app.
   * @summary Gets the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * Azure storage account configurations for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListAzureStorageAccountsSlotResponse>
   */
  listAzureStorageAccountsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListAzureStorageAccountsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * Azure storage account configurations for the production slot.
   * @param callback The callback
   */
  listAzureStorageAccountsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * Azure storage account configurations for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAzureStorageAccountsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
  listAzureStorageAccountsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>, callback?: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): Promise<Models.WebAppsListAzureStorageAccountsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listAzureStorageAccountsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListAzureStorageAccountsSlotResponse>;
  }

  /**
   * Description for Updates the backup configuration of an app.
   * @summary Updates the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Edited backup configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * backup configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateBackupConfigurationSlotResponse>
   */
  updateBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateBackupConfigurationSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Edited backup configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * backup configuration for the production slot.
   * @param callback The callback
   */
  updateBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Edited backup configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * backup configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  updateBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupRequest>, callback?: msRest.ServiceCallback<Models.BackupRequest>): Promise<Models.WebAppsUpdateBackupConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        slot,
        options
      },
      updateBackupConfigurationSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateBackupConfigurationSlotResponse>;
  }

  /**
   * Description for Deletes the backup configuration of an app.
   * @summary Deletes the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * backup configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * backup configuration for the production slot.
   * @param callback The callback
   */
  deleteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * backup configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      deleteBackupConfigurationSlotOperationSpec,
      callback);
  }

  /**
   * Description for Gets the backup configuration of an app.
   * @summary Gets the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup
   * configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetBackupConfigurationSlotResponse>
   */
  getBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetBackupConfigurationSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup
   * configuration for the production slot.
   * @param callback The callback
   */
  getBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup
   * configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  getBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupRequest>, callback?: msRest.ServiceCallback<Models.BackupRequest>): Promise<Models.WebAppsGetBackupConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getBackupConfigurationSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetBackupConfigurationSlotResponse>;
  }

  /**
   * Description for Replaces the connection strings of an app.
   * @summary Replaces the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionStrings Connection strings of the app or deployment slot. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * connection settings for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateConnectionStringsSlotResponse>
   */
  updateConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateConnectionStringsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionStrings Connection strings of the app or deployment slot. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * connection settings for the production slot.
   * @param callback The callback
   */
  updateConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionStrings Connection strings of the app or deployment slot. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * connection settings for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  updateConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionStringDictionary>, callback?: msRest.ServiceCallback<Models.ConnectionStringDictionary>): Promise<Models.WebAppsUpdateConnectionStringsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        connectionStrings,
        slot,
        options
      },
      updateConnectionStringsSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateConnectionStringsSlotResponse>;
  }

  /**
   * Description for Gets the connection strings of an app.
   * @summary Gets the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * connection settings for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListConnectionStringsSlotResponse>
   */
  listConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConnectionStringsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * connection settings for the production slot.
   * @param callback The callback
   */
  listConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * connection settings for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  listConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionStringDictionary>, callback?: msRest.ServiceCallback<Models.ConnectionStringDictionary>): Promise<Models.WebAppsListConnectionStringsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listConnectionStringsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListConnectionStringsSlotResponse>;
  }

  /**
   * Description for Gets the logging configuration of an app.
   * @summary Gets the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * logging configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetDiagnosticLogsConfigurationSlotResponse>
   */
  getDiagnosticLogsConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDiagnosticLogsConfigurationSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * logging configuration for the production slot.
   * @param callback The callback
   */
  getDiagnosticLogsConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * logging configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDiagnosticLogsConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  getDiagnosticLogsConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteLogsConfig>, callback?: msRest.ServiceCallback<Models.SiteLogsConfig>): Promise<Models.WebAppsGetDiagnosticLogsConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getDiagnosticLogsConfigurationSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetDiagnosticLogsConfigurationSlotResponse>;
  }

  /**
   * Description for Updates the logging configuration of an app.
   * @summary Updates the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
   * change in the "properties" property.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * logging configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateDiagnosticLogsConfigSlotResponse>
   */
  updateDiagnosticLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateDiagnosticLogsConfigSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
   * change in the "properties" property.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * logging configuration for the production slot.
   * @param callback The callback
   */
  updateDiagnosticLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
   * change in the "properties" property.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * logging configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDiagnosticLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  updateDiagnosticLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteLogsConfig>, callback?: msRest.ServiceCallback<Models.SiteLogsConfig>): Promise<Models.WebAppsUpdateDiagnosticLogsConfigSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteLogsConfig,
        slot,
        options
      },
      updateDiagnosticLogsConfigSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateDiagnosticLogsConfigSlotResponse>;
  }

  /**
   * Description for Replaces the metadata of an app.
   * @summary Replaces the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param metadata Edited metadata of the app or deployment slot. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * metadata for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateMetadataSlotResponse>
   */
  updateMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateMetadataSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param metadata Edited metadata of the app or deployment slot. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * metadata for the production slot.
   * @param callback The callback
   */
  updateMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param metadata Edited metadata of the app or deployment slot. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * metadata for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  updateMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.WebAppsUpdateMetadataSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        metadata,
        slot,
        options
      },
      updateMetadataSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateMetadataSlotResponse>;
  }

  /**
   * Description for Gets the metadata of an app.
   * @summary Gets the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * metadata for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListMetadataSlotResponse>
   */
  listMetadataSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListMetadataSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * metadata for the production slot.
   * @param callback The callback
   */
  listMetadataSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * metadata for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMetadataSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listMetadataSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.WebAppsListMetadataSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listMetadataSlotOperationSpec,
      callback) as Promise<Models.WebAppsListMetadataSlotResponse>;
  }

  /**
   * Description for Gets the Git/FTP publishing credentials of an app.
   * @summary Gets the Git/FTP publishing credentials of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * publishing credentials for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPublishingCredentialsSlotResponse>
   */
  listPublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublishingCredentialsSlotResponse> {
    return this.beginListPublishingCredentialsSlot(resourceGroupName,name,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsListPublishingCredentialsSlotResponse>;
  }

  /**
   * Description for Updates the Push settings associated with web app.
   * @summary Updates the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param pushSettings Push settings associated with web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateSitePushSettingsSlotResponse>
   */
  updateSitePushSettingsSlot(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSitePushSettingsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param pushSettings Push settings associated with web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  updateSitePushSettingsSlot(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, slot: string, callback: msRest.ServiceCallback<Models.PushSettings>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param pushSettings Push settings associated with web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSitePushSettingsSlot(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PushSettings>): void;
  updateSitePushSettingsSlot(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PushSettings>, callback?: msRest.ServiceCallback<Models.PushSettings>): Promise<Models.WebAppsUpdateSitePushSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        pushSettings,
        slot,
        options
      },
      updateSitePushSettingsSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateSitePushSettingsSlotResponse>;
  }

  /**
   * Description for Gets the Push settings associated with web app.
   * @summary Gets the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSitePushSettingsSlotResponse>
   */
  listSitePushSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSitePushSettingsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  listSitePushSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.PushSettings>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSitePushSettingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PushSettings>): void;
  listSitePushSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PushSettings>, callback?: msRest.ServiceCallback<Models.PushSettings>): Promise<Models.WebAppsListSitePushSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSitePushSettingsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListSitePushSettingsSlotResponse>;
  }

  /**
   * Description for Gets the configuration of an app, such as platform version and bitness, default
   * documents, virtual applications, Always On, etc.
   * @summary Gets the configuration of an app, such as platform version and bitness, default
   * documents, virtual applications, Always On, etc.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetConfigurationSlotResponse>
   */
  getConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetConfigurationSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param callback The callback
   */
  getConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  getConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResource>, callback?: msRest.ServiceCallback<Models.SiteConfigResource>): Promise<Models.WebAppsGetConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getConfigurationSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetConfigurationSlotResponse>;
  }

  /**
   * Description for Updates the configuration of an app.
   * @summary Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update
   * configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateConfigurationSlotResponse>
   */
  createOrUpdateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateConfigurationSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update
   * configuration for the production slot.
   * @param callback The callback
   */
  createOrUpdateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update
   * configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  createOrUpdateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResource>, callback?: msRest.ServiceCallback<Models.SiteConfigResource>): Promise<Models.WebAppsCreateOrUpdateConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteConfig,
        slot,
        options
      },
      createOrUpdateConfigurationSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateConfigurationSlotResponse>;
  }

  /**
   * Description for Updates the configuration of an app.
   * @summary Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update
   * configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateConfigurationSlotResponse>
   */
  updateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateConfigurationSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update
   * configuration for the production slot.
   * @param callback The callback
   */
  updateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update
   * configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  updateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResource>, callback?: msRest.ServiceCallback<Models.SiteConfigResource>): Promise<Models.WebAppsUpdateConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteConfig,
        slot,
        options
      },
      updateConfigurationSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateConfigurationSlotResponse>;
  }

  /**
   * Description for Gets a list of web app configuration snapshots identifiers. Each element of the
   * list contains a timestamp and the ID of the snapshot.
   * @summary Gets a list of web app configuration snapshots identifiers. Each element of the list
   * contains a timestamp and the ID of the snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListConfigurationSnapshotInfoSlotResponse>
   */
  listConfigurationSnapshotInfoSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationSnapshotInfoSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param callback The callback
   */
  listConfigurationSnapshotInfoSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConfigurationSnapshotInfoSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
  listConfigurationSnapshotInfoSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>, callback?: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): Promise<Models.WebAppsListConfigurationSnapshotInfoSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listConfigurationSnapshotInfoSlotOperationSpec,
      callback) as Promise<Models.WebAppsListConfigurationSnapshotInfoSlotResponse>;
  }

  /**
   * Description for Gets a snapshot of the configuration of an app at a previous point in time.
   * @summary Gets a snapshot of the configuration of an app at a previous point in time.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetConfigurationSnapshotSlotResponse>
   */
  getConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetConfigurationSnapshotSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param callback The callback
   */
  getConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
  getConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResource>, callback?: msRest.ServiceCallback<Models.SiteConfigResource>): Promise<Models.WebAppsGetConfigurationSnapshotSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        snapshotId,
        slot,
        options
      },
      getConfigurationSnapshotSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetConfigurationSnapshotSlotResponse>;
  }

  /**
   * Description for Reverts the configuration of an app to a previous snapshot.
   * @summary Reverts the configuration of an app to a previous snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  recoverSiteConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param callback The callback
   */
  recoverSiteConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   * configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  recoverSiteConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  recoverSiteConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        snapshotId,
        slot,
        options
      },
      recoverSiteConfigurationSnapshotSlotOperationSpec,
      callback);
  }

  /**
   * Description for Gets the last lines of docker logs for the given site
   * @summary Gets the last lines of docker logs for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetWebSiteContainerLogsSlotResponse>
   */
  getWebSiteContainerLogsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetWebSiteContainerLogsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getWebSiteContainerLogsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getWebSiteContainerLogsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getWebSiteContainerLogsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.WebAppsGetWebSiteContainerLogsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getWebSiteContainerLogsSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetWebSiteContainerLogsSlotResponse>;
  }

  /**
   * Description for Gets the ZIP archived docker log files for the given site
   * @summary Gets the ZIP archived docker log files for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetContainerLogsZipSlotResponse>
   */
  getContainerLogsZipSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetContainerLogsZipSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getContainerLogsZipSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getContainerLogsZipSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getContainerLogsZipSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.WebAppsGetContainerLogsZipSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getContainerLogsZipSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetContainerLogsZipSlotResponse>;
  }

  /**
   * Description for List continuous web jobs for an app, or a deployment slot.
   * @summary List continuous web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListContinuousWebJobsSlotResponse>
   */
  listContinuousWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListContinuousWebJobsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param callback The callback
   */
  listContinuousWebJobsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listContinuousWebJobsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
  listContinuousWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContinuousWebJobCollection>, callback?: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): Promise<Models.WebAppsListContinuousWebJobsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listContinuousWebJobsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListContinuousWebJobsSlotResponse>;
  }

  /**
   * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
   * @summary Gets a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetContinuousWebJobSlotResponse>
   */
  getContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetContinuousWebJobSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param callback The callback
   */
  getContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<Models.ContinuousWebJob>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJob>): void;
  getContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContinuousWebJob>, callback?: msRest.ServiceCallback<Models.ContinuousWebJob>): Promise<Models.WebAppsGetContinuousWebJobSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        slot,
        options
      },
      getContinuousWebJobSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetContinuousWebJobSlotResponse>;
  }

  /**
   * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
   * @summary Delete a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param callback The callback
   */
  deleteContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        slot,
        options
      },
      deleteContinuousWebJobSlotOperationSpec,
      callback);
  }

  /**
   * Description for Start a continuous web job for an app, or a deployment slot.
   * @summary Start a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param callback The callback
   */
  startContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  startContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  startContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        slot,
        options
      },
      startContinuousWebJobSlotOperationSpec,
      callback);
  }

  /**
   * Description for Stop a continuous web job for an app, or a deployment slot.
   * @summary Stop a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stopContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param callback The callback
   */
  stopContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  stopContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stopContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        slot,
        options
      },
      stopContinuousWebJobSlotOperationSpec,
      callback);
  }

  /**
   * Description for List deployments for an app, or a deployment slot.
   * @summary List deployments for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListDeploymentsSlotResponse>
   */
  listDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  listDeploymentsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  listDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.WebAppsListDeploymentsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listDeploymentsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListDeploymentsSlotResponse>;
  }

  /**
   * Description for Get a deployment by its ID for an app, or a deployment slot.
   * @summary Get a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetDeploymentSlotResponse>
   */
  getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDeploymentSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment
   * for the production slot.
   * @param callback The callback
   */
  getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.WebAppsGetDeploymentSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        options
      },
      getDeploymentSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetDeploymentSlotResponse>;
  }

  /**
   * Description for Create a deployment for an app, or a deployment slot.
   * @summary Create a deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id ID of an existing deployment.
   * @param slot Name of the deployment slot. If a slot is not specified, the API creates a
   * deployment for the production slot.
   * @param deployment Deployment details.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateDeploymentSlotResponse>
   */
  createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateDeploymentSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id ID of an existing deployment.
   * @param slot Name of the deployment slot. If a slot is not specified, the API creates a
   * deployment for the production slot.
   * @param deployment Deployment details.
   * @param callback The callback
   */
  createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id ID of an existing deployment.
   * @param slot Name of the deployment slot. If a slot is not specified, the API creates a
   * deployment for the production slot.
   * @param deployment Deployment details.
   * @param options The optional parameters
   * @param callback The callback
   */
  createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.WebAppsCreateDeploymentSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        deployment,
        options
      },
      createDeploymentSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateDeploymentSlotResponse>;
  }

  /**
   * Description for Delete a deployment by its ID for an app, or a deployment slot.
   * @summary Delete a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param callback The callback
   */
  deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        options
      },
      deleteDeploymentSlotOperationSpec,
      callback);
  }

  /**
   * Description for List deployment log for specific deployment for an app, or a deployment slot.
   * @summary List deployment log for specific deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id The ID of a specific deployment. This is the value of the name property in the JSON
   * response from "GET /api/sites/{siteName}/deployments".
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListDeploymentLogSlotResponse>
   */
  listDeploymentLogSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentLogSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id The ID of a specific deployment. This is the value of the name property in the JSON
   * response from "GET /api/sites/{siteName}/deployments".
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  listDeploymentLogSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id The ID of a specific deployment. This is the value of the name property in the JSON
   * response from "GET /api/sites/{siteName}/deployments".
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentLogSlot(resourceGroupName: string, name: string, id: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  listDeploymentLogSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.WebAppsListDeploymentLogSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        options
      },
      listDeploymentLogSlotOperationSpec,
      callback) as Promise<Models.WebAppsListDeploymentLogSlotResponse>;
  }

  /**
   * Description for Discovers an existing app backup that can be restored from a blob in Azure
   * storage. Use this to get information about the databases stored in a backup.
   * @summary Discovers an existing app backup that can be restored from a blob in Azure storage. Use
   * this to get information about the databases stored in a backup.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request A RestoreRequest object that includes Azure storage URL and blog name for
   * discovery of backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will perform
   * discovery for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsDiscoverBackupSlotResponse>
   */
  discoverBackupSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsDiscoverBackupSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request A RestoreRequest object that includes Azure storage URL and blog name for
   * discovery of backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will perform
   * discovery for the production slot.
   * @param callback The callback
   */
  discoverBackupSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request A RestoreRequest object that includes Azure storage URL and blog name for
   * discovery of backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will perform
   * discovery for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  discoverBackupSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
  discoverBackupSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RestoreRequest>, callback?: msRest.ServiceCallback<Models.RestoreRequest>): Promise<Models.WebAppsDiscoverBackupSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        slot,
        options
      },
      discoverBackupSlotOperationSpec,
      callback) as Promise<Models.WebAppsDiscoverBackupSlotResponse>;
  }

  /**
   * Description for Lists ownership identifiers for domain associated with web app.
   * @summary Lists ownership identifiers for domain associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotResponse>
   */
  listDomainOwnershipIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param callback The callback
   */
  listDomainOwnershipIdentifiersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDomainOwnershipIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  listDomainOwnershipIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IdentifierCollection>, callback?: msRest.ServiceCallback<Models.IdentifierCollection>): Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listDomainOwnershipIdentifiersSlotOperationSpec,
      callback) as Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotResponse>;
  }

  /**
   * Description for Get domain ownership identifier for web app.
   * @summary Get domain ownership identifier for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetDomainOwnershipIdentifierSlotResponse>
   */
  getDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDomainOwnershipIdentifierSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param callback The callback
   */
  getDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, callback: msRest.ServiceCallback<Models.Identifier>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
  getDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Identifier>, callback?: msRest.ServiceCallback<Models.Identifier>): Promise<Models.WebAppsGetDomainOwnershipIdentifierSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        slot,
        options
      },
      getDomainOwnershipIdentifierSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetDomainOwnershipIdentifierSlotResponse>;
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing
   * ownership identifier.
   * @summary Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse>
   */
  createOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param callback The callback
   */
  createOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, callback: msRest.ServiceCallback<Models.Identifier>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
  createOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Identifier>, callback?: msRest.ServiceCallback<Models.Identifier>): Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        domainOwnershipIdentifier,
        slot,
        options
      },
      createOrUpdateDomainOwnershipIdentifierSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse>;
  }

  /**
   * Description for Deletes a domain ownership identifier for a web app.
   * @summary Deletes a domain ownership identifier for a web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param callback The callback
   */
  deleteDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        slot,
        options
      },
      deleteDomainOwnershipIdentifierSlotOperationSpec,
      callback);
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing
   * ownership identifier.
   * @summary Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateDomainOwnershipIdentifierSlotResponse>
   */
  updateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateDomainOwnershipIdentifierSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param callback The callback
   */
  updateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, callback: msRest.ServiceCallback<Models.Identifier>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
  updateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Identifier>, callback?: msRest.ServiceCallback<Models.Identifier>): Promise<Models.WebAppsUpdateDomainOwnershipIdentifierSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        domainOwnershipIdentifier,
        slot,
        options
      },
      updateDomainOwnershipIdentifierSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateDomainOwnershipIdentifierSlotResponse>;
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @summary Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetMSDeployStatusSlotResponse>
   */
  getMSDeployStatusSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMSDeployStatusSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getMSDeployStatusSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMSDeployStatusSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
  getMSDeployStatusSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MSDeployStatus>, callback?: msRest.ServiceCallback<Models.MSDeployStatus>): Promise<Models.WebAppsGetMSDeployStatusSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getMSDeployStatusSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetMSDeployStatusSlotResponse>;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @summary Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param mSDeploy Details of MSDeploy operation
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateMSDeployOperationSlotResponse>
   */
  createMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateMSDeployOperationSlotResponse> {
    return this.beginCreateMSDeployOperationSlot(resourceGroupName,name,slot,mSDeploy,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsCreateMSDeployOperationSlotResponse>;
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @summary Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetMSDeployLogSlotResponse>
   */
  getMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMSDeployLogSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
  getMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MSDeployLog>, callback?: msRest.ServiceCallback<Models.MSDeployLog>): Promise<Models.WebAppsGetMSDeployLogSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getMSDeployLogSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetMSDeployLogSlotResponse>;
  }

  /**
   * Description for List the functions for a web site, or a deployment slot.
   * @summary List the functions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceFunctionsSlotResponse>
   */
  listInstanceFunctionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceFunctionsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  listInstanceFunctionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceFunctionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
  listInstanceFunctionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionEnvelopeCollection>, callback?: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): Promise<Models.WebAppsListInstanceFunctionsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listInstanceFunctionsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceFunctionsSlotResponse>;
  }

  /**
   * Description for Fetch a short lived token that can be exchanged for a master key.
   * @summary Fetch a short lived token that can be exchanged for a master key.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetFunctionsAdminTokenSlotResponse>
   */
  getFunctionsAdminTokenSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetFunctionsAdminTokenSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getFunctionsAdminTokenSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFunctionsAdminTokenSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getFunctionsAdminTokenSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.WebAppsGetFunctionsAdminTokenSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getFunctionsAdminTokenSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetFunctionsAdminTokenSlotResponse>;
  }

  /**
   * Description for Get function information by its ID for web site, or a deployment slot.
   * @summary Get function information by its ID for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceFunctionSlotResponse>
   */
  getInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceFunctionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  getInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, callback: msRest.ServiceCallback<Models.FunctionEnvelope>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelope>): void;
  getInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionEnvelope>, callback?: msRest.ServiceCallback<Models.FunctionEnvelope>): Promise<Models.WebAppsGetInstanceFunctionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        slot,
        options
      },
      getInstanceFunctionSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceFunctionSlotResponse>;
  }

  /**
   * Description for Create function for web site, or a deployment slot.
   * @summary Create function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param functionEnvelope Function details.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateInstanceFunctionSlotResponse>
   */
  createInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: Models.FunctionEnvelope, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateInstanceFunctionSlotResponse> {
    return this.beginCreateInstanceFunctionSlot(resourceGroupName,name,functionName,slot,functionEnvelope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsCreateInstanceFunctionSlotResponse>;
  }

  /**
   * Description for Delete a function for web site, or a deployment slot.
   * @summary Delete a function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  deleteInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        slot,
        options
      },
      deleteInstanceFunctionSlotOperationSpec,
      callback);
  }

  /**
   * Description for Add or update a function secret.
   * @summary Add or update a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param key The key to create or update
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateFunctionSecretSlotResponse>
   */
  createOrUpdateFunctionSecretSlot(resourceGroupName: string, name: string, functionName: string, keyName: string, slot: string, key: Models.KeyInfo, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateFunctionSecretSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param key The key to create or update
   * @param callback The callback
   */
  createOrUpdateFunctionSecretSlot(resourceGroupName: string, name: string, functionName: string, keyName: string, slot: string, key: Models.KeyInfo, callback: msRest.ServiceCallback<Models.KeyInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param key The key to create or update
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateFunctionSecretSlot(resourceGroupName: string, name: string, functionName: string, keyName: string, slot: string, key: Models.KeyInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyInfo>): void;
  createOrUpdateFunctionSecretSlot(resourceGroupName: string, name: string, functionName: string, keyName: string, slot: string, key: Models.KeyInfo, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyInfo>, callback?: msRest.ServiceCallback<Models.KeyInfo>): Promise<Models.WebAppsCreateOrUpdateFunctionSecretSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        keyName,
        slot,
        key,
        options
      },
      createOrUpdateFunctionSecretSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateFunctionSecretSlotResponse>;
  }

  /**
   * Description for Delete a function secret.
   * @summary Delete a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteFunctionSecretSlot(resourceGroupName: string, name: string, functionName: string, keyName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  deleteFunctionSecretSlot(resourceGroupName: string, name: string, functionName: string, keyName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteFunctionSecretSlot(resourceGroupName: string, name: string, functionName: string, keyName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteFunctionSecretSlot(resourceGroupName: string, name: string, functionName: string, keyName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        keyName,
        slot,
        options
      },
      deleteFunctionSecretSlotOperationSpec,
      callback);
  }

  /**
   * Description for Get function keys for a function in a web site, or a deployment slot.
   * @summary Get function keys for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListFunctionKeysSlotResponse>
   */
  listFunctionKeysSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListFunctionKeysSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  listFunctionKeysSlot(resourceGroupName: string, name: string, functionName: string, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFunctionKeysSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listFunctionKeysSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.WebAppsListFunctionKeysSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        slot,
        options
      },
      listFunctionKeysSlotOperationSpec,
      callback) as Promise<Models.WebAppsListFunctionKeysSlotResponse>;
  }

  /**
   * Description for Get function secrets for a function in a web site, or a deployment slot.
   * @summary Get function secrets for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListFunctionSecretsSlotResponse>
   */
  listFunctionSecretsSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListFunctionSecretsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  listFunctionSecretsSlot(resourceGroupName: string, name: string, functionName: string, slot: string, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFunctionSecretsSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
  listFunctionSecretsSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionSecrets>, callback?: msRest.ServiceCallback<Models.FunctionSecrets>): Promise<Models.WebAppsListFunctionSecretsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        slot,
        options
      },
      listFunctionSecretsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListFunctionSecretsSlotResponse>;
  }

  /**
   * Description for Get host secrets for a function app.
   * @summary Get host secrets for a function app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListHostKeysSlotResponse>
   */
  listHostKeysSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHostKeysSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  listHostKeysSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.HostKeys>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHostKeysSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostKeys>): void;
  listHostKeysSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostKeys>, callback?: msRest.ServiceCallback<Models.HostKeys>): Promise<Models.WebAppsListHostKeysSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listHostKeysSlotOperationSpec,
      callback) as Promise<Models.WebAppsListHostKeysSlotResponse>;
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @summary This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  listSyncStatusSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  listSyncStatusSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSyncStatusSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  listSyncStatusSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSyncStatusSlotOperationSpec,
      callback);
  }

  /**
   * Description for Syncs function trigger metadata to the management database
   * @summary Syncs function trigger metadata to the management database
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  syncFunctionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  syncFunctionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  syncFunctionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  syncFunctionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      syncFunctionsSlotOperationSpec,
      callback);
  }

  /**
   * Description for Add or update a host level secret.
   * @summary Add or update a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param key The key to create or update
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateHostSecretSlotResponse>
   */
  createOrUpdateHostSecretSlot(resourceGroupName: string, name: string, keyType: string, keyName: string, slot: string, key: Models.KeyInfo, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateHostSecretSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param key The key to create or update
   * @param callback The callback
   */
  createOrUpdateHostSecretSlot(resourceGroupName: string, name: string, keyType: string, keyName: string, slot: string, key: Models.KeyInfo, callback: msRest.ServiceCallback<Models.KeyInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param key The key to create or update
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateHostSecretSlot(resourceGroupName: string, name: string, keyType: string, keyName: string, slot: string, key: Models.KeyInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyInfo>): void;
  createOrUpdateHostSecretSlot(resourceGroupName: string, name: string, keyType: string, keyName: string, slot: string, key: Models.KeyInfo, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyInfo>, callback?: msRest.ServiceCallback<Models.KeyInfo>): Promise<Models.WebAppsCreateOrUpdateHostSecretSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        keyType,
        keyName,
        slot,
        key,
        options
      },
      createOrUpdateHostSecretSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateHostSecretSlotResponse>;
  }

  /**
   * Description for Delete a host level secret.
   * @summary Delete a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteHostSecretSlot(resourceGroupName: string, name: string, keyType: string, keyName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  deleteHostSecretSlot(resourceGroupName: string, name: string, keyType: string, keyName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteHostSecretSlot(resourceGroupName: string, name: string, keyType: string, keyName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteHostSecretSlot(resourceGroupName: string, name: string, keyType: string, keyName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        keyType,
        keyName,
        slot,
        options
      },
      deleteHostSecretSlotOperationSpec,
      callback);
  }

  /**
   * Description for Get hostname bindings for an app or a deployment slot.
   * @summary Get hostname bindings for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
   * bindings for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListHostNameBindingsSlotResponse>
   */
  listHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHostNameBindingsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
   * bindings for the production slot.
   * @param callback The callback
   */
  listHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
   * bindings for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  listHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBindingCollection>, callback?: msRest.ServiceCallback<Models.HostNameBindingCollection>): Promise<Models.WebAppsListHostNameBindingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listHostNameBindingsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListHostNameBindingsSlotResponse>;
  }

  /**
   * Description for Get the named hostname binding for an app (or deployment slot, if specified).
   * @summary Get the named hostname binding for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
   * for the production slot.
   * @param hostName Hostname in the hostname binding.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetHostNameBindingSlotResponse>
   */
  getHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetHostNameBindingSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
   * for the production slot.
   * @param hostName Hostname in the hostname binding.
   * @param callback The callback
   */
  getHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
   * for the production slot.
   * @param hostName Hostname in the hostname binding.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  getHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBinding>, callback?: msRest.ServiceCallback<Models.HostNameBinding>): Promise<Models.WebAppsGetHostNameBindingSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        hostName,
        options
      },
      getHostNameBindingSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetHostNameBindingSlotResponse>;
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @summary Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
   * object.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
   * binding for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateHostNameBindingSlotResponse>
   */
  createOrUpdateHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateHostNameBindingSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
   * object.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
   * binding for the production slot.
   * @param callback The callback
   */
  createOrUpdateHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
   * object.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
   * binding for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  createOrUpdateHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBinding>, callback?: msRest.ServiceCallback<Models.HostNameBinding>): Promise<Models.WebAppsCreateOrUpdateHostNameBindingSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        hostName,
        hostNameBinding,
        slot,
        options
      },
      createOrUpdateHostNameBindingSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateHostNameBindingSlotResponse>;
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @summary Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param hostName Hostname in the hostname binding.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param hostName Hostname in the hostname binding.
   * @param callback The callback
   */
  deleteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param hostName Hostname in the hostname binding.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        hostName,
        options
      },
      deleteHostNameBindingSlotOperationSpec,
      callback);
  }

  /**
   * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
   * @summary Retrieves a specific Service Bus Hybrid Connection used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetHybridConnectionSlotResponse>
   */
  getHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetHybridConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  getHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  getHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnection>, callback?: msRest.ServiceCallback<Models.HybridConnection>): Promise<Models.WebAppsGetHybridConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        slot,
        options
      },
      getHybridConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetHybridConnectionSlotResponse>;
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @summary Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateHybridConnectionSlotResponse>
   */
  createOrUpdateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateHybridConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  createOrUpdateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  createOrUpdateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnection>, callback?: msRest.ServiceCallback<Models.HybridConnection>): Promise<Models.WebAppsCreateOrUpdateHybridConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        connectionEnvelope,
        slot,
        options
      },
      createOrUpdateHybridConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateHybridConnectionSlotResponse>;
  }

  /**
   * Description for Removes a Hybrid Connection from this site.
   * @summary Removes a Hybrid Connection from this site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  deleteHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        slot,
        options
      },
      deleteHybridConnectionSlotOperationSpec,
      callback);
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @summary Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateHybridConnectionSlotResponse>
   */
  updateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateHybridConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  updateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  updateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnection>, callback?: msRest.ServiceCallback<Models.HybridConnection>): Promise<Models.WebAppsUpdateHybridConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        connectionEnvelope,
        slot,
        options
      },
      updateHybridConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateHybridConnectionSlotResponse>;
  }

  /**
   * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
   * @summary Retrieves all Service Bus Hybrid Connections used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListHybridConnectionsSlotResponse>
   */
  listHybridConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHybridConnectionsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  listHybridConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHybridConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  listHybridConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnection>, callback?: msRest.ServiceCallback<Models.HybridConnection>): Promise<Models.WebAppsListHybridConnectionsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listHybridConnectionsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListHybridConnectionsSlotResponse>;
  }

  /**
   * Description for Gets hybrid connections configured for an app (or deployment slot, if
   * specified).
   * @summary Gets hybrid connections configured for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid
   * connections for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListRelayServiceConnectionsSlotResponse>
   */
  listRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListRelayServiceConnectionsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid
   * connections for the production slot.
   * @param callback The callback
   */
  listRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid
   * connections for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  listRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.WebAppsListRelayServiceConnectionsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listRelayServiceConnectionsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListRelayServiceConnectionsSlotResponse>;
  }

  /**
   * Description for Gets a hybrid connection configuration by its name.
   * @summary Gets a hybrid connection configuration by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid
   * connection for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetRelayServiceConnectionSlotResponse>
   */
  getRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetRelayServiceConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid
   * connection for the production slot.
   * @param callback The callback
   */
  getRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid
   * connection for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  getRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.WebAppsGetRelayServiceConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        slot,
        options
      },
      getRelayServiceConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetRelayServiceConnectionSlotResponse>;
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @summary Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
   * update a hybrid connection for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse>
   */
  createOrUpdateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
   * update a hybrid connection for the production slot.
   * @param callback The callback
   */
  createOrUpdateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
   * update a hybrid connection for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  createOrUpdateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        connectionEnvelope,
        slot,
        options
      },
      createOrUpdateRelayServiceConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse>;
  }

  /**
   * Description for Deletes a relay service connection by its name.
   * @summary Deletes a relay service connection by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
   * hybrid connection for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
   * hybrid connection for the production slot.
   * @param callback The callback
   */
  deleteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
   * hybrid connection for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        slot,
        options
      },
      deleteRelayServiceConnectionSlotOperationSpec,
      callback);
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @summary Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
   * update a hybrid connection for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateRelayServiceConnectionSlotResponse>
   */
  updateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateRelayServiceConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
   * update a hybrid connection for the production slot.
   * @param callback The callback
   */
  updateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
   * update a hybrid connection for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  updateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.WebAppsUpdateRelayServiceConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        connectionEnvelope,
        slot,
        options
      },
      updateRelayServiceConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateRelayServiceConnectionSlotResponse>;
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @summary Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   * slot instances.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceIdentifiersSlotResponse>
   */
  listInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceIdentifiersSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   * slot instances.
   * @param callback The callback
   */
  listInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   * slot instances.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
  listInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebAppInstanceCollection>, callback?: msRest.ServiceCallback<Models.WebAppInstanceCollection>): Promise<Models.WebAppsListInstanceIdentifiersSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listInstanceIdentifiersSlotOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceIdentifiersSlotResponse>;
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @summary Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param instanceId
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   * slot instances.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceInfoSlotResponse>
   */
  getInstanceInfoSlot(resourceGroupName: string, name: string, instanceId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceInfoSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param instanceId
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   * slot instances.
   * @param callback The callback
   */
  getInstanceInfoSlot(resourceGroupName: string, name: string, instanceId: string, slot: string, callback: msRest.ServiceCallback<Models.WebSiteInstanceStatus>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param instanceId
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   * slot instances.
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceInfoSlot(resourceGroupName: string, name: string, instanceId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebSiteInstanceStatus>): void;
  getInstanceInfoSlot(resourceGroupName: string, name: string, instanceId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebSiteInstanceStatus>, callback?: msRest.ServiceCallback<Models.WebSiteInstanceStatus>): Promise<Models.WebAppsGetInstanceInfoSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        instanceId,
        slot,
        options
      },
      getInstanceInfoSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceInfoSlotResponse>;
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @summary Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceMsDeployStatusSlotResponse>
   */
  getInstanceMsDeployStatusSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceMsDeployStatusSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param callback The callback
   */
  getInstanceMsDeployStatusSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceMsDeployStatusSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
  getInstanceMsDeployStatusSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MSDeployStatus>, callback?: msRest.ServiceCallback<Models.MSDeployStatus>): Promise<Models.WebAppsGetInstanceMsDeployStatusSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        instanceId,
        options
      },
      getInstanceMsDeployStatusSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceMsDeployStatusSlotResponse>;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @summary Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param mSDeploy Details of MSDeploy operation
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateInstanceMSDeployOperationSlotResponse>
   */
  createInstanceMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateInstanceMSDeployOperationSlotResponse> {
    return this.beginCreateInstanceMSDeployOperationSlot(resourceGroupName,name,slot,instanceId,mSDeploy,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsCreateInstanceMSDeployOperationSlotResponse>;
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @summary Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceMSDeployLogSlotResponse>
   */
  getInstanceMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceMSDeployLogSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param callback The callback
   */
  getInstanceMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
  getInstanceMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MSDeployLog>, callback?: msRest.ServiceCallback<Models.MSDeployLog>): Promise<Models.WebAppsGetInstanceMSDeployLogSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        instanceId,
        options
      },
      getInstanceMSDeployLogSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceMSDeployLogSlotResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @summary Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessesSlotResponse>
   */
  listInstanceProcessesSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  listInstanceProcessesSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessesSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  listInstanceProcessesSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessInfoCollection>): Promise<Models.WebAppsListInstanceProcessesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        instanceId,
        options
      },
      listInstanceProcessesSlotOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessesSlotResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web
   * site.
   * @summary Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceProcessSlotResponse>
   */
  getInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  getInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
  getInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfo>, callback?: msRest.ServiceCallback<Models.ProcessInfo>): Promise<Models.WebAppsGetInstanceProcessSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options
      },
      getInstanceProcessSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceProcessSlotResponse>;
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @summary Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  deleteInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options
      },
      deleteInstanceProcessSlotOperationSpec,
      callback);
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceProcessDumpSlotResponse>
   */
  getInstanceProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessDumpSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  getInstanceProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getInstanceProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.WebAppsGetInstanceProcessDumpSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options
      },
      getInstanceProcessDumpSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceProcessDumpSlotResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out
   * instance in a web site.
   * @summary List module information for a process by its ID for a specific scaled-out instance in a
   * web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessModulesSlotResponse>
   */
  listInstanceProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessModulesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  listInstanceProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  listInstanceProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): Promise<Models.WebAppsListInstanceProcessModulesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options
      },
      listInstanceProcessModulesSlotOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessModulesSlotResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web
   * site.
   * @summary Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetInstanceProcessModuleSlotResponse>
   */
  getInstanceProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessModuleSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  getInstanceProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
  getInstanceProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfo>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfo>): Promise<Models.WebAppsGetInstanceProcessModuleSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        baseAddress,
        slot,
        instanceId,
        options
      },
      getInstanceProcessModuleSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetInstanceProcessModuleSlotResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessThreadsSlotResponse>
   */
  listInstanceProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessThreadsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param callback The callback
   */
  listInstanceProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
   * in the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  listInstanceProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessThreadInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): Promise<Models.WebAppsListInstanceProcessThreadsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options
      },
      listInstanceProcessThreadsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessThreadsSlotResponse>;
  }

  /**
   * Description for Shows whether an app can be cloned to another resource group or subscription.
   * @summary Shows whether an app can be cloned to another resource group or subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. By default, this API returns information on the
   * production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsIsCloneableSlotResponse>
   */
  isCloneableSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsIsCloneableSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. By default, this API returns information on the
   * production slot.
   * @param callback The callback
   */
  isCloneableSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. By default, this API returns information on the
   * production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  isCloneableSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
  isCloneableSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteCloneability>, callback?: msRest.ServiceCallback<Models.SiteCloneability>): Promise<Models.WebAppsIsCloneableSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      isCloneableSlotOperationSpec,
      callback) as Promise<Models.WebAppsIsCloneableSlotResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @summary Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of
   * the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSiteBackupsSlotResponse>
   */
  listSiteBackupsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteBackupsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of
   * the production slot.
   * @param callback The callback
   */
  listSiteBackupsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of
   * the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteBackupsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listSiteBackupsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.WebAppsListSiteBackupsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSiteBackupsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListSiteBackupsSlotResponse>;
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @summary This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSyncFunctionTriggersSlotResponse>
   */
  listSyncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSyncFunctionTriggersSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  listSyncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSyncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
  listSyncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionSecrets>, callback?: msRest.ServiceCallback<Models.FunctionSecrets>): Promise<Models.WebAppsListSyncFunctionTriggersSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSyncFunctionTriggersSlotOperationSpec,
      callback) as Promise<Models.WebAppsListSyncFunctionTriggersSlotResponse>;
  }

  /**
   * Description for Returns the status of MySql in app migration, if one is active, and whether or
   * not MySql in app is enabled
   * @summary Returns the status of MySql in app migration, if one is active, and whether or not
   * MySql in app is enabled
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetMigrateMySqlStatusSlotResponse>
   */
  getMigrateMySqlStatusSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMigrateMySqlStatusSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  getMigrateMySqlStatusSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.MigrateMySqlStatus>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMigrateMySqlStatusSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MigrateMySqlStatus>): void;
  getMigrateMySqlStatusSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MigrateMySqlStatus>, callback?: msRest.ServiceCallback<Models.MigrateMySqlStatus>): Promise<Models.WebAppsGetMigrateMySqlStatusSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getMigrateMySqlStatusSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetMigrateMySqlStatusSlotResponse>;
  }

  /**
   * Description for Gets a Swift Virtual Network connection.
   * @summary Gets a Swift Virtual Network connection.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
   * for the production slot's Virtual Network.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionSlotResponse>
   */
  getSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
   * for the production slot's Virtual Network.
   * @param callback The callback
   */
  getSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
   * for the production slot's Virtual Network.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  getSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SwiftVirtualNetwork>, callback?: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSwiftVirtualNetworkConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionSlotResponse>;
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet
   * has already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @summary Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported"
   * is true when doing a GET against this resource, and 2) that the target Subnet has already been
   * delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotResponse>
   */
  createOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param callback The callback
   */
  createOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  createOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SwiftVirtualNetwork>, callback?: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        connectionEnvelope,
        slot,
        options
      },
      createOrUpdateSwiftVirtualNetworkConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotResponse>;
  }

  /**
   * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
   * @summary Deletes a Swift Virtual Network connection from an app (or deployment slot).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * connection for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSwiftVirtualNetworkSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * connection for the production slot.
   * @param callback The callback
   */
  deleteSwiftVirtualNetworkSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * connection for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSwiftVirtualNetworkSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSwiftVirtualNetworkSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      deleteSwiftVirtualNetworkSlotOperationSpec,
      callback);
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet
   * has already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @summary Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported"
   * is true when doing a GET against this resource, and 2) that the target Subnet has already been
   * delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionSlotResponse>
   */
  updateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param callback The callback
   */
  updateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
  updateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SwiftVirtualNetwork>, callback?: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        connectionEnvelope,
        slot,
        options
      },
      updateSwiftVirtualNetworkConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionSlotResponse>;
  }

  /**
   * Description for Gets all network features used by the app (or deployment slot, if specified).
   * @summary Gets all network features used by the app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get network
   * features for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListNetworkFeaturesSlotResponse>
   */
  listNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListNetworkFeaturesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get network
   * features for the production slot.
   * @param callback The callback
   */
  listNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get network
   * features for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
  listNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkFeatures>, callback?: msRest.ServiceCallback<Models.NetworkFeatures>): Promise<Models.WebAppsListNetworkFeaturesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        view,
        slot,
        options
      },
      listNetworkFeaturesSlotOperationSpec,
      callback) as Promise<Models.WebAppsListNetworkFeaturesSlotResponse>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @summary Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetNetworkTraceOperationSlotResponse>
   */
  getNetworkTraceOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTraceOperationSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param callback The callback
   */
  getNetworkTraceOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkTraceOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  getNetworkTraceOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkTrace[]>, callback?: msRest.ServiceCallback<Models.NetworkTrace[]>): Promise<Models.WebAppsGetNetworkTraceOperationSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        slot,
        options
      },
      getNetworkTraceOperationSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetNetworkTraceOperationSlotResponse>;
  }

  /**
   * Description for Start capturing network packets for the site (To be deprecated).
   * @summary Start capturing network packets for the site (To be deprecated).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceSlotResponse>
   */
  startWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsStartWebSiteNetworkTraceSlotOptionalParams): Promise<Models.WebAppsStartWebSiteNetworkTraceSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  startWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  startWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsStartWebSiteNetworkTraceSlotOptionalParams, callback: msRest.ServiceCallback<string>): void;
  startWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsStartWebSiteNetworkTraceSlotOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.WebAppsStartWebSiteNetworkTraceSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      startWebSiteNetworkTraceSlotOperationSpec,
      callback) as Promise<Models.WebAppsStartWebSiteNetworkTraceSlotResponse>;
  }

  /**
   * Description for Start capturing network packets for the site.
   * @summary Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceOperationSlotResponse>
   */
  startWebSiteNetworkTraceOperationSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsStartWebSiteNetworkTraceOperationSlotOptionalParams): Promise<Models.WebAppsStartWebSiteNetworkTraceOperationSlotResponse> {
    return this.beginStartWebSiteNetworkTraceOperationSlot(resourceGroupName,name,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsStartWebSiteNetworkTraceOperationSlotResponse>;
  }

  /**
   * Description for Stop ongoing capturing network packets for the site.
   * @summary Stop ongoing capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stopWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  stopWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  stopWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stopWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      stopWebSiteNetworkTraceSlotOperationSpec,
      callback);
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @summary Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetNetworkTracesSlotResponse>
   */
  getNetworkTracesSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTracesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param callback The callback
   */
  getNetworkTracesSlot(resourceGroupName: string, name: string, operationId: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkTracesSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  getNetworkTracesSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkTrace[]>, callback?: msRest.ServiceCallback<Models.NetworkTrace[]>): Promise<Models.WebAppsGetNetworkTracesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        slot,
        options
      },
      getNetworkTracesSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetNetworkTracesSlotResponse>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @summary Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetNetworkTraceOperationSlotV2Response>
   */
  getNetworkTraceOperationSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTraceOperationSlotV2Response>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param callback The callback
   */
  getNetworkTraceOperationSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkTraceOperationSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  getNetworkTraceOperationSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkTrace[]>, callback?: msRest.ServiceCallback<Models.NetworkTrace[]>): Promise<Models.WebAppsGetNetworkTraceOperationSlotV2Response> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        slot,
        options
      },
      getNetworkTraceOperationSlotV2OperationSpec,
      callback) as Promise<Models.WebAppsGetNetworkTraceOperationSlotV2Response>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @summary Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetNetworkTracesSlotV2Response>
   */
  getNetworkTracesSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTracesSlotV2Response>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param callback The callback
   */
  getNetworkTracesSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
   * operation for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkTracesSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
  getNetworkTracesSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkTrace[]>, callback?: msRest.ServiceCallback<Models.NetworkTrace[]>): Promise<Models.WebAppsGetNetworkTracesSlotV2Response> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        slot,
        options
      },
      getNetworkTracesSlotV2OperationSpec,
      callback) as Promise<Models.WebAppsGetNetworkTracesSlotV2Response>;
  }

  /**
   * Description for Generates a new publishing password for an app (or deployment slot, if
   * specified).
   * @summary Generates a new publishing password for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new
   * publishing password for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new
   * publishing password for the production slot.
   * @param callback The callback
   */
  generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new
   * publishing password for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      generateNewSitePublishingPasswordSlotOperationSpec,
      callback);
  }

  /**
   * Description for Gets perfmon counters for web app.
   * @summary Gets perfmon counters for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPerfMonCountersSlotResponse>
   */
  listPerfMonCountersSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsListPerfMonCountersSlotOptionalParams): Promise<Models.WebAppsListPerfMonCountersSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  listPerfMonCountersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPerfMonCountersSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsListPerfMonCountersSlotOptionalParams, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
  listPerfMonCountersSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsListPerfMonCountersSlotOptionalParams | msRest.ServiceCallback<Models.PerfMonCounterCollection>, callback?: msRest.ServiceCallback<Models.PerfMonCounterCollection>): Promise<Models.WebAppsListPerfMonCountersSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listPerfMonCountersSlotOperationSpec,
      callback) as Promise<Models.WebAppsListPerfMonCountersSlotResponse>;
  }

  /**
   * Description for Gets web app's event logs.
   * @summary Gets web app's event logs.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetSitePhpErrorLogFlagSlotResponse>
   */
  getSitePhpErrorLogFlagSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSitePhpErrorLogFlagSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSitePhpErrorLogFlagSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SitePhpErrorLogFlag>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSitePhpErrorLogFlagSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SitePhpErrorLogFlag>): void;
  getSitePhpErrorLogFlagSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SitePhpErrorLogFlag>, callback?: msRest.ServiceCallback<Models.SitePhpErrorLogFlag>): Promise<Models.WebAppsGetSitePhpErrorLogFlagSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSitePhpErrorLogFlagSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetSitePhpErrorLogFlagSlotResponse>;
  }

  /**
   * Description for Gets the premier add-ons of an app.
   * @summary Gets the premier add-ons of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * premier add-ons for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPremierAddOnsSlotResponse>
   */
  listPremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPremierAddOnsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * premier add-ons for the production slot.
   * @param callback The callback
   */
  listPremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * premier add-ons for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  listPremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PremierAddOn>, callback?: msRest.ServiceCallback<Models.PremierAddOn>): Promise<Models.WebAppsListPremierAddOnsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listPremierAddOnsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListPremierAddOnsSlotResponse>;
  }

  /**
   * Description for Gets a named add-on of an app.
   * @summary Gets a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
   * add-on for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetPremierAddOnSlotResponse>
   */
  getPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPremierAddOnSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
   * add-on for the production slot.
   * @param callback The callback
   */
  getPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
   * add-on for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  getPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PremierAddOn>, callback?: msRest.ServiceCallback<Models.PremierAddOn>): Promise<Models.WebAppsGetPremierAddOnSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        slot,
        options
      },
      getPremierAddOnSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetPremierAddOnSlotResponse>;
  }

  /**
   * Description for Updates a named add-on of an app.
   * @summary Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * named add-on for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsAddPremierAddOnSlotResponse>
   */
  addPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsAddPremierAddOnSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * named add-on for the production slot.
   * @param callback The callback
   */
  addPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, slot: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * named add-on for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  addPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  addPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PremierAddOn>, callback?: msRest.ServiceCallback<Models.PremierAddOn>): Promise<Models.WebAppsAddPremierAddOnSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        premierAddOn,
        slot,
        options
      },
      addPremierAddOnSlotOperationSpec,
      callback) as Promise<Models.WebAppsAddPremierAddOnSlotResponse>;
  }

  /**
   * Description for Delete a premier add-on from an app.
   * @summary Delete a premier add-on from an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * named add-on for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * named add-on for the production slot.
   * @param callback The callback
   */
  deletePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * named add-on for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        slot,
        options
      },
      deletePremierAddOnSlotOperationSpec,
      callback);
  }

  /**
   * Description for Updates a named add-on of an app.
   * @summary Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * named add-on for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdatePremierAddOnSlotResponse>
   */
  updatePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdatePremierAddOnSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * named add-on for the production slot.
   * @param callback The callback
   */
  updatePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, slot: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * named add-on for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
  updatePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PremierAddOn>, callback?: msRest.ServiceCallback<Models.PremierAddOn>): Promise<Models.WebAppsUpdatePremierAddOnSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        premierAddOn,
        slot,
        options
      },
      updatePremierAddOnSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdatePremierAddOnSlotResponse>;
  }

  /**
   * Description for Gets data around private site access enablement and authorized Virtual Networks
   * that can access the site.
   * @summary Gets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetPrivateAccessSlotResponse>
   */
  getPrivateAccessSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPrivateAccessSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  getPrivateAccessSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPrivateAccessSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
  getPrivateAccessSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateAccess>, callback?: msRest.ServiceCallback<Models.PrivateAccess>): Promise<Models.WebAppsGetPrivateAccessSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getPrivateAccessSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetPrivateAccessSlotResponse>;
  }

  /**
   * Description for Sets data around private site access enablement and authorized Virtual Networks
   * that can access the site.
   * @summary Sets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param access The information for the private access
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsPutPrivateAccessVnetSlotResponse>
   */
  putPrivateAccessVnetSlot(resourceGroupName: string, name: string, access: Models.PrivateAccess, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsPutPrivateAccessVnetSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param access The information for the private access
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  putPrivateAccessVnetSlot(resourceGroupName: string, name: string, access: Models.PrivateAccess, slot: string, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param access The information for the private access
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  putPrivateAccessVnetSlot(resourceGroupName: string, name: string, access: Models.PrivateAccess, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
  putPrivateAccessVnetSlot(resourceGroupName: string, name: string, access: Models.PrivateAccess, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateAccess>, callback?: msRest.ServiceCallback<Models.PrivateAccess>): Promise<Models.WebAppsPutPrivateAccessVnetSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        access,
        slot,
        options
      },
      putPrivateAccessVnetSlotOperationSpec,
      callback) as Promise<Models.WebAppsPutPrivateAccessVnetSlotResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @summary Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessesSlotResponse>
   */
  listProcessesSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  listProcessesSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessesSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  listProcessesSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessInfoCollection>): Promise<Models.WebAppsListProcessesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listProcessesSlotOperationSpec,
      callback) as Promise<Models.WebAppsListProcessesSlotResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web
   * site.
   * @summary Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetProcessSlotResponse>
   */
  getProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  getProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
  getProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfo>, callback?: msRest.ServiceCallback<Models.ProcessInfo>): Promise<Models.WebAppsGetProcessSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        options
      },
      getProcessSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetProcessSlotResponse>;
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @summary Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  deleteProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        options
      },
      deleteProcessSlotOperationSpec,
      callback);
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetProcessDumpSlotResponse>
   */
  getProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessDumpSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  getProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.WebAppsGetProcessDumpSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        options
      },
      getProcessDumpSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetProcessDumpSlotResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out
   * instance in a web site.
   * @summary List module information for a process by its ID for a specific scaled-out instance in a
   * web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessModulesSlotResponse>
   */
  listProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessModulesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  listProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  listProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): Promise<Models.WebAppsListProcessModulesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        options
      },
      listProcessModulesSlotOperationSpec,
      callback) as Promise<Models.WebAppsListProcessModulesSlotResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web
   * site.
   * @summary Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetProcessModuleSlotResponse>
   */
  getProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessModuleSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  getProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
  getProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfo>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfo>): Promise<Models.WebAppsGetProcessModuleSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        baseAddress,
        slot,
        options
      },
      getProcessModuleSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetProcessModuleSlotResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessThreadsSlotResponse>
   */
  listProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessThreadsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  listProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  listProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessThreadInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): Promise<Models.WebAppsListProcessThreadsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        options
      },
      listProcessThreadsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListProcessThreadsSlotResponse>;
  }

  /**
   * Description for Get public certificates for an app or a deployment slot.
   * @summary Get public certificates for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
   * bindings for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPublicCertificatesSlotResponse>
   */
  listPublicCertificatesSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublicCertificatesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
   * bindings for the production slot.
   * @param callback The callback
   */
  listPublicCertificatesSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
   * bindings for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPublicCertificatesSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
  listPublicCertificatesSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PublicCertificateCollection>, callback?: msRest.ServiceCallback<Models.PublicCertificateCollection>): Promise<Models.WebAppsListPublicCertificatesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listPublicCertificatesSlotOperationSpec,
      callback) as Promise<Models.WebAppsListPublicCertificatesSlotResponse>;
  }

  /**
   * Description for Get the named public certificate for an app (or deployment slot, if specified).
   * @summary Get the named public certificate for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
   * for the production slot.
   * @param publicCertificateName Public certificate name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetPublicCertificateSlotResponse>
   */
  getPublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPublicCertificateSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
   * for the production slot.
   * @param publicCertificateName Public certificate name.
   * @param callback The callback
   */
  getPublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
   * for the production slot.
   * @param publicCertificateName Public certificate name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
  getPublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PublicCertificate>, callback?: msRest.ServiceCallback<Models.PublicCertificate>): Promise<Models.WebAppsGetPublicCertificateSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        publicCertificateName,
        options
      },
      getPublicCertificateSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetPublicCertificateSlotResponse>;
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @summary Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param publicCertificate Public certificate details. This is the JSON representation of a
   * PublicCertificate object.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
   * binding for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdatePublicCertificateSlotResponse>
   */
  createOrUpdatePublicCertificateSlot(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdatePublicCertificateSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param publicCertificate Public certificate details. This is the JSON representation of a
   * PublicCertificate object.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
   * binding for the production slot.
   * @param callback The callback
   */
  createOrUpdatePublicCertificateSlot(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, slot: string, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param publicCertificate Public certificate details. This is the JSON representation of a
   * PublicCertificate object.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
   * binding for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdatePublicCertificateSlot(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
  createOrUpdatePublicCertificateSlot(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PublicCertificate>, callback?: msRest.ServiceCallback<Models.PublicCertificate>): Promise<Models.WebAppsCreateOrUpdatePublicCertificateSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publicCertificateName,
        publicCertificate,
        slot,
        options
      },
      createOrUpdatePublicCertificateSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdatePublicCertificateSlotResponse>;
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @summary Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param publicCertificateName Public certificate name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param publicCertificateName Public certificate name.
   * @param callback The callback
   */
  deletePublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * binding for the production slot.
   * @param publicCertificateName Public certificate name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        publicCertificateName,
        options
      },
      deletePublicCertificateSlotOperationSpec,
      callback);
  }

  /**
   * Description for Gets the publishing profile for an app (or deployment slot, if specified).
   * @summary Gets the publishing profile for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
   * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * publishing profile for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPublishingProfileXmlWithSecretsSlotResponse>
   */
  listPublishingProfileXmlWithSecretsSlot(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublishingProfileXmlWithSecretsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
   * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * publishing profile for the production slot.
   * @param callback The callback
   */
  listPublishingProfileXmlWithSecretsSlot(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
   * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * publishing profile for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPublishingProfileXmlWithSecretsSlot(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  listPublishingProfileXmlWithSecretsSlot(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.WebAppsListPublishingProfileXmlWithSecretsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publishingProfileOptions,
        slot,
        options
      },
      listPublishingProfileXmlWithSecretsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListPublishingProfileXmlWithSecretsSlotResponse>;
  }

  /**
   * Description for Resets the configuration settings of the current slot if they were previously
   * modified by calling the API with POST.
   * @summary Resets the configuration settings of the current slot if they were previously modified
   * by calling the API with POST.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API resets
   * configuration settings for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetSlotConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API resets
   * configuration settings for the production slot.
   * @param callback The callback
   */
  resetSlotConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API resets
   * configuration settings for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  resetSlotConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resetSlotConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      resetSlotConfigurationSlotOperationSpec,
      callback);
  }

  /**
   * Description for Restarts an app (or deployment slot, if specified).
   * @summary Restarts an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the
   * production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restartSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsRestartSlotOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the
   * production slot.
   * @param callback The callback
   */
  restartSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the
   * production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  restartSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsRestartSlotOptionalParams, callback: msRest.ServiceCallback<void>): void;
  restartSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsRestartSlotOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      restartSlotOperationSpec,
      callback);
  }

  /**
   * Description for Restores an app from a backup blob in Azure Storage.
   * @summary Restores an app from a backup blob in Azure Storage.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Information on restore request .
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
   * backup of the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restoreFromBackupBlobSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestoreFromBackupBlobSlot(resourceGroupName,name,request,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for Restores a deleted web app to this web app.
   * @summary Restores a deleted web app to this web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Deleted web app restore information.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restoreFromDeletedAppSlot(resourceGroupName: string, name: string, restoreRequest: Models.DeletedAppRestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestoreFromDeletedAppSlot(resourceGroupName,name,restoreRequest,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for Restores a web app from a snapshot.
   * @summary Restores a web app from a snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
   * GetDeletedSites or GetSiteSnapshots API.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restoreSnapshotSlot(resourceGroupName: string, name: string, restoreRequest: Models.SnapshotRestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestoreSnapshotSlot(resourceGroupName,name,restoreRequest,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for Get list of siteextensions for a web site, or a deployment slot.
   * @summary Get list of siteextensions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSiteExtensionsSlotResponse>
   */
  listSiteExtensionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteExtensionsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param callback The callback
   */
  listSiteExtensionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteExtensionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
  listSiteExtensionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteExtensionInfoCollection>, callback?: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): Promise<Models.WebAppsListSiteExtensionsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSiteExtensionsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListSiteExtensionsSlotResponse>;
  }

  /**
   * Description for Get site extension information by its ID for a web site, or a deployment slot.
   * @summary Get site extension information by its ID for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetSiteExtensionSlotResponse>
   */
  getSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSiteExtensionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param callback The callback
   */
  getSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfo>): void;
  getSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteExtensionInfo>, callback?: msRest.ServiceCallback<Models.SiteExtensionInfo>): Promise<Models.WebAppsGetSiteExtensionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteExtensionId,
        slot,
        options
      },
      getSiteExtensionSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetSiteExtensionSlotResponse>;
  }

  /**
   * Description for Install site extension on a web site, or a deployment slot.
   * @summary Install site extension on a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsInstallSiteExtensionSlotResponse>
   */
  installSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsInstallSiteExtensionSlotResponse> {
    return this.beginInstallSiteExtensionSlot(resourceGroupName,name,siteExtensionId,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsInstallSiteExtensionSlotResponse>;
  }

  /**
   * Description for Remove a site extension from a web site, or a deployment slot.
   * @summary Remove a site extension from a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param callback The callback
   */
  deleteSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteExtensionId,
        slot,
        options
      },
      deleteSiteExtensionSlotOperationSpec,
      callback);
  }

  /**
   * Description for Copies a deployment slot to another deployment slot of an app.
   * @summary Copies a deployment slot to another deployment slot of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param copySlotEntity JSON object that contains the target slot name and site config properties
   * to override the source slot config. See example.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
   * the source slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  copySlotSlot(resourceGroupName: string, name: string, copySlotEntity: Models.CsmCopySlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginCopySlotSlot(resourceGroupName,name,copySlotEntity,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for Get the difference in configuration settings between two web app slots.
   * @summary Get the difference in configuration settings between two web app slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
   * the source slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSlotDifferencesSlotResponse>
   */
  listSlotDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotDifferencesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
   * the source slot.
   * @param callback The callback
   */
  listSlotDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
   * the source slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSlotDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  listSlotDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotDifferenceCollection>, callback?: msRest.ServiceCallback<Models.SlotDifferenceCollection>): Promise<Models.WebAppsListSlotDifferencesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        slot,
        options
      },
      listSlotDifferencesSlotOperationSpec,
      callback) as Promise<Models.WebAppsListSlotDifferencesSlotResponse>;
  }

  /**
   * Description for Swaps two deployment slots of an app.
   * @summary Swaps two deployment slots of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
   * the source slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  swapSlotSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginSwapSlotSlot(resourceGroupName,name,slotSwapEntity,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for Returns all Snapshots to the user.
   * @summary Returns all Snapshots to the user.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSnapshotsSlotResponse>
   */
  listSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param callback The callback
   */
  listSnapshotsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  listSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotCollection>, callback?: msRest.ServiceCallback<Models.SnapshotCollection>): Promise<Models.WebAppsListSnapshotsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSnapshotsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListSnapshotsSlotResponse>;
  }

  /**
   * Description for Returns all Snapshots to the user from DRSecondary endpoint.
   * @summary Returns all Snapshots to the user from DRSecondary endpoint.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotResponse>
   */
  listSnapshotsFromDRSecondarySlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param callback The callback
   */
  listSnapshotsFromDRSecondarySlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSnapshotsFromDRSecondarySlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  listSnapshotsFromDRSecondarySlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotCollection>, callback?: msRest.ServiceCallback<Models.SnapshotCollection>): Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSnapshotsFromDRSecondarySlotOperationSpec,
      callback) as Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotResponse>;
  }

  /**
   * Description for Gets the source control configuration of an app.
   * @summary Gets the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source
   * control configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetSourceControlSlotResponse>
   */
  getSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSourceControlSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source
   * control configuration for the production slot.
   * @param callback The callback
   */
  getSourceControlSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source
   * control configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSourceControlSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  getSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSourceControl>, callback?: msRest.ServiceCallback<Models.SiteSourceControl>): Promise<Models.WebAppsGetSourceControlSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSourceControlSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetSourceControlSlotResponse>;
  }

  /**
   * Description for Updates the source control configuration of an app.
   * @summary Updates the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * source control configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateSourceControlSlotResponse>
   */
  createOrUpdateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateSourceControlSlotResponse> {
    return this.beginCreateOrUpdateSourceControlSlot(resourceGroupName,name,siteSourceControl,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsCreateOrUpdateSourceControlSlotResponse>;
  }

  /**
   * Description for Deletes the source control configuration of an app.
   * @summary Deletes the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * source control configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * source control configuration for the production slot.
   * @param callback The callback
   */
  deleteSourceControlSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * source control configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      deleteSourceControlSlotOperationSpec,
      callback);
  }

  /**
   * Description for Updates the source control configuration of an app.
   * @summary Updates the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * source control configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateSourceControlSlotResponse>
   */
  updateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSourceControlSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * source control configuration for the production slot.
   * @param callback The callback
   */
  updateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * source control configuration for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  updateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSourceControl>, callback?: msRest.ServiceCallback<Models.SiteSourceControl>): Promise<Models.WebAppsUpdateSourceControlSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteSourceControl,
        slot,
        options
      },
      updateSourceControlSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateSourceControlSlotResponse>;
  }

  /**
   * Description for Starts an app (or deployment slot, if specified).
   * @summary Starts an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will start the
   * production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will start the
   * production slot.
   * @param callback The callback
   */
  startSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will start the
   * production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  startSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  startSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      startSlotOperationSpec,
      callback);
  }

  /**
   * Description for Start capturing network packets for the site.
   * @summary Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsStartNetworkTraceSlotResponse>
   */
  startNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsStartNetworkTraceSlotOptionalParams): Promise<Models.WebAppsStartNetworkTraceSlotResponse> {
    return this.beginStartNetworkTraceSlot(resourceGroupName,name,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsStartNetworkTraceSlotResponse>;
  }

  /**
   * Description for Stops an app (or deployment slot, if specified).
   * @summary Stops an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the
   * production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stopSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the
   * production slot.
   * @param callback The callback
   */
  stopSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the
   * production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  stopSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stopSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      stopSlotOperationSpec,
      callback);
  }

  /**
   * Description for Stop ongoing capturing network packets for the site.
   * @summary Stop ongoing capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stopNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  stopNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  stopNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stopNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      stopNetworkTraceSlotOperationSpec,
      callback);
  }

  /**
   * Description for Sync web app repository.
   * @summary Sync web app repository.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  syncRepositorySlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  syncRepositorySlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  syncRepositorySlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  syncRepositorySlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      syncRepositorySlotOperationSpec,
      callback);
  }

  /**
   * Description for Syncs function trigger metadata to the management database
   * @summary Syncs function trigger metadata to the management database
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  syncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param callback The callback
   */
  syncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  syncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  syncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      syncFunctionTriggersSlotOperationSpec,
      callback);
  }

  /**
   * Description for List triggered web jobs for an app, or a deployment slot.
   * @summary List triggered web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListTriggeredWebJobsSlotResponse>
   */
  listTriggeredWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param callback The callback
   */
  listTriggeredWebJobsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
   * deployment for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredWebJobsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
  listTriggeredWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredWebJobCollection>, callback?: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): Promise<Models.WebAppsListTriggeredWebJobsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listTriggeredWebJobsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListTriggeredWebJobsSlotResponse>;
  }

  /**
   * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
   * @summary Gets a triggered web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetTriggeredWebJobSlotResponse>
   */
  getTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetTriggeredWebJobSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param callback The callback
   */
  getTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<Models.TriggeredWebJob>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJob>): void;
  getTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredWebJob>, callback?: msRest.ServiceCallback<Models.TriggeredWebJob>): Promise<Models.WebAppsGetTriggeredWebJobSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        slot,
        options
      },
      getTriggeredWebJobSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetTriggeredWebJobSlotResponse>;
  }

  /**
   * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
   * @summary Delete a triggered web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes web job for
   * the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes web job for
   * the production slot.
   * @param callback The callback
   */
  deleteTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes web job for
   * the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        slot,
        options
      },
      deleteTriggeredWebJobSlotOperationSpec,
      callback);
  }

  /**
   * Description for List a triggered web job's history for an app, or a deployment slot.
   * @summary List a triggered web job's history for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListTriggeredWebJobHistorySlotResponse>
   */
  listTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobHistorySlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param callback The callback
   */
  listTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
  listTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>, callback?: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): Promise<Models.WebAppsListTriggeredWebJobHistorySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        slot,
        options
      },
      listTriggeredWebJobHistorySlotOperationSpec,
      callback) as Promise<Models.WebAppsListTriggeredWebJobHistorySlotResponse>;
  }

  /**
   * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
   * @summary Gets a triggered web job's history by its ID for an app, , or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param id History ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetTriggeredWebJobHistorySlotResponse>
   */
  getTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetTriggeredWebJobHistorySlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param id History ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param callback The callback
   */
  getTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistory>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param id History ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistory>): void;
  getTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredJobHistory>, callback?: msRest.ServiceCallback<Models.TriggeredJobHistory>): Promise<Models.WebAppsGetTriggeredWebJobHistorySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        id,
        slot,
        options
      },
      getTriggeredWebJobHistorySlotOperationSpec,
      callback) as Promise<Models.WebAppsGetTriggeredWebJobHistorySlotResponse>;
  }

  /**
   * Description for Run a triggered web job for an app, or a deployment slot.
   * @summary Run a triggered web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  runTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param callback The callback
   */
  runTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  runTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  runTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        slot,
        options
      },
      runTriggeredWebJobSlotOperationSpec,
      callback);
  }

  /**
   * Description for Gets the quota usage information of an app (or deployment slot, if specified).
   * @summary Gets the quota usage information of an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota
   * information of the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListUsagesSlotResponse>
   */
  listUsagesSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsListUsagesSlotOptionalParams): Promise<Models.WebAppsListUsagesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota
   * information of the production slot.
   * @param callback The callback
   */
  listUsagesSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota
   * information of the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsagesSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsListUsagesSlotOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  listUsagesSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsListUsagesSlotOptionalParams | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.WebAppsListUsagesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listUsagesSlotOperationSpec,
      callback) as Promise<Models.WebAppsListUsagesSlotResponse>;
  }

  /**
   * Description for Gets the virtual networks the app (or deployment slot) is connected to.
   * @summary Gets the virtual networks the app (or deployment slot) is connected to.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual
   * network connections for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListVnetConnectionsSlotResponse>
   */
  listVnetConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListVnetConnectionsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual
   * network connections for the production slot.
   * @param callback The callback
   */
  listVnetConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual
   * network connections for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVnetConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  listVnetConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo[]>, callback?: msRest.ServiceCallback<Models.VnetInfo[]>): Promise<Models.WebAppsListVnetConnectionsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listVnetConnectionsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListVnetConnectionsSlotResponse>;
  }

  /**
   * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
   * @summary Gets a virtual network the app (or deployment slot) is connected to by name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
   * virtual network for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetVnetConnectionSlotResponse>
   */
  getVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetVnetConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
   * virtual network for the production slot.
   * @param callback The callback
   */
  getVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
   * virtual network for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  getVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.WebAppsGetVnetConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        slot,
        options
      },
      getVnetConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetVnetConnectionSlotResponse>;
  }

  /**
   * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the
   * connection properties (PATCH).
   * @summary Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
   * properties (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateVnetConnectionSlotResponse>
   */
  createOrUpdateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateVnetConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param callback The callback
   */
  createOrUpdateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  createOrUpdateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.WebAppsCreateOrUpdateVnetConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        connectionEnvelope,
        slot,
        options
      },
      createOrUpdateVnetConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateVnetConnectionSlotResponse>;
  }

  /**
   * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
   * @summary Deletes a connection from an app (or deployment slot to a named virtual network.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * connection for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * connection for the production slot.
   * @param callback The callback
   */
  deleteVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   * connection for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        slot,
        options
      },
      deleteVnetConnectionSlotOperationSpec,
      callback);
  }

  /**
   * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the
   * connection properties (PATCH).
   * @summary Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
   * properties (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateVnetConnectionSlotResponse>
   */
  updateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateVnetConnectionSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param callback The callback
   */
  updateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * connections for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  updateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.WebAppsUpdateVnetConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        connectionEnvelope,
        slot,
        options
      },
      updateVnetConnectionSlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateVnetConnectionSlotResponse>;
  }

  /**
   * Description for Gets an app's Virtual Network gateway.
   * @summary Gets an app's Virtual Network gateway.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
   * for the production slot's Virtual Network.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetVnetConnectionGatewaySlotResponse>
   */
  getVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetVnetConnectionGatewaySlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
   * for the production slot's Virtual Network.
   * @param callback The callback
   */
  getVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
   * for the production slot's Virtual Network.
   * @param options The optional parameters
   * @param callback The callback
   */
  getVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  getVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.WebAppsGetVnetConnectionGatewaySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        slot,
        options
      },
      getVnetConnectionGatewaySlotOperationSpec,
      callback) as Promise<Models.WebAppsGetVnetConnectionGatewaySlotResponse>;
  }

  /**
   * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * a gateway for the production slot's Virtual Network.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse>
   */
  createOrUpdateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * a gateway for the production slot's Virtual Network.
   * @param callback The callback
   */
  createOrUpdateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * a gateway for the production slot's Virtual Network.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  createOrUpdateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        slot,
        options
      },
      createOrUpdateVnetConnectionGatewaySlotOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse>;
  }

  /**
   * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * a gateway for the production slot's Virtual Network.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateVnetConnectionGatewaySlotResponse>
   */
  updateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateVnetConnectionGatewaySlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * a gateway for the production slot's Virtual Network.
   * @param callback The callback
   */
  updateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   * a gateway for the production slot's Virtual Network.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  updateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.WebAppsUpdateVnetConnectionGatewaySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        slot,
        options
      },
      updateVnetConnectionGatewaySlotOperationSpec,
      callback) as Promise<Models.WebAppsUpdateVnetConnectionGatewaySlotResponse>;
  }

  /**
   * Description for List webjobs for an app, or a deployment slot.
   * @summary List webjobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListWebJobsSlotResponse>
   */
  listWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListWebJobsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  listWebJobsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listWebJobsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
  listWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebJobCollection>, callback?: msRest.ServiceCallback<Models.WebJobCollection>): Promise<Models.WebAppsListWebJobsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listWebJobsSlotOperationSpec,
      callback) as Promise<Models.WebAppsListWebJobsSlotResponse>;
  }

  /**
   * Description for Get webjob information for an app, or a deployment slot.
   * @summary Get webjob information for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of the web job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetWebJobSlotResponse>
   */
  getWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetWebJobSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of the web job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param callback The callback
   */
  getWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<Models.WebJob>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of the web job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
   * for the production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJob>): void;
  getWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebJob>, callback?: msRest.ServiceCallback<Models.WebJob>): Promise<Models.WebAppsGetWebJobSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        slot,
        options
      },
      getWebJobSlotOperationSpec,
      callback) as Promise<Models.WebAppsGetWebJobSlotResponse>;
  }

  /**
   * Description for Get the difference in configuration settings between two web app slots.
   * @summary Get the difference in configuration settings between two web app slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSlotDifferencesFromProductionResponse>
   */
  listSlotDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotDifferencesFromProductionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param callback The callback
   */
  listSlotDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSlotDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  listSlotDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotDifferenceCollection>, callback?: msRest.ServiceCallback<Models.SlotDifferenceCollection>): Promise<Models.WebAppsListSlotDifferencesFromProductionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        options
      },
      listSlotDifferencesFromProductionOperationSpec,
      callback) as Promise<Models.WebAppsListSlotDifferencesFromProductionResponse>;
  }

  /**
   * Description for Swaps two deployment slots of an app.
   * @summary Swaps two deployment slots of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  swapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginSwapSlotWithProduction(resourceGroupName,name,slotSwapEntity,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Description for Returns all Snapshots to the user.
   * @summary Returns all Snapshots to the user.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSnapshotsResponse>
   */
  listSnapshots(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param callback The callback
   */
  listSnapshots(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSnapshots(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  listSnapshots(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotCollection>, callback?: msRest.ServiceCallback<Models.SnapshotCollection>): Promise<Models.WebAppsListSnapshotsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSnapshotsOperationSpec,
      callback) as Promise<Models.WebAppsListSnapshotsResponse>;
  }

  /**
   * Description for Returns all Snapshots to the user from DRSecondary endpoint.
   * @summary Returns all Snapshots to the user from DRSecondary endpoint.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSnapshotsFromDRSecondaryResponse>
   */
  listSnapshotsFromDRSecondary(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsFromDRSecondaryResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param callback The callback
   */
  listSnapshotsFromDRSecondary(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSnapshotsFromDRSecondary(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  listSnapshotsFromDRSecondary(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotCollection>, callback?: msRest.ServiceCallback<Models.SnapshotCollection>): Promise<Models.WebAppsListSnapshotsFromDRSecondaryResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSnapshotsFromDRSecondaryOperationSpec,
      callback) as Promise<Models.WebAppsListSnapshotsFromDRSecondaryResponse>;
  }

  /**
   * Description for Gets the source control configuration of an app.
   * @summary Gets the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetSourceControlResponse>
   */
  getSourceControl(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSourceControlResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  getSourceControl(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSourceControl(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  getSourceControl(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSourceControl>, callback?: msRest.ServiceCallback<Models.SiteSourceControl>): Promise<Models.WebAppsGetSourceControlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSourceControlOperationSpec,
      callback) as Promise<Models.WebAppsGetSourceControlResponse>;
  }

  /**
   * Description for Updates the source control configuration of an app.
   * @summary Updates the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateSourceControlResponse>
   */
  createOrUpdateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateSourceControlResponse> {
    return this.beginCreateOrUpdateSourceControl(resourceGroupName,name,siteSourceControl,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsCreateOrUpdateSourceControlResponse>;
  }

  /**
   * Description for Deletes the source control configuration of an app.
   * @summary Deletes the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSourceControl(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  deleteSourceControl(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSourceControl(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSourceControl(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteSourceControlOperationSpec,
      callback);
  }

  /**
   * Description for Updates the source control configuration of an app.
   * @summary Updates the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateSourceControlResponse>
   */
  updateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSourceControlResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param callback The callback
   */
  updateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  updateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSourceControl>, callback?: msRest.ServiceCallback<Models.SiteSourceControl>): Promise<Models.WebAppsUpdateSourceControlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteSourceControl,
        options
      },
      updateSourceControlOperationSpec,
      callback) as Promise<Models.WebAppsUpdateSourceControlResponse>;
  }

  /**
   * Description for Starts an app (or deployment slot, if specified).
   * @summary Starts an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  start(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  start(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  start(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  start(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      startOperationSpec,
      callback);
  }

  /**
   * Description for Start capturing network packets for the site.
   * @summary Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsStartNetworkTraceResponse>
   */
  startNetworkTrace(resourceGroupName: string, name: string, options?: Models.WebAppsStartNetworkTraceOptionalParams): Promise<Models.WebAppsStartNetworkTraceResponse> {
    return this.beginStartNetworkTrace(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebAppsStartNetworkTraceResponse>;
  }

  /**
   * Description for Stops an app (or deployment slot, if specified).
   * @summary Stops an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stop(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  stop(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  stop(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stop(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      stopOperationSpec,
      callback);
  }

  /**
   * Description for Stop ongoing capturing network packets for the site.
   * @summary Stop ongoing capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stopNetworkTrace(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param callback The callback
   */
  stopNetworkTrace(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  stopNetworkTrace(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stopNetworkTrace(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      stopNetworkTraceOperationSpec,
      callback);
  }

  /**
   * Description for Sync web app repository.
   * @summary Sync web app repository.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  syncRepository(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param callback The callback
   */
  syncRepository(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  syncRepository(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  syncRepository(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      syncRepositoryOperationSpec,
      callback);
  }

  /**
   * Description for Syncs function trigger metadata to the management database
   * @summary Syncs function trigger metadata to the management database
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  syncFunctionTriggers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  syncFunctionTriggers(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  syncFunctionTriggers(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  syncFunctionTriggers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      syncFunctionTriggersOperationSpec,
      callback);
  }

  /**
   * Description for List triggered web jobs for an app, or a deployment slot.
   * @summary List triggered web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListTriggeredWebJobsResponse>
   */
  listTriggeredWebJobs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param callback The callback
   */
  listTriggeredWebJobs(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredWebJobs(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
  listTriggeredWebJobs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredWebJobCollection>, callback?: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): Promise<Models.WebAppsListTriggeredWebJobsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listTriggeredWebJobsOperationSpec,
      callback) as Promise<Models.WebAppsListTriggeredWebJobsResponse>;
  }

  /**
   * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
   * @summary Gets a triggered web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetTriggeredWebJobResponse>
   */
  getTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetTriggeredWebJobResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param callback The callback
   */
  getTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<Models.TriggeredWebJob>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJob>): void;
  getTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredWebJob>, callback?: msRest.ServiceCallback<Models.TriggeredWebJob>): Promise<Models.WebAppsGetTriggeredWebJobResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        options
      },
      getTriggeredWebJobOperationSpec,
      callback) as Promise<Models.WebAppsGetTriggeredWebJobResponse>;
  }

  /**
   * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
   * @summary Delete a triggered web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param callback The callback
   */
  deleteTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        options
      },
      deleteTriggeredWebJobOperationSpec,
      callback);
  }

  /**
   * Description for List a triggered web job's history for an app, or a deployment slot.
   * @summary List a triggered web job's history for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListTriggeredWebJobHistoryResponse>
   */
  listTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobHistoryResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param callback The callback
   */
  listTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
  listTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>, callback?: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): Promise<Models.WebAppsListTriggeredWebJobHistoryResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        options
      },
      listTriggeredWebJobHistoryOperationSpec,
      callback) as Promise<Models.WebAppsListTriggeredWebJobHistoryResponse>;
  }

  /**
   * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
   * @summary Gets a triggered web job's history by its ID for an app, , or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param id History ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetTriggeredWebJobHistoryResponse>
   */
  getTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetTriggeredWebJobHistoryResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param id History ID.
   * @param callback The callback
   */
  getTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, id: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistory>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param id History ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistory>): void;
  getTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredJobHistory>, callback?: msRest.ServiceCallback<Models.TriggeredJobHistory>): Promise<Models.WebAppsGetTriggeredWebJobHistoryResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        id,
        options
      },
      getTriggeredWebJobHistoryOperationSpec,
      callback) as Promise<Models.WebAppsGetTriggeredWebJobHistoryResponse>;
  }

  /**
   * Description for Run a triggered web job for an app, or a deployment slot.
   * @summary Run a triggered web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  runTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param callback The callback
   */
  runTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The optional parameters
   * @param callback The callback
   */
  runTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  runTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        options
      },
      runTriggeredWebJobOperationSpec,
      callback);
  }

  /**
   * Description for Gets the quota usage information of an app (or deployment slot, if specified).
   * @summary Gets the quota usage information of an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListUsagesResponse>
   */
  listUsages(resourceGroupName: string, name: string, options?: Models.WebAppsListUsagesOptionalParams): Promise<Models.WebAppsListUsagesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listUsages(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsages(resourceGroupName: string, name: string, options: Models.WebAppsListUsagesOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  listUsages(resourceGroupName: string, name: string, options?: Models.WebAppsListUsagesOptionalParams | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.WebAppsListUsagesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listUsagesOperationSpec,
      callback) as Promise<Models.WebAppsListUsagesResponse>;
  }

  /**
   * Description for Gets the virtual networks the app (or deployment slot) is connected to.
   * @summary Gets the virtual networks the app (or deployment slot) is connected to.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListVnetConnectionsResponse>
   */
  listVnetConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListVnetConnectionsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param callback The callback
   */
  listVnetConnections(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVnetConnections(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  listVnetConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo[]>, callback?: msRest.ServiceCallback<Models.VnetInfo[]>): Promise<Models.WebAppsListVnetConnectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listVnetConnectionsOperationSpec,
      callback) as Promise<Models.WebAppsListVnetConnectionsResponse>;
  }

  /**
   * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
   * @summary Gets a virtual network the app (or deployment slot) is connected to by name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetVnetConnectionResponse>
   */
  getVnetConnection(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetVnetConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param callback The callback
   */
  getVnetConnection(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param options The optional parameters
   * @param callback The callback
   */
  getVnetConnection(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  getVnetConnection(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.WebAppsGetVnetConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        options
      },
      getVnetConnectionOperationSpec,
      callback) as Promise<Models.WebAppsGetVnetConnectionResponse>;
  }

  /**
   * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the
   * connection properties (PATCH).
   * @summary Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
   * properties (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateVnetConnectionResponse>
   */
  createOrUpdateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateVnetConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param callback The callback
   */
  createOrUpdateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  createOrUpdateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.WebAppsCreateOrUpdateVnetConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        connectionEnvelope,
        options
      },
      createOrUpdateVnetConnectionOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateVnetConnectionResponse>;
  }

  /**
   * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
   * @summary Deletes a connection from an app (or deployment slot to a named virtual network.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteVnetConnection(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param callback The callback
   */
  deleteVnetConnection(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteVnetConnection(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteVnetConnection(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        options
      },
      deleteVnetConnectionOperationSpec,
      callback);
  }

  /**
   * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the
   * connection properties (PATCH).
   * @summary Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
   * properties (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateVnetConnectionResponse>
   */
  updateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateVnetConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param callback The callback
   */
  updateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  updateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.WebAppsUpdateVnetConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        connectionEnvelope,
        options
      },
      updateVnetConnectionOperationSpec,
      callback) as Promise<Models.WebAppsUpdateVnetConnectionResponse>;
  }

  /**
   * Description for Gets an app's Virtual Network gateway.
   * @summary Gets an app's Virtual Network gateway.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetVnetConnectionGatewayResponse>
   */
  getVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetVnetConnectionGatewayResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param callback The callback
   */
  getVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param options The optional parameters
   * @param callback The callback
   */
  getVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  getVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.WebAppsGetVnetConnectionGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        options
      },
      getVnetConnectionGatewayOperationSpec,
      callback) as Promise<Models.WebAppsGetVnetConnectionGatewayResponse>;
  }

  /**
   * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewayResponse>
   */
  createOrUpdateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewayResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param callback The callback
   */
  createOrUpdateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  createOrUpdateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        options
      },
      createOrUpdateVnetConnectionGatewayOperationSpec,
      callback) as Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewayResponse>;
  }

  /**
   * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsUpdateVnetConnectionGatewayResponse>
   */
  updateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateVnetConnectionGatewayResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param callback The callback
   */
  updateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  updateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.WebAppsUpdateVnetConnectionGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        options
      },
      updateVnetConnectionGatewayOperationSpec,
      callback) as Promise<Models.WebAppsUpdateVnetConnectionGatewayResponse>;
  }

  /**
   * Description for List webjobs for an app, or a deployment slot.
   * @summary List webjobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListWebJobsResponse>
   */
  listWebJobs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListWebJobsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param callback The callback
   */
  listWebJobs(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listWebJobs(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
  listWebJobs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebJobCollection>, callback?: msRest.ServiceCallback<Models.WebJobCollection>): Promise<Models.WebAppsListWebJobsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listWebJobsOperationSpec,
      callback) as Promise<Models.WebAppsListWebJobsResponse>;
  }

  /**
   * Description for Get webjob information for an app, or a deployment slot.
   * @summary Get webjob information for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of the web job.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsGetWebJobResponse>
   */
  getWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetWebJobResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of the web job.
   * @param callback The callback
   */
  getWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<Models.WebJob>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of the web job.
   * @param options The optional parameters
   * @param callback The callback
   */
  getWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJob>): void;
  getWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebJob>, callback?: msRest.ServiceCallback<Models.WebJob>): Promise<Models.WebAppsGetWebJobResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        options
      },
      getWebJobOperationSpec,
      callback) as Promise<Models.WebAppsGetWebJobResponse>;
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates
   * an existing app.
   * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot,
   * use the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, name: string, siteEnvelope: Models.Site, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        siteEnvelope,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Description for Restores a specific backup to another app (or deployment slot, if specified).
   * @summary Restores a specific backup to another app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param request Information on restore request .
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestore(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        backupId,
        request,
        options
      },
      beginRestoreOperationSpec,
      options);
  }

  /**
   * Description for Gets the Git/FTP publishing credentials of an app.
   * @summary Gets the Git/FTP publishing credentials of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginListPublishingCredentials(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginListPublishingCredentialsOperationSpec,
      options);
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @summary Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param mSDeploy Details of MSDeploy operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateMSDeployOperation(resourceGroupName: string, name: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        mSDeploy,
        options
      },
      beginCreateMSDeployOperationOperationSpec,
      options);
  }

  /**
   * Description for Create function for web site, or a deployment slot.
   * @summary Create function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param functionEnvelope Function details.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateFunction(resourceGroupName: string, name: string, functionName: string, functionEnvelope: Models.FunctionEnvelope, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        functionName,
        functionEnvelope,
        options
      },
      beginCreateFunctionOperationSpec,
      options);
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @summary Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param mSDeploy Details of MSDeploy operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateInstanceMSDeployOperation(resourceGroupName: string, name: string, instanceId: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        instanceId,
        mSDeploy,
        options
      },
      beginCreateInstanceMSDeployOperationOperationSpec,
      options);
  }

  /**
   * Description for Restores a web app.
   * @summary Restores a web app.
   * @param subscriptionName Azure subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param migrationOptions Migration migrationOptions.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateStorage(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: Models.StorageMigrationOptions, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        subscriptionName,
        resourceGroupName,
        name,
        migrationOptions,
        options
      },
      beginMigrateStorageOperationSpec,
      options);
  }

  /**
   * Description for Migrates a local (in-app) MySql database to a remote MySql database.
   * @summary Migrates a local (in-app) MySql database to a remote MySql database.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param migrationRequestEnvelope MySql migration options.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateMySql(resourceGroupName: string, name: string, migrationRequestEnvelope: Models.MigrateMySqlRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        migrationRequestEnvelope,
        options
      },
      beginMigrateMySqlOperationSpec,
      options);
  }

  /**
   * Description for Start capturing network packets for the site.
   * @summary Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStartWebSiteNetworkTraceOperation(resourceGroupName: string, name: string, options?: Models.WebAppsBeginStartWebSiteNetworkTraceOperationOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginStartWebSiteNetworkTraceOperationOperationSpec,
      options);
  }

  /**
   * Description for Restores an app from a backup blob in Azure Storage.
   * @summary Restores an app from a backup blob in Azure Storage.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Information on restore request .
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestoreFromBackupBlob(resourceGroupName: string, name: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        request,
        options
      },
      beginRestoreFromBackupBlobOperationSpec,
      options);
  }

  /**
   * Description for Restores a deleted web app to this web app.
   * @summary Restores a deleted web app to this web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Deleted web app restore information.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestoreFromDeletedApp(resourceGroupName: string, name: string, restoreRequest: Models.DeletedAppRestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        restoreRequest,
        options
      },
      beginRestoreFromDeletedAppOperationSpec,
      options);
  }

  /**
   * Description for Restores a web app from a snapshot.
   * @summary Restores a web app from a snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
   * GetDeletedSites or GetSiteSnapshots API.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestoreSnapshot(resourceGroupName: string, name: string, restoreRequest: Models.SnapshotRestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        restoreRequest,
        options
      },
      beginRestoreSnapshotOperationSpec,
      options);
  }

  /**
   * Description for Install site extension on a web site, or a deployment slot.
   * @summary Install site extension on a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginInstallSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        siteExtensionId,
        options
      },
      beginInstallSiteExtensionOperationSpec,
      options);
  }

  /**
   * Description for Copies a deployment slot to another deployment slot of an app.
   * @summary Copies a deployment slot to another deployment slot of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param copySlotEntity JSON object that contains the target slot name and site config properties
   * to override the source slot config. See example.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCopyProductionSlot(resourceGroupName: string, name: string, copySlotEntity: Models.CsmCopySlotEntity, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        copySlotEntity,
        options
      },
      beginCopyProductionSlotOperationSpec,
      options);
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates
   * an existing app.
   * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot,
   * use the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param slot Name of the deployment slot to create or update. By default, this API attempts to
   * create or modify the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.Site, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        siteEnvelope,
        slot,
        options
      },
      beginCreateOrUpdateSlotOperationSpec,
      options);
  }

  /**
   * Description for Restores a specific backup to another app (or deployment slot, if specified).
   * @summary Restores a specific backup to another app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param request Information on restore request .
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
   * backup of the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestoreSlot(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        backupId,
        request,
        slot,
        options
      },
      beginRestoreSlotOperationSpec,
      options);
  }

  /**
   * Description for Gets the Git/FTP publishing credentials of an app.
   * @summary Gets the Git/FTP publishing credentials of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   * publishing credentials for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginListPublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      beginListPublishingCredentialsSlotOperationSpec,
      options);
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @summary Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param mSDeploy Details of MSDeploy operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        slot,
        mSDeploy,
        options
      },
      beginCreateMSDeployOperationSlotOperationSpec,
      options);
  }

  /**
   * Description for Create function for web site, or a deployment slot.
   * @summary Create function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param functionEnvelope Function details.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: Models.FunctionEnvelope, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        functionName,
        slot,
        functionEnvelope,
        options
      },
      beginCreateInstanceFunctionSlotOperationSpec,
      options);
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @summary Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param mSDeploy Details of MSDeploy operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateInstanceMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        slot,
        instanceId,
        mSDeploy,
        options
      },
      beginCreateInstanceMSDeployOperationSlotOperationSpec,
      options);
  }

  /**
   * Description for Start capturing network packets for the site.
   * @summary Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStartWebSiteNetworkTraceOperationSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsBeginStartWebSiteNetworkTraceOperationSlotOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      beginStartWebSiteNetworkTraceOperationSlotOperationSpec,
      options);
  }

  /**
   * Description for Restores an app from a backup blob in Azure Storage.
   * @summary Restores an app from a backup blob in Azure Storage.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Information on restore request .
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
   * backup of the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestoreFromBackupBlobSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        request,
        slot,
        options
      },
      beginRestoreFromBackupBlobSlotOperationSpec,
      options);
  }

  /**
   * Description for Restores a deleted web app to this web app.
   * @summary Restores a deleted web app to this web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Deleted web app restore information.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestoreFromDeletedAppSlot(resourceGroupName: string, name: string, restoreRequest: Models.DeletedAppRestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        restoreRequest,
        slot,
        options
      },
      beginRestoreFromDeletedAppSlotOperationSpec,
      options);
  }

  /**
   * Description for Restores a web app from a snapshot.
   * @summary Restores a web app from a snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
   * GetDeletedSites or GetSiteSnapshots API.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestoreSnapshotSlot(resourceGroupName: string, name: string, restoreRequest: Models.SnapshotRestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        restoreRequest,
        slot,
        options
      },
      beginRestoreSnapshotSlotOperationSpec,
      options);
  }

  /**
   * Description for Install site extension on a web site, or a deployment slot.
   * @summary Install site extension on a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   * slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginInstallSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        siteExtensionId,
        slot,
        options
      },
      beginInstallSiteExtensionSlotOperationSpec,
      options);
  }

  /**
   * Description for Copies a deployment slot to another deployment slot of an app.
   * @summary Copies a deployment slot to another deployment slot of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param copySlotEntity JSON object that contains the target slot name and site config properties
   * to override the source slot config. See example.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
   * the source slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCopySlotSlot(resourceGroupName: string, name: string, copySlotEntity: Models.CsmCopySlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        copySlotEntity,
        slot,
        options
      },
      beginCopySlotSlotOperationSpec,
      options);
  }

  /**
   * Description for Swaps two deployment slots of an app.
   * @summary Swaps two deployment slots of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
   * the source slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSwapSlotSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        slot,
        options
      },
      beginSwapSlotSlotOperationSpec,
      options);
  }

  /**
   * Description for Updates the source control configuration of an app.
   * @summary Updates the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   * source control configuration for the production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        siteSourceControl,
        slot,
        options
      },
      beginCreateOrUpdateSourceControlSlotOperationSpec,
      options);
  }

  /**
   * Description for Start capturing network packets for the site.
   * @summary Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStartNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsBeginStartNetworkTraceSlotOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      beginStartNetworkTraceSlotOperationSpec,
      options);
  }

  /**
   * Description for Swaps two deployment slots of an app.
   * @summary Swaps two deployment slots of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSwapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        options
      },
      beginSwapSlotWithProductionOperationSpec,
      options);
  }

  /**
   * Description for Updates the source control configuration of an app.
   * @summary Updates the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        siteSourceControl,
        options
      },
      beginCreateOrUpdateSourceControlOperationSpec,
      options);
  }

  /**
   * Description for Start capturing network packets for the site.
   * @summary Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStartNetworkTrace(resourceGroupName: string, name: string, options?: Models.WebAppsBeginStartNetworkTraceOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginStartNetworkTraceOperationSpec,
      options);
  }

  /**
   * Description for Get all apps for a subscription.
   * @summary Get all apps for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebAppCollection>, callback?: msRest.ServiceCallback<Models.WebAppCollection>): Promise<Models.WebAppsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.WebAppsListNextResponse>;
  }

  /**
   * Description for Gets all web, mobile, and API apps in the specified resource group.
   * @summary Gets all web, mobile, and API apps in the specified resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebAppCollection>, callback?: msRest.ServiceCallback<Models.WebAppCollection>): Promise<Models.WebAppsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.WebAppsListByResourceGroupNextResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @summary Gets existing backups of an app.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListBackupsNextResponse>
   */
  listBackupsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBackupsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBackupsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listBackupsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.WebAppsListBackupsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBackupsNextOperationSpec,
      callback) as Promise<Models.WebAppsListBackupsNextResponse>;
  }

  /**
   * Description for List the configurations of an app
   * @summary List the configurations of an app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListConfigurationsNextResponse>
   */
  listConfigurationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listConfigurationsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConfigurationsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
  listConfigurationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResourceCollection>, callback?: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): Promise<Models.WebAppsListConfigurationsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listConfigurationsNextOperationSpec,
      callback) as Promise<Models.WebAppsListConfigurationsNextResponse>;
  }

  /**
   * Description for Gets a list of web app configuration snapshots identifiers. Each element of the
   * list contains a timestamp and the ID of the snapshot.
   * @summary Gets a list of web app configuration snapshots identifiers. Each element of the list
   * contains a timestamp and the ID of the snapshot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListConfigurationSnapshotInfoNextResponse>
   */
  listConfigurationSnapshotInfoNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationSnapshotInfoNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listConfigurationSnapshotInfoNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConfigurationSnapshotInfoNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
  listConfigurationSnapshotInfoNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>, callback?: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): Promise<Models.WebAppsListConfigurationSnapshotInfoNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listConfigurationSnapshotInfoNextOperationSpec,
      callback) as Promise<Models.WebAppsListConfigurationSnapshotInfoNextResponse>;
  }

  /**
   * Description for List continuous web jobs for an app, or a deployment slot.
   * @summary List continuous web jobs for an app, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListContinuousWebJobsNextResponse>
   */
  listContinuousWebJobsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListContinuousWebJobsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listContinuousWebJobsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listContinuousWebJobsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
  listContinuousWebJobsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContinuousWebJobCollection>, callback?: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): Promise<Models.WebAppsListContinuousWebJobsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listContinuousWebJobsNextOperationSpec,
      callback) as Promise<Models.WebAppsListContinuousWebJobsNextResponse>;
  }

  /**
   * Description for List deployments for an app, or a deployment slot.
   * @summary List deployments for an app, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListDeploymentsNextResponse>
   */
  listDeploymentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listDeploymentsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  listDeploymentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.WebAppsListDeploymentsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listDeploymentsNextOperationSpec,
      callback) as Promise<Models.WebAppsListDeploymentsNextResponse>;
  }

  /**
   * Description for Lists ownership identifiers for domain associated with web app.
   * @summary Lists ownership identifiers for domain associated with web app.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListDomainOwnershipIdentifiersNextResponse>
   */
  listDomainOwnershipIdentifiersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDomainOwnershipIdentifiersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listDomainOwnershipIdentifiersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDomainOwnershipIdentifiersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  listDomainOwnershipIdentifiersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IdentifierCollection>, callback?: msRest.ServiceCallback<Models.IdentifierCollection>): Promise<Models.WebAppsListDomainOwnershipIdentifiersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listDomainOwnershipIdentifiersNextOperationSpec,
      callback) as Promise<Models.WebAppsListDomainOwnershipIdentifiersNextResponse>;
  }

  /**
   * Description for List the functions for a web site, or a deployment slot.
   * @summary List the functions for a web site, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListFunctionsNextResponse>
   */
  listFunctionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListFunctionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listFunctionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFunctionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
  listFunctionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionEnvelopeCollection>, callback?: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): Promise<Models.WebAppsListFunctionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listFunctionsNextOperationSpec,
      callback) as Promise<Models.WebAppsListFunctionsNextResponse>;
  }

  /**
   * Description for Get hostname bindings for an app or a deployment slot.
   * @summary Get hostname bindings for an app or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListHostNameBindingsNextResponse>
   */
  listHostNameBindingsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHostNameBindingsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listHostNameBindingsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHostNameBindingsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  listHostNameBindingsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBindingCollection>, callback?: msRest.ServiceCallback<Models.HostNameBindingCollection>): Promise<Models.WebAppsListHostNameBindingsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listHostNameBindingsNextOperationSpec,
      callback) as Promise<Models.WebAppsListHostNameBindingsNextResponse>;
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @summary Gets all scale-out instances of an app.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceIdentifiersNextResponse>
   */
  listInstanceIdentifiersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceIdentifiersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInstanceIdentifiersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceIdentifiersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
  listInstanceIdentifiersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebAppInstanceCollection>, callback?: msRest.ServiceCallback<Models.WebAppInstanceCollection>): Promise<Models.WebAppsListInstanceIdentifiersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInstanceIdentifiersNextOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceIdentifiersNextResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @summary Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessesNextResponse>
   */
  listInstanceProcessesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInstanceProcessesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  listInstanceProcessesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessInfoCollection>): Promise<Models.WebAppsListInstanceProcessesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInstanceProcessesNextOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessesNextResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out
   * instance in a web site.
   * @summary List module information for a process by its ID for a specific scaled-out instance in a
   * web site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessModulesNextResponse>
   */
  listInstanceProcessModulesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessModulesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInstanceProcessModulesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessModulesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  listInstanceProcessModulesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): Promise<Models.WebAppsListInstanceProcessModulesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInstanceProcessModulesNextOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessModulesNextResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessThreadsNextResponse>
   */
  listInstanceProcessThreadsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessThreadsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInstanceProcessThreadsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessThreadsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  listInstanceProcessThreadsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessThreadInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): Promise<Models.WebAppsListInstanceProcessThreadsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInstanceProcessThreadsNextOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessThreadsNextResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @summary Gets existing backups of an app.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSiteBackupsNextResponse>
   */
  listSiteBackupsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteBackupsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteBackupsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteBackupsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listSiteBackupsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.WebAppsListSiteBackupsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteBackupsNextOperationSpec,
      callback) as Promise<Models.WebAppsListSiteBackupsNextResponse>;
  }

  /**
   * Description for Gets perfmon counters for web app.
   * @summary Gets perfmon counters for web app.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPerfMonCountersNextResponse>
   */
  listPerfMonCountersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPerfMonCountersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listPerfMonCountersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPerfMonCountersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
  listPerfMonCountersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PerfMonCounterCollection>, callback?: msRest.ServiceCallback<Models.PerfMonCounterCollection>): Promise<Models.WebAppsListPerfMonCountersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listPerfMonCountersNextOperationSpec,
      callback) as Promise<Models.WebAppsListPerfMonCountersNextResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @summary Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessesNextResponse>
   */
  listProcessesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listProcessesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  listProcessesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessInfoCollection>): Promise<Models.WebAppsListProcessesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listProcessesNextOperationSpec,
      callback) as Promise<Models.WebAppsListProcessesNextResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out
   * instance in a web site.
   * @summary List module information for a process by its ID for a specific scaled-out instance in a
   * web site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessModulesNextResponse>
   */
  listProcessModulesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessModulesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listProcessModulesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessModulesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  listProcessModulesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): Promise<Models.WebAppsListProcessModulesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listProcessModulesNextOperationSpec,
      callback) as Promise<Models.WebAppsListProcessModulesNextResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessThreadsNextResponse>
   */
  listProcessThreadsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessThreadsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listProcessThreadsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessThreadsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  listProcessThreadsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessThreadInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): Promise<Models.WebAppsListProcessThreadsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listProcessThreadsNextOperationSpec,
      callback) as Promise<Models.WebAppsListProcessThreadsNextResponse>;
  }

  /**
   * Description for Get public certificates for an app or a deployment slot.
   * @summary Get public certificates for an app or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPublicCertificatesNextResponse>
   */
  listPublicCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublicCertificatesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listPublicCertificatesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPublicCertificatesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
  listPublicCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PublicCertificateCollection>, callback?: msRest.ServiceCallback<Models.PublicCertificateCollection>): Promise<Models.WebAppsListPublicCertificatesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listPublicCertificatesNextOperationSpec,
      callback) as Promise<Models.WebAppsListPublicCertificatesNextResponse>;
  }

  /**
   * Description for Get list of siteextensions for a web site, or a deployment slot.
   * @summary Get list of siteextensions for a web site, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSiteExtensionsNextResponse>
   */
  listSiteExtensionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteExtensionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteExtensionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteExtensionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
  listSiteExtensionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteExtensionInfoCollection>, callback?: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): Promise<Models.WebAppsListSiteExtensionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteExtensionsNextOperationSpec,
      callback) as Promise<Models.WebAppsListSiteExtensionsNextResponse>;
  }

  /**
   * Description for Gets an app's deployment slots.
   * @summary Gets an app's deployment slots.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSlotsNextResponse>
   */
  listSlotsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSlotsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSlotsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  listSlotsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebAppCollection>, callback?: msRest.ServiceCallback<Models.WebAppCollection>): Promise<Models.WebAppsListSlotsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSlotsNextOperationSpec,
      callback) as Promise<Models.WebAppsListSlotsNextResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @summary Gets existing backups of an app.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListBackupsSlotNextResponse>
   */
  listBackupsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBackupsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBackupsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listBackupsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.WebAppsListBackupsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBackupsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListBackupsSlotNextResponse>;
  }

  /**
   * Description for List the configurations of an app
   * @summary List the configurations of an app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListConfigurationsSlotNextResponse>
   */
  listConfigurationsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listConfigurationsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConfigurationsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
  listConfigurationsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigResourceCollection>, callback?: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): Promise<Models.WebAppsListConfigurationsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listConfigurationsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListConfigurationsSlotNextResponse>;
  }

  /**
   * Description for Gets a list of web app configuration snapshots identifiers. Each element of the
   * list contains a timestamp and the ID of the snapshot.
   * @summary Gets a list of web app configuration snapshots identifiers. Each element of the list
   * contains a timestamp and the ID of the snapshot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListConfigurationSnapshotInfoSlotNextResponse>
   */
  listConfigurationSnapshotInfoSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationSnapshotInfoSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listConfigurationSnapshotInfoSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConfigurationSnapshotInfoSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
  listConfigurationSnapshotInfoSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>, callback?: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): Promise<Models.WebAppsListConfigurationSnapshotInfoSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listConfigurationSnapshotInfoSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListConfigurationSnapshotInfoSlotNextResponse>;
  }

  /**
   * Description for List continuous web jobs for an app, or a deployment slot.
   * @summary List continuous web jobs for an app, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListContinuousWebJobsSlotNextResponse>
   */
  listContinuousWebJobsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListContinuousWebJobsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listContinuousWebJobsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listContinuousWebJobsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
  listContinuousWebJobsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContinuousWebJobCollection>, callback?: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): Promise<Models.WebAppsListContinuousWebJobsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listContinuousWebJobsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListContinuousWebJobsSlotNextResponse>;
  }

  /**
   * Description for List deployments for an app, or a deployment slot.
   * @summary List deployments for an app, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListDeploymentsSlotNextResponse>
   */
  listDeploymentsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listDeploymentsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  listDeploymentsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.WebAppsListDeploymentsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listDeploymentsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListDeploymentsSlotNextResponse>;
  }

  /**
   * Description for Lists ownership identifiers for domain associated with web app.
   * @summary Lists ownership identifiers for domain associated with web app.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotNextResponse>
   */
  listDomainOwnershipIdentifiersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listDomainOwnershipIdentifiersSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDomainOwnershipIdentifiersSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  listDomainOwnershipIdentifiersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IdentifierCollection>, callback?: msRest.ServiceCallback<Models.IdentifierCollection>): Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listDomainOwnershipIdentifiersSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotNextResponse>;
  }

  /**
   * Description for List the functions for a web site, or a deployment slot.
   * @summary List the functions for a web site, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceFunctionsSlotNextResponse>
   */
  listInstanceFunctionsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceFunctionsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInstanceFunctionsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceFunctionsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
  listInstanceFunctionsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionEnvelopeCollection>, callback?: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): Promise<Models.WebAppsListInstanceFunctionsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInstanceFunctionsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceFunctionsSlotNextResponse>;
  }

  /**
   * Description for Get hostname bindings for an app or a deployment slot.
   * @summary Get hostname bindings for an app or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListHostNameBindingsSlotNextResponse>
   */
  listHostNameBindingsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHostNameBindingsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listHostNameBindingsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHostNameBindingsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  listHostNameBindingsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBindingCollection>, callback?: msRest.ServiceCallback<Models.HostNameBindingCollection>): Promise<Models.WebAppsListHostNameBindingsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listHostNameBindingsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListHostNameBindingsSlotNextResponse>;
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @summary Gets all scale-out instances of an app.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceIdentifiersSlotNextResponse>
   */
  listInstanceIdentifiersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceIdentifiersSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInstanceIdentifiersSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceIdentifiersSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
  listInstanceIdentifiersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebAppInstanceCollection>, callback?: msRest.ServiceCallback<Models.WebAppInstanceCollection>): Promise<Models.WebAppsListInstanceIdentifiersSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInstanceIdentifiersSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceIdentifiersSlotNextResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @summary Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessesSlotNextResponse>
   */
  listInstanceProcessesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInstanceProcessesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  listInstanceProcessesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessInfoCollection>): Promise<Models.WebAppsListInstanceProcessesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInstanceProcessesSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessesSlotNextResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out
   * instance in a web site.
   * @summary List module information for a process by its ID for a specific scaled-out instance in a
   * web site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessModulesSlotNextResponse>
   */
  listInstanceProcessModulesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessModulesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInstanceProcessModulesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessModulesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  listInstanceProcessModulesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): Promise<Models.WebAppsListInstanceProcessModulesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInstanceProcessModulesSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessModulesSlotNextResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListInstanceProcessThreadsSlotNextResponse>
   */
  listInstanceProcessThreadsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessThreadsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInstanceProcessThreadsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInstanceProcessThreadsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  listInstanceProcessThreadsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessThreadInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): Promise<Models.WebAppsListInstanceProcessThreadsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInstanceProcessThreadsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListInstanceProcessThreadsSlotNextResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @summary Gets existing backups of an app.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSiteBackupsSlotNextResponse>
   */
  listSiteBackupsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteBackupsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteBackupsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteBackupsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listSiteBackupsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.WebAppsListSiteBackupsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteBackupsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListSiteBackupsSlotNextResponse>;
  }

  /**
   * Description for Gets perfmon counters for web app.
   * @summary Gets perfmon counters for web app.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPerfMonCountersSlotNextResponse>
   */
  listPerfMonCountersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPerfMonCountersSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listPerfMonCountersSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPerfMonCountersSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
  listPerfMonCountersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PerfMonCounterCollection>, callback?: msRest.ServiceCallback<Models.PerfMonCounterCollection>): Promise<Models.WebAppsListPerfMonCountersSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listPerfMonCountersSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListPerfMonCountersSlotNextResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @summary Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessesSlotNextResponse>
   */
  listProcessesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listProcessesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
  listProcessesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessInfoCollection>): Promise<Models.WebAppsListProcessesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listProcessesSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListProcessesSlotNextResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out
   * instance in a web site.
   * @summary List module information for a process by its ID for a specific scaled-out instance in a
   * web site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessModulesSlotNextResponse>
   */
  listProcessModulesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessModulesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listProcessModulesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessModulesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
  listProcessModulesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessModuleInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): Promise<Models.WebAppsListProcessModulesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listProcessModulesSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListProcessModulesSlotNextResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a
   * web site.
   * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListProcessThreadsSlotNextResponse>
   */
  listProcessThreadsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessThreadsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listProcessThreadsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProcessThreadsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
  listProcessThreadsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessThreadInfoCollection>, callback?: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): Promise<Models.WebAppsListProcessThreadsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listProcessThreadsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListProcessThreadsSlotNextResponse>;
  }

  /**
   * Description for Get public certificates for an app or a deployment slot.
   * @summary Get public certificates for an app or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListPublicCertificatesSlotNextResponse>
   */
  listPublicCertificatesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublicCertificatesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listPublicCertificatesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPublicCertificatesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
  listPublicCertificatesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PublicCertificateCollection>, callback?: msRest.ServiceCallback<Models.PublicCertificateCollection>): Promise<Models.WebAppsListPublicCertificatesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listPublicCertificatesSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListPublicCertificatesSlotNextResponse>;
  }

  /**
   * Description for Get list of siteextensions for a web site, or a deployment slot.
   * @summary Get list of siteextensions for a web site, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSiteExtensionsSlotNextResponse>
   */
  listSiteExtensionsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteExtensionsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteExtensionsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteExtensionsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
  listSiteExtensionsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteExtensionInfoCollection>, callback?: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): Promise<Models.WebAppsListSiteExtensionsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteExtensionsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListSiteExtensionsSlotNextResponse>;
  }

  /**
   * Description for Get the difference in configuration settings between two web app slots.
   * @summary Get the difference in configuration settings between two web app slots.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSlotDifferencesSlotNextResponse>
   */
  listSlotDifferencesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotDifferencesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSlotDifferencesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSlotDifferencesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  listSlotDifferencesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotDifferenceCollection>, callback?: msRest.ServiceCallback<Models.SlotDifferenceCollection>): Promise<Models.WebAppsListSlotDifferencesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSlotDifferencesSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListSlotDifferencesSlotNextResponse>;
  }

  /**
   * Description for Returns all Snapshots to the user.
   * @summary Returns all Snapshots to the user.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSnapshotsSlotNextResponse>
   */
  listSnapshotsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSnapshotsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSnapshotsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  listSnapshotsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotCollection>, callback?: msRest.ServiceCallback<Models.SnapshotCollection>): Promise<Models.WebAppsListSnapshotsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSnapshotsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListSnapshotsSlotNextResponse>;
  }

  /**
   * Description for Returns all Snapshots to the user from DRSecondary endpoint.
   * @summary Returns all Snapshots to the user from DRSecondary endpoint.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotNextResponse>
   */
  listSnapshotsFromDRSecondarySlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSnapshotsFromDRSecondarySlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSnapshotsFromDRSecondarySlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  listSnapshotsFromDRSecondarySlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotCollection>, callback?: msRest.ServiceCallback<Models.SnapshotCollection>): Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSnapshotsFromDRSecondarySlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotNextResponse>;
  }

  /**
   * Description for List triggered web jobs for an app, or a deployment slot.
   * @summary List triggered web jobs for an app, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListTriggeredWebJobsSlotNextResponse>
   */
  listTriggeredWebJobsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listTriggeredWebJobsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredWebJobsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
  listTriggeredWebJobsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredWebJobCollection>, callback?: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): Promise<Models.WebAppsListTriggeredWebJobsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listTriggeredWebJobsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListTriggeredWebJobsSlotNextResponse>;
  }

  /**
   * Description for List a triggered web job's history for an app, or a deployment slot.
   * @summary List a triggered web job's history for an app, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListTriggeredWebJobHistorySlotNextResponse>
   */
  listTriggeredWebJobHistorySlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobHistorySlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listTriggeredWebJobHistorySlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredWebJobHistorySlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
  listTriggeredWebJobHistorySlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>, callback?: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): Promise<Models.WebAppsListTriggeredWebJobHistorySlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listTriggeredWebJobHistorySlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListTriggeredWebJobHistorySlotNextResponse>;
  }

  /**
   * Description for Gets the quota usage information of an app (or deployment slot, if specified).
   * @summary Gets the quota usage information of an app (or deployment slot, if specified).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListUsagesSlotNextResponse>
   */
  listUsagesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListUsagesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listUsagesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsagesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  listUsagesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.WebAppsListUsagesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listUsagesSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListUsagesSlotNextResponse>;
  }

  /**
   * Description for List webjobs for an app, or a deployment slot.
   * @summary List webjobs for an app, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListWebJobsSlotNextResponse>
   */
  listWebJobsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListWebJobsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listWebJobsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listWebJobsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
  listWebJobsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebJobCollection>, callback?: msRest.ServiceCallback<Models.WebJobCollection>): Promise<Models.WebAppsListWebJobsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listWebJobsSlotNextOperationSpec,
      callback) as Promise<Models.WebAppsListWebJobsSlotNextResponse>;
  }

  /**
   * Description for Get the difference in configuration settings between two web app slots.
   * @summary Get the difference in configuration settings between two web app slots.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSlotDifferencesFromProductionNextResponse>
   */
  listSlotDifferencesFromProductionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotDifferencesFromProductionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSlotDifferencesFromProductionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSlotDifferencesFromProductionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  listSlotDifferencesFromProductionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotDifferenceCollection>, callback?: msRest.ServiceCallback<Models.SlotDifferenceCollection>): Promise<Models.WebAppsListSlotDifferencesFromProductionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSlotDifferencesFromProductionNextOperationSpec,
      callback) as Promise<Models.WebAppsListSlotDifferencesFromProductionNextResponse>;
  }

  /**
   * Description for Returns all Snapshots to the user.
   * @summary Returns all Snapshots to the user.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSnapshotsNextResponse>
   */
  listSnapshotsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSnapshotsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSnapshotsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  listSnapshotsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotCollection>, callback?: msRest.ServiceCallback<Models.SnapshotCollection>): Promise<Models.WebAppsListSnapshotsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSnapshotsNextOperationSpec,
      callback) as Promise<Models.WebAppsListSnapshotsNextResponse>;
  }

  /**
   * Description for Returns all Snapshots to the user from DRSecondary endpoint.
   * @summary Returns all Snapshots to the user from DRSecondary endpoint.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListSnapshotsFromDRSecondaryNextResponse>
   */
  listSnapshotsFromDRSecondaryNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsFromDRSecondaryNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSnapshotsFromDRSecondaryNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSnapshotsFromDRSecondaryNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
  listSnapshotsFromDRSecondaryNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotCollection>, callback?: msRest.ServiceCallback<Models.SnapshotCollection>): Promise<Models.WebAppsListSnapshotsFromDRSecondaryNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSnapshotsFromDRSecondaryNextOperationSpec,
      callback) as Promise<Models.WebAppsListSnapshotsFromDRSecondaryNextResponse>;
  }

  /**
   * Description for List triggered web jobs for an app, or a deployment slot.
   * @summary List triggered web jobs for an app, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListTriggeredWebJobsNextResponse>
   */
  listTriggeredWebJobsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listTriggeredWebJobsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredWebJobsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
  listTriggeredWebJobsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredWebJobCollection>, callback?: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): Promise<Models.WebAppsListTriggeredWebJobsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listTriggeredWebJobsNextOperationSpec,
      callback) as Promise<Models.WebAppsListTriggeredWebJobsNextResponse>;
  }

  /**
   * Description for List a triggered web job's history for an app, or a deployment slot.
   * @summary List a triggered web job's history for an app, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListTriggeredWebJobHistoryNextResponse>
   */
  listTriggeredWebJobHistoryNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobHistoryNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listTriggeredWebJobHistoryNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredWebJobHistoryNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
  listTriggeredWebJobHistoryNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>, callback?: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): Promise<Models.WebAppsListTriggeredWebJobHistoryNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listTriggeredWebJobHistoryNextOperationSpec,
      callback) as Promise<Models.WebAppsListTriggeredWebJobHistoryNextResponse>;
  }

  /**
   * Description for Gets the quota usage information of an app (or deployment slot, if specified).
   * @summary Gets the quota usage information of an app (or deployment slot, if specified).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListUsagesNextResponse>
   */
  listUsagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListUsagesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listUsagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsagesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  listUsagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.WebAppsListUsagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listUsagesNextOperationSpec,
      callback) as Promise<Models.WebAppsListUsagesNextResponse>;
  }

  /**
   * Description for List webjobs for an app, or a deployment slot.
   * @summary List webjobs for an app, or a deployment slot.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebAppsListWebJobsNextResponse>
   */
  listWebJobsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListWebJobsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listWebJobsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listWebJobsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
  listWebJobsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebJobCollection>, callback?: msRest.ServiceCallback<Models.WebJobCollection>): Promise<Models.WebAppsListWebJobsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listWebJobsNextOperationSpec,
      callback) as Promise<Models.WebAppsListWebJobsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.includeSlots,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.deleteMetrics,
    Parameters.deleteEmptyServerFarm,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteEnvelope",
    mapper: {
      ...Mappers.SitePatchResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    202: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const analyzeCustomHostnameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.hostName0,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomHostnameAnalysisResult
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const applySlotConfigToProductionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const backupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listBackupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getBackupStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listBackupStatusSecretsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listConfigurationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateApplicationSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "appSettings",
    mapper: {
      ...Mappers.StringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listApplicationSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateAuthSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteAuthSettings",
    mapper: {
      ...Mappers.SiteAuthSettings,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getAuthSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateAzureStorageAccountsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "azureStorageAccounts",
    mapper: {
      ...Mappers.AzureStoragePropertyDictionaryResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listAzureStorageAccountsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateBackupConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteBackupConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getBackupConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getAppSettingsKeyVaultReferencesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/configreferences/appsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyVaultReferenceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getAppSettingKeyVaultReferenceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/configreferences/appsettings/{appSettingKey}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.appSettingKey,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyVaultReferenceResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateConnectionStringsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionStrings",
    mapper: {
      ...Mappers.ConnectionStringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listConnectionStringsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getDiagnosticLogsConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateDiagnosticLogsConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteLogsConfig",
    mapper: {
      ...Mappers.SiteLogsConfig,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "metadata",
    mapper: {
      ...Mappers.StringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateSitePushSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "pushSettings",
    mapper: {
      ...Mappers.PushSettings,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PushSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSitePushSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PushSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSlotConfigurationNamesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SlotConfigNamesResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateSlotConfigurationNamesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotConfigNames",
    mapper: {
      ...Mappers.SlotConfigNamesResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SlotConfigNamesResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteConfig",
    mapper: {
      ...Mappers.SiteConfigResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteConfig",
    mapper: {
      ...Mappers.SiteConfigResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listConfigurationSnapshotInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getConfigurationSnapshotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.snapshotId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const recoverSiteConfigurationSnapshotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.snapshotId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getWebSiteContainerLogsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getContainerLogsZipOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listContinuousWebJobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getContinuousWebJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJob
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteContinuousWebJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const startContinuousWebJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const stopContinuousWebJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listDeploymentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "deployment",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listDeploymentLogOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const discoverBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.RestoreRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RestoreRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listDomainOwnershipIdentifiersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getDomainOwnershipIdentifierOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateDomainOwnershipIdentifierOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domainOwnershipIdentifier",
    mapper: {
      ...Mappers.Identifier,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteDomainOwnershipIdentifierOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateDomainOwnershipIdentifierOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domainOwnershipIdentifier",
    mapper: {
      ...Mappers.Identifier,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getMSDeployStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getMSDeployLogOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployLog
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listFunctionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelopeCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getFunctionsAdminTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getFunctionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteFunctionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateFunctionSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.keyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "key",
    mapper: {
      ...Mappers.KeyInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyInfo
    },
    201: {
      bodyMapper: Mappers.KeyInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteFunctionSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.keyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listFunctionKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listkeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listFunctionSecretsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionSecrets
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHostKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listkeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostKeys
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSyncStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listsyncstatus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const syncFunctionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/sync",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateHostSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.keyType,
    Parameters.keyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "key",
    mapper: {
      ...Mappers.KeyInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyInfo
    },
    201: {
      bodyMapper: Mappers.KeyInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteHostSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.keyType,
    Parameters.keyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHostNameBindingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getHostNameBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateHostNameBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "hostNameBinding",
    mapper: {
      ...Mappers.HostNameBinding,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteHostNameBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getHybridConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateHybridConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.HybridConnection,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteHybridConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateHybridConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.HybridConnection,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHybridConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listRelayServiceConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getRelayServiceConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateRelayServiceConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.RelayServiceConnectionEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteRelayServiceConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateRelayServiceConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.RelayServiceConnectionEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceIdentifiersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppInstanceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebSiteInstanceStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceMsDeployStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceMSDeployLogOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployLog
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceProcessOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteInstanceProcessOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceProcessDumpOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessModulesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceProcessModuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.baseAddress,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessThreadsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const isCloneableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCloneability
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteBackupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listbackups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSyncFunctionTriggersOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionSecrets
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getMigrateMySqlStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MigrateMySqlStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSwiftVirtualNetworkConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateSwiftVirtualNetworkConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.SwiftVirtualNetwork,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteSwiftVirtualNetworkOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateSwiftVirtualNetworkConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.SwiftVirtualNetwork,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listNetworkFeaturesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.view,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFeatures
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getNetworkTraceOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const startWebSiteNetworkTraceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const stopWebSiteNetworkTraceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getNetworkTracesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getNetworkTraceOperationV2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getNetworkTracesV2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const generateNewSitePublishingPasswordOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPerfMonCountersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PerfMonCounterCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSitePhpErrorLogFlagOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SitePhpErrorLogFlag
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPremierAddOnsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getPremierAddOnOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const addPremierAddOnOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "premierAddOn",
    mapper: {
      ...Mappers.PremierAddOn,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deletePremierAddOnOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updatePremierAddOnOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "premierAddOn",
    mapper: {
      ...Mappers.PremierAddOnPatchResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getPrivateAccessOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const putPrivateAccessVnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "access",
    mapper: {
      ...Mappers.PrivateAccess,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getProcessOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteProcessOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getProcessDumpOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessModulesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getProcessModuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.baseAddress,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessThreadsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPublicCertificatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getPublicCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.publicCertificateName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificate
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdatePublicCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.publicCertificateName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "publicCertificate",
    mapper: {
      ...Mappers.PublicCertificate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificate
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deletePublicCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.publicCertificateName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPublishingProfileXmlWithSecretsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "publishingProfileOptions",
    mapper: {
      ...Mappers.CsmPublishingProfileOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const resetProductionSlotConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const restartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.softRestart,
    Parameters.synchronous,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteExtensionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSiteExtensionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteExtensionId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteSiteExtensionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteExtensionId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSlotsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.deleteMetrics,
    Parameters.deleteEmptyServerFarm,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteEnvelope",
    mapper: {
      ...Mappers.SitePatchResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    202: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const analyzeCustomHostnameSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.hostName0,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomHostnameAnalysisResult
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const applySlotConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const backupSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listBackupsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getBackupStatusSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteBackupSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listBackupStatusSecretsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listConfigurationsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateApplicationSettingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "appSettings",
    mapper: {
      ...Mappers.StringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listApplicationSettingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateAuthSettingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteAuthSettings",
    mapper: {
      ...Mappers.SiteAuthSettings,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getAuthSettingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateAzureStorageAccountsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "azureStorageAccounts",
    mapper: {
      ...Mappers.AzureStoragePropertyDictionaryResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listAzureStorageAccountsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateBackupConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteBackupConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getBackupConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateConnectionStringsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionStrings",
    mapper: {
      ...Mappers.ConnectionStringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listConnectionStringsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getDiagnosticLogsConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateDiagnosticLogsConfigSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteLogsConfig",
    mapper: {
      ...Mappers.SiteLogsConfig,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateMetadataSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "metadata",
    mapper: {
      ...Mappers.StringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listMetadataSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateSitePushSettingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "pushSettings",
    mapper: {
      ...Mappers.PushSettings,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PushSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSitePushSettingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PushSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteConfig",
    mapper: {
      ...Mappers.SiteConfigResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteConfig",
    mapper: {
      ...Mappers.SiteConfigResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listConfigurationSnapshotInfoSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getConfigurationSnapshotSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.snapshotId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const recoverSiteConfigurationSnapshotSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.snapshotId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getWebSiteContainerLogsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getContainerLogsZipSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listContinuousWebJobsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getContinuousWebJobSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJob
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteContinuousWebJobSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const startContinuousWebJobSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const stopContinuousWebJobSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listDeploymentsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getDeploymentSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createDeploymentSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "deployment",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteDeploymentSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listDeploymentLogSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const discoverBackupSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.RestoreRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RestoreRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listDomainOwnershipIdentifiersSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getDomainOwnershipIdentifierSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateDomainOwnershipIdentifierSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domainOwnershipIdentifier",
    mapper: {
      ...Mappers.Identifier,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteDomainOwnershipIdentifierSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateDomainOwnershipIdentifierSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domainOwnershipIdentifier",
    mapper: {
      ...Mappers.Identifier,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getMSDeployStatusSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getMSDeployLogSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployLog
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceFunctionsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelopeCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getFunctionsAdminTokenSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceFunctionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteInstanceFunctionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateFunctionSecretSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.keyName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "key",
    mapper: {
      ...Mappers.KeyInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyInfo
    },
    201: {
      bodyMapper: Mappers.KeyInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteFunctionSecretSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.keyName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listFunctionKeysSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listkeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listFunctionSecretsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionSecrets
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHostKeysSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listkeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostKeys
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSyncStatusSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listsyncstatus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const syncFunctionsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/sync",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateHostSecretSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.keyType,
    Parameters.keyName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "key",
    mapper: {
      ...Mappers.KeyInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyInfo
    },
    201: {
      bodyMapper: Mappers.KeyInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteHostSecretSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.keyType,
    Parameters.keyName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHostNameBindingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getHostNameBindingSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.hostName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateHostNameBindingSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName1,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "hostNameBinding",
    mapper: {
      ...Mappers.HostNameBinding,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteHostNameBindingSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.hostName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getHybridConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateHybridConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.HybridConnection,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteHybridConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateHybridConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.HybridConnection,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHybridConnectionsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listRelayServiceConnectionsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getRelayServiceConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateRelayServiceConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.RelayServiceConnectionEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteRelayServiceConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateRelayServiceConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.RelayServiceConnectionEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceIdentifiersSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppInstanceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceInfoSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebSiteInstanceStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceMsDeployStatusSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceMSDeployLogSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployLog
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceProcessSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteInstanceProcessSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceProcessDumpSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessModulesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getInstanceProcessModuleSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.baseAddress,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessThreadsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const isCloneableSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCloneability
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteBackupsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listbackups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSyncFunctionTriggersSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionSecrets
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getMigrateMySqlStatusSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MigrateMySqlStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSwiftVirtualNetworkConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateSwiftVirtualNetworkConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.SwiftVirtualNetwork,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteSwiftVirtualNetworkSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateSwiftVirtualNetworkConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.SwiftVirtualNetwork,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listNetworkFeaturesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.view,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFeatures
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getNetworkTraceOperationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const startWebSiteNetworkTraceSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const stopWebSiteNetworkTraceSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getNetworkTracesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getNetworkTraceOperationSlotV2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getNetworkTracesSlotV2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const generateNewSitePublishingPasswordSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPerfMonCountersSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PerfMonCounterCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSitePhpErrorLogFlagSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SitePhpErrorLogFlag
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPremierAddOnsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getPremierAddOnSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const addPremierAddOnSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "premierAddOn",
    mapper: {
      ...Mappers.PremierAddOn,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deletePremierAddOnSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updatePremierAddOnSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "premierAddOn",
    mapper: {
      ...Mappers.PremierAddOnPatchResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getPrivateAccessSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const putPrivateAccessVnetSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "access",
    mapper: {
      ...Mappers.PrivateAccess,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getProcessSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteProcessSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getProcessDumpSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessModulesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getProcessModuleSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.baseAddress,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessThreadsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPublicCertificatesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getPublicCertificateSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.publicCertificateName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificate
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdatePublicCertificateSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.publicCertificateName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "publicCertificate",
    mapper: {
      ...Mappers.PublicCertificate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificate
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deletePublicCertificateSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.publicCertificateName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPublishingProfileXmlWithSecretsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "publishingProfileOptions",
    mapper: {
      ...Mappers.CsmPublishingProfileOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const resetSlotConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const restartSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.softRestart,
    Parameters.synchronous,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteExtensionsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSiteExtensionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteExtensionId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteSiteExtensionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteExtensionId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSlotDifferencesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSnapshotsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSnapshotsFromDRSecondarySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSourceControlSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteSourceControlSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateSourceControlSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteSourceControl",
    mapper: {
      ...Mappers.SiteSourceControl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const startSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const stopSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const stopNetworkTraceSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const syncRepositorySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const syncFunctionTriggersSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listTriggeredWebJobsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getTriggeredWebJobSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJob
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteTriggeredWebJobSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listTriggeredWebJobHistorySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistoryCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getTriggeredWebJobHistorySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.id,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistory
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const runTriggeredWebJobSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listUsagesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listVnetConnectionsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getVnetConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateVnetConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteVnetConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateVnetConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getVnetConnectionGatewaySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateVnetConnectionGatewaySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateVnetConnectionGatewaySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listWebJobsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getWebJobSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebJob
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSlotDifferencesFromProductionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSnapshotsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSnapshotsFromDRSecondaryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteSourceControl",
    mapper: {
      ...Mappers.SiteSourceControl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const startOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const stopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const stopNetworkTraceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const syncRepositoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const syncFunctionTriggersOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listTriggeredWebJobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getTriggeredWebJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJob
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteTriggeredWebJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listTriggeredWebJobHistoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistoryCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getTriggeredWebJobHistoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.id,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistory
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const runTriggeredWebJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listUsagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listVnetConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getVnetConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateVnetConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteVnetConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateVnetConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getVnetConnectionGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateVnetConnectionGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateVnetConnectionGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listWebJobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getWebJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebJob
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteEnvelope",
    mapper: {
      ...Mappers.Site,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    202: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginRestoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.RestoreRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginListPublishingCredentialsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateMSDeployOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "mSDeploy",
    mapper: {
      ...Mappers.MSDeploy,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.MSDeployStatus
    },
    409: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateFunctionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "functionEnvelope",
    mapper: {
      ...Mappers.FunctionEnvelope,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateInstanceMSDeployOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "mSDeploy",
    mapper: {
      ...Mappers.MSDeploy,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.MSDeployStatus
    },
    409: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginMigrateStorageOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.subscriptionName,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "migrationOptions",
    mapper: {
      ...Mappers.StorageMigrationOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StorageMigrationResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginMigrateMySqlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "migrationRequestEnvelope",
    mapper: {
      ...Mappers.MigrateMySqlRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Operation
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginStartWebSiteNetworkTraceOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginRestoreFromBackupBlobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.RestoreRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginRestoreFromDeletedAppOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "restoreRequest",
    mapper: {
      ...Mappers.DeletedAppRestoreRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginRestoreSnapshotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "restoreRequest",
    mapper: {
      ...Mappers.SnapshotRestoreRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginInstallSiteExtensionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteExtensionId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    201: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    429: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCopyProductionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotcopy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "copySlotEntity",
    mapper: {
      ...Mappers.CsmCopySlotEntity,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteEnvelope",
    mapper: {
      ...Mappers.Site,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    202: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginRestoreSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.RestoreRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginListPublishingCredentialsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateMSDeployOperationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "mSDeploy",
    mapper: {
      ...Mappers.MSDeploy,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.MSDeployStatus
    },
    409: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateInstanceFunctionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "functionEnvelope",
    mapper: {
      ...Mappers.FunctionEnvelope,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateInstanceMSDeployOperationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "mSDeploy",
    mapper: {
      ...Mappers.MSDeploy,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.MSDeployStatus
    },
    409: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginStartWebSiteNetworkTraceOperationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginRestoreFromBackupBlobSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.RestoreRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginRestoreFromDeletedAppSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "restoreRequest",
    mapper: {
      ...Mappers.DeletedAppRestoreRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginRestoreSnapshotSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "restoreRequest",
    mapper: {
      ...Mappers.SnapshotRestoreRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginInstallSiteExtensionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteExtensionId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    201: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    429: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCopySlotSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotcopy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "copySlotEntity",
    mapper: {
      ...Mappers.CsmCopySlotEntity,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginSwapSlotSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateSourceControlSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteSourceControl",
    mapper: {
      ...Mappers.SiteSourceControl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginStartNetworkTraceSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginSwapSlotWithProductionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteSourceControl",
    mapper: {
      ...Mappers.SiteSourceControl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginStartNetworkTraceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTrace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listBackupsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listConfigurationsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listConfigurationSnapshotInfoNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listContinuousWebJobsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listDeploymentsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listDomainOwnershipIdentifiersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listFunctionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelopeCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHostNameBindingsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceIdentifiersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppInstanceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessModulesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessThreadsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteBackupsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPerfMonCountersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PerfMonCounterCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessModulesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessThreadsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPublicCertificatesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteExtensionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSlotsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listBackupsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listConfigurationsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listConfigurationSnapshotInfoSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listContinuousWebJobsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listDeploymentsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listDomainOwnershipIdentifiersSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceFunctionsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelopeCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHostNameBindingsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceIdentifiersSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppInstanceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessModulesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listInstanceProcessThreadsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteBackupsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPerfMonCountersSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PerfMonCounterCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessModulesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listProcessThreadsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPublicCertificatesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteExtensionsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSlotDifferencesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSnapshotsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSnapshotsFromDRSecondarySlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listTriggeredWebJobsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listTriggeredWebJobHistorySlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistoryCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listUsagesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listWebJobsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSlotDifferencesFromProductionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSnapshotsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSnapshotsFromDRSecondaryNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listTriggeredWebJobsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listTriggeredWebJobHistoryNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistoryCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listUsagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listWebJobsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};
