/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/appServicePlansMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a AppServicePlans. */
export class AppServicePlans {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a AppServicePlans.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * Description for Get all App Service plans for a subscription.
   * @summary Get all App Service plans for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListResponse>
   */
  list(options?: Models.AppServicePlansListOptionalParams): Promise<Models.AppServicePlansListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.AppServicePlansListOptionalParams, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
  list(options?: Models.AppServicePlansListOptionalParams | msRest.ServiceCallback<Models.AppServicePlanCollection>, callback?: msRest.ServiceCallback<Models.AppServicePlanCollection>): Promise<Models.AppServicePlansListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.AppServicePlansListResponse>;
  }

  /**
   * Description for Get all App Service plans in a resource group.
   * @summary Get all App Service plans in a resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServicePlanCollection>, callback?: msRest.ServiceCallback<Models.AppServicePlanCollection>): Promise<Models.AppServicePlansListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.AppServicePlansListByResourceGroupResponse>;
  }

  /**
   * Description for Get an App Service plan.
   * @summary Get an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansGetResponse>
   */
  get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param callback The callback
   */
  get(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.AppServicePlan>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServicePlan>): void;
  get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServicePlan>, callback?: msRest.ServiceCallback<Models.AppServicePlan>): Promise<Models.AppServicePlansGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AppServicePlansGetResponse>;
  }

  /**
   * Description for Creates or updates an App Service Plan.
   * @summary Creates or updates an App Service Plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param appServicePlan Details of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlan, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,name,appServicePlan,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AppServicePlansCreateOrUpdateResponse>;
  }

  /**
   * Description for Delete an App Service plan.
   * @summary Delete an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Description for Creates or updates an App Service Plan.
   * @summary Creates or updates an App Service Plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param appServicePlan Details of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansUpdateResponse>
   */
  update(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlanPatchResource, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansUpdateResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param appServicePlan Details of the App Service plan.
   * @param callback The callback
   */
  update(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlanPatchResource, callback: msRest.ServiceCallback<Models.AppServicePlan>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param appServicePlan Details of the App Service plan.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlanPatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServicePlan>): void;
  update(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlanPatchResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServicePlan>, callback?: msRest.ServiceCallback<Models.AppServicePlan>): Promise<Models.AppServicePlansUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        appServicePlan,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.AppServicePlansUpdateResponse>;
  }

  /**
   * Description for List all capabilities of an App Service plan.
   * @summary List all capabilities of an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListCapabilitiesResponse>
   */
  listCapabilities(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListCapabilitiesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param callback The callback
   */
  listCapabilities(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.Capability[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCapabilities(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Capability[]>): void;
  listCapabilities(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Capability[]>, callback?: msRest.ServiceCallback<Models.Capability[]>): Promise<Models.AppServicePlansListCapabilitiesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listCapabilitiesOperationSpec,
      callback) as Promise<Models.AppServicePlansListCapabilitiesResponse>;
  }

  /**
   * Description for Retrieve a Hybrid Connection in use in an App Service plan.
   * @summary Retrieve a Hybrid Connection in use in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Service Bus namespace.
   * @param relayName Name of the Service Bus relay.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansGetHybridConnectionResponse>
   */
  getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetHybridConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Service Bus namespace.
   * @param relayName Name of the Service Bus relay.
   * @param callback The callback
   */
  getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Service Bus namespace.
   * @param relayName Name of the Service Bus relay.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
  getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnection>, callback?: msRest.ServiceCallback<Models.HybridConnection>): Promise<Models.AppServicePlansGetHybridConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options
      },
      getHybridConnectionOperationSpec,
      callback) as Promise<Models.AppServicePlansGetHybridConnectionResponse>;
  }

  /**
   * Description for Delete a Hybrid Connection in use in an App Service plan.
   * @summary Delete a Hybrid Connection in use in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Service Bus namespace.
   * @param relayName Name of the Service Bus relay.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Service Bus namespace.
   * @param relayName Name of the Service Bus relay.
   * @param callback The callback
   */
  deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Service Bus namespace.
   * @param relayName Name of the Service Bus relay.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options
      },
      deleteHybridConnectionOperationSpec,
      callback);
  }

  /**
   * Description for Get the send key name and value of a Hybrid Connection.
   * @summary Get the send key name and value of a Hybrid Connection.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName The name of the Service Bus namespace.
   * @param relayName The name of the Service Bus relay.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListHybridConnectionKeysResponse>
   */
  listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListHybridConnectionKeysResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName The name of the Service Bus namespace.
   * @param relayName The name of the Service Bus relay.
   * @param callback The callback
   */
  listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<Models.HybridConnectionKey>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName The name of the Service Bus namespace.
   * @param relayName The name of the Service Bus relay.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnectionKey>): void;
  listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnectionKey>, callback?: msRest.ServiceCallback<Models.HybridConnectionKey>): Promise<Models.AppServicePlansListHybridConnectionKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options
      },
      listHybridConnectionKeysOperationSpec,
      callback) as Promise<Models.AppServicePlansListHybridConnectionKeysResponse>;
  }

  /**
   * Description for Get all apps that use a Hybrid Connection in an App Service Plan.
   * @summary Get all apps that use a Hybrid Connection in an App Service Plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Hybrid Connection namespace.
   * @param relayName Name of the Hybrid Connection relay.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListWebAppsByHybridConnectionResponse>
   */
  listWebAppsByHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListWebAppsByHybridConnectionResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Hybrid Connection namespace.
   * @param relayName Name of the Hybrid Connection relay.
   * @param callback The callback
   */
  listWebAppsByHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Hybrid Connection namespace.
   * @param relayName Name of the Hybrid Connection relay.
   * @param options The optional parameters
   * @param callback The callback
   */
  listWebAppsByHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
  listWebAppsByHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResourceCollection>, callback?: msRest.ServiceCallback<Models.ResourceCollection>): Promise<Models.AppServicePlansListWebAppsByHybridConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options
      },
      listWebAppsByHybridConnectionOperationSpec,
      callback) as Promise<Models.AppServicePlansListWebAppsByHybridConnectionResponse>;
  }

  /**
   * Description for Get the maximum number of Hybrid Connections allowed in an App Service plan.
   * @summary Get the maximum number of Hybrid Connections allowed in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansGetHybridConnectionPlanLimitResponse>
   */
  getHybridConnectionPlanLimit(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetHybridConnectionPlanLimitResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param callback The callback
   */
  getHybridConnectionPlanLimit(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HybridConnectionLimits>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHybridConnectionPlanLimit(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnectionLimits>): void;
  getHybridConnectionPlanLimit(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnectionLimits>, callback?: msRest.ServiceCallback<Models.HybridConnectionLimits>): Promise<Models.AppServicePlansGetHybridConnectionPlanLimitResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHybridConnectionPlanLimitOperationSpec,
      callback) as Promise<Models.AppServicePlansGetHybridConnectionPlanLimitResponse>;
  }

  /**
   * Description for Retrieve all Hybrid Connections in use in an App Service plan.
   * @summary Retrieve all Hybrid Connections in use in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListHybridConnectionsResponse>
   */
  listHybridConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListHybridConnectionsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param callback The callback
   */
  listHybridConnections(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HybridConnectionCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHybridConnections(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnectionCollection>): void;
  listHybridConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnectionCollection>, callback?: msRest.ServiceCallback<Models.HybridConnectionCollection>): Promise<Models.AppServicePlansListHybridConnectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listHybridConnectionsOperationSpec,
      callback) as Promise<Models.AppServicePlansListHybridConnectionsResponse>;
  }

  /**
   * Description for Restart all apps in an App Service plan.
   * @summary Restart all apps in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restartWebApps(resourceGroupName: string, name: string, options?: Models.AppServicePlansRestartWebAppsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param callback The callback
   */
  restartWebApps(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The optional parameters
   * @param callback The callback
   */
  restartWebApps(resourceGroupName: string, name: string, options: Models.AppServicePlansRestartWebAppsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  restartWebApps(resourceGroupName: string, name: string, options?: Models.AppServicePlansRestartWebAppsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      restartWebAppsOperationSpec,
      callback);
  }

  /**
   * Description for Get all apps associated with an App Service plan.
   * @summary Get all apps associated with an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListWebAppsResponse>
   */
  listWebApps(resourceGroupName: string, name: string, options?: Models.AppServicePlansListWebAppsOptionalParams): Promise<Models.AppServicePlansListWebAppsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param callback The callback
   */
  listWebApps(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The optional parameters
   * @param callback The callback
   */
  listWebApps(resourceGroupName: string, name: string, options: Models.AppServicePlansListWebAppsOptionalParams, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  listWebApps(resourceGroupName: string, name: string, options?: Models.AppServicePlansListWebAppsOptionalParams | msRest.ServiceCallback<Models.WebAppCollection>, callback?: msRest.ServiceCallback<Models.WebAppCollection>): Promise<Models.AppServicePlansListWebAppsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listWebAppsOperationSpec,
      callback) as Promise<Models.AppServicePlansListWebAppsResponse>;
  }

  /**
   * Description for Gets all selectable SKUs for a given App Service Plan
   * @summary Gets all selectable SKUs for a given App Service Plan
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansGetServerFarmSkusResponse>
   */
  getServerFarmSkus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetServerFarmSkusResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of App Service Plan
   * @param callback The callback
   */
  getServerFarmSkus(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of App Service Plan
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarmSkus(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getServerFarmSkus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.AppServicePlansGetServerFarmSkusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getServerFarmSkusOperationSpec,
      callback) as Promise<Models.AppServicePlansGetServerFarmSkusResponse>;
  }

  /**
   * Description for Gets server farm usage information
   * @summary Gets server farm usage information
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListUsagesResponse>
   */
  listUsages(resourceGroupName: string, name: string, options?: Models.AppServicePlansListUsagesOptionalParams): Promise<Models.AppServicePlansListUsagesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of App Service Plan
   * @param callback The callback
   */
  listUsages(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of App Service Plan
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsages(resourceGroupName: string, name: string, options: Models.AppServicePlansListUsagesOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  listUsages(resourceGroupName: string, name: string, options?: Models.AppServicePlansListUsagesOptionalParams | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.AppServicePlansListUsagesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listUsagesOperationSpec,
      callback) as Promise<Models.AppServicePlansListUsagesResponse>;
  }

  /**
   * Description for Get all Virtual Networks associated with an App Service plan.
   * @summary Get all Virtual Networks associated with an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListVnetsResponse>
   */
  listVnets(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListVnetsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param callback The callback
   */
  listVnets(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVnets(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  listVnets(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo[]>, callback?: msRest.ServiceCallback<Models.VnetInfo[]>): Promise<Models.AppServicePlansListVnetsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listVnetsOperationSpec,
      callback) as Promise<Models.AppServicePlansListVnetsResponse>;
  }

  /**
   * Description for Get a Virtual Network associated with an App Service plan.
   * @summary Get a Virtual Network associated with an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansGetVnetFromServerFarmResponse>
   */
  getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetVnetFromServerFarmResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param callback The callback
   */
  getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param options The optional parameters
   * @param callback The callback
   */
  getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.AppServicePlansGetVnetFromServerFarmResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        options
      },
      getVnetFromServerFarmOperationSpec,
      callback) as Promise<Models.AppServicePlansGetVnetFromServerFarmResponse>;
  }

  /**
   * Description for Get a Virtual Network gateway.
   * @summary Get a Virtual Network gateway.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansGetVnetGatewayResponse>
   */
  getVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetVnetGatewayResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param callback The callback
   */
  getVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param options The optional parameters
   * @param callback The callback
   */
  getVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  getVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.AppServicePlansGetVnetGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        options
      },
      getVnetGatewayOperationSpec,
      callback) as Promise<Models.AppServicePlansGetVnetGatewayResponse>;
  }

  /**
   * Description for Update a Virtual Network gateway.
   * @summary Update a Virtual Network gateway.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param connectionEnvelope Definition of the gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansUpdateVnetGatewayResponse>
   */
  updateVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansUpdateVnetGatewayResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param connectionEnvelope Definition of the gateway.
   * @param callback The callback
   */
  updateVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param connectionEnvelope Definition of the gateway.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  updateVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.AppServicePlansUpdateVnetGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        options
      },
      updateVnetGatewayOperationSpec,
      callback) as Promise<Models.AppServicePlansUpdateVnetGatewayResponse>;
  }

  /**
   * Description for Get all routes that are associated with a Virtual Network in an App Service
   * plan.
   * @summary Get all routes that are associated with a Virtual Network in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListRoutesForVnetResponse>
   */
  listRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListRoutesForVnetResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param callback The callback
   */
  listRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
  listRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetRoute[]>, callback?: msRest.ServiceCallback<Models.VnetRoute[]>): Promise<Models.AppServicePlansListRoutesForVnetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        options
      },
      listRoutesForVnetOperationSpec,
      callback) as Promise<Models.AppServicePlansListRoutesForVnetResponse>;
  }

  /**
   * Description for Get a Virtual Network route in an App Service plan.
   * @summary Get a Virtual Network route in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansGetRouteForVnetResponse>
   */
  getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetRouteForVnetResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param callback The callback
   */
  getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param options The optional parameters
   * @param callback The callback
   */
  getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
  getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetRoute[]>, callback?: msRest.ServiceCallback<Models.VnetRoute[]>): Promise<Models.AppServicePlansGetRouteForVnetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        options
      },
      getRouteForVnetOperationSpec,
      callback) as Promise<Models.AppServicePlansGetRouteForVnetResponse>;
  }

  /**
   * Description for Create or update a Virtual Network route in an App Service plan.
   * @summary Create or update a Virtual Network route in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param route Definition of the Virtual Network route.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansCreateOrUpdateVnetRouteResponse>
   */
  createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansCreateOrUpdateVnetRouteResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param route Definition of the Virtual Network route.
   * @param callback The callback
   */
  createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param route Definition of the Virtual Network route.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
  createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetRoute>, callback?: msRest.ServiceCallback<Models.VnetRoute>): Promise<Models.AppServicePlansCreateOrUpdateVnetRouteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        route,
        options
      },
      createOrUpdateVnetRouteOperationSpec,
      callback) as Promise<Models.AppServicePlansCreateOrUpdateVnetRouteResponse>;
  }

  /**
   * Description for Delete a Virtual Network route in an App Service plan.
   * @summary Delete a Virtual Network route in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param callback The callback
   */
  deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        options
      },
      deleteVnetRouteOperationSpec,
      callback);
  }

  /**
   * Description for Create or update a Virtual Network route in an App Service plan.
   * @summary Create or update a Virtual Network route in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param route Definition of the Virtual Network route.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansUpdateVnetRouteResponse>
   */
  updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansUpdateVnetRouteResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param route Definition of the Virtual Network route.
   * @param callback The callback
   */
  updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param route Definition of the Virtual Network route.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
  updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetRoute>, callback?: msRest.ServiceCallback<Models.VnetRoute>): Promise<Models.AppServicePlansUpdateVnetRouteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        route,
        options
      },
      updateVnetRouteOperationSpec,
      callback) as Promise<Models.AppServicePlansUpdateVnetRouteResponse>;
  }

  /**
   * Description for Reboot a worker machine in an App Service plan.
   * @summary Reboot a worker machine in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param workerName Name of worker machine, which typically starts with RD.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  rebootWorker(resourceGroupName: string, name: string, workerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param workerName Name of worker machine, which typically starts with RD.
   * @param callback The callback
   */
  rebootWorker(resourceGroupName: string, name: string, workerName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param workerName Name of worker machine, which typically starts with RD.
   * @param options The optional parameters
   * @param callback The callback
   */
  rebootWorker(resourceGroupName: string, name: string, workerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  rebootWorker(resourceGroupName: string, name: string, workerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        workerName,
        options
      },
      rebootWorkerOperationSpec,
      callback);
  }

  /**
   * Description for Creates or updates an App Service Plan.
   * @summary Creates or updates an App Service Plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param appServicePlan Details of the App Service plan.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlan, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        appServicePlan,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Description for Get all App Service plans for a subscription.
   * @summary Get all App Service plans for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServicePlanCollection>, callback?: msRest.ServiceCallback<Models.AppServicePlanCollection>): Promise<Models.AppServicePlansListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.AppServicePlansListNextResponse>;
  }

  /**
   * Description for Get all App Service plans in a resource group.
   * @summary Get all App Service plans in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServicePlanCollection>, callback?: msRest.ServiceCallback<Models.AppServicePlanCollection>): Promise<Models.AppServicePlansListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.AppServicePlansListByResourceGroupNextResponse>;
  }

  /**
   * Description for Get all apps that use a Hybrid Connection in an App Service Plan.
   * @summary Get all apps that use a Hybrid Connection in an App Service Plan.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListWebAppsByHybridConnectionNextResponse>
   */
  listWebAppsByHybridConnectionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListWebAppsByHybridConnectionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listWebAppsByHybridConnectionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listWebAppsByHybridConnectionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
  listWebAppsByHybridConnectionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResourceCollection>, callback?: msRest.ServiceCallback<Models.ResourceCollection>): Promise<Models.AppServicePlansListWebAppsByHybridConnectionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listWebAppsByHybridConnectionNextOperationSpec,
      callback) as Promise<Models.AppServicePlansListWebAppsByHybridConnectionNextResponse>;
  }

  /**
   * Description for Retrieve all Hybrid Connections in use in an App Service plan.
   * @summary Retrieve all Hybrid Connections in use in an App Service plan.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListHybridConnectionsNextResponse>
   */
  listHybridConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListHybridConnectionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listHybridConnectionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HybridConnectionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHybridConnectionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnectionCollection>): void;
  listHybridConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HybridConnectionCollection>, callback?: msRest.ServiceCallback<Models.HybridConnectionCollection>): Promise<Models.AppServicePlansListHybridConnectionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listHybridConnectionsNextOperationSpec,
      callback) as Promise<Models.AppServicePlansListHybridConnectionsNextResponse>;
  }

  /**
   * Description for Get all apps associated with an App Service plan.
   * @summary Get all apps associated with an App Service plan.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListWebAppsNextResponse>
   */
  listWebAppsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListWebAppsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listWebAppsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listWebAppsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
  listWebAppsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebAppCollection>, callback?: msRest.ServiceCallback<Models.WebAppCollection>): Promise<Models.AppServicePlansListWebAppsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listWebAppsNextOperationSpec,
      callback) as Promise<Models.AppServicePlansListWebAppsNextResponse>;
  }

  /**
   * Description for Gets server farm usage information
   * @summary Gets server farm usage information
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServicePlansListUsagesNextResponse>
   */
  listUsagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListUsagesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listUsagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsagesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  listUsagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.AppServicePlansListUsagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listUsagesNextOperationSpec,
      callback) as Promise<Models.AppServicePlansListUsagesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.detailed,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlanCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlanCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlan
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "appServicePlan",
    mapper: {
      ...Mappers.AppServicePlanPatchResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlan
    },
    202: {
      bodyMapper: Mappers.AppServicePlan
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listCapabilitiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/capabilities",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getHybridConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteHybridConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHybridConnectionKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnectionKey
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listWebAppsByHybridConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/sites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getHybridConnectionPlanLimitOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionPlanLimits/limit",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnectionLimits
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHybridConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionRelays",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnectionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const restartWebAppsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.softRestart,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listWebAppsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.skipToken,
    Parameters.filter,
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getServerFarmSkusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/skus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listUsagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/usages",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listVnetsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getVnetFromServerFarmOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getVnetGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateVnetGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listRoutesForVnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetRoute"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getRouteForVnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetRoute"
            }
          }
        }
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateVnetRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "route",
    mapper: {
      ...Mappers.VnetRoute,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetRoute
    },
    400: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteVnetRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateVnetRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "route",
    mapper: {
      ...Mappers.VnetRoute,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetRoute
    },
    400: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const rebootWorkerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "appServicePlan",
    mapper: {
      ...Mappers.AppServicePlan,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlan
    },
    202: {
      bodyMapper: Mappers.AppServicePlan
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlanCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlanCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listWebAppsByHybridConnectionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHybridConnectionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnectionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listWebAppsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listUsagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};
