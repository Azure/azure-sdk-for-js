/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/staticSitesMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a StaticSites. */
export class StaticSites {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a StaticSites.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * Description for Get all Static Sites for a subscription.
   * @summary Get all Static Sites for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteCollection>): Promise<Models.StaticSitesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.StaticSitesListResponse>;
  }

  /**
   * Description for Gets all static sites in the specified resource group.
   * @summary Gets all static sites in the specified resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesGetStaticSitesByResourceGroupResponse>
   */
  getStaticSitesByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSitesByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param callback The callback
   */
  getStaticSitesByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStaticSitesByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
  getStaticSitesByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteCollection>): Promise<Models.StaticSitesGetStaticSitesByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getStaticSitesByResourceGroupOperationSpec,
      callback) as Promise<Models.StaticSitesGetStaticSitesByResourceGroupResponse>;
  }

  /**
   * Description for Gets the details of a static site.
   * @summary Gets the details of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesGetStaticSiteResponse>
   */
  getStaticSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSiteResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param callback The callback
   */
  getStaticSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStaticSite(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
  getStaticSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteARMResource>, callback?: msRest.ServiceCallback<Models.StaticSiteARMResource>): Promise<Models.StaticSitesGetStaticSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getStaticSiteOperationSpec,
      callback) as Promise<Models.StaticSitesGetStaticSiteResponse>;
  }

  /**
   * Description for Creates a new static site in an existing resource group, or updates an existing
   * static site.
   * @summary Creates a new static site in an existing resource group, or updates an existing static
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to create or update.
   * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesCreateOrUpdateStaticSiteResponse>
   */
  createOrUpdateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSiteARMResource, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesCreateOrUpdateStaticSiteResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to create or update.
   * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
   * @param callback The callback
   */
  createOrUpdateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSiteARMResource, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to create or update.
   * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSiteARMResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
  createOrUpdateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSiteARMResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteARMResource>, callback?: msRest.ServiceCallback<Models.StaticSiteARMResource>): Promise<Models.StaticSitesCreateOrUpdateStaticSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        staticSiteEnvelope,
        options
      },
      createOrUpdateStaticSiteOperationSpec,
      callback) as Promise<Models.StaticSitesCreateOrUpdateStaticSiteResponse>;
  }

  /**
   * Description for Deletes a static site.
   * @summary Deletes a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteStaticSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to delete.
   * @param callback The callback
   */
  deleteStaticSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStaticSite(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteStaticSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteStaticSiteOperationSpec,
      callback);
  }

  /**
   * Description for Creates a new static site in an existing resource group, or updates an existing
   * static site.
   * @summary Creates a new static site in an existing resource group, or updates an existing static
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to create or update.
   * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesUpdateStaticSiteResponse>
   */
  updateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSitePatchResource, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesUpdateStaticSiteResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to create or update.
   * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
   * @param callback The callback
   */
  updateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSitePatchResource, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to create or update.
   * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSitePatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
  updateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSitePatchResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteARMResource>, callback?: msRest.ServiceCallback<Models.StaticSiteARMResource>): Promise<Models.StaticSitesUpdateStaticSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        staticSiteEnvelope,
        options
      },
      updateStaticSiteOperationSpec,
      callback) as Promise<Models.StaticSitesUpdateStaticSiteResponse>;
  }

  /**
   * Description for Gets the list of users of a static site.
   * @summary Gets the list of users of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for the users.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteUsersResponse>
   */
  listStaticSiteUsers(resourceGroupName: string, name: string, authprovider: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteUsersResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for the users.
   * @param callback The callback
   */
  listStaticSiteUsers(resourceGroupName: string, name: string, authprovider: string, callback: msRest.ServiceCallback<Models.StaticSiteUserCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for the users.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteUsers(resourceGroupName: string, name: string, authprovider: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteUserCollection>): void;
  listStaticSiteUsers(resourceGroupName: string, name: string, authprovider: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteUserCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteUserCollection>): Promise<Models.StaticSitesListStaticSiteUsersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        authprovider,
        options
      },
      listStaticSiteUsersOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteUsersResponse>;
  }

  /**
   * Description for Deletes the user entry from the static site.
   * @summary Deletes the user entry from the static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the staticsite.
   * @param authprovider The auth provider for this user.
   * @param userid The user id of the user.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the staticsite.
   * @param authprovider The auth provider for this user.
   * @param userid The user id of the user.
   * @param callback The callback
   */
  deleteStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the staticsite.
   * @param authprovider The auth provider for this user.
   * @param userid The user id of the user.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        authprovider,
        userid,
        options
      },
      deleteStaticSiteUserOperationSpec,
      callback);
  }

  /**
   * Description for Updates a user entry with the listed roles
   * @summary Updates a user entry with the listed roles
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for this user.
   * @param userid The user id of the user.
   * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See
   * example.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesUpdateStaticSiteUserResponse>
   */
  updateStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, staticSiteUserEnvelope: Models.StaticSiteUserARMResource, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesUpdateStaticSiteUserResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for this user.
   * @param userid The user id of the user.
   * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See
   * example.
   * @param callback The callback
   */
  updateStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, staticSiteUserEnvelope: Models.StaticSiteUserARMResource, callback: msRest.ServiceCallback<Models.StaticSiteUserARMResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for this user.
   * @param userid The user id of the user.
   * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See
   * example.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, staticSiteUserEnvelope: Models.StaticSiteUserARMResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteUserARMResource>): void;
  updateStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, staticSiteUserEnvelope: Models.StaticSiteUserARMResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteUserARMResource>, callback?: msRest.ServiceCallback<Models.StaticSiteUserARMResource>): Promise<Models.StaticSitesUpdateStaticSiteUserResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        authprovider,
        userid,
        staticSiteUserEnvelope,
        options
      },
      updateStaticSiteUserOperationSpec,
      callback) as Promise<Models.StaticSitesUpdateStaticSiteUserResponse>;
  }

  /**
   * Description for Gets all static site builds for a particular static site.
   * @summary Gets all static site builds for a particular static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesGetStaticSiteBuildsResponse>
   */
  getStaticSiteBuilds(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSiteBuildsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param callback The callback
   */
  getStaticSiteBuilds(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StaticSiteBuildCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStaticSiteBuilds(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteBuildCollection>): void;
  getStaticSiteBuilds(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteBuildCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteBuildCollection>): Promise<Models.StaticSitesGetStaticSiteBuildsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getStaticSiteBuildsOperationSpec,
      callback) as Promise<Models.StaticSitesGetStaticSiteBuildsResponse>;
  }

  /**
   * Description for Gets the details of a static site build.
   * @summary Gets the details of a static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesGetStaticSiteBuildResponse>
   */
  getStaticSiteBuild(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSiteBuildResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param callback The callback
   */
  getStaticSiteBuild(resourceGroupName: string, name: string, prId: string, callback: msRest.ServiceCallback<Models.StaticSiteBuildARMResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStaticSiteBuild(resourceGroupName: string, name: string, prId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteBuildARMResource>): void;
  getStaticSiteBuild(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteBuildARMResource>, callback?: msRest.ServiceCallback<Models.StaticSiteBuildARMResource>): Promise<Models.StaticSitesGetStaticSiteBuildResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        prId,
        options
      },
      getStaticSiteBuildOperationSpec,
      callback) as Promise<Models.StaticSitesGetStaticSiteBuildResponse>;
  }

  /**
   * Description for Deletes a static site build.
   * @summary Deletes a static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteStaticSiteBuild(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param callback The callback
   */
  deleteStaticSiteBuild(resourceGroupName: string, name: string, prId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStaticSiteBuild(resourceGroupName: string, name: string, prId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteStaticSiteBuild(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        prId,
        options
      },
      deleteStaticSiteBuildOperationSpec,
      callback);
  }

  /**
   * Description for Creates or updates the function app settings of a static site build.
   * @summary Creates or updates the function app settings of a static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param appSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse>
   */
  createOrUpdateStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param appSettings
   * @param callback The callback
   */
  createOrUpdateStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, appSettings: Models.StringDictionary, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param appSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, appSettings: Models.StringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  createOrUpdateStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        prId,
        appSettings,
        options
      },
      createOrUpdateStaticSiteBuildFunctionAppSettingsOperationSpec,
      callback) as Promise<Models.StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse>;
  }

  /**
   * Description for Gets the functions of a particular static site build.
   * @summary Gets the functions of a particular static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteBuildFunctionsResponse>
   */
  listStaticSiteBuildFunctions(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteBuildFunctionsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param callback The callback
   */
  listStaticSiteBuildFunctions(resourceGroupName: string, name: string, prId: string, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteBuildFunctions(resourceGroupName: string, name: string, prId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
  listStaticSiteBuildFunctions(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): Promise<Models.StaticSitesListStaticSiteBuildFunctionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        prId,
        options
      },
      listStaticSiteBuildFunctionsOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteBuildFunctionsResponse>;
  }

  /**
   * Description for Gets the application settings of a static site.
   * @summary Gets the application settings of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteBuildFunctionAppSettingsResponse>
   */
  listStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteBuildFunctionAppSettingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param callback The callback
   */
  listStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.StaticSitesListStaticSiteBuildFunctionAppSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        prId,
        options
      },
      listStaticSiteBuildFunctionAppSettingsOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteBuildFunctionAppSettingsResponse>;
  }

  /**
   * Description for Creates or updates the function app settings of a static site.
   * @summary Creates or updates the function app settings of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param appSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse>
   */
  createOrUpdateStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param appSettings
   * @param callback The callback
   */
  createOrUpdateStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param appSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  createOrUpdateStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        appSettings,
        options
      },
      createOrUpdateStaticSiteFunctionAppSettingsOperationSpec,
      callback) as Promise<Models.StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse>;
  }

  /**
   * Description for Creates an invitation link for a user with the role
   * @summary Creates an invitation link for a user with the role
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param staticSiteUserRolesInvitationEnvelope
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesCreateUserRolesInvitationLinkResponse>
   */
  createUserRolesInvitationLink(resourceGroupName: string, name: string, staticSiteUserRolesInvitationEnvelope: Models.StaticSiteUserInvitationRequestResource, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesCreateUserRolesInvitationLinkResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param staticSiteUserRolesInvitationEnvelope
   * @param callback The callback
   */
  createUserRolesInvitationLink(resourceGroupName: string, name: string, staticSiteUserRolesInvitationEnvelope: Models.StaticSiteUserInvitationRequestResource, callback: msRest.ServiceCallback<Models.StaticSiteUserInvitationResponseResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param staticSiteUserRolesInvitationEnvelope
   * @param options The optional parameters
   * @param callback The callback
   */
  createUserRolesInvitationLink(resourceGroupName: string, name: string, staticSiteUserRolesInvitationEnvelope: Models.StaticSiteUserInvitationRequestResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteUserInvitationResponseResource>): void;
  createUserRolesInvitationLink(resourceGroupName: string, name: string, staticSiteUserRolesInvitationEnvelope: Models.StaticSiteUserInvitationRequestResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteUserInvitationResponseResource>, callback?: msRest.ServiceCallback<Models.StaticSiteUserInvitationResponseResource>): Promise<Models.StaticSitesCreateUserRolesInvitationLinkResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        staticSiteUserRolesInvitationEnvelope,
        options
      },
      createUserRolesInvitationLinkOperationSpec,
      callback) as Promise<Models.StaticSitesCreateUserRolesInvitationLinkResponse>;
  }

  /**
   * Description for Gets all static site custom domains for a particular static site.
   * @summary Gets all static site custom domains for a particular static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site resource to search in.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteCustomDomainsResponse>
   */
  listStaticSiteCustomDomains(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteCustomDomainsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site resource to search in.
   * @param callback The callback
   */
  listStaticSiteCustomDomains(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site resource to search in.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteCustomDomains(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>): void;
  listStaticSiteCustomDomains(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>): Promise<Models.StaticSitesListStaticSiteCustomDomainsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listStaticSiteCustomDomainsOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteCustomDomainsResponse>;
  }

  /**
   * Description for Creates a new static site custom domain in an existing resource group and static
   * site.
   * @summary Creates a new static site custom domain in an existing resource group and static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to create.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse>
   */
  createOrUpdateStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to create.
   * @param callback The callback
   */
  createOrUpdateStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewARMResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to create.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewARMResource>): void;
  createOrUpdateStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewARMResource>, callback?: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewARMResource>): Promise<Models.StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainName,
        options
      },
      createOrUpdateStaticSiteCustomDomainOperationSpec,
      callback) as Promise<Models.StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse>;
  }

  /**
   * Description for Deletes a custom domain.
   * @summary Deletes a custom domain.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to delete.
   * @param callback The callback
   */
  deleteStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainName,
        options
      },
      deleteStaticSiteCustomDomainOperationSpec,
      callback);
  }

  /**
   * Description for Validates a particular custom domain can be added to a static site.
   * @summary Validates a particular custom domain can be added to a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to validate.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  validateCustomDomainCanBeAddedToStaticSite(resourceGroupName: string, name: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to validate.
   * @param callback The callback
   */
  validateCustomDomainCanBeAddedToStaticSite(resourceGroupName: string, name: string, domainName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to validate.
   * @param options The optional parameters
   * @param callback The callback
   */
  validateCustomDomainCanBeAddedToStaticSite(resourceGroupName: string, name: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  validateCustomDomainCanBeAddedToStaticSite(resourceGroupName: string, name: string, domainName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainName,
        options
      },
      validateCustomDomainCanBeAddedToStaticSiteOperationSpec,
      callback);
  }

  /**
   * Description for Detaches a static site.
   * @summary Detaches a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to detach.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  detachStaticSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to detach.
   * @param callback The callback
   */
  detachStaticSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to detach.
   * @param options The optional parameters
   * @param callback The callback
   */
  detachStaticSite(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  detachStaticSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      detachStaticSiteOperationSpec,
      callback);
  }

  /**
   * Description for Gets the functions of a static site.
   * @summary Gets the functions of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteFunctionsResponse>
   */
  listStaticSiteFunctions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteFunctionsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param callback The callback
   */
  listStaticSiteFunctions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteFunctions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
  listStaticSiteFunctions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): Promise<Models.StaticSitesListStaticSiteFunctionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listStaticSiteFunctionsOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteFunctionsResponse>;
  }

  /**
   * Description for Gets the application settings of a static site.
   * @summary Gets the application settings of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteFunctionAppSettingsResponse>
   */
  listStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteFunctionAppSettingsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param callback The callback
   */
  listStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.StaticSitesListStaticSiteFunctionAppSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listStaticSiteFunctionAppSettingsOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteFunctionAppSettingsResponse>;
  }

  /**
   * Description for Lists the secrets for an existing static site.
   * @summary Lists the secrets for an existing static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteSecretsResponse>
   */
  listStaticSiteSecrets(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteSecretsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param callback The callback
   */
  listStaticSiteSecrets(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteSecrets(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listStaticSiteSecrets(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.StaticSitesListStaticSiteSecretsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listStaticSiteSecretsOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteSecretsResponse>;
  }

  /**
   * Description for Resets the api key for an existing static site.
   * @summary Resets the api key for an existing static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param resetPropertiesEnvelope
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetStaticSiteApiKey(resourceGroupName: string, name: string, resetPropertiesEnvelope: Models.StaticSiteResetPropertiesARMResource, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param resetPropertiesEnvelope
   * @param callback The callback
   */
  resetStaticSiteApiKey(resourceGroupName: string, name: string, resetPropertiesEnvelope: Models.StaticSiteResetPropertiesARMResource, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param resetPropertiesEnvelope
   * @param options The optional parameters
   * @param callback The callback
   */
  resetStaticSiteApiKey(resourceGroupName: string, name: string, resetPropertiesEnvelope: Models.StaticSiteResetPropertiesARMResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resetStaticSiteApiKey(resourceGroupName: string, name: string, resetPropertiesEnvelope: Models.StaticSiteResetPropertiesARMResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        resetPropertiesEnvelope,
        options
      },
      resetStaticSiteApiKeyOperationSpec,
      callback);
  }

  /**
   * Description for Get all Static Sites for a subscription.
   * @summary Get all Static Sites for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteCollection>): Promise<Models.StaticSitesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.StaticSitesListNextResponse>;
  }

  /**
   * Description for Gets all static sites in the specified resource group.
   * @summary Gets all static sites in the specified resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesGetStaticSitesByResourceGroupNextResponse>
   */
  getStaticSitesByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSitesByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getStaticSitesByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStaticSitesByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
  getStaticSitesByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteCollection>): Promise<Models.StaticSitesGetStaticSitesByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getStaticSitesByResourceGroupNextOperationSpec,
      callback) as Promise<Models.StaticSitesGetStaticSitesByResourceGroupNextResponse>;
  }

  /**
   * Description for Gets the list of users of a static site.
   * @summary Gets the list of users of a static site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteUsersNextResponse>
   */
  listStaticSiteUsersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteUsersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listStaticSiteUsersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteUserCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteUsersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteUserCollection>): void;
  listStaticSiteUsersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteUserCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteUserCollection>): Promise<Models.StaticSitesListStaticSiteUsersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listStaticSiteUsersNextOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteUsersNextResponse>;
  }

  /**
   * Description for Gets all static site builds for a particular static site.
   * @summary Gets all static site builds for a particular static site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesGetStaticSiteBuildsNextResponse>
   */
  getStaticSiteBuildsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSiteBuildsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getStaticSiteBuildsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteBuildCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStaticSiteBuildsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteBuildCollection>): void;
  getStaticSiteBuildsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteBuildCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteBuildCollection>): Promise<Models.StaticSitesGetStaticSiteBuildsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getStaticSiteBuildsNextOperationSpec,
      callback) as Promise<Models.StaticSitesGetStaticSiteBuildsNextResponse>;
  }

  /**
   * Description for Gets the functions of a particular static site build.
   * @summary Gets the functions of a particular static site build.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteBuildFunctionsNextResponse>
   */
  listStaticSiteBuildFunctionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteBuildFunctionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listStaticSiteBuildFunctionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteBuildFunctionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
  listStaticSiteBuildFunctionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): Promise<Models.StaticSitesListStaticSiteBuildFunctionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listStaticSiteBuildFunctionsNextOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteBuildFunctionsNextResponse>;
  }

  /**
   * Description for Gets all static site custom domains for a particular static site.
   * @summary Gets all static site custom domains for a particular static site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteCustomDomainsNextResponse>
   */
  listStaticSiteCustomDomainsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteCustomDomainsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listStaticSiteCustomDomainsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteCustomDomainsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>): void;
  listStaticSiteCustomDomainsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>): Promise<Models.StaticSitesListStaticSiteCustomDomainsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listStaticSiteCustomDomainsNextOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteCustomDomainsNextResponse>;
  }

  /**
   * Description for Gets the functions of a static site.
   * @summary Gets the functions of a static site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StaticSitesListStaticSiteFunctionsNextResponse>
   */
  listStaticSiteFunctionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteFunctionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listStaticSiteFunctionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStaticSiteFunctionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
  listStaticSiteFunctionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>, callback?: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): Promise<Models.StaticSitesListStaticSiteFunctionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listStaticSiteFunctionsNextOperationSpec,
      callback) as Promise<Models.StaticSitesListStaticSiteFunctionsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/staticSites",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getStaticSitesByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getStaticSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateStaticSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "staticSiteEnvelope",
    mapper: {
      ...Mappers.StaticSiteARMResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteARMResource
    },
    202: {
      bodyMapper: Mappers.StaticSiteARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteStaticSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateStaticSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "staticSiteEnvelope",
    mapper: {
      ...Mappers.StaticSitePatchResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteARMResource
    },
    202: {
      bodyMapper: Mappers.StaticSiteARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteUsersOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/listUsers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.authprovider,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteUserCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteStaticSiteUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/users/{userid}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.authprovider,
    Parameters.userid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateStaticSiteUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/users/{userid}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.authprovider,
    Parameters.userid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "staticSiteUserEnvelope",
    mapper: {
      ...Mappers.StaticSiteUserARMResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteUserARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getStaticSiteBuildsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteBuildCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getStaticSiteBuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.prId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteBuildARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteStaticSiteBuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.prId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateStaticSiteBuildFunctionAppSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/config/functionappsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.prId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "appSettings",
    mapper: {
      ...Mappers.StringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    202: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteBuildFunctionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/functions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.prId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteFunctionOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteBuildFunctionAppSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/listFunctionAppSettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.prId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    202: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateStaticSiteFunctionAppSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/config/functionappsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "appSettings",
    mapper: {
      ...Mappers.StringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    202: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createUserRolesInvitationLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/createUserInvitation",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "staticSiteUserRolesInvitationEnvelope",
    mapper: {
      ...Mappers.StaticSiteUserInvitationRequestResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteUserInvitationResponseResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteCustomDomainsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCustomDomainOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateStaticSiteCustomDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCustomDomainOverviewARMResource
    },
    202: {
      bodyMapper: Mappers.StaticSiteCustomDomainOverviewARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteStaticSiteCustomDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const validateCustomDomainCanBeAddedToStaticSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}/validate",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const detachStaticSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/detach",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteFunctionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/functions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteFunctionOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteFunctionAppSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/listFunctionAppSettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    202: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteSecretsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/listSecrets",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const resetStaticSiteApiKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/resetapikey",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "resetPropertiesEnvelope",
    mapper: {
      ...Mappers.StaticSiteResetPropertiesARMResource,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getStaticSitesByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteUsersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteUserCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getStaticSiteBuildsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteBuildCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteBuildFunctionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteFunctionOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteCustomDomainsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCustomDomainOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listStaticSiteFunctionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteFunctionOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};
