/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/appServiceCertificateOrdersMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a AppServiceCertificateOrders. */
export class AppServiceCertificateOrders {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a AppServiceCertificateOrders.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * Description for List all certificate orders in a subscription.
   * @summary List all certificate orders in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>, callback?: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): Promise<Models.AppServiceCertificateOrdersListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersListResponse>;
  }

  /**
   * Description for Validate information for a certificate order.
   * @summary Validate information for a certificate order.
   * @param appServiceCertificateOrder Information for a certificate order.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  validatePurchaseInformation(appServiceCertificateOrder: Models.AppServiceCertificateOrder, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param appServiceCertificateOrder Information for a certificate order.
   * @param callback The callback
   */
  validatePurchaseInformation(appServiceCertificateOrder: Models.AppServiceCertificateOrder, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param appServiceCertificateOrder Information for a certificate order.
   * @param options The optional parameters
   * @param callback The callback
   */
  validatePurchaseInformation(appServiceCertificateOrder: Models.AppServiceCertificateOrder, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  validatePurchaseInformation(appServiceCertificateOrder: Models.AppServiceCertificateOrder, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        appServiceCertificateOrder,
        options
      },
      validatePurchaseInformationOperationSpec,
      callback);
  }

  /**
   * Description for Get certificate orders in a resource group.
   * @summary Get certificate orders in a resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>, callback?: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): Promise<Models.AppServiceCertificateOrdersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersListByResourceGroupResponse>;
  }

  /**
   * Description for Get a certificate order.
   * @summary Get a certificate order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order..
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersGetResponse>
   */
  get(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order..
   * @param callback The callback
   */
  get(resourceGroupName: string, certificateOrderName: string, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrder>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order..
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, certificateOrderName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrder>): void;
  get(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServiceCertificateOrder>, callback?: msRest.ServiceCallback<Models.AppServiceCertificateOrder>): Promise<Models.AppServiceCertificateOrdersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersGetResponse>;
  }

  /**
   * Description for Create or update a certificate purchase order.
   * @summary Create or update a certificate purchase order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param certificateDistinguishedName Distinguished name to use for the certificate order.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: Models.AppServiceCertificateOrder, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,certificateOrderName,certificateDistinguishedName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AppServiceCertificateOrdersCreateOrUpdateResponse>;
  }

  /**
   * Description for Delete an existing certificate order.
   * @summary Delete an existing certificate order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, certificateOrderName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, certificateOrderName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Description for Create or update a certificate purchase order.
   * @summary Create or update a certificate purchase order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param certificateDistinguishedName Distinguished name to use for the certificate order.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersUpdateResponse>
   */
  update(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: Models.AppServiceCertificateOrderPatchResource, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersUpdateResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param certificateDistinguishedName Distinguished name to use for the certificate order.
   * @param callback The callback
   */
  update(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: Models.AppServiceCertificateOrderPatchResource, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrder>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param certificateDistinguishedName Distinguished name to use for the certificate order.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: Models.AppServiceCertificateOrderPatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrder>): void;
  update(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: Models.AppServiceCertificateOrderPatchResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServiceCertificateOrder>, callback?: msRest.ServiceCallback<Models.AppServiceCertificateOrder>): Promise<Models.AppServiceCertificateOrdersUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        certificateDistinguishedName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersUpdateResponse>;
  }

  /**
   * Description for List all certificates associated with a certificate order.
   * @summary List all certificates associated with a certificate order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersListCertificatesResponse>
   */
  listCertificates(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersListCertificatesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param callback The callback
   */
  listCertificates(resourceGroupName: string, certificateOrderName: string, callback: msRest.ServiceCallback<Models.AppServiceCertificateCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCertificates(resourceGroupName: string, certificateOrderName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServiceCertificateCollection>): void;
  listCertificates(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServiceCertificateCollection>, callback?: msRest.ServiceCallback<Models.AppServiceCertificateCollection>): Promise<Models.AppServiceCertificateOrdersListCertificatesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        options
      },
      listCertificatesOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersListCertificatesResponse>;
  }

  /**
   * Description for Get the certificate associated with a certificate order.
   * @summary Get the certificate associated with a certificate order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersGetCertificateResponse>
   */
  getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersGetCertificateResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param callback The callback
   */
  getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, callback: msRest.ServiceCallback<Models.AppServiceCertificateResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServiceCertificateResource>): void;
  getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServiceCertificateResource>, callback?: msRest.ServiceCallback<Models.AppServiceCertificateResource>): Promise<Models.AppServiceCertificateOrdersGetCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        name,
        options
      },
      getCertificateOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersGetCertificateResponse>;
  }

  /**
   * Description for Creates or updates a certificate and associates with key vault secret.
   * @summary Creates or updates a certificate and associates with key vault secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param keyVaultCertificate Key vault certificate resource Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersCreateOrUpdateCertificateResponse>
   */
  createOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.AppServiceCertificateResource, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersCreateOrUpdateCertificateResponse> {
    return this.beginCreateOrUpdateCertificate(resourceGroupName,certificateOrderName,name,keyVaultCertificate,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AppServiceCertificateOrdersCreateOrUpdateCertificateResponse>;
  }

  /**
   * Description for Delete the certificate associated with a certificate order.
   * @summary Delete the certificate associated with a certificate order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param callback The callback
   */
  deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        name,
        options
      },
      deleteCertificateOperationSpec,
      callback);
  }

  /**
   * Description for Creates or updates a certificate and associates with key vault secret.
   * @summary Creates or updates a certificate and associates with key vault secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param keyVaultCertificate Key vault certificate resource Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersUpdateCertificateResponse>
   */
  updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.AppServiceCertificatePatchResource, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersUpdateCertificateResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param keyVaultCertificate Key vault certificate resource Id.
   * @param callback The callback
   */
  updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.AppServiceCertificatePatchResource, callback: msRest.ServiceCallback<Models.AppServiceCertificateResource>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param keyVaultCertificate Key vault certificate resource Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.AppServiceCertificatePatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServiceCertificateResource>): void;
  updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.AppServiceCertificatePatchResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServiceCertificateResource>, callback?: msRest.ServiceCallback<Models.AppServiceCertificateResource>): Promise<Models.AppServiceCertificateOrdersUpdateCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        name,
        keyVaultCertificate,
        options
      },
      updateCertificateOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersUpdateCertificateResponse>;
  }

  /**
   * Description for Reissue an existing certificate order.
   * @summary Reissue an existing certificate order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param reissueCertificateOrderRequest Parameters for the reissue.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reissue(resourceGroupName: string, certificateOrderName: string, reissueCertificateOrderRequest: Models.ReissueCertificateOrderRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param reissueCertificateOrderRequest Parameters for the reissue.
   * @param callback The callback
   */
  reissue(resourceGroupName: string, certificateOrderName: string, reissueCertificateOrderRequest: Models.ReissueCertificateOrderRequest, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param reissueCertificateOrderRequest Parameters for the reissue.
   * @param options The optional parameters
   * @param callback The callback
   */
  reissue(resourceGroupName: string, certificateOrderName: string, reissueCertificateOrderRequest: Models.ReissueCertificateOrderRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  reissue(resourceGroupName: string, certificateOrderName: string, reissueCertificateOrderRequest: Models.ReissueCertificateOrderRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        reissueCertificateOrderRequest,
        options
      },
      reissueOperationSpec,
      callback);
  }

  /**
   * Description for Renew an existing certificate order.
   * @summary Renew an existing certificate order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param renewCertificateOrderRequest Renew parameters
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  renew(resourceGroupName: string, certificateOrderName: string, renewCertificateOrderRequest: Models.RenewCertificateOrderRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param renewCertificateOrderRequest Renew parameters
   * @param callback The callback
   */
  renew(resourceGroupName: string, certificateOrderName: string, renewCertificateOrderRequest: Models.RenewCertificateOrderRequest, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param renewCertificateOrderRequest Renew parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  renew(resourceGroupName: string, certificateOrderName: string, renewCertificateOrderRequest: Models.RenewCertificateOrderRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  renew(resourceGroupName: string, certificateOrderName: string, renewCertificateOrderRequest: Models.RenewCertificateOrderRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        renewCertificateOrderRequest,
        options
      },
      renewOperationSpec,
      callback);
  }

  /**
   * Description for Resend certificate email.
   * @summary Resend certificate email.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resendEmail(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param callback The callback
   */
  resendEmail(resourceGroupName: string, certificateOrderName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param options The optional parameters
   * @param callback The callback
   */
  resendEmail(resourceGroupName: string, certificateOrderName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resendEmail(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        options
      },
      resendEmailOperationSpec,
      callback);
  }

  /**
   * Description for Verify domain ownership for this certificate order.
   * @summary Verify domain ownership for this certificate order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resendRequestEmails(resourceGroupName: string, certificateOrderName: string, options?: Models.AppServiceCertificateOrdersResendRequestEmailsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param callback The callback
   */
  resendRequestEmails(resourceGroupName: string, certificateOrderName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param options The optional parameters
   * @param callback The callback
   */
  resendRequestEmails(resourceGroupName: string, certificateOrderName: string, options: Models.AppServiceCertificateOrdersResendRequestEmailsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  resendRequestEmails(resourceGroupName: string, certificateOrderName: string, options?: Models.AppServiceCertificateOrdersResendRequestEmailsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        options
      },
      resendRequestEmailsOperationSpec,
      callback);
  }

  /**
   * Description for Verify domain ownership for this certificate order.
   * @summary Verify domain ownership for this certificate order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param siteSealRequest Site seal request.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersRetrieveSiteSealResponse>
   */
  retrieveSiteSeal(resourceGroupName: string, certificateOrderName: string, siteSealRequest: Models.SiteSealRequest, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersRetrieveSiteSealResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param siteSealRequest Site seal request.
   * @param callback The callback
   */
  retrieveSiteSeal(resourceGroupName: string, certificateOrderName: string, siteSealRequest: Models.SiteSealRequest, callback: msRest.ServiceCallback<Models.SiteSeal>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param siteSealRequest Site seal request.
   * @param options The optional parameters
   * @param callback The callback
   */
  retrieveSiteSeal(resourceGroupName: string, certificateOrderName: string, siteSealRequest: Models.SiteSealRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSeal>): void;
  retrieveSiteSeal(resourceGroupName: string, certificateOrderName: string, siteSealRequest: Models.SiteSealRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSeal>, callback?: msRest.ServiceCallback<Models.SiteSeal>): Promise<Models.AppServiceCertificateOrdersRetrieveSiteSealResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        siteSealRequest,
        options
      },
      retrieveSiteSealOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersRetrieveSiteSealResponse>;
  }

  /**
   * Description for Verify domain ownership for this certificate order.
   * @summary Verify domain ownership for this certificate order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  verifyDomainOwnership(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param callback The callback
   */
  verifyDomainOwnership(resourceGroupName: string, certificateOrderName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param options The optional parameters
   * @param callback The callback
   */
  verifyDomainOwnership(resourceGroupName: string, certificateOrderName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  verifyDomainOwnership(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        options
      },
      verifyDomainOwnershipOperationSpec,
      callback);
  }

  /**
   * Description for Retrieve the list of certificate actions.
   * @summary Retrieve the list of certificate actions.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the certificate order.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersRetrieveCertificateActionsResponse>
   */
  retrieveCertificateActions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersRetrieveCertificateActionsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the certificate order.
   * @param callback The callback
   */
  retrieveCertificateActions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CertificateOrderAction[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the certificate order.
   * @param options The optional parameters
   * @param callback The callback
   */
  retrieveCertificateActions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderAction[]>): void;
  retrieveCertificateActions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderAction[]>, callback?: msRest.ServiceCallback<Models.CertificateOrderAction[]>): Promise<Models.AppServiceCertificateOrdersRetrieveCertificateActionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      retrieveCertificateActionsOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersRetrieveCertificateActionsResponse>;
  }

  /**
   * Description for Retrieve email history.
   * @summary Retrieve email history.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the certificate order.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersRetrieveCertificateEmailHistoryResponse>
   */
  retrieveCertificateEmailHistory(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersRetrieveCertificateEmailHistoryResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the certificate order.
   * @param callback The callback
   */
  retrieveCertificateEmailHistory(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CertificateEmail[]>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the certificate order.
   * @param options The optional parameters
   * @param callback The callback
   */
  retrieveCertificateEmailHistory(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateEmail[]>): void;
  retrieveCertificateEmailHistory(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateEmail[]>, callback?: msRest.ServiceCallback<Models.CertificateEmail[]>): Promise<Models.AppServiceCertificateOrdersRetrieveCertificateEmailHistoryResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      retrieveCertificateEmailHistoryOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersRetrieveCertificateEmailHistoryResponse>;
  }

  /**
   * Description for Create or update a certificate purchase order.
   * @summary Create or update a certificate purchase order.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param certificateDistinguishedName Distinguished name to use for the certificate order.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: Models.AppServiceCertificateOrder, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        certificateOrderName,
        certificateDistinguishedName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Description for Creates or updates a certificate and associates with key vault secret.
   * @summary Creates or updates a certificate and associates with key vault secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName Name of the certificate order.
   * @param name Name of the certificate.
   * @param keyVaultCertificate Key vault certificate resource Id.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.AppServiceCertificateResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        certificateOrderName,
        name,
        keyVaultCertificate,
        options
      },
      beginCreateOrUpdateCertificateOperationSpec,
      options);
  }

  /**
   * Description for List all certificate orders in a subscription.
   * @summary List all certificate orders in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>, callback?: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): Promise<Models.AppServiceCertificateOrdersListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersListNextResponse>;
  }

  /**
   * Description for Get certificate orders in a resource group.
   * @summary Get certificate orders in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>, callback?: msRest.ServiceCallback<Models.AppServiceCertificateOrderCollection>): Promise<Models.AppServiceCertificateOrdersListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersListByResourceGroupNextResponse>;
  }

  /**
   * Description for List all certificates associated with a certificate order.
   * @summary List all certificates associated with a certificate order.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppServiceCertificateOrdersListCertificatesNextResponse>
   */
  listCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServiceCertificateOrdersListCertificatesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listCertificatesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AppServiceCertificateCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCertificatesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServiceCertificateCollection>): void;
  listCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AppServiceCertificateCollection>, callback?: msRest.ServiceCallback<Models.AppServiceCertificateCollection>): Promise<Models.AppServiceCertificateOrdersListCertificatesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listCertificatesNextOperationSpec,
      callback) as Promise<Models.AppServiceCertificateOrdersListCertificatesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateOrderCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const validatePurchaseInformationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "appServiceCertificateOrder",
    mapper: {
      ...Mappers.AppServiceCertificateOrder,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateOrderCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateOrder
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateDistinguishedName",
    mapper: {
      ...Mappers.AppServiceCertificateOrderPatchResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateOrder
    },
    201: {
      bodyMapper: Mappers.AppServiceCertificateOrder
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listCertificatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "keyVaultCertificate",
    mapper: {
      ...Mappers.AppServiceCertificatePatchResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateResource
    },
    201: {
      bodyMapper: Mappers.AppServiceCertificateResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const reissueOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/reissue",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "reissueCertificateOrderRequest",
    mapper: {
      ...Mappers.ReissueCertificateOrderRequest,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const renewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/renew",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "renewCertificateOrderRequest",
    mapper: {
      ...Mappers.RenewCertificateOrderRequest,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const resendEmailOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendEmail",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const resendRequestEmailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendRequestEmails",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      name: [
        "options",
        "name"
      ]
    },
    mapper: {
      ...Mappers.NameIdentifier,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const retrieveSiteSealOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/retrieveSiteSeal",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteSealRequest",
    mapper: {
      ...Mappers.SiteSealRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteSeal
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const verifyDomainOwnershipOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/verifyDomainOwnership",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const retrieveCertificateActionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateOrderAction"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const retrieveCertificateEmailHistoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateEmail"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateDistinguishedName",
    mapper: {
      ...Mappers.AppServiceCertificateOrder,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateOrder
    },
    201: {
      bodyMapper: Mappers.AppServiceCertificateOrder
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "keyVaultCertificate",
    mapper: {
      ...Mappers.AppServiceCertificateResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateResource
    },
    201: {
      bodyMapper: Mappers.AppServiceCertificateResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateOrderCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateOrderCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listCertificatesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceCertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};
