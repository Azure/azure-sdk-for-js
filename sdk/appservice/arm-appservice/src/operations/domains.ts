/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/domainsMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a Domains. */
export class Domains {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a Domains.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * Description for Check if a domain is available for registration.
   * @summary Check if a domain is available for registration.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsCheckAvailabilityResponse>
   */
  checkAvailability(options?: Models.DomainsCheckAvailabilityOptionalParams): Promise<Models.DomainsCheckAvailabilityResponse>;
  /**
   * @param callback The callback
   */
  checkAvailability(callback: msRest.ServiceCallback<Models.DomainAvailabilityCheckResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  checkAvailability(options: Models.DomainsCheckAvailabilityOptionalParams, callback: msRest.ServiceCallback<Models.DomainAvailabilityCheckResult>): void;
  checkAvailability(options?: Models.DomainsCheckAvailabilityOptionalParams | msRest.ServiceCallback<Models.DomainAvailabilityCheckResult>, callback?: msRest.ServiceCallback<Models.DomainAvailabilityCheckResult>): Promise<Models.DomainsCheckAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      checkAvailabilityOperationSpec,
      callback) as Promise<Models.DomainsCheckAvailabilityResponse>;
  }

  /**
   * Description for Get all domains in a subscription.
   * @summary Get all domains in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.DomainsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainCollection>, callback?: msRest.ServiceCallback<Models.DomainCollection>): Promise<Models.DomainsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DomainsListResponse>;
  }

  /**
   * Description for Generate a single sign-on request for the domain management portal.
   * @summary Generate a single sign-on request for the domain management portal.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsGetControlCenterSsoRequestResponse>
   */
  getControlCenterSsoRequest(options?: msRest.RequestOptionsBase): Promise<Models.DomainsGetControlCenterSsoRequestResponse>;
  /**
   * @param callback The callback
   */
  getControlCenterSsoRequest(callback: msRest.ServiceCallback<Models.DomainControlCenterSsoRequest>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getControlCenterSsoRequest(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainControlCenterSsoRequest>): void;
  getControlCenterSsoRequest(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainControlCenterSsoRequest>, callback?: msRest.ServiceCallback<Models.DomainControlCenterSsoRequest>): Promise<Models.DomainsGetControlCenterSsoRequestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getControlCenterSsoRequestOperationSpec,
      callback) as Promise<Models.DomainsGetControlCenterSsoRequestResponse>;
  }

  /**
   * Description for Get domain name recommendations based on keywords.
   * @summary Get domain name recommendations based on keywords.
   * @param parameters Search parameters for domain name recommendations.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsListRecommendationsResponse>
   */
  listRecommendations(parameters: Models.DomainRecommendationSearchParameters, options?: msRest.RequestOptionsBase): Promise<Models.DomainsListRecommendationsResponse>;
  /**
   * @param parameters Search parameters for domain name recommendations.
   * @param callback The callback
   */
  listRecommendations(parameters: Models.DomainRecommendationSearchParameters, callback: msRest.ServiceCallback<Models.NameIdentifierCollection>): void;
  /**
   * @param parameters Search parameters for domain name recommendations.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRecommendations(parameters: Models.DomainRecommendationSearchParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NameIdentifierCollection>): void;
  listRecommendations(parameters: Models.DomainRecommendationSearchParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NameIdentifierCollection>, callback?: msRest.ServiceCallback<Models.NameIdentifierCollection>): Promise<Models.DomainsListRecommendationsResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        options
      },
      listRecommendationsOperationSpec,
      callback) as Promise<Models.DomainsListRecommendationsResponse>;
  }

  /**
   * Description for Get all domains in a resource group.
   * @summary Get all domains in a resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainCollection>, callback?: msRest.ServiceCallback<Models.DomainCollection>): Promise<Models.DomainsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.DomainsListByResourceGroupResponse>;
  }

  /**
   * Description for Get a domain.
   * @summary Get a domain.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsGetResponse>
   */
  get(resourceGroupName: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param callback The callback
   */
  get(resourceGroupName: string, domainName: string, callback: msRest.ServiceCallback<Models.Domain>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Domain>): void;
  get(resourceGroupName: string, domainName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Domain>, callback?: msRest.ServiceCallback<Models.Domain>): Promise<Models.DomainsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DomainsGetResponse>;
  }

  /**
   * Description for Creates or updates a domain.
   * @summary Creates or updates a domain.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param domain Domain registration information.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, domainName: string, domain: Models.Domain, options?: msRest.RequestOptionsBase): Promise<Models.DomainsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,domainName,domain,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DomainsCreateOrUpdateResponse>;
  }

  /**
   * Description for Delete a domain.
   * @summary Delete a domain.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, domainName: string, options?: Models.DomainsDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, domainName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, domainName: string, options: Models.DomainsDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, domainName: string, options?: Models.DomainsDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Description for Creates or updates a domain.
   * @summary Creates or updates a domain.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param domain Domain registration information.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsUpdateResponse>
   */
  update(resourceGroupName: string, domainName: string, domain: Models.DomainPatchResource, options?: msRest.RequestOptionsBase): Promise<Models.DomainsUpdateResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param domain Domain registration information.
   * @param callback The callback
   */
  update(resourceGroupName: string, domainName: string, domain: Models.DomainPatchResource, callback: msRest.ServiceCallback<Models.Domain>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param domain Domain registration information.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, domainName: string, domain: Models.DomainPatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Domain>): void;
  update(resourceGroupName: string, domainName: string, domain: Models.DomainPatchResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Domain>, callback?: msRest.ServiceCallback<Models.Domain>): Promise<Models.DomainsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        domain,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.DomainsUpdateResponse>;
  }

  /**
   * Description for Lists domain ownership identifiers.
   * @summary Lists domain ownership identifiers.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsListOwnershipIdentifiersResponse>
   */
  listOwnershipIdentifiers(resourceGroupName: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsListOwnershipIdentifiersResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param callback The callback
   */
  listOwnershipIdentifiers(resourceGroupName: string, domainName: string, callback: msRest.ServiceCallback<Models.DomainOwnershipIdentifierCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOwnershipIdentifiers(resourceGroupName: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainOwnershipIdentifierCollection>): void;
  listOwnershipIdentifiers(resourceGroupName: string, domainName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainOwnershipIdentifierCollection>, callback?: msRest.ServiceCallback<Models.DomainOwnershipIdentifierCollection>): Promise<Models.DomainsListOwnershipIdentifiersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        options
      },
      listOwnershipIdentifiersOperationSpec,
      callback) as Promise<Models.DomainsListOwnershipIdentifiersResponse>;
  }

  /**
   * Description for Get ownership identifier for domain
   * @summary Get ownership identifier for domain
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsGetOwnershipIdentifierResponse>
   */
  getOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsGetOwnershipIdentifierResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param callback The callback
   */
  getOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, callback: msRest.ServiceCallback<Models.DomainOwnershipIdentifier>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainOwnershipIdentifier>): void;
  getOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainOwnershipIdentifier>, callback?: msRest.ServiceCallback<Models.DomainOwnershipIdentifier>): Promise<Models.DomainsGetOwnershipIdentifierResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        name,
        options
      },
      getOwnershipIdentifierOperationSpec,
      callback) as Promise<Models.DomainsGetOwnershipIdentifierResponse>;
  }

  /**
   * Description for Creates an ownership identifier for a domain or updates identifier details for
   * an existing identifer
   * @summary Creates an ownership identifier for a domain or updates identifier details for an
   * existing identifer
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsCreateOrUpdateOwnershipIdentifierResponse>
   */
  createOrUpdateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: Models.DomainOwnershipIdentifier, options?: msRest.RequestOptionsBase): Promise<Models.DomainsCreateOrUpdateOwnershipIdentifierResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param callback The callback
   */
  createOrUpdateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: Models.DomainOwnershipIdentifier, callback: msRest.ServiceCallback<Models.DomainOwnershipIdentifier>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: Models.DomainOwnershipIdentifier, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainOwnershipIdentifier>): void;
  createOrUpdateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: Models.DomainOwnershipIdentifier, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainOwnershipIdentifier>, callback?: msRest.ServiceCallback<Models.DomainOwnershipIdentifier>): Promise<Models.DomainsCreateOrUpdateOwnershipIdentifierResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        name,
        domainOwnershipIdentifier,
        options
      },
      createOrUpdateOwnershipIdentifierOperationSpec,
      callback) as Promise<Models.DomainsCreateOrUpdateOwnershipIdentifierResponse>;
  }

  /**
   * Description for Delete ownership identifier for domain
   * @summary Delete ownership identifier for domain
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param callback The callback
   */
  deleteOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        name,
        options
      },
      deleteOwnershipIdentifierOperationSpec,
      callback);
  }

  /**
   * Description for Creates an ownership identifier for a domain or updates identifier details for
   * an existing identifer
   * @summary Creates an ownership identifier for a domain or updates identifier details for an
   * existing identifer
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsUpdateOwnershipIdentifierResponse>
   */
  updateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: Models.DomainOwnershipIdentifier, options?: msRest.RequestOptionsBase): Promise<Models.DomainsUpdateOwnershipIdentifierResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param callback The callback
   */
  updateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: Models.DomainOwnershipIdentifier, callback: msRest.ServiceCallback<Models.DomainOwnershipIdentifier>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of domain.
   * @param name Name of identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: Models.DomainOwnershipIdentifier, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainOwnershipIdentifier>): void;
  updateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: Models.DomainOwnershipIdentifier, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainOwnershipIdentifier>, callback?: msRest.ServiceCallback<Models.DomainOwnershipIdentifier>): Promise<Models.DomainsUpdateOwnershipIdentifierResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        name,
        domainOwnershipIdentifier,
        options
      },
      updateOwnershipIdentifierOperationSpec,
      callback) as Promise<Models.DomainsUpdateOwnershipIdentifierResponse>;
  }

  /**
   * Description for Renew a domain.
   * @summary Renew a domain.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  renew(resourceGroupName: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param callback The callback
   */
  renew(resourceGroupName: string, domainName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param options The optional parameters
   * @param callback The callback
   */
  renew(resourceGroupName: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  renew(resourceGroupName: string, domainName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        options
      },
      renewOperationSpec,
      callback);
  }

  /**
   * Description for Creates or updates a domain.
   * @summary Creates or updates a domain.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param domainName Name of the domain.
   * @param domain Domain registration information.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, domainName: string, domain: Models.Domain, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        domainName,
        domain,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Description for Get all domains in a subscription.
   * @summary Get all domains in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainCollection>, callback?: msRest.ServiceCallback<Models.DomainCollection>): Promise<Models.DomainsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.DomainsListNextResponse>;
  }

  /**
   * Description for Get domain name recommendations based on keywords.
   * @summary Get domain name recommendations based on keywords.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsListRecommendationsNextResponse>
   */
  listRecommendationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsListRecommendationsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listRecommendationsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NameIdentifierCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRecommendationsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NameIdentifierCollection>): void;
  listRecommendationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NameIdentifierCollection>, callback?: msRest.ServiceCallback<Models.NameIdentifierCollection>): Promise<Models.DomainsListRecommendationsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listRecommendationsNextOperationSpec,
      callback) as Promise<Models.DomainsListRecommendationsNextResponse>;
  }

  /**
   * Description for Get all domains in a resource group.
   * @summary Get all domains in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainCollection>, callback?: msRest.ServiceCallback<Models.DomainCollection>): Promise<Models.DomainsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.DomainsListByResourceGroupNextResponse>;
  }

  /**
   * Description for Lists domain ownership identifiers.
   * @summary Lists domain ownership identifiers.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsListOwnershipIdentifiersNextResponse>
   */
  listOwnershipIdentifiersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsListOwnershipIdentifiersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listOwnershipIdentifiersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DomainOwnershipIdentifierCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOwnershipIdentifiersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainOwnershipIdentifierCollection>): void;
  listOwnershipIdentifiersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainOwnershipIdentifierCollection>, callback?: msRest.ServiceCallback<Models.DomainOwnershipIdentifierCollection>): Promise<Models.DomainsListOwnershipIdentifiersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listOwnershipIdentifiersNextOperationSpec,
      callback) as Promise<Models.DomainsListOwnershipIdentifiersNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      name: [
        "options",
        "name"
      ]
    },
    mapper: {
      ...Mappers.NameIdentifier,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DomainAvailabilityCheckResult
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getControlCenterSsoRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainControlCenterSsoRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listRecommendationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DomainRecommendationSearchParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NameIdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Domain
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.forceHardDeleteDomain,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domain",
    mapper: {
      ...Mappers.DomainPatchResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Domain
    },
    202: {
      bodyMapper: Mappers.Domain
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listOwnershipIdentifiersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainOwnershipIdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getOwnershipIdentifierOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName0,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainOwnershipIdentifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const createOrUpdateOwnershipIdentifierOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName0,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domainOwnershipIdentifier",
    mapper: {
      ...Mappers.DomainOwnershipIdentifier,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DomainOwnershipIdentifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const deleteOwnershipIdentifierOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName0,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateOwnershipIdentifierOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName0,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domainOwnershipIdentifier",
    mapper: {
      ...Mappers.DomainOwnershipIdentifier,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DomainOwnershipIdentifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const renewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/renew",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domain",
    mapper: {
      ...Mappers.Domain,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Domain
    },
    202: {
      bodyMapper: Mappers.Domain
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listRecommendationsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NameIdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listOwnershipIdentifiersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainOwnershipIdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};
