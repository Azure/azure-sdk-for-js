/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { WebSiteManagementClient } from "../src/webSiteManagementClient";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Web test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: WebSiteManagementClient;
  let location: string;
  let resourceGroup: string;
  let appservicePlanName: string;
  let name: string;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new WebSiteManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    appservicePlanName = "myappserviceplanxxx";
    name = "mysitexxxx";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("appServicePlans create test", async function () {
    const res = await client.appServicePlans.beginCreateOrUpdateAndWait(resourceGroup, appservicePlanName, {
      location: "eastus",
      sku: {
        name: "S1",
        tier: "STANDARD",
        capacity: 1,
      },
      perSiteScaling: false,
      isXenon: false
    }, testPollingOptions)
    assert.equal(res.name, appservicePlanName);
  });

  it("webApps create test", async function () {
    const res = await client.webApps.beginCreateOrUpdateAndWait(resourceGroup, name, {
      location: "eastus",
      serverFarmId:
        "/subscriptions/" +
        subscriptionId +
        "/resourceGroups/myjstest/providers/Microsoft.Web/serverfarms/myappserviceplanxxx",
      reserved: false,
      isXenon: false,
      hyperV: false,
      siteConfig: {
        netFrameworkVersion: "v4.6",
        appSettings: [
          {
            name: "WEBSITE_NODE_DEFAULT_VERSION",
            value: "10.14",
          },
        ],
        localMySqlEnabled: false,
        http20Enabled: true,
      },
      scmSiteAlsoStopped: false,
      httpsOnly: false
    }, testPollingOptions)
    assert.equal(res.name, name);
  });

  it("appServicePlans get test", async function () {
    const res = await client.appServicePlans.get(resourceGroup, appservicePlanName);
    assert.equal(res.name, appservicePlanName);
  });

  it("webApps get test", async function () {
    const res = await client.webApps.get(resourceGroup, name);
    assert.equal(res.name, name);
  });

  it("appServicePlans list test", async function () {
    const resArray = new Array();
    for await (let item of client.appServicePlans.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("webApps list test", async function () {
    const resArray = new Array();
    for await (let item of client.webApps.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("webApps update test", async function () {
    const res = await client.webApps.update(resourceGroup, name, {
      serverFarmId: "/subscriptions/" + subscriptionId + "/resourceGroups/myjstest/providers/Microsoft.Web/serverfarms/myappserviceplanxxx",
      reserved: false,
      isXenon: false,
      hyperV: false,
      siteConfig: {
        netFrameworkVersion: "v4.6",
        localMySqlEnabled: false,
        http20Enabled: true,
      },
      scmSiteAlsoStopped: false
    })
    assert.equal(res.name, name);
  });

  it("webApps delete test", async function () {
    const res = await client.webApps.delete(resourceGroup, name);
    const resArray = new Array();
    for await (let item of client.webApps.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("appServicePlans delete test", async function () {
    const res = await client.appServicePlans.delete(resourceGroup, appservicePlanName);
    const resArray = new Array();
    for await (let item of client.appServicePlans.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
});
