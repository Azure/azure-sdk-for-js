{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../src/instrumentation.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAOlC,OAAO,EACL,mBAAmB,EACnB,mCAAmC,GACpC,MAAM,gCAAgC,CAAC;AAExC,OAAO,EAAE,yBAAyB,EAAE,MAAM,mBAAmB,CAAC;AAC9D,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAOjD;;GAEG;AACH,MAAM,OAAO,uBAAwB,SAAQ,mBAAmB;IAC9D,YAAY,UAA0C,EAAE;QACtD,KAAK,CACH,gDAAgD,EAChD,WAAW,EACX,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD;;;;OAIG;IACO,IAAI;QACZ,MAAM,MAAM,GAAoC,IAAI,mCAAmC,CACrF,qBAAqB,EACrB,CAAC,mBAAmB,EAAE,QAAQ,CAAC,EAC/B,CAAC,aAAa,EAAE,EAAE;YAChB,IAAI,OAAO,aAAa,CAAC,eAAe,KAAK,UAAU,EAAE,CAAC;gBACxD,aAAa,CAAC,eAAe,CAAC,IAAI,yBAAyB,EAAE,CAAC,CAAC;YACjE,CAAC;YAED,OAAO,aAAa,CAAC;QACvB,CAAC,CACF,CAAC;QACF,qCAAqC;QACrC,MAAM,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,UAAU,6BAA6B,CAC3C,UAA0C,EAAE;IAE5C,OAAO,IAAI,uBAAuB,CAAC,OAAO,CAAC,CAAC;AAC9C,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  Instrumentation,\n  InstrumentationConfig,\n  InstrumentationModuleDefinition,\n} from \"@opentelemetry/instrumentation\";\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n} from \"@opentelemetry/instrumentation\";\n\nimport { OpenTelemetryInstrumenter } from \"./instrumenter.js\";\nimport { SDK_VERSION } from \"./configuration.js\";\n\n/**\n * Configuration options that can be passed to {@link createAzureSdkInstrumentation} function.\n */\nexport interface AzureSdkInstrumentationOptions extends InstrumentationConfig {}\n\n/**\n * The instrumentation module for the Azure SDK. Implements OpenTelemetry's {@link Instrumentation}.\n */\nexport class AzureSdkInstrumentation extends InstrumentationBase {\n  constructor(options: AzureSdkInstrumentationOptions = {}) {\n    super(\n      \"@azure/opentelemetry-instrumentation-azure-sdk\",\n      SDK_VERSION,\n      Object.assign({}, options),\n    );\n  }\n  /**\n   * Entrypoint for the module registration.\n   *\n   * @returns The patched \\@azure/core-tracing module after setting its instrumenter.\n   */\n  protected init(): void | InstrumentationModuleDefinition | InstrumentationModuleDefinition[] {\n    const result: InstrumentationModuleDefinition = new InstrumentationNodeModuleDefinition(\n      \"@azure/core-tracing\",\n      [\"^1.0.0-preview.14\", \"^1.0.0\"],\n      (moduleExports) => {\n        if (typeof moduleExports.useInstrumenter === \"function\") {\n          moduleExports.useInstrumenter(new OpenTelemetryInstrumenter());\n        }\n\n        return moduleExports;\n      },\n    );\n    // Needed to support 1.0.0-preview.14\n    result.includePrerelease = true;\n    return result;\n  }\n}\n\n/**\n * Enables Azure SDK Instrumentation using OpenTelemetry for Azure SDK client libraries.\n *\n * When registered, any Azure data plane package will begin emitting tracing spans for internal calls\n * as well as network calls\n *\n * Example usage:\n * ```ts snippet:instrumentation_usage\n * import { registerInstrumentations } from \"@opentelemetry/instrumentation\";\n * import { createAzureSdkInstrumentation } from \"@azure/opentelemetry-instrumentation-azure-sdk\";\n *\n * registerInstrumentations({\n *   instrumentations: [createAzureSdkInstrumentation()],\n * });\n * ```\n *\n * @remarks\n *\n * As OpenTelemetry instrumentations rely on patching required modules, you should register\n * this instrumentation as early as possible and before loading any Azure Client Libraries.\n */\nexport function createAzureSdkInstrumentation(\n  options: AzureSdkInstrumentationOptions = {},\n): Instrumentation {\n  return new AzureSdkInstrumentation(options);\n}\n"]}