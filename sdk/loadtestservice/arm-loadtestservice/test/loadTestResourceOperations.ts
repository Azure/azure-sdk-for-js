/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { LoadTestClient } from "../src/loadTestClient";
import { delay } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { LoadTestResource, LoadTestResourcePatchRequestBody } from "../src/models";
const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

describe("Load Test Resource Operation", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: LoadTestClient;
  let location: string;
  let resourceGroupName: string;
  let loadTestResourceName: string;
  let loadTestResourceCreatePayload : LoadTestResource;
  let loadTestResourcePatchPayload : LoadTestResourcePatchRequestBody;

  before(function(){
    loadTestResourceCreatePayload = {
      description: "New Load test resource from SDK tests.",
      location: "westus2",
      tags: { team: "SDK Developers" },
    };

    loadTestResourcePatchPayload = {
      identity : {
        type : 'SystemAssigned'
      }
    };
  })
  beforeEach(async function() {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    location = "westus2";
    resourceGroupName = "rg-sdktests";
    loadTestResourceName = "sdk-malt-js-resource";
    const credential = createTestCredential();
    client = new LoadTestClient(credential, subscriptionId);
  });

  afterEach(async function() {
    await recorder.stop();
  });


  it("create resource", async function() {
    
    const result = await client.loadTests.createOrUpdate(
      resourceGroupName,
      loadTestResourceName,
      loadTestResourceCreatePayload
    );
    
    // Delay for 10 seconds to complete LRO
    delay(10000);
    assert.strictEqual(loadTestResourceName, result.name);
    assert.strictEqual(location, result.location);
    assert.strictEqual('None', result.identity?.type);

  });

  it("get resource", async function() {
    const result = await client.loadTests.get(
      resourceGroupName,
      loadTestResourceName
    );

    assert.strictEqual(loadTestResourceName, result.name);
    assert.strictEqual(location, result.location);
    assert.strictEqual('None', result.identity?.type);
  });

  it("patch resource", async function() {
    
    const result = await client.loadTests.update(
      resourceGroupName,
      loadTestResourceName,
      loadTestResourcePatchPayload
    );
    
    // Delay for 10 seconds to complete LRO
    delay(10000);
    assert.strictEqual(loadTestResourceName, result.name);
    assert.strictEqual(location, result.location);
    assert.strictEqual(loadTestResourcePatchPayload.identity?.type, result.identity?.type);

  });
  
  it("delete resource", async function() {
    const result = await client.loadTests.beginDelete(
      resourceGroupName,
      loadTestResourceName
    );
    delay(10000);
  });

});
