/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  RecorderStartOptions ,
  Recorder,
} from "@azure-tools/test-recorder";
import { assert } from "chai";
import { Context } from "mocha";
import { LoadTestClient } from "../src/loadTestClient";
import { createTestCredential } from "@azure-tools/test-credential";
import { 
  LoadTestResource, 
  LoadTestResourcePatchRequestBody, 
  QuotaBucketRequest,
  QuotaBucketRequestPropertiesDimensions } from "../src/models";

const replaceableVariables: Record<string, string> = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "00000000-0000-0000-0000-000000000000"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables   
};

describe("Load Tests Operations", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: LoadTestClient;
  let location: string;
  let resourceGroupName: string;
  let loadTestResourceName: string;
  let loadTestResourceCreatePayload : LoadTestResource;
  let loadTestResourcePatchPayload : LoadTestResourcePatchRequestBody;
  let quotaBucketRequestPayload : QuotaBucketRequest;
  let quotaBucketRequestDimensions : QuotaBucketRequestPropertiesDimensions;
  let quotaBucketName: string;

  before(function(){
    // Load test resource create payload
    loadTestResourceCreatePayload = {
      description: "New Load test resource from SDK.",
      location: "westus2",
      tags: { team: "Azure Load Testing SDK" },
    };

    // Load test resource patch payload
    loadTestResourcePatchPayload = {
      identity : {
        type : 'SystemAssigned'
      }
    };

    // Quota bucket request payload
    quotaBucketRequestDimensions = {
      location: location,
      subscriptionId: subscriptionId
    };

    // Set the global variables to be used in the tests
    subscriptionId = env.SUBSCRIPTION_ID || '00000000-0000-0000-0000-000000000000';
    location = env.LOCATION || "westus2";
    resourceGroupName = env.RESOURCE_GROUP || "js-sdk-test-rg";
    loadTestResourceName = "loadtestsResource";
    quotaBucketName = "maxEngineInstancesPerTestRun";
  })

  beforeEach(async function(this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    const credential = createTestCredential();
    client = new LoadTestClient(credential, subscriptionId, recorder.configureClientOptions({}));
  });

  afterEach(async function() {
    await recorder.stop();
  });


  it("create resource", async function() {
    // Create a load test resource
    const resource = await client.loadTests.beginCreateOrUpdateAndWait(
      resourceGroupName,
      loadTestResourceName,
      loadTestResourceCreatePayload
    );

    // Verify the response
    assert.equal(resource.provisioningState, "Succeeded");
    assert.equal(resource.name, loadTestResourceName);
    assert.equal(resource.location, location);
    assert.equal(resource.tags?.team, loadTestResourceCreatePayload.tags?.team);
    assert.equal(resource.description, loadTestResourceCreatePayload.description);
    assert.equal(resource.identity?.type, "None");
  });

  it("get resource", async function() {
    // Get the load test resource
    const resource = await client.loadTests.get(
      resourceGroupName,
      loadTestResourceName
    );

    // Verify the response
    assert.equal(resource.provisioningState, "Succeeded");
    assert.equal(resource.name, loadTestResourceName);
    assert.equal(resource.location, location);
    assert.equal(resource.tags?.team, loadTestResourceCreatePayload.tags?.team);
    assert.equal(resource.description, loadTestResourceCreatePayload.description);
    assert.equal(resource.identity?.type, "None");
  });

  it("patch resource", async function() {
    // Patch the load test resource
    const result = await client.loadTests.beginUpdateAndWait(
      resourceGroupName,
      loadTestResourceName,
      loadTestResourcePatchPayload
    );
    
    // Get the load test resource
    const patchedResource = await client.loadTests.get(
      resourceGroupName,
      loadTestResourceName
    );

    // Verify the response
    assert.equal(patchedResource.provisioningState, "Succeeded");
    assert.equal(patchedResource.name, loadTestResourceName);
    assert.equal(patchedResource.location, location);
    assert.equal(patchedResource.tags?.team, loadTestResourceCreatePayload.tags?.team);
    assert.equal(patchedResource.description, loadTestResourceCreatePayload.description);
    assert.equal(patchedResource.identity?.type, loadTestResourcePatchPayload.identity?.type);
  });
  
  it("delete resource", async function() {
    // Delete the load test resource
    const result = await client.loadTests.beginDelete(
      resourceGroupName,
      loadTestResourceName
    );
  });

  
  it("list quota buckets", async function() {
    // Get the quota bucket
    const result = client.quotas.list(location);

    // Verify the response
    for await (const quotaBucket of result) {
      assert.isNotNull(quotaBucket.name);
      assert.isNotNull(quotaBucket.id);
      assert.isNotNull(quotaBucket.type);
      assert.isNotNull(quotaBucket.limit);
      assert.isNotNull(quotaBucket.usage);
    }
  });

  it("get quota bucket", async function() {
    // Get the quota bucket
    const result = await client.quotas.get(location, quotaBucketName);

    // Verify the response
    assert.equal(result.name, quotaBucketName);
    assert.isNotNull(result.id);
    assert.isNotNull(result.type);
    assert.isNotNull(result.limit);
    assert.isNotNull(result.usage);
  });

  it("check quota bucket availability", async function() {
    // Get the quota bucket
    const result = await client.quotas.get(location, quotaBucketName);

    // Verify the response
    assert.equal(result.name, quotaBucketName);
    assert.isNotNull(result.id);
    assert.isNotNull(result.type);
    assert.isNotNull(result.limit);
    assert.isNotNull(result.usage);

    // Quota bucket check availability request payload
    quotaBucketRequestPayload = {
      currentQuota : result.limit,
      currentUsage : result.usage,
      newQuota : result.limit,
      dimensions : quotaBucketRequestDimensions      
    };

    // Check the quota bucket availability
    const availability = await client.quotas.checkAvailability(location, quotaBucketName, quotaBucketRequestPayload);

    // Verify the response
    assert.equal(availability.name, quotaBucketName);
    assert.isNotNull(availability.id);
    assert.isNotNull(availability.type);
    assert.isBoolean(availability.isAvailable);
  });
});
