/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "./lroImpl";
import {
  BackupResourceStorageConfigsNonCRRImpl,
  ProtectionIntentOperationsImpl,
  BackupStatusImpl,
  FeatureSupportImpl,
  BackupProtectionIntentImpl,
  BackupUsageSummariesImpl,
  OperationsImpl,
  BackupResourceVaultConfigsImpl,
  BackupResourceEncryptionConfigsImpl,
  PrivateEndpointConnectionOperationsImpl,
  PrivateEndpointOperationsImpl,
  BMSPrepareDataMoveOperationResultImpl,
  ProtectedItemsImpl,
  ProtectedItemOperationResultsImpl,
  RecoveryPointsImpl,
  RestoresImpl,
  BackupPoliciesImpl,
  ProtectionPoliciesImpl,
  ProtectionPolicyOperationResultsImpl,
  BackupJobsImpl,
  JobDetailsImpl,
  JobCancellationsImpl,
  JobOperationResultsImpl,
  ExportJobsOperationResultsImpl,
  JobsImpl,
  BackupProtectedItemsImpl,
  OperationImpl,
  ValidateOperationImpl,
  ValidateOperationResultsImpl,
  ValidateOperationStatusesImpl,
  BackupEnginesImpl,
  ProtectionContainerRefreshOperationResultsImpl,
  ProtectableContainersImpl,
  ProtectionContainersImpl,
  BackupWorkloadItemsImpl,
  ProtectionContainerOperationResultsImpl,
  BackupsImpl,
  ProtectedItemOperationStatusesImpl,
  ItemLevelRecoveryConnectionsImpl,
  BackupOperationResultsImpl,
  BackupOperationStatusesImpl,
  ProtectionPolicyOperationStatusesImpl,
  BackupProtectableItemsImpl,
  BackupProtectionContainersImpl,
  DeletedProtectionContainersImpl,
  SecurityPINsImpl,
  RecoveryPointsRecommendedForMoveImpl,
  ResourceGuardProxiesImpl,
  ResourceGuardProxyImpl
} from "./operations";
import {
  BackupResourceStorageConfigsNonCRR,
  ProtectionIntentOperations,
  BackupStatus,
  FeatureSupport,
  BackupProtectionIntent,
  BackupUsageSummaries,
  Operations,
  BackupResourceVaultConfigs,
  BackupResourceEncryptionConfigs,
  PrivateEndpointConnectionOperations,
  PrivateEndpointOperations,
  BMSPrepareDataMoveOperationResult,
  ProtectedItems,
  ProtectedItemOperationResults,
  RecoveryPoints,
  Restores,
  BackupPolicies,
  ProtectionPolicies,
  ProtectionPolicyOperationResults,
  BackupJobs,
  JobDetails,
  JobCancellations,
  JobOperationResults,
  ExportJobsOperationResults,
  Jobs,
  BackupProtectedItems,
  Operation,
  ValidateOperation,
  ValidateOperationResults,
  ValidateOperationStatuses,
  BackupEngines,
  ProtectionContainerRefreshOperationResults,
  ProtectableContainers,
  ProtectionContainers,
  BackupWorkloadItems,
  ProtectionContainerOperationResults,
  Backups,
  ProtectedItemOperationStatuses,
  ItemLevelRecoveryConnections,
  BackupOperationResults,
  BackupOperationStatuses,
  ProtectionPolicyOperationStatuses,
  BackupProtectableItems,
  BackupProtectionContainers,
  DeletedProtectionContainers,
  SecurityPINs,
  RecoveryPointsRecommendedForMove,
  ResourceGuardProxies,
  ResourceGuardProxy
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  RecoveryServicesBackupClientOptionalParams,
  GetOperationStatusOptionalParams,
  GetOperationStatusResponse,
  PrepareDataMoveRequest,
  BMSPrepareDataMoveOptionalParams,
  TriggerDataMoveRequest,
  BMSTriggerDataMoveOptionalParams,
  MoveRPAcrossTiersRequest,
  MoveRecoveryPointOptionalParams
} from "./models";

export class RecoveryServicesBackupClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the RecoveryServicesBackupClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The subscription Id.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: RecoveryServicesBackupClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: RecoveryServicesBackupClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-recoveryservicesbackup/10.0.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2023-01-01";
    this.backupResourceStorageConfigsNonCRR = new BackupResourceStorageConfigsNonCRRImpl(
      this
    );
    this.protectionIntentOperations = new ProtectionIntentOperationsImpl(this);
    this.backupStatus = new BackupStatusImpl(this);
    this.featureSupport = new FeatureSupportImpl(this);
    this.backupProtectionIntent = new BackupProtectionIntentImpl(this);
    this.backupUsageSummaries = new BackupUsageSummariesImpl(this);
    this.operations = new OperationsImpl(this);
    this.backupResourceVaultConfigs = new BackupResourceVaultConfigsImpl(this);
    this.backupResourceEncryptionConfigs = new BackupResourceEncryptionConfigsImpl(
      this
    );
    this.privateEndpointConnectionOperations = new PrivateEndpointConnectionOperationsImpl(
      this
    );
    this.privateEndpointOperations = new PrivateEndpointOperationsImpl(this);
    this.bMSPrepareDataMoveOperationResult = new BMSPrepareDataMoveOperationResultImpl(
      this
    );
    this.protectedItems = new ProtectedItemsImpl(this);
    this.protectedItemOperationResults = new ProtectedItemOperationResultsImpl(
      this
    );
    this.recoveryPoints = new RecoveryPointsImpl(this);
    this.restores = new RestoresImpl(this);
    this.backupPolicies = new BackupPoliciesImpl(this);
    this.protectionPolicies = new ProtectionPoliciesImpl(this);
    this.protectionPolicyOperationResults = new ProtectionPolicyOperationResultsImpl(
      this
    );
    this.backupJobs = new BackupJobsImpl(this);
    this.jobDetails = new JobDetailsImpl(this);
    this.jobCancellations = new JobCancellationsImpl(this);
    this.jobOperationResults = new JobOperationResultsImpl(this);
    this.exportJobsOperationResults = new ExportJobsOperationResultsImpl(this);
    this.jobs = new JobsImpl(this);
    this.backupProtectedItems = new BackupProtectedItemsImpl(this);
    this.operation = new OperationImpl(this);
    this.validateOperation = new ValidateOperationImpl(this);
    this.validateOperationResults = new ValidateOperationResultsImpl(this);
    this.validateOperationStatuses = new ValidateOperationStatusesImpl(this);
    this.backupEngines = new BackupEnginesImpl(this);
    this.protectionContainerRefreshOperationResults = new ProtectionContainerRefreshOperationResultsImpl(
      this
    );
    this.protectableContainers = new ProtectableContainersImpl(this);
    this.protectionContainers = new ProtectionContainersImpl(this);
    this.backupWorkloadItems = new BackupWorkloadItemsImpl(this);
    this.protectionContainerOperationResults = new ProtectionContainerOperationResultsImpl(
      this
    );
    this.backups = new BackupsImpl(this);
    this.protectedItemOperationStatuses = new ProtectedItemOperationStatusesImpl(
      this
    );
    this.itemLevelRecoveryConnections = new ItemLevelRecoveryConnectionsImpl(
      this
    );
    this.backupOperationResults = new BackupOperationResultsImpl(this);
    this.backupOperationStatuses = new BackupOperationStatusesImpl(this);
    this.protectionPolicyOperationStatuses = new ProtectionPolicyOperationStatusesImpl(
      this
    );
    this.backupProtectableItems = new BackupProtectableItemsImpl(this);
    this.backupProtectionContainers = new BackupProtectionContainersImpl(this);
    this.deletedProtectionContainers = new DeletedProtectionContainersImpl(
      this
    );
    this.securityPINs = new SecurityPINsImpl(this);
    this.recoveryPointsRecommendedForMove = new RecoveryPointsRecommendedForMoveImpl(
      this
    );
    this.resourceGuardProxies = new ResourceGuardProxiesImpl(this);
    this.resourceGuardProxy = new ResourceGuardProxyImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * Fetches operation status for data move operation on vault
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param operationId
   * @param options The options parameters.
   */
  getOperationStatus(
    vaultName: string,
    resourceGroupName: string,
    operationId: string,
    options?: GetOperationStatusOptionalParams
  ): Promise<GetOperationStatusResponse> {
    return this.sendOperationRequest(
      { vaultName, resourceGroupName, operationId, options },
      getOperationStatusOperationSpec
    );
  }

  /**
   * Prepares source vault for Data Move operation
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param parameters Prepare data move request
   * @param options The options parameters.
   */
  async beginBMSPrepareDataMove(
    vaultName: string,
    resourceGroupName: string,
    parameters: PrepareDataMoveRequest,
    options?: BMSPrepareDataMoveOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { vaultName, resourceGroupName, parameters, options },
      bMSPrepareDataMoveOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Prepares source vault for Data Move operation
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param parameters Prepare data move request
   * @param options The options parameters.
   */
  async beginBMSPrepareDataMoveAndWait(
    vaultName: string,
    resourceGroupName: string,
    parameters: PrepareDataMoveRequest,
    options?: BMSPrepareDataMoveOptionalParams
  ): Promise<void> {
    const poller = await this.beginBMSPrepareDataMove(
      vaultName,
      resourceGroupName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Triggers Data Move Operation on target vault
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param parameters Trigger data move request
   * @param options The options parameters.
   */
  async beginBMSTriggerDataMove(
    vaultName: string,
    resourceGroupName: string,
    parameters: TriggerDataMoveRequest,
    options?: BMSTriggerDataMoveOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { vaultName, resourceGroupName, parameters, options },
      bMSTriggerDataMoveOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Triggers Data Move Operation on target vault
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param parameters Trigger data move request
   * @param options The options parameters.
   */
  async beginBMSTriggerDataMoveAndWait(
    vaultName: string,
    resourceGroupName: string,
    parameters: TriggerDataMoveRequest,
    options?: BMSTriggerDataMoveOptionalParams
  ): Promise<void> {
    const poller = await this.beginBMSTriggerDataMove(
      vaultName,
      resourceGroupName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Move recovery point from one datastore to another store.
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName
   * @param containerName
   * @param protectedItemName
   * @param recoveryPointId
   * @param parameters Move Resource Across Tiers Request
   * @param options The options parameters.
   */
  async beginMoveRecoveryPoint(
    vaultName: string,
    resourceGroupName: string,
    fabricName: string,
    containerName: string,
    protectedItemName: string,
    recoveryPointId: string,
    parameters: MoveRPAcrossTiersRequest,
    options?: MoveRecoveryPointOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        vaultName,
        resourceGroupName,
        fabricName,
        containerName,
        protectedItemName,
        recoveryPointId,
        parameters,
        options
      },
      moveRecoveryPointOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Move recovery point from one datastore to another store.
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName
   * @param containerName
   * @param protectedItemName
   * @param recoveryPointId
   * @param parameters Move Resource Across Tiers Request
   * @param options The options parameters.
   */
  async beginMoveRecoveryPointAndWait(
    vaultName: string,
    resourceGroupName: string,
    fabricName: string,
    containerName: string,
    protectedItemName: string,
    recoveryPointId: string,
    parameters: MoveRPAcrossTiersRequest,
    options?: MoveRecoveryPointOptionalParams
  ): Promise<void> {
    const poller = await this.beginMoveRecoveryPoint(
      vaultName,
      resourceGroupName,
      fabricName,
      containerName,
      protectedItemName,
      recoveryPointId,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  backupResourceStorageConfigsNonCRR: BackupResourceStorageConfigsNonCRR;
  protectionIntentOperations: ProtectionIntentOperations;
  backupStatus: BackupStatus;
  featureSupport: FeatureSupport;
  backupProtectionIntent: BackupProtectionIntent;
  backupUsageSummaries: BackupUsageSummaries;
  operations: Operations;
  backupResourceVaultConfigs: BackupResourceVaultConfigs;
  backupResourceEncryptionConfigs: BackupResourceEncryptionConfigs;
  privateEndpointConnectionOperations: PrivateEndpointConnectionOperations;
  privateEndpointOperations: PrivateEndpointOperations;
  bMSPrepareDataMoveOperationResult: BMSPrepareDataMoveOperationResult;
  protectedItems: ProtectedItems;
  protectedItemOperationResults: ProtectedItemOperationResults;
  recoveryPoints: RecoveryPoints;
  restores: Restores;
  backupPolicies: BackupPolicies;
  protectionPolicies: ProtectionPolicies;
  protectionPolicyOperationResults: ProtectionPolicyOperationResults;
  backupJobs: BackupJobs;
  jobDetails: JobDetails;
  jobCancellations: JobCancellations;
  jobOperationResults: JobOperationResults;
  exportJobsOperationResults: ExportJobsOperationResults;
  jobs: Jobs;
  backupProtectedItems: BackupProtectedItems;
  operation: Operation;
  validateOperation: ValidateOperation;
  validateOperationResults: ValidateOperationResults;
  validateOperationStatuses: ValidateOperationStatuses;
  backupEngines: BackupEngines;
  protectionContainerRefreshOperationResults: ProtectionContainerRefreshOperationResults;
  protectableContainers: ProtectableContainers;
  protectionContainers: ProtectionContainers;
  backupWorkloadItems: BackupWorkloadItems;
  protectionContainerOperationResults: ProtectionContainerOperationResults;
  backups: Backups;
  protectedItemOperationStatuses: ProtectedItemOperationStatuses;
  itemLevelRecoveryConnections: ItemLevelRecoveryConnections;
  backupOperationResults: BackupOperationResults;
  backupOperationStatuses: BackupOperationStatuses;
  protectionPolicyOperationStatuses: ProtectionPolicyOperationStatuses;
  backupProtectableItems: BackupProtectableItems;
  backupProtectionContainers: BackupProtectionContainers;
  deletedProtectionContainers: DeletedProtectionContainers;
  securityPINs: SecurityPINs;
  recoveryPointsRecommendedForMove: RecoveryPointsRecommendedForMove;
  resourceGuardProxies: ResourceGuardProxies;
  resourceGuardProxy: ResourceGuardProxy;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationStatusOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/operationStatus/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.NewErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const bMSPrepareDataMoveOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/prepareDataMove",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.NewErrorResponse
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const bMSTriggerDataMoveOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/triggerDataMove",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.NewErrorResponse
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const moveRecoveryPointOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/move",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.containerName,
    Parameters.protectedItemName,
    Parameters.recoveryPointId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
