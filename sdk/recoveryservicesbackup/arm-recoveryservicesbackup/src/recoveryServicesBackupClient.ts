/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { RecoveryServicesBackupClientContext } from "./recoveryServicesBackupClientContext";

class RecoveryServicesBackupClient extends RecoveryServicesBackupClientContext {
  // Operation groups
  backupResourceVaultConfigs: operations.BackupResourceVaultConfigs;
  backupResourceEncryptionConfigs: operations.BackupResourceEncryptionConfigs;
  privateEndpointConnection: operations.PrivateEndpointConnectionOperations;
  privateEndpoint: operations.PrivateEndpointOperations;
  bMSPrepareDataMoveOperationResult: operations.BMSPrepareDataMoveOperationResult;
  protectedItems: operations.ProtectedItems;
  protectedItemOperationResults: operations.ProtectedItemOperationResults;
  recoveryPoints: operations.RecoveryPoints;
  restores: operations.Restores;
  backupPolicies: operations.BackupPolicies;
  protectionPolicies: operations.ProtectionPolicies;
  protectionPolicyOperationResults: operations.ProtectionPolicyOperationResults;
  backupJobs: operations.BackupJobs;
  jobDetails: operations.JobDetails;
  jobCancellations: operations.JobCancellations;
  jobOperationResults: operations.JobOperationResults;
  exportJobsOperationResults: operations.ExportJobsOperationResults;
  jobs: operations.Jobs;
  backupProtectedItems: operations.BackupProtectedItems;
  operation: operations.Operation;
  backupEngines: operations.BackupEngines;
  protectionContainerRefreshOperationResults: operations.ProtectionContainerRefreshOperationResults;
  protectableContainers: operations.ProtectableContainers;
  protectionContainers: operations.ProtectionContainers;
  backupWorkloadItems: operations.BackupWorkloadItems;
  protectionContainerOperationResults: operations.ProtectionContainerOperationResults;
  backups: operations.Backups;
  protectedItemOperationStatuses: operations.ProtectedItemOperationStatuses;
  itemLevelRecoveryConnections: operations.ItemLevelRecoveryConnections;
  backupOperationResults: operations.BackupOperationResults;
  backupOperationStatuses: operations.BackupOperationStatuses;
  protectionPolicyOperationStatuses: operations.ProtectionPolicyOperationStatuses;
  backupProtectableItems: operations.BackupProtectableItems;
  backupProtectionContainers: operations.BackupProtectionContainers;
  securityPINs: operations.SecurityPINs;
  recoveryPointsRecommendedForMove: operations.RecoveryPointsRecommendedForMove;
  backupUsageSummariesCRR: operations.BackupUsageSummariesCRR;
  aadProperties: operations.AadProperties;
  crossRegionRestore: operations.CrossRegionRestore;
  backupCrrJobDetails: operations.BackupCrrJobDetails;
  backupCrrJobs: operations.BackupCrrJobs;
  crrOperationResults: operations.CrrOperationResults;
  crrOperationStatus: operations.CrrOperationStatus;
  backupResourceStorageConfigs: operations.BackupResourceStorageConfigs;
  recoveryPointsCrr: operations.RecoveryPointsCrr;
  backupProtectedItemsCrr: operations.BackupProtectedItemsCrr;
  protectionIntent: operations.ProtectionIntentOperations;
  backupStatus: operations.BackupStatus;
  featureSupport: operations.FeatureSupport;
  backupProtectionIntent: operations.BackupProtectionIntent;
  backupUsageSummaries: operations.BackupUsageSummaries;
  operations: operations.Operations;

  /**
   * Initializes a new instance of the RecoveryServicesBackupClient class.
   * @param credentials Credentials needed for the client to connect to Azure. Credentials
   * implementing the TokenCredential interface from the @azure/identity package are recommended. For
   * more information about these credentials, see
   * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
   * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
   * @azure/ms-rest-browserauth are also supported.
   * @param subscriptionId The subscription Id.
   * @param [options] The parameter options
   */
  constructor(
    credentials: msRest.ServiceClientCredentials | TokenCredential,
    subscriptionId: string,
    options?: Models.RecoveryServicesBackupClientOptions
  ) {
    super(credentials, subscriptionId, options);
    this.backupResourceVaultConfigs = new operations.BackupResourceVaultConfigs(this);
    this.backupResourceEncryptionConfigs = new operations.BackupResourceEncryptionConfigs(this);
    this.privateEndpointConnection = new operations.PrivateEndpointConnectionOperations(this);
    this.privateEndpoint = new operations.PrivateEndpointOperations(this);
    this.bMSPrepareDataMoveOperationResult = new operations.BMSPrepareDataMoveOperationResult(this);
    this.protectedItems = new operations.ProtectedItems(this);
    this.protectedItemOperationResults = new operations.ProtectedItemOperationResults(this);
    this.recoveryPoints = new operations.RecoveryPoints(this);
    this.restores = new operations.Restores(this);
    this.backupPolicies = new operations.BackupPolicies(this);
    this.protectionPolicies = new operations.ProtectionPolicies(this);
    this.protectionPolicyOperationResults = new operations.ProtectionPolicyOperationResults(this);
    this.backupJobs = new operations.BackupJobs(this);
    this.jobDetails = new operations.JobDetails(this);
    this.jobCancellations = new operations.JobCancellations(this);
    this.jobOperationResults = new operations.JobOperationResults(this);
    this.exportJobsOperationResults = new operations.ExportJobsOperationResults(this);
    this.jobs = new operations.Jobs(this);
    this.backupProtectedItems = new operations.BackupProtectedItems(this);
    this.operation = new operations.Operation(this);
    this.backupEngines = new operations.BackupEngines(this);
    this.protectionContainerRefreshOperationResults = new operations.ProtectionContainerRefreshOperationResults(
      this
    );
    this.protectableContainers = new operations.ProtectableContainers(this);
    this.protectionContainers = new operations.ProtectionContainers(this);
    this.backupWorkloadItems = new operations.BackupWorkloadItems(this);
    this.protectionContainerOperationResults = new operations.ProtectionContainerOperationResults(
      this
    );
    this.backups = new operations.Backups(this);
    this.protectedItemOperationStatuses = new operations.ProtectedItemOperationStatuses(this);
    this.itemLevelRecoveryConnections = new operations.ItemLevelRecoveryConnections(this);
    this.backupOperationResults = new operations.BackupOperationResults(this);
    this.backupOperationStatuses = new operations.BackupOperationStatuses(this);
    this.protectionPolicyOperationStatuses = new operations.ProtectionPolicyOperationStatuses(this);
    this.backupProtectableItems = new operations.BackupProtectableItems(this);
    this.backupProtectionContainers = new operations.BackupProtectionContainers(this);
    this.securityPINs = new operations.SecurityPINs(this);
    this.recoveryPointsRecommendedForMove = new operations.RecoveryPointsRecommendedForMove(this);
    this.backupUsageSummariesCRR = new operations.BackupUsageSummariesCRR(this);
    this.aadProperties = new operations.AadProperties(this);
    this.crossRegionRestore = new operations.CrossRegionRestore(this);
    this.backupCrrJobDetails = new operations.BackupCrrJobDetails(this);
    this.backupCrrJobs = new operations.BackupCrrJobs(this);
    this.crrOperationResults = new operations.CrrOperationResults(this);
    this.crrOperationStatus = new operations.CrrOperationStatus(this);
    this.backupResourceStorageConfigs = new operations.BackupResourceStorageConfigs(this);
    this.recoveryPointsCrr = new operations.RecoveryPointsCrr(this);
    this.backupProtectedItemsCrr = new operations.BackupProtectedItemsCrr(this);
    this.protectionIntent = new operations.ProtectionIntentOperations(this);
    this.backupStatus = new operations.BackupStatus(this);
    this.featureSupport = new operations.FeatureSupport(this);
    this.backupProtectionIntent = new operations.BackupProtectionIntent(this);
    this.backupUsageSummaries = new operations.BackupUsageSummaries(this);
    this.operations = new operations.Operations(this);
  }

  /**
   * Fetches operation status for data move operation on vault
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param operationId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetOperationStatusResponse>
   */
  getOperationStatus(
    vaultName: string,
    resourceGroupName: string,
    operationId: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.GetOperationStatusResponse>;
  /**
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param operationId
   * @param callback The callback
   */
  getOperationStatus(
    vaultName: string,
    resourceGroupName: string,
    operationId: string,
    callback: msRest.ServiceCallback<Models.OperationStatus>
  ): void;
  /**
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param operationId
   * @param options The optional parameters
   * @param callback The callback
   */
  getOperationStatus(
    vaultName: string,
    resourceGroupName: string,
    operationId: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.OperationStatus>
  ): void;
  getOperationStatus(
    vaultName: string,
    resourceGroupName: string,
    operationId: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>,
    callback?: msRest.ServiceCallback<Models.OperationStatus>
  ): Promise<Models.GetOperationStatusResponse> {
    return this.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        operationId,
        options
      },
      getOperationStatusOperationSpec,
      callback
    ) as Promise<Models.GetOperationStatusResponse>;
  }

  /**
   * Prepares source vault for Data Move operation
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param parameters Prepare data move request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  bMSPrepareDataMove(
    vaultName: string,
    resourceGroupName: string,
    parameters: Models.PrepareDataMoveRequest,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginBMSPrepareDataMove(
      vaultName,
      resourceGroupName,
      parameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Triggers Data Move Operation on target vault
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param parameters Trigger data move request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  bMSTriggerDataMove(
    vaultName: string,
    resourceGroupName: string,
    parameters: Models.TriggerDataMoveRequest,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginBMSTriggerDataMove(
      vaultName,
      resourceGroupName,
      parameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * @summary Move recovery point from one datastore to another store.
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param fabricName
   * @param containerName
   * @param protectedItemName
   * @param recoveryPointId
   * @param parameters Move Resource Across Tiers Request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  moveRecoveryPoint(
    vaultName: string,
    resourceGroupName: string,
    fabricName: string,
    containerName: string,
    protectedItemName: string,
    recoveryPointId: string,
    parameters: Models.MoveRPAcrossTiersRequest,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginMoveRecoveryPoint(
      vaultName,
      resourceGroupName,
      fabricName,
      containerName,
      protectedItemName,
      recoveryPointId,
      parameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Prepares source vault for Data Move operation
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param parameters Prepare data move request
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginBMSPrepareDataMove(
    vaultName: string,
    resourceGroupName: string,
    parameters: Models.PrepareDataMoveRequest,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        parameters,
        options
      },
      beginBMSPrepareDataMoveOperationSpec,
      options
    );
  }

  /**
   * Triggers Data Move Operation on target vault
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param parameters Trigger data move request
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginBMSTriggerDataMove(
    vaultName: string,
    resourceGroupName: string,
    parameters: Models.TriggerDataMoveRequest,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        parameters,
        options
      },
      beginBMSTriggerDataMoveOperationSpec,
      options
    );
  }

  /**
   * @summary Move recovery point from one datastore to another store.
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param fabricName
   * @param containerName
   * @param protectedItemName
   * @param recoveryPointId
   * @param parameters Move Resource Across Tiers Request
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMoveRecoveryPoint(
    vaultName: string,
    resourceGroupName: string,
    fabricName: string,
    containerName: string,
    protectedItemName: string,
    recoveryPointId: string,
    parameters: Models.MoveRPAcrossTiersRequest,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        fabricName,
        containerName,
        protectedItemName,
        recoveryPointId,
        parameters,
        options
      },
      beginMoveRecoveryPointOperationSpec,
      options
    );
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/operationStatus/{operationId}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.operationId
  ],
  queryParameters: [Parameters.apiVersion0],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.NewErrorResponse
    }
  },
  serializer
};

const beginBMSPrepareDataMoveOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/prepareDataMove",
  urlParameters: [Parameters.vaultName, Parameters.resourceGroupName, Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion0],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PrepareDataMoveRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.NewErrorResponse
    }
  },
  serializer
};

const beginBMSTriggerDataMoveOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/triggerDataMove",
  urlParameters: [Parameters.vaultName, Parameters.resourceGroupName, Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion0],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TriggerDataMoveRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.NewErrorResponse
    }
  },
  serializer
};

const beginMoveRecoveryPointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/move",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.containerName,
    Parameters.protectedItemName,
    Parameters.recoveryPointId
  ],
  queryParameters: [Parameters.apiVersion0],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.MoveRPAcrossTiersRequest,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

export {
  RecoveryServicesBackupClient,
  RecoveryServicesBackupClientContext,
  Models as RecoveryServicesBackupModels,
  Mappers as RecoveryServicesBackupMappers
};
export * from "./operations";
