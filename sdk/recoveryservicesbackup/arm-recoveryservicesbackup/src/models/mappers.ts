/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const BackupResourceConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupResourceConfig",
    modelProperties: {
      storageModelType: {
        serializedName: "storageModelType",
        type: {
          name: "String"
        }
      },
      storageType: {
        serializedName: "storageType",
        type: {
          name: "String"
        }
      },
      storageTypeState: {
        serializedName: "storageTypeState",
        type: {
          name: "String"
        }
      },
      crossRegionRestoreFlag: {
        serializedName: "crossRegionRestoreFlag",
        type: {
          name: "Boolean"
        }
      },
      dedupState: {
        serializedName: "dedupState",
        type: {
          name: "String"
        }
      },
      xcoolState: {
        serializedName: "xcoolState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NewErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NewErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "NewErrorResponseError"
        }
      }
    }
  }
};

export const NewErrorResponseError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NewErrorResponseError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NewErrorResponse"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const PreValidateEnableBackupRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PreValidateEnableBackupRequest",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      vaultId: {
        serializedName: "vaultId",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PreValidateEnableBackupResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PreValidateEnableBackupResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      recommendation: {
        serializedName: "recommendation",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      protectedItemName: {
        serializedName: "protectedItemName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupStatusRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupStatusRequest",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      poLogicalName: {
        serializedName: "poLogicalName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupStatusResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupStatusResponse",
    modelProperties: {
      protectionStatus: {
        serializedName: "protectionStatus",
        type: {
          name: "String"
        }
      },
      vaultId: {
        serializedName: "vaultId",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      protectedItemName: {
        serializedName: "protectedItemName",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      policyName: {
        serializedName: "policyName",
        type: {
          name: "String"
        }
      },
      registrationStatus: {
        serializedName: "registrationStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FeatureSupportRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeatureSupportRequest",
    uberParent: "FeatureSupportRequest",
    polymorphicDiscriminator: {
      serializedName: "featureType",
      clientName: "featureType"
    },
    modelProperties: {
      featureType: {
        serializedName: "featureType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureVMResourceFeatureSupportResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureVMResourceFeatureSupportResponse",
    modelProperties: {
      supportStatus: {
        serializedName: "supportStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionIntent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionIntent",
    uberParent: "ProtectionIntent",
    polymorphicDiscriminator: {
      serializedName: "protectionIntentItemType",
      clientName: "protectionIntentItemType"
    },
    modelProperties: {
      protectionIntentItemType: {
        serializedName: "protectionIntentItemType",
        required: true,
        type: {
          name: "String"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      },
      itemId: {
        serializedName: "itemId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupManagementUsageList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupManagementUsageList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupManagementUsage"
            }
          }
        }
      }
    }
  }
};

export const BackupManagementUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupManagementUsage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      quotaPeriod: {
        serializedName: "quotaPeriod",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "NameInfo"
        }
      }
    }
  }
};

export const NameInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameInfo",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientDiscoveryValueForSingleApi"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryValueForSingleApi: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryValueForSingleApi",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ClientDiscoveryDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClientDiscoveryForProperties"
        }
      }
    }
  }
};

export const ClientDiscoveryDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryForProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryForProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ClientDiscoveryForServiceSpecification"
        }
      }
    }
  }
};

export const ClientDiscoveryForServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryForServiceSpecification",
    modelProperties: {
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientDiscoveryForLogSpecification"
            }
          }
        }
      }
    }
  }
};

export const ClientDiscoveryForLogSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryForLogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupResourceVaultConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupResourceVaultConfig",
    modelProperties: {
      storageModelType: {
        serializedName: "storageModelType",
        type: {
          name: "String"
        }
      },
      storageType: {
        serializedName: "storageType",
        type: {
          name: "String"
        }
      },
      storageTypeState: {
        serializedName: "storageTypeState",
        type: {
          name: "String"
        }
      },
      enhancedSecurityState: {
        serializedName: "enhancedSecurityState",
        type: {
          name: "String"
        }
      },
      softDeleteFeatureState: {
        serializedName: "softDeleteFeatureState",
        type: {
          name: "String"
        }
      },
      resourceGuardOperationRequests: {
        serializedName: "resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isSoftDeleteFeatureStateEditable: {
        serializedName: "isSoftDeleteFeatureStateEditable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BackupResourceEncryptionConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupResourceEncryptionConfig",
    modelProperties: {
      encryptionAtRestType: {
        serializedName: "encryptionAtRestType",
        type: {
          name: "String"
        }
      },
      keyUri: {
        serializedName: "keyUri",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      lastUpdateStatus: {
        serializedName: "lastUpdateStatus",
        type: {
          name: "String"
        }
      },
      infrastructureEncryptionState: {
        serializedName: "infrastructureEncryptionState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionRequired: {
        serializedName: "actionRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "OperationStatusError"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationStatusExtendedInfo"
        }
      }
    }
  }
};

export const OperationStatusError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatusExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusExtendedInfo",
    uberParent: "OperationStatusExtendedInfo",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrepareDataMoveRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrepareDataMoveRequest",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetRegion: {
        serializedName: "targetRegion",
        required: true,
        type: {
          name: "String"
        }
      },
      dataMoveLevel: {
        serializedName: "dataMoveLevel",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceContainerArmIds: {
        serializedName: "sourceContainerArmIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ignoreMoved: {
        serializedName: "ignoreMoved",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VaultStorageConfigOperationResultResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultStorageConfigOperationResultResponse",
    uberParent: "VaultStorageConfigOperationResultResponse",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggerDataMoveRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerDataMoveRequest",
    modelProperties: {
      sourceResourceId: {
        serializedName: "sourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceRegion: {
        serializedName: "sourceRegion",
        required: true,
        type: {
          name: "String"
        }
      },
      dataMoveLevel: {
        serializedName: "dataMoveLevel",
        required: true,
        type: {
          name: "String"
        }
      },
      correlationId: {
        serializedName: "correlationId",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceContainerArmIds: {
        serializedName: "sourceContainerArmIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pauseGC: {
        serializedName: "pauseGC",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ProtectedItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItem",
    uberParent: "ProtectedItem",
    polymorphicDiscriminator: {
      serializedName: "protectedItemType",
      clientName: "protectedItemType"
    },
    modelProperties: {
      protectedItemType: {
        serializedName: "protectedItemType",
        required: true,
        type: {
          name: "String"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      lastRecoveryPoint: {
        serializedName: "lastRecoveryPoint",
        type: {
          name: "DateTime"
        }
      },
      backupSetName: {
        serializedName: "backupSetName",
        type: {
          name: "String"
        }
      },
      createMode: {
        serializedName: "createMode",
        type: {
          name: "String"
        }
      },
      deferredDeleteTimeInUTC: {
        serializedName: "deferredDeleteTimeInUTC",
        type: {
          name: "DateTime"
        }
      },
      isScheduledForDeferredDelete: {
        serializedName: "isScheduledForDeferredDelete",
        type: {
          name: "Boolean"
        }
      },
      deferredDeleteTimeRemaining: {
        serializedName: "deferredDeleteTimeRemaining",
        type: {
          name: "String"
        }
      },
      isDeferredDeleteScheduleUpcoming: {
        serializedName: "isDeferredDeleteScheduleUpcoming",
        type: {
          name: "Boolean"
        }
      },
      isRehydrate: {
        serializedName: "isRehydrate",
        type: {
          name: "Boolean"
        }
      },
      resourceGuardOperationRequests: {
        serializedName: "resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isArchiveEnabled: {
        serializedName: "isArchiveEnabled",
        type: {
          name: "Boolean"
        }
      },
      policyName: {
        serializedName: "policyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPoint",
    uberParent: "RecoveryPoint",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoreRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestoreRequest",
    uberParent: "RestoreRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: {
      serializedName: "backupManagementType",
      clientName: "backupManagementType"
    },
    modelProperties: {
      protectedItemsCount: {
        serializedName: "protectedItemsCount",
        type: {
          name: "Number"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGuardOperationRequests: {
        serializedName: "resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Job: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Job",
    uberParent: "Job",
    polymorphicDiscriminator: {
      serializedName: "jobType",
      clientName: "jobType"
    },
    modelProperties: {
      entityFriendlyName: {
        serializedName: "entityFriendlyName",
        type: {
          name: "String"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      activityId: {
        serializedName: "activityId",
        type: {
          name: "String"
        }
      },
      jobType: {
        serializedName: "jobType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResultInfoBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResultInfoBase",
    uberParent: "OperationResultInfoBase",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationWorkerResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationWorkerResponse",
    modelProperties: {
      statusCode: {
        serializedName: "statusCode",
        type: {
          name: "Enum",
          allowedValues: [
            "Continue",
            "SwitchingProtocols",
            "OK",
            "Created",
            "Accepted",
            "NonAuthoritativeInformation",
            "NoContent",
            "ResetContent",
            "PartialContent",
            "MultipleChoices",
            "Ambiguous",
            "MovedPermanently",
            "Moved",
            "Found",
            "Redirect",
            "SeeOther",
            "RedirectMethod",
            "NotModified",
            "UseProxy",
            "Unused",
            "TemporaryRedirect",
            "RedirectKeepVerb",
            "BadRequest",
            "Unauthorized",
            "PaymentRequired",
            "Forbidden",
            "NotFound",
            "MethodNotAllowed",
            "NotAcceptable",
            "ProxyAuthenticationRequired",
            "RequestTimeout",
            "Conflict",
            "Gone",
            "LengthRequired",
            "PreconditionFailed",
            "RequestEntityTooLarge",
            "RequestUriTooLong",
            "UnsupportedMediaType",
            "RequestedRangeNotSatisfiable",
            "ExpectationFailed",
            "UpgradeRequired",
            "InternalServerError",
            "NotImplemented",
            "BadGateway",
            "ServiceUnavailable",
            "GatewayTimeout",
            "HttpVersionNotSupported"
          ]
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    }
  }
};

export const ValidateOperationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateOperationRequest",
    uberParent: "ValidateOperationRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateOperationsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateOperationsResponse",
    modelProperties: {
      validateOperationResponse: {
        serializedName: "validateOperationResponse",
        type: {
          name: "Composite",
          className: "ValidateOperationResponse"
        }
      }
    }
  }
};

export const ValidateOperationResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateOperationResponse",
    modelProperties: {
      validationResults: {
        serializedName: "validationResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendations: {
        serializedName: "recommendations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BackupEngineBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupEngineBase",
    uberParent: "BackupEngineBase",
    polymorphicDiscriminator: {
      serializedName: "backupEngineType",
      clientName: "backupEngineType"
    },
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      registrationStatus: {
        serializedName: "registrationStatus",
        type: {
          name: "String"
        }
      },
      backupEngineState: {
        serializedName: "backupEngineState",
        type: {
          name: "String"
        }
      },
      healthStatus: {
        serializedName: "healthStatus",
        type: {
          name: "String"
        }
      },
      backupEngineType: {
        serializedName: "backupEngineType",
        required: true,
        type: {
          name: "String"
        }
      },
      canReRegister: {
        serializedName: "canReRegister",
        type: {
          name: "Boolean"
        }
      },
      backupEngineId: {
        serializedName: "backupEngineId",
        type: {
          name: "String"
        }
      },
      dpmVersion: {
        serializedName: "dpmVersion",
        type: {
          name: "String"
        }
      },
      azureBackupAgentVersion: {
        serializedName: "azureBackupAgentVersion",
        type: {
          name: "String"
        }
      },
      isAzureBackupAgentUpgradeAvailable: {
        serializedName: "isAzureBackupAgentUpgradeAvailable",
        type: {
          name: "Boolean"
        }
      },
      isDpmUpgradeAvailable: {
        serializedName: "isDpmUpgradeAvailable",
        type: {
          name: "Boolean"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "BackupEngineExtendedInfo"
        }
      }
    }
  }
};

export const BackupEngineExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupEngineExtendedInfo",
    modelProperties: {
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      protectedItemsCount: {
        serializedName: "protectedItemsCount",
        type: {
          name: "Number"
        }
      },
      protectedServersCount: {
        serializedName: "protectedServersCount",
        type: {
          name: "Number"
        }
      },
      diskCount: {
        serializedName: "diskCount",
        type: {
          name: "Number"
        }
      },
      usedDiskSpace: {
        serializedName: "usedDiskSpace",
        type: {
          name: "Number"
        }
      },
      availableDiskSpace: {
        serializedName: "availableDiskSpace",
        type: {
          name: "Number"
        }
      },
      refreshedAt: {
        serializedName: "refreshedAt",
        type: {
          name: "DateTime"
        }
      },
      azureProtectedInstances: {
        serializedName: "azureProtectedInstances",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProtectableContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectableContainer",
    uberParent: "ProtectableContainer",
    polymorphicDiscriminator: {
      serializedName: "protectableContainerType",
      clientName: "protectableContainerType"
    },
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      protectableContainerType: {
        serializedName: "protectableContainerType",
        required: true,
        type: {
          name: "String"
        }
      },
      healthStatus: {
        serializedName: "healthStatus",
        type: {
          name: "String"
        }
      },
      containerId: {
        serializedName: "containerId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainer",
    uberParent: "ProtectionContainer",
    polymorphicDiscriminator: {
      serializedName: "containerType",
      clientName: "containerType"
    },
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      registrationStatus: {
        serializedName: "registrationStatus",
        type: {
          name: "String"
        }
      },
      healthStatus: {
        serializedName: "healthStatus",
        type: {
          name: "String"
        }
      },
      containerType: {
        serializedName: "containerType",
        required: true,
        type: {
          name: "String"
        }
      },
      protectableObjectType: {
        serializedName: "protectableObjectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkloadItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadItem",
    uberParent: "WorkloadItem",
    polymorphicDiscriminator: {
      serializedName: "workloadItemType",
      clientName: "workloadItemType"
    },
    modelProperties: {
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      },
      workloadItemType: {
        serializedName: "workloadItemType",
        required: true,
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupRequest",
    uberParent: "BackupRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ILRRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ILRRequest",
    uberParent: "ILRRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkloadProtectableItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadProtectableItem",
    uberParent: "WorkloadProtectableItem",
    polymorphicDiscriminator: {
      serializedName: "protectableItemType",
      clientName: "protectableItemType"
    },
    modelProperties: {
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      },
      protectableItemType: {
        serializedName: "protectableItemType",
        required: true,
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPinBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityPinBase",
    modelProperties: {
      resourceGuardOperationRequests: {
        serializedName: "resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TokenInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenInformation",
    modelProperties: {
      token: {
        serializedName: "token",
        type: {
          name: "String"
        }
      },
      expiryTimeInUtcTicks: {
        serializedName: "expiryTimeInUtcTicks",
        type: {
          name: "Number"
        }
      },
      securityPIN: {
        serializedName: "securityPIN",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MoveRPAcrossTiersRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveRPAcrossTiersRequest",
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      },
      sourceTierType: {
        serializedName: "sourceTierType",
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "InstantRP", "HardenedRP", "ArchivedRP"]
        }
      },
      targetTierType: {
        serializedName: "targetTierType",
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "InstantRP", "HardenedRP", "ArchivedRP"]
        }
      }
    }
  }
};

export const ListRecoveryPointsRecommendedForMoveRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListRecoveryPointsRecommendedForMoveRequest",
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      },
      excludedRPList: {
        serializedName: "excludedRPList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ResourceGuardProxyBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardProxyBase",
    modelProperties: {
      resourceGuardResourceId: {
        serializedName: "resourceGuardResourceId",
        type: {
          name: "String"
        }
      },
      resourceGuardOperationDetails: {
        serializedName: "resourceGuardOperationDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceGuardOperationDetail"
            }
          }
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceGuardOperationDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardOperationDetail",
    modelProperties: {
      vaultCriticalOperation: {
        serializedName: "vaultCriticalOperation",
        type: {
          name: "String"
        }
      },
      defaultResourceRequest: {
        serializedName: "defaultResourceRequest",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnlockDeleteRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnlockDeleteRequest",
    modelProperties: {
      resourceGuardOperationRequests: {
        serializedName: "resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resourceToBeDeleted: {
        serializedName: "resourceToBeDeleted",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnlockDeleteResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnlockDeleteResponse",
    modelProperties: {
      unlockDeleteExpiryTime: {
        serializedName: "unlockDeleteExpiryTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KPIResourceHealthDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KPIResourceHealthDetails",
    modelProperties: {
      resourceHealthStatus: {
        serializedName: "resourceHealthStatus",
        type: {
          name: "String"
        }
      },
      resourceHealthDetails: {
        serializedName: "resourceHealthDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceHealthDetails"
            }
          }
        }
      }
    }
  }
};

export const ResourceHealthDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceHealthDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      title: {
        serializedName: "title",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendations: {
        serializedName: "recommendations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureFileshareProtectedItemExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFileshareProtectedItemExtendedInfo",
    modelProperties: {
      oldestRecoveryPoint: {
        serializedName: "oldestRecoveryPoint",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointCount: {
        serializedName: "recoveryPointCount",
        type: {
          name: "Number"
        }
      },
      policyState: {
        serializedName: "policyState",
        type: {
          name: "String"
        }
      },
      resourceState: {
        serializedName: "resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceStateSyncTime: {
        serializedName: "resourceStateSyncTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RestoreFileSpecs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestoreFileSpecs",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      fileSpecType: {
        serializedName: "fileSpecType",
        type: {
          name: "String"
        }
      },
      targetFolderPath: {
        serializedName: "targetFolderPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetAFSRestoreInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetAFSRestoreInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      targetResourceId: {
        serializedName: "targetResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Settings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Settings",
    modelProperties: {
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      issqlcompression: {
        serializedName: "issqlcompression",
        type: {
          name: "Boolean"
        }
      },
      isCompression: {
        serializedName: "isCompression",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SubProtectionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubProtectionPolicy",
    modelProperties: {
      policyType: {
        serializedName: "policyType",
        type: {
          name: "String"
        }
      },
      schedulePolicy: {
        serializedName: "schedulePolicy",
        type: {
          name: "Composite",
          className: "SchedulePolicy"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};

export const SchedulePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: {
      serializedName: "schedulePolicyType",
      clientName: "schedulePolicyType"
    },
    modelProperties: {
      schedulePolicyType: {
        serializedName: "schedulePolicyType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RetentionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    uberParent: "RetentionPolicy",
    polymorphicDiscriminator: {
      serializedName: "retentionPolicyType",
      clientName: "retentionPolicyType"
    },
    modelProperties: {
      retentionPolicyType: {
        serializedName: "retentionPolicyType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureIaaSVMProtectedItemExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureIaaSVMProtectedItemExtendedInfo",
    modelProperties: {
      oldestRecoveryPoint: {
        serializedName: "oldestRecoveryPoint",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointCount: {
        serializedName: "recoveryPointCount",
        type: {
          name: "Number"
        }
      },
      policyInconsistent: {
        serializedName: "policyInconsistent",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ExtendedProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedProperties",
    modelProperties: {
      diskExclusionProperties: {
        serializedName: "diskExclusionProperties",
        type: {
          name: "Composite",
          className: "DiskExclusionProperties"
        }
      },
      linuxVmApplicationName: {
        serializedName: "linuxVmApplicationName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskExclusionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskExclusionProperties",
    modelProperties: {
      diskLunList: {
        serializedName: "diskLunList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      isInclusionList: {
        serializedName: "isInclusionList",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureIaaSVMErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureIaaSVMErrorInfo",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorTitle: {
        serializedName: "errorTitle",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorString: {
        serializedName: "errorString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendations: {
        serializedName: "recommendations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureIaaSVMJobExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureIaaSVMJobExtendedInfo",
    modelProperties: {
      tasksList: {
        serializedName: "tasksList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureIaaSVMJobTaskDetails"
            }
          }
        }
      },
      propertyBag: {
        serializedName: "propertyBag",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      internalPropertyBag: {
        serializedName: "internalPropertyBag",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      progressPercentage: {
        serializedName: "progressPercentage",
        type: {
          name: "Number"
        }
      },
      estimatedRemainingDuration: {
        serializedName: "estimatedRemainingDuration",
        type: {
          name: "String"
        }
      },
      dynamicErrorMessage: {
        serializedName: "dynamicErrorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureIaaSVMJobTaskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureIaaSVMJobTaskDetails",
    modelProperties: {
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      instanceId: {
        serializedName: "instanceId",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      progressPercentage: {
        serializedName: "progressPercentage",
        type: {
          name: "Number"
        }
      },
      taskExecutionDetails: {
        serializedName: "taskExecutionDetails",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstantRPAdditionalDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstantRPAdditionalDetails",
    modelProperties: {
      azureBackupRGNamePrefix: {
        serializedName: "azureBackupRGNamePrefix",
        type: {
          name: "String"
        }
      },
      azureBackupRGNameSuffix: {
        serializedName: "azureBackupRGNameSuffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureSqlProtectedItemExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureSqlProtectedItemExtendedInfo",
    modelProperties: {
      oldestRecoveryPoint: {
        serializedName: "oldestRecoveryPoint",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointCount: {
        serializedName: "recoveryPointCount",
        type: {
          name: "Number"
        }
      },
      policyState: {
        serializedName: "policyState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureStorageErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureStorageErrorInfo",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "Number"
        }
      },
      errorString: {
        serializedName: "errorString",
        type: {
          name: "String"
        }
      },
      recommendations: {
        serializedName: "recommendations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureStorageJobExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureStorageJobExtendedInfo",
    modelProperties: {
      tasksList: {
        serializedName: "tasksList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureStorageJobTaskDetails"
            }
          }
        }
      },
      propertyBag: {
        serializedName: "propertyBag",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      dynamicErrorMessage: {
        serializedName: "dynamicErrorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureStorageJobTaskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureStorageJobTaskDetails",
    modelProperties: {
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureVmWorkloadProtectedItemExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureVmWorkloadProtectedItemExtendedInfo",
    modelProperties: {
      oldestRecoveryPoint: {
        serializedName: "oldestRecoveryPoint",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointCount: {
        serializedName: "recoveryPointCount",
        type: {
          name: "Number"
        }
      },
      policyState: {
        serializedName: "policyState",
        type: {
          name: "String"
        }
      },
      recoveryModel: {
        serializedName: "recoveryModel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureWorkloadErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureWorkloadErrorInfo",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "Number"
        }
      },
      errorString: {
        serializedName: "errorString",
        type: {
          name: "String"
        }
      },
      errorTitle: {
        serializedName: "errorTitle",
        type: {
          name: "String"
        }
      },
      recommendations: {
        serializedName: "recommendations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      additionalDetails: {
        serializedName: "additionalDetails",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureWorkloadJobExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureWorkloadJobExtendedInfo",
    modelProperties: {
      tasksList: {
        serializedName: "tasksList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureWorkloadJobTaskDetails"
            }
          }
        }
      },
      propertyBag: {
        serializedName: "propertyBag",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      dynamicErrorMessage: {
        serializedName: "dynamicErrorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureWorkloadJobTaskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureWorkloadJobTaskDetails",
    modelProperties: {
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PointInTimeRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointInTimeRange",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RecoveryPointTierInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointTierInformation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "InstantRP", "HardenedRP", "ArchivedRP"]
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "Valid",
            "Disabled",
            "Deleted",
            "Rehydrated"
          ]
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const RecoveryPointMoveReadinessInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointMoveReadinessInfo",
    modelProperties: {
      isReadyForMove: {
        serializedName: "isReadyForMove",
        type: {
          name: "Boolean"
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetRestoreInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetRestoreInfo",
    modelProperties: {
      overwriteOption: {
        serializedName: "overwriteOption",
        type: {
          name: "String"
        }
      },
      containerId: {
        serializedName: "containerId",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      targetDirectoryForFileRestore: {
        serializedName: "targetDirectoryForFileRestore",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureWorkloadSQLRecoveryPointExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureWorkloadSQLRecoveryPointExtendedInfo",
    modelProperties: {
      dataDirectoryTimeInUTC: {
        serializedName: "dataDirectoryTimeInUTC",
        type: {
          name: "DateTime"
        }
      },
      dataDirectoryPaths: {
        serializedName: "dataDirectoryPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SQLDataDirectory"
            }
          }
        }
      }
    }
  }
};

export const SQLDataDirectory: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SQLDataDirectory",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      logicalName: {
        serializedName: "logicalName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SQLDataDirectoryMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SQLDataDirectoryMapping",
    modelProperties: {
      mappingType: {
        serializedName: "mappingType",
        type: {
          name: "String"
        }
      },
      sourceLogicalName: {
        serializedName: "sourceLogicalName",
        type: {
          name: "String"
        }
      },
      sourcePath: {
        serializedName: "sourcePath",
        type: {
          name: "String"
        }
      },
      targetPath: {
        serializedName: "targetPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BEKDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BEKDetails",
    modelProperties: {
      secretUrl: {
        serializedName: "secretUrl",
        type: {
          name: "String"
        }
      },
      secretVaultId: {
        serializedName: "secretVaultId",
        type: {
          name: "String"
        }
      },
      secretData: {
        serializedName: "secretData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BmsrpQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BmsrpQueryObject",
    modelProperties: {
      startDate: {
        serializedName: "startDate",
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        serializedName: "endDate",
        type: {
          name: "DateTime"
        }
      },
      restorePointQueryType: {
        serializedName: "restorePointQueryType",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Boolean"
        }
      },
      moveReadyRPOnly: {
        serializedName: "moveReadyRPOnly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DiskInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskInformation",
    modelProperties: {
      lun: {
        serializedName: "lun",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DailyRetentionFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailyRetentionFormat",
    modelProperties: {
      daysOfTheMonth: {
        serializedName: "daysOfTheMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Day"
            }
          }
        }
      }
    }
  }
};

export const Day: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Day",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "Number"
        }
      },
      isLast: {
        serializedName: "isLast",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DailyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailyRetentionSchedule",
    modelProperties: {
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const RetentionDuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionDuration",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      durationType: {
        serializedName: "durationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DpmErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DpmErrorInfo",
    modelProperties: {
      errorString: {
        serializedName: "errorString",
        type: {
          name: "String"
        }
      },
      recommendations: {
        serializedName: "recommendations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DpmJobExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DpmJobExtendedInfo",
    modelProperties: {
      tasksList: {
        serializedName: "tasksList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DpmJobTaskDetails"
            }
          }
        }
      },
      propertyBag: {
        serializedName: "propertyBag",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      dynamicErrorMessage: {
        serializedName: "dynamicErrorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DpmJobTaskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DpmJobTaskDetails",
    modelProperties: {
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DPMProtectedItemExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DPMProtectedItemExtendedInfo",
    modelProperties: {
      protectableObjectLoadPath: {
        serializedName: "protectableObjectLoadPath",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      protected: {
        serializedName: "protected",
        type: {
          name: "Boolean"
        }
      },
      isPresentOnCloud: {
        serializedName: "isPresentOnCloud",
        type: {
          name: "Boolean"
        }
      },
      lastBackupStatus: {
        serializedName: "lastBackupStatus",
        type: {
          name: "String"
        }
      },
      lastRefreshedAt: {
        serializedName: "lastRefreshedAt",
        type: {
          name: "DateTime"
        }
      },
      oldestRecoveryPoint: {
        serializedName: "oldestRecoveryPoint",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointCount: {
        serializedName: "recoveryPointCount",
        type: {
          name: "Number"
        }
      },
      onPremiseOldestRecoveryPoint: {
        serializedName: "onPremiseOldestRecoveryPoint",
        type: {
          name: "DateTime"
        }
      },
      onPremiseLatestRecoveryPoint: {
        serializedName: "onPremiseLatestRecoveryPoint",
        type: {
          name: "DateTime"
        }
      },
      onPremiseRecoveryPointCount: {
        serializedName: "onPremiseRecoveryPointCount",
        type: {
          name: "Number"
        }
      },
      isCollocated: {
        serializedName: "isCollocated",
        type: {
          name: "Boolean"
        }
      },
      protectionGroupName: {
        serializedName: "protectionGroupName",
        type: {
          name: "String"
        }
      },
      diskStorageUsedInBytes: {
        serializedName: "diskStorageUsedInBytes",
        type: {
          name: "String"
        }
      },
      totalDiskStorageSizeInBytes: {
        serializedName: "totalDiskStorageSizeInBytes",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionDetails",
    modelProperties: {
      encryptionEnabled: {
        serializedName: "encryptionEnabled",
        type: {
          name: "Boolean"
        }
      },
      kekUrl: {
        serializedName: "kekUrl",
        type: {
          name: "String"
        }
      },
      secretKeyUrl: {
        serializedName: "secretKeyUrl",
        type: {
          name: "String"
        }
      },
      kekVaultId: {
        serializedName: "kekVaultId",
        type: {
          name: "String"
        }
      },
      secretKeyVaultId: {
        serializedName: "secretKeyVaultId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HourlySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HourlySchedule",
    modelProperties: {
      interval: {
        serializedName: "interval",
        type: {
          name: "Number"
        }
      },
      scheduleWindowStartTime: {
        serializedName: "scheduleWindowStartTime",
        type: {
          name: "DateTime"
        }
      },
      scheduleWindowDuration: {
        serializedName: "scheduleWindowDuration",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DailySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailySchedule",
    modelProperties: {
      scheduleRunTimes: {
        serializedName: "scheduleRunTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    }
  }
};

export const WeeklySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklySchedule",
    modelProperties: {
      scheduleRunDays: {
        serializedName: "scheduleRunDays",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      scheduleRunTimes: {
        serializedName: "scheduleRunTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    }
  }
};

export const IdentityBasedRestoreDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityBasedRestoreDetails",
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      },
      targetStorageAccountId: {
        serializedName: "targetStorageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityInfo",
    modelProperties: {
      isSystemAssignedIdentity: {
        serializedName: "isSystemAssignedIdentity",
        type: {
          name: "Boolean"
        }
      },
      managedIdentityResourceId: {
        serializedName: "managedIdentityResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetProtectedItemQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetProtectedItemQueryObject",
    modelProperties: {
      expand: {
        serializedName: "expand",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyAndSecretDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyAndSecretDetails",
    modelProperties: {
      kekDetails: {
        serializedName: "kekDetails",
        type: {
          name: "Composite",
          className: "KEKDetails"
        }
      },
      bekDetails: {
        serializedName: "bekDetails",
        type: {
          name: "Composite",
          className: "BEKDetails"
        }
      },
      encryptionMechanism: {
        serializedName: "encryptionMechanism",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KEKDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KEKDetails",
    modelProperties: {
      keyUrl: {
        serializedName: "keyUrl",
        type: {
          name: "String"
        }
      },
      keyVaultId: {
        serializedName: "keyVaultId",
        type: {
          name: "String"
        }
      },
      keyBackupData: {
        serializedName: "keyBackupData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPointDiskConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointDiskConfiguration",
    modelProperties: {
      numberOfDisksIncludedInBackup: {
        serializedName: "numberOfDisksIncludedInBackup",
        type: {
          name: "Number"
        }
      },
      numberOfDisksAttachedToVm: {
        serializedName: "numberOfDisksAttachedToVm",
        type: {
          name: "Number"
        }
      },
      includedDiskList: {
        serializedName: "includedDiskList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskInformation"
            }
          }
        }
      },
      excludedDiskList: {
        serializedName: "excludedDiskList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskInformation"
            }
          }
        }
      }
    }
  }
};

export const JobQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobQueryObject",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const WeeklyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklyRetentionSchedule",
    modelProperties: {
      daysOfTheWeek: {
        serializedName: "daysOfTheWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const MonthlyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonthlyRetentionSchedule",
    modelProperties: {
      retentionScheduleFormatType: {
        serializedName: "retentionScheduleFormatType",
        type: {
          name: "String"
        }
      },
      retentionScheduleDaily: {
        serializedName: "retentionScheduleDaily",
        type: {
          name: "Composite",
          className: "DailyRetentionFormat"
        }
      },
      retentionScheduleWeekly: {
        serializedName: "retentionScheduleWeekly",
        type: {
          name: "Composite",
          className: "WeeklyRetentionFormat"
        }
      },
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const WeeklyRetentionFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklyRetentionFormat",
    modelProperties: {
      daysOfTheWeek: {
        serializedName: "daysOfTheWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      weeksOfTheMonth: {
        serializedName: "weeksOfTheMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "First",
                "Second",
                "Third",
                "Fourth",
                "Last",
                "Invalid"
              ]
            }
          }
        }
      }
    }
  }
};

export const YearlyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "YearlyRetentionSchedule",
    modelProperties: {
      retentionScheduleFormatType: {
        serializedName: "retentionScheduleFormatType",
        type: {
          name: "String"
        }
      },
      monthsOfYear: {
        serializedName: "monthsOfYear",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Invalid",
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
              ]
            }
          }
        }
      },
      retentionScheduleDaily: {
        serializedName: "retentionScheduleDaily",
        type: {
          name: "Composite",
          className: "DailyRetentionFormat"
        }
      },
      retentionScheduleWeekly: {
        serializedName: "retentionScheduleWeekly",
        type: {
          name: "Composite",
          className: "WeeklyRetentionFormat"
        }
      },
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const MabErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MabErrorInfo",
    modelProperties: {
      errorString: {
        serializedName: "errorString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendations: {
        serializedName: "recommendations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MabFileFolderProtectedItemExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MabFileFolderProtectedItemExtendedInfo",
    modelProperties: {
      lastRefreshedAt: {
        serializedName: "lastRefreshedAt",
        type: {
          name: "DateTime"
        }
      },
      oldestRecoveryPoint: {
        serializedName: "oldestRecoveryPoint",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointCount: {
        serializedName: "recoveryPointCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MabJobExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MabJobExtendedInfo",
    modelProperties: {
      tasksList: {
        serializedName: "tasksList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MabJobTaskDetails"
            }
          }
        }
      },
      propertyBag: {
        serializedName: "propertyBag",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      dynamicErrorMessage: {
        serializedName: "dynamicErrorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MabJobTaskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MabJobTaskDetails",
    modelProperties: {
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectedItemQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemQueryObject",
    modelProperties: {
      healthState: {
        serializedName: "healthState",
        type: {
          name: "String"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      itemType: {
        serializedName: "itemType",
        type: {
          name: "String"
        }
      },
      policyName: {
        serializedName: "policyName",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      backupEngineName: {
        serializedName: "backupEngineName",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      backupSetName: {
        serializedName: "backupSetName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionPolicyQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionPolicyQueryObject",
    modelProperties: {
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultJobErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultJobErrorInfo",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "Number"
        }
      },
      errorString: {
        serializedName: "errorString",
        type: {
          name: "String"
        }
      },
      recommendations: {
        serializedName: "recommendations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VaultJobExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultJobExtendedInfo",
    modelProperties: {
      propertyBag: {
        serializedName: "propertyBag",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DPMContainerExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DPMContainerExtendedInfo",
    modelProperties: {
      lastRefreshedAt: {
        serializedName: "lastRefreshedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureWorkloadContainerExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureWorkloadContainerExtendedInfo",
    modelProperties: {
      hostServerName: {
        serializedName: "hostServerName",
        type: {
          name: "String"
        }
      },
      inquiryInfo: {
        serializedName: "inquiryInfo",
        type: {
          name: "Composite",
          className: "InquiryInfo"
        }
      },
      nodesList: {
        serializedName: "nodesList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DistributedNodesInfo"
            }
          }
        }
      }
    }
  }
};

export const InquiryInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InquiryInfo",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      errorDetail: {
        serializedName: "errorDetail",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      },
      inquiryDetails: {
        serializedName: "inquiryDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadInquiryDetails"
            }
          }
        }
      }
    }
  }
};

export const WorkloadInquiryDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadInquiryDetails",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      itemCount: {
        serializedName: "itemCount",
        type: {
          name: "Number"
        }
      },
      inquiryValidation: {
        serializedName: "inquiryValidation",
        type: {
          name: "Composite",
          className: "InquiryValidation"
        }
      }
    }
  }
};

export const InquiryValidation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InquiryValidation",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      errorDetail: {
        serializedName: "errorDetail",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      },
      additionalDetail: {
        serializedName: "additionalDetail",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DistributedNodesInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DistributedNodesInfo",
    modelProperties: {
      nodeName: {
        serializedName: "nodeName",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      errorDetail: {
        serializedName: "errorDetail",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const PreBackupValidation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PreBackupValidation",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BMSBackupSummariesQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BMSBackupSummariesQueryObject",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionIntentQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionIntentQueryObject",
    modelProperties: {
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      itemType: {
        serializedName: "itemType",
        type: {
          name: "String"
        }
      },
      parentName: {
        serializedName: "parentName",
        type: {
          name: "String"
        }
      },
      itemName: {
        serializedName: "itemName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BMSBackupEngineQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BMSBackupEngineQueryObject",
    modelProperties: {
      expand: {
        serializedName: "expand",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BMSBackupEnginesQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BMSBackupEnginesQueryObject",
    modelProperties: {
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      expand: {
        serializedName: "expand",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BMSContainerQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BMSContainerQueryObject",
    modelProperties: {
      backupManagementType: {
        serializedName: "backupManagementType",
        required: true,
        type: {
          name: "String"
        }
      },
      containerType: {
        serializedName: "containerType",
        type: {
          name: "String"
        }
      },
      backupEngineName: {
        serializedName: "backupEngineName",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BMSContainersInquiryQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BMSContainersInquiryQueryObject",
    modelProperties: {
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BmspoQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BmspoQueryObject",
    modelProperties: {
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BMSRefreshContainersQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BMSRefreshContainersQueryObject",
    modelProperties: {
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BMSWorkloadItemQueryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BMSWorkloadItemQueryObject",
    modelProperties: {
      backupManagementType: {
        serializedName: "backupManagementType",
        type: {
          name: "String"
        }
      },
      workloadItemType: {
        serializedName: "workloadItemType",
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      },
      protectionStatus: {
        serializedName: "protectionStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientScriptForConnect: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientScriptForConnect",
    modelProperties: {
      scriptContent: {
        serializedName: "scriptContent",
        type: {
          name: "String"
        }
      },
      scriptExtension: {
        serializedName: "scriptExtension",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      scriptNameSuffix: {
        serializedName: "scriptNameSuffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerIdentityInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerIdentityInfo",
    modelProperties: {
      uniqueName: {
        serializedName: "uniqueName",
        type: {
          name: "String"
        }
      },
      aadTenantId: {
        serializedName: "aadTenantId",
        type: {
          name: "String"
        }
      },
      servicePrincipalClientId: {
        serializedName: "servicePrincipalClientId",
        type: {
          name: "String"
        }
      },
      audience: {
        serializedName: "audience",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenericContainerExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenericContainerExtendedInfo",
    modelProperties: {
      rawCertData: {
        serializedName: "rawCertData",
        type: {
          name: "String"
        }
      },
      containerIdentityInfo: {
        serializedName: "containerIdentityInfo",
        type: {
          name: "Composite",
          className: "ContainerIdentityInfo"
        }
      },
      serviceEndpoints: {
        serializedName: "serviceEndpoints",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const InstantItemRecoveryTarget: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstantItemRecoveryTarget",
    modelProperties: {
      clientScripts: {
        serializedName: "clientScripts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientScriptForConnect"
            }
          }
        }
      }
    }
  }
};

export const MabContainerExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MabContainerExtendedInfo",
    modelProperties: {
      lastRefreshedAt: {
        serializedName: "lastRefreshedAt",
        type: {
          name: "DateTime"
        }
      },
      backupItemType: {
        serializedName: "backupItemType",
        type: {
          name: "String"
        }
      },
      backupItems: {
        serializedName: "backupItems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      policyName: {
        serializedName: "policyName",
        type: {
          name: "String"
        }
      },
      lastBackupStatus: {
        serializedName: "lastBackupStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MABContainerHealthDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MABContainerHealthDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "Number"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      recommendations: {
        serializedName: "recommendations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPointRehydrationInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointRehydrationInfo",
    modelProperties: {
      rehydrationRetentionDuration: {
        serializedName: "rehydrationRetentionDuration",
        type: {
          name: "String"
        }
      },
      rehydrationPriority: {
        serializedName: "rehydrationPriority",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupResourceConfigResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupResourceConfigResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BackupResourceConfig"
        }
      }
    }
  }
};

export const ProtectionIntentResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionIntentResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectionIntent"
        }
      }
    }
  }
};

export const BackupResourceVaultConfigResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupResourceVaultConfigResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BackupResourceVaultConfig"
        }
      }
    }
  }
};

export const BackupResourceEncryptionConfigExtendedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupResourceEncryptionConfigExtendedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BackupResourceEncryptionConfigExtended"
        }
      }
    }
  }
};

export const BackupResourceEncryptionConfigResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupResourceEncryptionConfigResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BackupResourceEncryptionConfig"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnection"
        }
      }
    }
  }
};

export const ProtectedItemResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectedItem"
        }
      }
    }
  }
};

export const RecoveryPointResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPoint"
        }
      }
    }
  }
};

export const RestoreRequestResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestoreRequestResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RestoreRequest"
        }
      }
    }
  }
};

export const ProtectionPolicyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionPolicyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectionPolicy"
        }
      }
    }
  }
};

export const JobResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "Job"
        }
      }
    }
  }
};

export const BackupEngineBaseResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupEngineBaseResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BackupEngineBase"
        }
      }
    }
  }
};

export const ProtectableContainerResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectableContainerResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectableContainer"
        }
      }
    }
  }
};

export const ProtectionContainerResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainerResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectionContainer"
        }
      }
    }
  }
};

export const WorkloadItemResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadItemResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WorkloadItem"
        }
      }
    }
  }
};

export const BackupRequestResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupRequestResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BackupRequest"
        }
      }
    }
  }
};

export const ILRRequestResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ILRRequestResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ILRRequest"
        }
      }
    }
  }
};

export const WorkloadProtectableItemResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadProtectableItemResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WorkloadProtectableItem"
        }
      }
    }
  }
};

export const ResourceGuardProxyBaseResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardProxyBaseResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ResourceGuardProxyBase"
        }
      }
    }
  }
};

export const AzureBackupGoalFeatureSupportRequest: coreClient.CompositeMapper = {
  serializedName: "AzureBackupGoals",
  type: {
    name: "Composite",
    className: "AzureBackupGoalFeatureSupportRequest",
    uberParent: "FeatureSupportRequest",
    polymorphicDiscriminator:
      FeatureSupportRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...FeatureSupportRequest.type.modelProperties
    }
  }
};

export const AzureVMResourceFeatureSupportRequest: coreClient.CompositeMapper = {
  serializedName: "AzureVMResourceBackup",
  type: {
    name: "Composite",
    className: "AzureVMResourceFeatureSupportRequest",
    uberParent: "FeatureSupportRequest",
    polymorphicDiscriminator:
      FeatureSupportRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...FeatureSupportRequest.type.modelProperties,
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      vmSku: {
        serializedName: "vmSku",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureRecoveryServiceVaultProtectionIntent: coreClient.CompositeMapper = {
  serializedName: "RecoveryServiceVaultItem",
  type: {
    name: "Composite",
    className: "AzureRecoveryServiceVaultProtectionIntent",
    uberParent: "ProtectionIntent",
    polymorphicDiscriminator: {
      serializedName: "protectionIntentItemType",
      clientName: "protectionIntentItemType"
    },
    modelProperties: {
      ...ProtectionIntent.type.modelProperties
    }
  }
};

export const AzureResourceProtectionIntent: coreClient.CompositeMapper = {
  serializedName: "AzureResourceItem",
  type: {
    name: "Composite",
    className: "AzureResourceProtectionIntent",
    uberParent: "ProtectionIntent",
    polymorphicDiscriminator: ProtectionIntent.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionIntent.type.modelProperties,
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureWorkloadContainerAutoProtectionIntent: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadContainerAutoProtectionIntent",
  type: {
    name: "Composite",
    className: "AzureWorkloadContainerAutoProtectionIntent",
    uberParent: "ProtectionIntent",
    polymorphicDiscriminator: ProtectionIntent.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionIntent.type.modelProperties
    }
  }
};

export const ProtectionIntentResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionIntentResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtectionIntentResource"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPointResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPointResource"
            }
          }
        }
      }
    }
  }
};

export const ProtectionPolicyResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionPolicyResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtectionPolicyResource"
            }
          }
        }
      }
    }
  }
};

export const JobResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobResource"
            }
          }
        }
      }
    }
  }
};

export const ProtectedItemResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtectedItemResource"
            }
          }
        }
      }
    }
  }
};

export const BackupEngineBaseResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupEngineBaseResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupEngineBaseResource"
            }
          }
        }
      }
    }
  }
};

export const ProtectableContainerResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectableContainerResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtectableContainerResource"
            }
          }
        }
      }
    }
  }
};

export const WorkloadItemResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadItemResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadItemResource"
            }
          }
        }
      }
    }
  }
};

export const WorkloadProtectableItemResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadProtectableItemResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadProtectableItemResource"
            }
          }
        }
      }
    }
  }
};

export const ProtectionContainerResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainerResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtectionContainerResource"
            }
          }
        }
      }
    }
  }
};

export const ResourceGuardProxyBaseResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardProxyBaseResourceList",
    modelProperties: {
      ...ResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceGuardProxyBaseResource"
            }
          }
        }
      }
    }
  }
};

export const BackupResourceEncryptionConfigExtended: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupResourceEncryptionConfigExtended",
    modelProperties: {
      ...BackupResourceEncryptionConfig.type.modelProperties,
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      },
      useSystemAssignedIdentity: {
        serializedName: "useSystemAssignedIdentity",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationStatusJobExtendedInfo: coreClient.CompositeMapper = {
  serializedName: "OperationStatusJobExtendedInfo",
  type: {
    name: "Composite",
    className: "OperationStatusJobExtendedInfo",
    uberParent: "OperationStatusExtendedInfo",
    polymorphicDiscriminator:
      OperationStatusExtendedInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...OperationStatusExtendedInfo.type.modelProperties,
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatusJobsExtendedInfo: coreClient.CompositeMapper = {
  serializedName: "OperationStatusJobsExtendedInfo",
  type: {
    name: "Composite",
    className: "OperationStatusJobsExtendedInfo",
    uberParent: "OperationStatusExtendedInfo",
    polymorphicDiscriminator:
      OperationStatusExtendedInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...OperationStatusExtendedInfo.type.modelProperties,
      jobIds: {
        serializedName: "jobIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      failedJobsError: {
        serializedName: "failedJobsError",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const OperationStatusProvisionILRExtendedInfo: coreClient.CompositeMapper = {
  serializedName: "OperationStatusProvisionILRExtendedInfo",
  type: {
    name: "Composite",
    className: "OperationStatusProvisionILRExtendedInfo",
    uberParent: "OperationStatusExtendedInfo",
    polymorphicDiscriminator:
      OperationStatusExtendedInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...OperationStatusExtendedInfo.type.modelProperties,
      recoveryTarget: {
        serializedName: "recoveryTarget",
        type: {
          name: "Composite",
          className: "InstantItemRecoveryTarget"
        }
      }
    }
  }
};

export const OperationStatusValidateOperationExtendedInfo: coreClient.CompositeMapper = {
  serializedName: "OperationStatusValidateOperationExtendedInfo",
  type: {
    name: "Composite",
    className: "OperationStatusValidateOperationExtendedInfo",
    uberParent: "OperationStatusExtendedInfo",
    polymorphicDiscriminator:
      OperationStatusExtendedInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...OperationStatusExtendedInfo.type.modelProperties,
      validateOperationResponse: {
        serializedName: "validateOperationResponse",
        type: {
          name: "Composite",
          className: "ValidateOperationResponse"
        }
      }
    }
  }
};

export const PrepareDataMoveResponse: coreClient.CompositeMapper = {
  serializedName: "PrepareDataMoveResponse",
  type: {
    name: "Composite",
    className: "PrepareDataMoveResponse",
    uberParent: "VaultStorageConfigOperationResultResponse",
    polymorphicDiscriminator:
      VaultStorageConfigOperationResultResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...VaultStorageConfigOperationResultResponse.type.modelProperties,
      correlationId: {
        serializedName: "correlationId",
        type: {
          name: "String"
        }
      },
      sourceVaultProperties: {
        serializedName: "sourceVaultProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AzureFileshareProtectedItem: coreClient.CompositeMapper = {
  serializedName: "AzureFileShareProtectedItem",
  type: {
    name: "Composite",
    className: "AzureFileshareProtectedItem",
    uberParent: "ProtectedItem",
    polymorphicDiscriminator: ProtectedItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectedItem.type.modelProperties,
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      protectionStatus: {
        serializedName: "protectionStatus",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      },
      lastBackupStatus: {
        serializedName: "lastBackupStatus",
        type: {
          name: "String"
        }
      },
      lastBackupTime: {
        serializedName: "lastBackupTime",
        type: {
          name: "DateTime"
        }
      },
      kpisHealths: {
        serializedName: "kpisHealths",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "KPIResourceHealthDetails" }
          }
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "AzureFileshareProtectedItemExtendedInfo"
        }
      }
    }
  }
};

export const AzureIaaSVMProtectedItem: coreClient.CompositeMapper = {
  serializedName: "AzureIaaSVMProtectedItem",
  type: {
    name: "Composite",
    className: "AzureIaaSVMProtectedItem",
    uberParent: "ProtectedItem",
    polymorphicDiscriminator: {
      serializedName: "protectedItemType",
      clientName: "protectedItemType"
    },
    modelProperties: {
      ...ProtectedItem.type.modelProperties,
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      virtualMachineId: {
        serializedName: "virtualMachineId",
        type: {
          name: "String"
        }
      },
      protectionStatus: {
        serializedName: "protectionStatus",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      },
      healthStatus: {
        serializedName: "healthStatus",
        type: {
          name: "String"
        }
      },
      healthDetails: {
        serializedName: "healthDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureIaaSVMHealthDetails"
            }
          }
        }
      },
      kpisHealths: {
        serializedName: "kpisHealths",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "KPIResourceHealthDetails" }
          }
        }
      },
      lastBackupStatus: {
        serializedName: "lastBackupStatus",
        type: {
          name: "String"
        }
      },
      lastBackupTime: {
        serializedName: "lastBackupTime",
        type: {
          name: "DateTime"
        }
      },
      protectedItemDataId: {
        serializedName: "protectedItemDataId",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "AzureIaaSVMProtectedItemExtendedInfo"
        }
      },
      extendedProperties: {
        serializedName: "extendedProperties",
        type: {
          name: "Composite",
          className: "ExtendedProperties"
        }
      }
    }
  }
};

export const AzureSqlProtectedItem: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Sql/servers/databases",
  type: {
    name: "Composite",
    className: "AzureSqlProtectedItem",
    uberParent: "ProtectedItem",
    polymorphicDiscriminator: ProtectedItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectedItem.type.modelProperties,
      protectedItemDataId: {
        serializedName: "protectedItemDataId",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "AzureSqlProtectedItemExtendedInfo"
        }
      }
    }
  }
};

export const AzureVmWorkloadProtectedItem: coreClient.CompositeMapper = {
  serializedName: "AzureVmWorkloadProtectedItem",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadProtectedItem",
    uberParent: "ProtectedItem",
    polymorphicDiscriminator: {
      serializedName: "protectedItemType",
      clientName: "protectedItemType"
    },
    modelProperties: {
      ...ProtectedItem.type.modelProperties,
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "serverName",
        type: {
          name: "String"
        }
      },
      parentName: {
        serializedName: "parentName",
        type: {
          name: "String"
        }
      },
      parentType: {
        serializedName: "parentType",
        type: {
          name: "String"
        }
      },
      protectionStatus: {
        serializedName: "protectionStatus",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      },
      lastBackupStatus: {
        serializedName: "lastBackupStatus",
        type: {
          name: "String"
        }
      },
      lastBackupTime: {
        serializedName: "lastBackupTime",
        type: {
          name: "DateTime"
        }
      },
      lastBackupErrorDetail: {
        serializedName: "lastBackupErrorDetail",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      },
      protectedItemDataSourceId: {
        serializedName: "protectedItemDataSourceId",
        type: {
          name: "String"
        }
      },
      protectedItemHealthStatus: {
        serializedName: "protectedItemHealthStatus",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "AzureVmWorkloadProtectedItemExtendedInfo"
        }
      },
      kpisHealths: {
        serializedName: "kpisHealths",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "KPIResourceHealthDetails" }
          }
        }
      }
    }
  }
};

export const DPMProtectedItem: coreClient.CompositeMapper = {
  serializedName: "DPMProtectedItem",
  type: {
    name: "Composite",
    className: "DPMProtectedItem",
    uberParent: "ProtectedItem",
    polymorphicDiscriminator: ProtectedItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectedItem.type.modelProperties,
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      backupEngineName: {
        serializedName: "backupEngineName",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "DPMProtectedItemExtendedInfo"
        }
      }
    }
  }
};

export const GenericProtectedItem: coreClient.CompositeMapper = {
  serializedName: "GenericProtectedItem",
  type: {
    name: "Composite",
    className: "GenericProtectedItem",
    uberParent: "ProtectedItem",
    polymorphicDiscriminator: ProtectedItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectedItem.type.modelProperties,
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      policyState: {
        serializedName: "policyState",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      },
      protectedItemId: {
        serializedName: "protectedItemId",
        type: {
          name: "Number"
        }
      },
      sourceAssociations: {
        serializedName: "sourceAssociations",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MabFileFolderProtectedItem: coreClient.CompositeMapper = {
  serializedName: "MabFileFolderProtectedItem",
  type: {
    name: "Composite",
    className: "MabFileFolderProtectedItem",
    uberParent: "ProtectedItem",
    polymorphicDiscriminator: ProtectedItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectedItem.type.modelProperties,
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      computerName: {
        serializedName: "computerName",
        type: {
          name: "String"
        }
      },
      lastBackupStatus: {
        serializedName: "lastBackupStatus",
        type: {
          name: "String"
        }
      },
      lastBackupTime: {
        serializedName: "lastBackupTime",
        type: {
          name: "DateTime"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      },
      deferredDeleteSyncTimeInUTC: {
        serializedName: "deferredDeleteSyncTimeInUTC",
        type: {
          name: "Number"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "MabFileFolderProtectedItemExtendedInfo"
        }
      }
    }
  }
};

export const AzureFileShareRecoveryPoint: coreClient.CompositeMapper = {
  serializedName: "AzureFileShareRecoveryPoint",
  type: {
    name: "Composite",
    className: "AzureFileShareRecoveryPoint",
    uberParent: "RecoveryPoint",
    polymorphicDiscriminator: RecoveryPoint.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPoint.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      },
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        type: {
          name: "DateTime"
        }
      },
      fileShareSnapshotUri: {
        serializedName: "fileShareSnapshotUri",
        type: {
          name: "String"
        }
      },
      recoveryPointSizeInGB: {
        serializedName: "recoveryPointSizeInGB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AzureWorkloadRecoveryPoint: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadRecoveryPoint",
  type: {
    name: "Composite",
    className: "AzureWorkloadRecoveryPoint",
    uberParent: "RecoveryPoint",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...RecoveryPoint.type.modelProperties,
      recoveryPointTimeInUTC: {
        serializedName: "recoveryPointTimeInUTC",
        type: {
          name: "DateTime"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      recoveryPointTierDetails: {
        serializedName: "recoveryPointTierDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPointTierInformationV2"
            }
          }
        }
      },
      recoveryPointMoveReadinessInfo: {
        serializedName: "recoveryPointMoveReadinessInfo",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "RecoveryPointMoveReadinessInfo"
            }
          }
        }
      }
    }
  }
};

export const GenericRecoveryPoint: coreClient.CompositeMapper = {
  serializedName: "GenericRecoveryPoint",
  type: {
    name: "Composite",
    className: "GenericRecoveryPoint",
    uberParent: "RecoveryPoint",
    polymorphicDiscriminator: RecoveryPoint.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPoint.type.modelProperties,
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      },
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointAdditionalInfo: {
        serializedName: "recoveryPointAdditionalInfo",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IaasVMRecoveryPoint: coreClient.CompositeMapper = {
  serializedName: "IaasVMRecoveryPoint",
  type: {
    name: "Composite",
    className: "IaasVMRecoveryPoint",
    uberParent: "RecoveryPoint",
    polymorphicDiscriminator: RecoveryPoint.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPoint.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      },
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointAdditionalInfo: {
        serializedName: "recoveryPointAdditionalInfo",
        type: {
          name: "String"
        }
      },
      sourceVMStorageType: {
        serializedName: "sourceVMStorageType",
        type: {
          name: "String"
        }
      },
      isSourceVMEncrypted: {
        serializedName: "isSourceVMEncrypted",
        type: {
          name: "Boolean"
        }
      },
      keyAndSecret: {
        serializedName: "keyAndSecret",
        type: {
          name: "Composite",
          className: "KeyAndSecretDetails"
        }
      },
      isInstantIlrSessionActive: {
        serializedName: "isInstantIlrSessionActive",
        type: {
          name: "Boolean"
        }
      },
      recoveryPointTierDetails: {
        serializedName: "recoveryPointTierDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPointTierInformationV2"
            }
          }
        }
      },
      isManagedVirtualMachine: {
        serializedName: "isManagedVirtualMachine",
        type: {
          name: "Boolean"
        }
      },
      virtualMachineSize: {
        serializedName: "virtualMachineSize",
        type: {
          name: "String"
        }
      },
      originalStorageAccountOption: {
        serializedName: "originalStorageAccountOption",
        type: {
          name: "Boolean"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      recoveryPointDiskConfiguration: {
        serializedName: "recoveryPointDiskConfiguration",
        type: {
          name: "Composite",
          className: "RecoveryPointDiskConfiguration"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      recoveryPointMoveReadinessInfo: {
        serializedName: "recoveryPointMoveReadinessInfo",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "RecoveryPointMoveReadinessInfo"
            }
          }
        }
      }
    }
  }
};

export const AzureFileShareRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "AzureFileShareRestoreRequest",
  type: {
    name: "Composite",
    className: "AzureFileShareRestoreRequest",
    uberParent: "RestoreRequest",
    polymorphicDiscriminator: RestoreRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...RestoreRequest.type.modelProperties,
      recoveryType: {
        serializedName: "recoveryType",
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      },
      copyOptions: {
        serializedName: "copyOptions",
        type: {
          name: "String"
        }
      },
      restoreRequestType: {
        serializedName: "restoreRequestType",
        type: {
          name: "String"
        }
      },
      restoreFileSpecs: {
        serializedName: "restoreFileSpecs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestoreFileSpecs"
            }
          }
        }
      },
      targetDetails: {
        serializedName: "targetDetails",
        type: {
          name: "Composite",
          className: "TargetAFSRestoreInfo"
        }
      }
    }
  }
};

export const AzureWorkloadRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadRestoreRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadRestoreRequest",
    uberParent: "RestoreRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...RestoreRequest.type.modelProperties,
      recoveryType: {
        serializedName: "recoveryType",
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      },
      propertyBag: {
        serializedName: "propertyBag",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetInfo: {
        serializedName: "targetInfo",
        type: {
          name: "Composite",
          className: "TargetRestoreInfo"
        }
      },
      recoveryMode: {
        serializedName: "recoveryMode",
        type: {
          name: "String"
        }
      },
      targetVirtualMachineId: {
        serializedName: "targetVirtualMachineId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IaasVMRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "IaasVMRestoreRequest",
  type: {
    name: "Composite",
    className: "IaasVMRestoreRequest",
    uberParent: "RestoreRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...RestoreRequest.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      recoveryType: {
        serializedName: "recoveryType",
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      },
      targetVirtualMachineId: {
        serializedName: "targetVirtualMachineId",
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        serializedName: "targetResourceGroupId",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      virtualNetworkId: {
        serializedName: "virtualNetworkId",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      targetDomainNameId: {
        serializedName: "targetDomainNameId",
        type: {
          name: "String"
        }
      },
      region: {
        serializedName: "region",
        type: {
          name: "String"
        }
      },
      affinityGroup: {
        serializedName: "affinityGroup",
        type: {
          name: "String"
        }
      },
      createNewCloudService: {
        serializedName: "createNewCloudService",
        type: {
          name: "Boolean"
        }
      },
      originalStorageAccountOption: {
        serializedName: "originalStorageAccountOption",
        type: {
          name: "Boolean"
        }
      },
      encryptionDetails: {
        serializedName: "encryptionDetails",
        type: {
          name: "Composite",
          className: "EncryptionDetails"
        }
      },
      restoreDiskLunList: {
        serializedName: "restoreDiskLunList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      restoreWithManagedDisks: {
        serializedName: "restoreWithManagedDisks",
        type: {
          name: "Boolean"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      identityInfo: {
        serializedName: "identityInfo",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      identityBasedRestoreDetails: {
        serializedName: "identityBasedRestoreDetails",
        type: {
          name: "Composite",
          className: "IdentityBasedRestoreDetails"
        }
      }
    }
  }
};

export const AzureVmWorkloadProtectionPolicy: coreClient.CompositeMapper = {
  serializedName: "AzureWorkload",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionPolicy.type.modelProperties,
      workLoadType: {
        serializedName: "workLoadType",
        type: {
          name: "String"
        }
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Composite",
          className: "Settings"
        }
      },
      subProtectionPolicy: {
        serializedName: "subProtectionPolicy",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubProtectionPolicy"
            }
          }
        }
      },
      makePolicyConsistent: {
        serializedName: "makePolicyConsistent",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureFileShareProtectionPolicy: coreClient.CompositeMapper = {
  serializedName: "AzureStorage",
  type: {
    name: "Composite",
    className: "AzureFileShareProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionPolicy.type.modelProperties,
      workLoadType: {
        serializedName: "workLoadType",
        type: {
          name: "String"
        }
      },
      schedulePolicy: {
        serializedName: "schedulePolicy",
        type: {
          name: "Composite",
          className: "SchedulePolicy"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureIaaSVMProtectionPolicy: coreClient.CompositeMapper = {
  serializedName: "AzureIaasVM",
  type: {
    name: "Composite",
    className: "AzureIaaSVMProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionPolicy.type.modelProperties,
      instantRPDetails: {
        serializedName: "instantRPDetails",
        type: {
          name: "Composite",
          className: "InstantRPAdditionalDetails"
        }
      },
      schedulePolicy: {
        serializedName: "schedulePolicy",
        type: {
          name: "Composite",
          className: "SchedulePolicy"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      instantRpRetentionRangeInDays: {
        serializedName: "instantRpRetentionRangeInDays",
        type: {
          name: "Number"
        }
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      policyType: {
        serializedName: "policyType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureSqlProtectionPolicy: coreClient.CompositeMapper = {
  serializedName: "AzureSql",
  type: {
    name: "Composite",
    className: "AzureSqlProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionPolicy.type.modelProperties,
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};

export const GenericProtectionPolicy: coreClient.CompositeMapper = {
  serializedName: "GenericProtectionPolicy",
  type: {
    name: "Composite",
    className: "GenericProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionPolicy.type.modelProperties,
      subProtectionPolicy: {
        serializedName: "subProtectionPolicy",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubProtectionPolicy"
            }
          }
        }
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MabProtectionPolicy: coreClient.CompositeMapper = {
  serializedName: "MAB",
  type: {
    name: "Composite",
    className: "MabProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionPolicy.type.modelProperties,
      schedulePolicy: {
        serializedName: "schedulePolicy",
        type: {
          name: "Composite",
          className: "SchedulePolicy"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};

export const AzureIaaSVMJob: coreClient.CompositeMapper = {
  serializedName: "AzureIaaSVMJob",
  type: {
    name: "Composite",
    className: "AzureIaaSVMJob",
    uberParent: "Job",
    polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
    modelProperties: {
      ...Job.type.modelProperties,
      duration: {
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      actionsInfo: {
        serializedName: "actionsInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["Invalid", "Cancellable", "Retriable"]
            }
          }
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureIaaSVMErrorInfo"
            }
          }
        }
      },
      virtualMachineVersion: {
        serializedName: "virtualMachineVersion",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "AzureIaaSVMJobExtendedInfo"
        }
      },
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      isUserTriggered: {
        serializedName: "isUserTriggered",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureIaaSVMJobV2: coreClient.CompositeMapper = {
  serializedName: "AzureIaaSVMJobV2",
  type: {
    name: "Composite",
    className: "AzureIaaSVMJobV2",
    uberParent: "Job",
    polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
    modelProperties: {
      ...Job.type.modelProperties,
      actionsInfo: {
        serializedName: "actionsInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["Invalid", "Cancellable", "Retriable"]
            }
          }
        }
      },
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureIaaSVMErrorInfo"
            }
          }
        }
      },
      virtualMachineVersion: {
        serializedName: "virtualMachineVersion",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "AzureIaaSVMJobExtendedInfo"
        }
      }
    }
  }
};

export const AzureStorageJob: coreClient.CompositeMapper = {
  serializedName: "AzureStorageJob",
  type: {
    name: "Composite",
    className: "AzureStorageJob",
    uberParent: "Job",
    polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
    modelProperties: {
      ...Job.type.modelProperties,
      duration: {
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      actionsInfo: {
        serializedName: "actionsInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["Invalid", "Cancellable", "Retriable"]
            }
          }
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureStorageErrorInfo"
            }
          }
        }
      },
      storageAccountName: {
        serializedName: "storageAccountName",
        type: {
          name: "String"
        }
      },
      storageAccountVersion: {
        serializedName: "storageAccountVersion",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "AzureStorageJobExtendedInfo"
        }
      },
      isUserTriggered: {
        serializedName: "isUserTriggered",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureWorkloadJob: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadJob",
  type: {
    name: "Composite",
    className: "AzureWorkloadJob",
    uberParent: "Job",
    polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
    modelProperties: {
      ...Job.type.modelProperties,
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      actionsInfo: {
        serializedName: "actionsInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["Invalid", "Cancellable", "Retriable"]
            }
          }
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureWorkloadErrorInfo"
            }
          }
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "AzureWorkloadJobExtendedInfo"
        }
      }
    }
  }
};

export const DpmJob: coreClient.CompositeMapper = {
  serializedName: "DpmJob",
  type: {
    name: "Composite",
    className: "DpmJob",
    uberParent: "Job",
    polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
    modelProperties: {
      ...Job.type.modelProperties,
      duration: {
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      dpmServerName: {
        serializedName: "dpmServerName",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      containerType: {
        serializedName: "containerType",
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      },
      actionsInfo: {
        serializedName: "actionsInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["Invalid", "Cancellable", "Retriable"]
            }
          }
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DpmErrorInfo"
            }
          }
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "DpmJobExtendedInfo"
        }
      }
    }
  }
};

export const MabJob: coreClient.CompositeMapper = {
  serializedName: "MabJob",
  type: {
    name: "Composite",
    className: "MabJob",
    uberParent: "Job",
    polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
    modelProperties: {
      ...Job.type.modelProperties,
      duration: {
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      actionsInfo: {
        serializedName: "actionsInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["Invalid", "Cancellable", "Retriable"]
            }
          }
        }
      },
      mabServerName: {
        serializedName: "mabServerName",
        type: {
          name: "String"
        }
      },
      mabServerType: {
        serializedName: "mabServerType",
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MabErrorInfo"
            }
          }
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "MabJobExtendedInfo"
        }
      }
    }
  }
};

export const VaultJob: coreClient.CompositeMapper = {
  serializedName: "VaultJob",
  type: {
    name: "Composite",
    className: "VaultJob",
    uberParent: "Job",
    polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
    modelProperties: {
      ...Job.type.modelProperties,
      duration: {
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      actionsInfo: {
        serializedName: "actionsInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["Invalid", "Cancellable", "Retriable"]
            }
          }
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VaultJobErrorInfo"
            }
          }
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "VaultJobExtendedInfo"
        }
      }
    }
  }
};

export const ExportJobsOperationResultInfo: coreClient.CompositeMapper = {
  serializedName: "ExportJobsOperationResultInfo",
  type: {
    name: "Composite",
    className: "ExportJobsOperationResultInfo",
    uberParent: "OperationResultInfoBase",
    polymorphicDiscriminator:
      OperationResultInfoBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...OperationResultInfoBase.type.modelProperties,
      blobUrl: {
        serializedName: "blobUrl",
        type: {
          name: "String"
        }
      },
      blobSasKey: {
        serializedName: "blobSasKey",
        type: {
          name: "String"
        }
      },
      excelFileBlobUrl: {
        serializedName: "excelFileBlobUrl",
        type: {
          name: "String"
        }
      },
      excelFileBlobSasKey: {
        serializedName: "excelFileBlobSasKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResultInfo: coreClient.CompositeMapper = {
  serializedName: "OperationResultInfo",
  type: {
    name: "Composite",
    className: "OperationResultInfo",
    uberParent: "OperationResultInfoBase",
    modelProperties: {
      ...OperationResultInfoBase.type.modelProperties,
      jobList: {
        serializedName: "jobList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
OperationResultInfoBase.type.polymorphicDiscriminator =
  OperationResultInfoBase.type.polymorphicDiscriminator;

export const OperationResultInfoBaseResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResultInfoBaseResource",
    modelProperties: {
      ...OperationWorkerResponse.type.modelProperties,
      operation: {
        serializedName: "operation",
        type: {
          name: "Composite",
          className: "OperationResultInfoBase"
        }
      }
    }
  }
};

export const ValidateRestoreOperationRequest: coreClient.CompositeMapper = {
  serializedName: "ValidateRestoreOperationRequest",
  type: {
    name: "Composite",
    className: "ValidateRestoreOperationRequest",
    uberParent: "ValidateOperationRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...ValidateOperationRequest.type.modelProperties,
      restoreRequest: {
        serializedName: "restoreRequest",
        type: {
          name: "Composite",
          className: "RestoreRequest"
        }
      }
    }
  }
};

export const AzureBackupServerEngine: coreClient.CompositeMapper = {
  serializedName: "AzureBackupServerEngine",
  type: {
    name: "Composite",
    className: "AzureBackupServerEngine",
    uberParent: "BackupEngineBase",
    polymorphicDiscriminator: BackupEngineBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupEngineBase.type.modelProperties
    }
  }
};

export const DpmBackupEngine: coreClient.CompositeMapper = {
  serializedName: "DpmBackupEngine",
  type: {
    name: "Composite",
    className: "DpmBackupEngine",
    uberParent: "BackupEngineBase",
    polymorphicDiscriminator: BackupEngineBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupEngineBase.type.modelProperties
    }
  }
};

export const AzureStorageProtectableContainer: coreClient.CompositeMapper = {
  serializedName: "StorageContainer",
  type: {
    name: "Composite",
    className: "AzureStorageProtectableContainer",
    uberParent: "ProtectableContainer",
    polymorphicDiscriminator:
      ProtectableContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectableContainer.type.modelProperties
    }
  }
};

export const AzureVMAppContainerProtectableContainer: coreClient.CompositeMapper = {
  serializedName: "VMAppContainer",
  type: {
    name: "Composite",
    className: "AzureVMAppContainerProtectableContainer",
    uberParent: "ProtectableContainer",
    polymorphicDiscriminator:
      ProtectableContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectableContainer.type.modelProperties
    }
  }
};

export const DpmContainer: coreClient.CompositeMapper = {
  serializedName: "DPMContainer",
  type: {
    name: "Composite",
    className: "DpmContainer",
    uberParent: "ProtectionContainer",
    polymorphicDiscriminator: {
      serializedName: "containerType",
      clientName: "containerType"
    },
    modelProperties: {
      ...ProtectionContainer.type.modelProperties,
      canReRegister: {
        serializedName: "canReRegister",
        type: {
          name: "Boolean"
        }
      },
      containerId: {
        serializedName: "containerId",
        type: {
          name: "String"
        }
      },
      protectedItemCount: {
        serializedName: "protectedItemCount",
        type: {
          name: "Number"
        }
      },
      dpmAgentVersion: {
        serializedName: "dpmAgentVersion",
        type: {
          name: "String"
        }
      },
      dpmServers: {
        serializedName: "dpmServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      upgradeAvailable: {
        serializedName: "upgradeAvailable",
        type: {
          name: "Boolean"
        }
      },
      protectionStatus: {
        serializedName: "protectionStatus",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "DPMContainerExtendedInfo"
        }
      }
    }
  }
};

export const IaaSVMContainer: coreClient.CompositeMapper = {
  serializedName: "IaasVMContainer",
  type: {
    name: "Composite",
    className: "IaaSVMContainer",
    uberParent: "ProtectionContainer",
    polymorphicDiscriminator: {
      serializedName: "containerType",
      clientName: "containerType"
    },
    modelProperties: {
      ...ProtectionContainer.type.modelProperties,
      virtualMachineId: {
        serializedName: "virtualMachineId",
        type: {
          name: "String"
        }
      },
      virtualMachineVersion: {
        serializedName: "virtualMachineVersion",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureWorkloadContainer: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadContainer",
  type: {
    name: "Composite",
    className: "AzureWorkloadContainer",
    uberParent: "ProtectionContainer",
    polymorphicDiscriminator: {
      serializedName: "containerType",
      clientName: "containerType"
    },
    modelProperties: {
      ...ProtectionContainer.type.modelProperties,
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "AzureWorkloadContainerExtendedInfo"
        }
      },
      workloadType: {
        serializedName: "workloadType",
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "operationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureSqlContainer: coreClient.CompositeMapper = {
  serializedName: "AzureSqlContainer",
  type: {
    name: "Composite",
    className: "AzureSqlContainer",
    uberParent: "ProtectionContainer",
    polymorphicDiscriminator: ProtectionContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionContainer.type.modelProperties
    }
  }
};

export const AzureStorageContainer: coreClient.CompositeMapper = {
  serializedName: "StorageContainer",
  type: {
    name: "Composite",
    className: "AzureStorageContainer",
    uberParent: "ProtectionContainer",
    polymorphicDiscriminator: ProtectionContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionContainer.type.modelProperties,
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      },
      storageAccountVersion: {
        serializedName: "storageAccountVersion",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      },
      protectedItemCount: {
        serializedName: "protectedItemCount",
        type: {
          name: "Number"
        }
      },
      acquireStorageAccountLock: {
        serializedName: "acquireStorageAccountLock",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenericContainer: coreClient.CompositeMapper = {
  serializedName: "GenericContainer",
  type: {
    name: "Composite",
    className: "GenericContainer",
    uberParent: "ProtectionContainer",
    polymorphicDiscriminator: ProtectionContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionContainer.type.modelProperties,
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      extendedInformation: {
        serializedName: "extendedInformation",
        type: {
          name: "Composite",
          className: "GenericContainerExtendedInfo"
        }
      }
    }
  }
};

export const MabContainer: coreClient.CompositeMapper = {
  serializedName: "Windows",
  type: {
    name: "Composite",
    className: "MabContainer",
    uberParent: "ProtectionContainer",
    polymorphicDiscriminator: ProtectionContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionContainer.type.modelProperties,
      canReRegister: {
        serializedName: "canReRegister",
        type: {
          name: "Boolean"
        }
      },
      containerId: {
        serializedName: "containerId",
        type: {
          name: "Number"
        }
      },
      protectedItemCount: {
        serializedName: "protectedItemCount",
        type: {
          name: "Number"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "MabContainerExtendedInfo"
        }
      },
      mabContainerHealthDetails: {
        serializedName: "mabContainerHealthDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MABContainerHealthDetails"
            }
          }
        }
      },
      containerHealthState: {
        serializedName: "containerHealthState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureVmWorkloadItem: coreClient.CompositeMapper = {
  serializedName: "AzureVmWorkloadItem",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadItem",
    uberParent: "WorkloadItem",
    polymorphicDiscriminator: {
      serializedName: "workloadItemType",
      clientName: "workloadItemType"
    },
    modelProperties: {
      ...WorkloadItem.type.modelProperties,
      parentName: {
        serializedName: "parentName",
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "serverName",
        type: {
          name: "String"
        }
      },
      isAutoProtectable: {
        serializedName: "isAutoProtectable",
        type: {
          name: "Boolean"
        }
      },
      subinquireditemcount: {
        serializedName: "subinquireditemcount",
        type: {
          name: "Number"
        }
      },
      subWorkloadItemCount: {
        serializedName: "subWorkloadItemCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AzureFileShareBackupRequest: coreClient.CompositeMapper = {
  serializedName: "AzureFileShareBackupRequest",
  type: {
    name: "Composite",
    className: "AzureFileShareBackupRequest",
    uberParent: "BackupRequest",
    polymorphicDiscriminator: BackupRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupRequest.type.modelProperties,
      recoveryPointExpiryTimeInUTC: {
        serializedName: "recoveryPointExpiryTimeInUTC",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureWorkloadBackupRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadBackupRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadBackupRequest",
    uberParent: "BackupRequest",
    polymorphicDiscriminator: BackupRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupRequest.type.modelProperties,
      backupType: {
        serializedName: "backupType",
        type: {
          name: "String"
        }
      },
      enableCompression: {
        serializedName: "enableCompression",
        type: {
          name: "Boolean"
        }
      },
      recoveryPointExpiryTimeInUTC: {
        serializedName: "recoveryPointExpiryTimeInUTC",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const IaasVMBackupRequest: coreClient.CompositeMapper = {
  serializedName: "IaasVMBackupRequest",
  type: {
    name: "Composite",
    className: "IaasVMBackupRequest",
    uberParent: "BackupRequest",
    polymorphicDiscriminator: BackupRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupRequest.type.modelProperties,
      recoveryPointExpiryTimeInUTC: {
        serializedName: "recoveryPointExpiryTimeInUTC",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureFileShareProvisionILRRequest: coreClient.CompositeMapper = {
  serializedName: "AzureFileShareProvisionILRRequest",
  type: {
    name: "Composite",
    className: "AzureFileShareProvisionILRRequest",
    uberParent: "ILRRequest",
    polymorphicDiscriminator: ILRRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ILRRequest.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IaasVmilrRegistrationRequest: coreClient.CompositeMapper = {
  serializedName: "IaasVMILRRegistrationRequest",
  type: {
    name: "Composite",
    className: "IaasVmilrRegistrationRequest",
    uberParent: "ILRRequest",
    polymorphicDiscriminator: ILRRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ILRRequest.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      virtualMachineId: {
        serializedName: "virtualMachineId",
        type: {
          name: "String"
        }
      },
      initiatorName: {
        serializedName: "initiatorName",
        type: {
          name: "String"
        }
      },
      renewExistingRegistration: {
        serializedName: "renewExistingRegistration",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureFileShareProtectableItem: coreClient.CompositeMapper = {
  serializedName: "AzureFileShare",
  type: {
    name: "Composite",
    className: "AzureFileShareProtectableItem",
    uberParent: "WorkloadProtectableItem",
    polymorphicDiscriminator:
      WorkloadProtectableItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkloadProtectableItem.type.modelProperties,
      parentContainerFabricId: {
        serializedName: "parentContainerFabricId",
        type: {
          name: "String"
        }
      },
      parentContainerFriendlyName: {
        serializedName: "parentContainerFriendlyName",
        type: {
          name: "String"
        }
      },
      azureFileShareType: {
        serializedName: "azureFileShareType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IaaSVMProtectableItem: coreClient.CompositeMapper = {
  serializedName: "IaaSVMProtectableItem",
  type: {
    name: "Composite",
    className: "IaaSVMProtectableItem",
    uberParent: "WorkloadProtectableItem",
    polymorphicDiscriminator: {
      serializedName: "protectableItemType",
      clientName: "protectableItemType"
    },
    modelProperties: {
      ...WorkloadProtectableItem.type.modelProperties,
      virtualMachineId: {
        serializedName: "virtualMachineId",
        type: {
          name: "String"
        }
      },
      virtualMachineVersion: {
        serializedName: "virtualMachineVersion",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureVmWorkloadProtectableItem: coreClient.CompositeMapper = {
  serializedName: "AzureVmWorkloadProtectableItem",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadProtectableItem",
    uberParent: "WorkloadProtectableItem",
    polymorphicDiscriminator: {
      serializedName: "protectableItemType",
      clientName: "protectableItemType"
    },
    modelProperties: {
      ...WorkloadProtectableItem.type.modelProperties,
      parentName: {
        serializedName: "parentName",
        type: {
          name: "String"
        }
      },
      parentUniqueName: {
        serializedName: "parentUniqueName",
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "serverName",
        type: {
          name: "String"
        }
      },
      isAutoProtectable: {
        serializedName: "isAutoProtectable",
        type: {
          name: "Boolean"
        }
      },
      isAutoProtected: {
        serializedName: "isAutoProtected",
        type: {
          name: "Boolean"
        }
      },
      subinquireditemcount: {
        serializedName: "subinquireditemcount",
        type: {
          name: "Number"
        }
      },
      subprotectableitemcount: {
        serializedName: "subprotectableitemcount",
        type: {
          name: "Number"
        }
      },
      prebackupvalidation: {
        serializedName: "prebackupvalidation",
        type: {
          name: "Composite",
          className: "PreBackupValidation"
        }
      }
    }
  }
};

export const AzureIaaSVMHealthDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureIaaSVMHealthDetails",
    modelProperties: {
      ...ResourceHealthDetails.type.modelProperties
    }
  }
};

export const LogSchedulePolicy: coreClient.CompositeMapper = {
  serializedName: "LogSchedulePolicy",
  type: {
    name: "Composite",
    className: "LogSchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties,
      scheduleFrequencyInMins: {
        serializedName: "scheduleFrequencyInMins",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LongTermSchedulePolicy: coreClient.CompositeMapper = {
  serializedName: "LongTermSchedulePolicy",
  type: {
    name: "Composite",
    className: "LongTermSchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties
    }
  }
};

export const SimpleSchedulePolicy: coreClient.CompositeMapper = {
  serializedName: "SimpleSchedulePolicy",
  type: {
    name: "Composite",
    className: "SimpleSchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties,
      scheduleRunFrequency: {
        serializedName: "scheduleRunFrequency",
        type: {
          name: "String"
        }
      },
      scheduleRunDays: {
        serializedName: "scheduleRunDays",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      scheduleRunTimes: {
        serializedName: "scheduleRunTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      hourlySchedule: {
        serializedName: "hourlySchedule",
        type: {
          name: "Composite",
          className: "HourlySchedule"
        }
      },
      scheduleWeeklyFrequency: {
        serializedName: "scheduleWeeklyFrequency",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SimpleSchedulePolicyV2: coreClient.CompositeMapper = {
  serializedName: "SimpleSchedulePolicyV2",
  type: {
    name: "Composite",
    className: "SimpleSchedulePolicyV2",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties,
      scheduleRunFrequency: {
        serializedName: "scheduleRunFrequency",
        type: {
          name: "String"
        }
      },
      hourlySchedule: {
        serializedName: "hourlySchedule",
        type: {
          name: "Composite",
          className: "HourlySchedule"
        }
      },
      dailySchedule: {
        serializedName: "dailySchedule",
        type: {
          name: "Composite",
          className: "DailySchedule"
        }
      },
      weeklySchedule: {
        serializedName: "weeklySchedule",
        type: {
          name: "Composite",
          className: "WeeklySchedule"
        }
      }
    }
  }
};

export const LongTermRetentionPolicy: coreClient.CompositeMapper = {
  serializedName: "LongTermRetentionPolicy",
  type: {
    name: "Composite",
    className: "LongTermRetentionPolicy",
    uberParent: "RetentionPolicy",
    polymorphicDiscriminator: RetentionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...RetentionPolicy.type.modelProperties,
      dailySchedule: {
        serializedName: "dailySchedule",
        type: {
          name: "Composite",
          className: "DailyRetentionSchedule"
        }
      },
      weeklySchedule: {
        serializedName: "weeklySchedule",
        type: {
          name: "Composite",
          className: "WeeklyRetentionSchedule"
        }
      },
      monthlySchedule: {
        serializedName: "monthlySchedule",
        type: {
          name: "Composite",
          className: "MonthlyRetentionSchedule"
        }
      },
      yearlySchedule: {
        serializedName: "yearlySchedule",
        type: {
          name: "Composite",
          className: "YearlyRetentionSchedule"
        }
      }
    }
  }
};

export const SimpleRetentionPolicy: coreClient.CompositeMapper = {
  serializedName: "SimpleRetentionPolicy",
  type: {
    name: "Composite",
    className: "SimpleRetentionPolicy",
    uberParent: "RetentionPolicy",
    polymorphicDiscriminator: RetentionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...RetentionPolicy.type.modelProperties,
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const RecoveryPointTierInformationV2: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointTierInformationV2",
    modelProperties: {
      ...RecoveryPointTierInformation.type.modelProperties
    }
  }
};

export const AzureWorkloadAutoProtectionIntent: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadAutoProtectionIntent",
  type: {
    name: "Composite",
    className: "AzureWorkloadAutoProtectionIntent",
    uberParent: "AzureRecoveryServiceVaultProtectionIntent",
    polymorphicDiscriminator: {
      serializedName: "protectionIntentItemType",
      clientName: "protectionIntentItemType"
    },
    modelProperties: {
      ...AzureRecoveryServiceVaultProtectionIntent.type.modelProperties
    }
  }
};

export const AzureIaaSClassicComputeVMProtectedItem: coreClient.CompositeMapper = {
  serializedName: "Microsoft.ClassicCompute/virtualMachines",
  type: {
    name: "Composite",
    className: "AzureIaaSClassicComputeVMProtectedItem",
    uberParent: "AzureIaaSVMProtectedItem",
    polymorphicDiscriminator:
      AzureIaaSVMProtectedItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureIaaSVMProtectedItem.type.modelProperties
    }
  }
};

export const AzureIaaSComputeVMProtectedItem: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Compute/virtualMachines",
  type: {
    name: "Composite",
    className: "AzureIaaSComputeVMProtectedItem",
    uberParent: "AzureIaaSVMProtectedItem",
    polymorphicDiscriminator:
      AzureIaaSVMProtectedItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureIaaSVMProtectedItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSAPAseDatabaseProtectedItem: coreClient.CompositeMapper = {
  serializedName: "AzureVmWorkloadSAPAseDatabase",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSAPAseDatabaseProtectedItem",
    uberParent: "AzureVmWorkloadProtectedItem",
    polymorphicDiscriminator:
      AzureVmWorkloadProtectedItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadProtectedItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSAPHanaDatabaseProtectedItem: coreClient.CompositeMapper = {
  serializedName: "AzureVmWorkloadSAPHanaDatabase",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSAPHanaDatabaseProtectedItem",
    uberParent: "AzureVmWorkloadProtectedItem",
    polymorphicDiscriminator:
      AzureVmWorkloadProtectedItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadProtectedItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSQLDatabaseProtectedItem: coreClient.CompositeMapper = {
  serializedName: "AzureVmWorkloadSQLDatabase",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSQLDatabaseProtectedItem",
    uberParent: "AzureVmWorkloadProtectedItem",
    polymorphicDiscriminator:
      AzureVmWorkloadProtectedItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadProtectedItem.type.modelProperties
    }
  }
};

export const AzureWorkloadPointInTimeRecoveryPoint: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadPointInTimeRecoveryPoint",
  type: {
    name: "Composite",
    className: "AzureWorkloadPointInTimeRecoveryPoint",
    uberParent: "AzureWorkloadRecoveryPoint",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...AzureWorkloadRecoveryPoint.type.modelProperties,
      timeRanges: {
        serializedName: "timeRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PointInTimeRange"
            }
          }
        }
      }
    }
  }
};

export const AzureWorkloadSAPHanaRecoveryPoint: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSAPHanaRecoveryPoint",
  type: {
    name: "Composite",
    className: "AzureWorkloadSAPHanaRecoveryPoint",
    uberParent: "AzureWorkloadRecoveryPoint",
    polymorphicDiscriminator:
      AzureWorkloadRecoveryPoint.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadRecoveryPoint.type.modelProperties
    }
  }
};

export const AzureWorkloadSQLRecoveryPoint: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSQLRecoveryPoint",
  type: {
    name: "Composite",
    className: "AzureWorkloadSQLRecoveryPoint",
    uberParent: "AzureWorkloadRecoveryPoint",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...AzureWorkloadRecoveryPoint.type.modelProperties,
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "AzureWorkloadSQLRecoveryPointExtendedInfo"
        }
      }
    }
  }
};

export const AzureWorkloadPointInTimeRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadPointInTimeRestoreRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadPointInTimeRestoreRequest",
    uberParent: "AzureWorkloadRestoreRequest",
    polymorphicDiscriminator:
      AzureWorkloadRestoreRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadRestoreRequest.type.modelProperties,
      pointInTime: {
        serializedName: "pointInTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureWorkloadSAPHanaRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSAPHanaRestoreRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadSAPHanaRestoreRequest",
    uberParent: "AzureWorkloadRestoreRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...AzureWorkloadRestoreRequest.type.modelProperties
    }
  }
};

export const AzureWorkloadSQLRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSQLRestoreRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadSQLRestoreRequest",
    uberParent: "AzureWorkloadRestoreRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...AzureWorkloadRestoreRequest.type.modelProperties,
      shouldUseAlternateTargetLocation: {
        serializedName: "shouldUseAlternateTargetLocation",
        type: {
          name: "Boolean"
        }
      },
      isNonRecoverable: {
        serializedName: "isNonRecoverable",
        type: {
          name: "Boolean"
        }
      },
      alternateDirectoryPaths: {
        serializedName: "alternateDirectoryPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SQLDataDirectoryMapping"
            }
          }
        }
      }
    }
  }
};

export const IaasVMRestoreWithRehydrationRequest: coreClient.CompositeMapper = {
  serializedName: "IaasVMRestoreWithRehydrationRequest",
  type: {
    name: "Composite",
    className: "IaasVMRestoreWithRehydrationRequest",
    uberParent: "IaasVMRestoreRequest",
    polymorphicDiscriminator:
      IaasVMRestoreRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...IaasVMRestoreRequest.type.modelProperties,
      recoveryPointRehydrationInfo: {
        serializedName: "recoveryPointRehydrationInfo",
        type: {
          name: "Composite",
          className: "RecoveryPointRehydrationInfo"
        }
      }
    }
  }
};

export const ValidateIaasVMRestoreOperationRequest: coreClient.CompositeMapper = {
  serializedName: "ValidateIaasVMRestoreOperationRequest",
  type: {
    name: "Composite",
    className: "ValidateIaasVMRestoreOperationRequest",
    uberParent: "ValidateRestoreOperationRequest",
    polymorphicDiscriminator:
      ValidateRestoreOperationRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidateRestoreOperationRequest.type.modelProperties
    }
  }
};

export const AzureBackupServerContainer: coreClient.CompositeMapper = {
  serializedName: "AzureBackupServerContainer",
  type: {
    name: "Composite",
    className: "AzureBackupServerContainer",
    uberParent: "DpmContainer",
    polymorphicDiscriminator: DpmContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...DpmContainer.type.modelProperties
    }
  }
};

export const AzureIaaSClassicComputeVMContainer: coreClient.CompositeMapper = {
  serializedName: "Microsoft.ClassicCompute/virtualMachines",
  type: {
    name: "Composite",
    className: "AzureIaaSClassicComputeVMContainer",
    uberParent: "IaaSVMContainer",
    polymorphicDiscriminator: IaaSVMContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...IaaSVMContainer.type.modelProperties
    }
  }
};

export const AzureIaaSComputeVMContainer: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Compute/virtualMachines",
  type: {
    name: "Composite",
    className: "AzureIaaSComputeVMContainer",
    uberParent: "IaaSVMContainer",
    polymorphicDiscriminator: IaaSVMContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...IaaSVMContainer.type.modelProperties
    }
  }
};

export const AzureSqlagWorkloadContainerProtectionContainer: coreClient.CompositeMapper = {
  serializedName: "SQLAGWorkLoadContainer",
  type: {
    name: "Composite",
    className: "AzureSqlagWorkloadContainerProtectionContainer",
    uberParent: "AzureWorkloadContainer",
    polymorphicDiscriminator:
      AzureWorkloadContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadContainer.type.modelProperties
    }
  }
};

export const AzureVMAppContainerProtectionContainer: coreClient.CompositeMapper = {
  serializedName: "VMAppContainer",
  type: {
    name: "Composite",
    className: "AzureVMAppContainerProtectionContainer",
    uberParent: "AzureWorkloadContainer",
    polymorphicDiscriminator:
      AzureWorkloadContainer.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadContainer.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSAPAseDatabaseWorkloadItem: coreClient.CompositeMapper = {
  serializedName: "SAPAseDatabase",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSAPAseDatabaseWorkloadItem",
    uberParent: "AzureVmWorkloadItem",
    polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSAPAseSystemWorkloadItem: coreClient.CompositeMapper = {
  serializedName: "SAPAseSystem",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSAPAseSystemWorkloadItem",
    uberParent: "AzureVmWorkloadItem",
    polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSAPHanaDatabaseWorkloadItem: coreClient.CompositeMapper = {
  serializedName: "SAPHanaDatabase",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSAPHanaDatabaseWorkloadItem",
    uberParent: "AzureVmWorkloadItem",
    polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSAPHanaSystemWorkloadItem: coreClient.CompositeMapper = {
  serializedName: "SAPHanaSystem",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSAPHanaSystemWorkloadItem",
    uberParent: "AzureVmWorkloadItem",
    polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSQLDatabaseWorkloadItem: coreClient.CompositeMapper = {
  serializedName: "SQLDataBase",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSQLDatabaseWorkloadItem",
    uberParent: "AzureVmWorkloadItem",
    polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSQLInstanceWorkloadItem: coreClient.CompositeMapper = {
  serializedName: "SQLInstance",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSQLInstanceWorkloadItem",
    uberParent: "AzureVmWorkloadItem",
    polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadItem.type.modelProperties,
      dataDirectoryPaths: {
        serializedName: "dataDirectoryPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SQLDataDirectory"
            }
          }
        }
      }
    }
  }
};

export const AzureIaaSClassicComputeVMProtectableItem: coreClient.CompositeMapper = {
  serializedName: "Microsoft.ClassicCompute/virtualMachines",
  type: {
    name: "Composite",
    className: "AzureIaaSClassicComputeVMProtectableItem",
    uberParent: "IaaSVMProtectableItem",
    polymorphicDiscriminator:
      IaaSVMProtectableItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...IaaSVMProtectableItem.type.modelProperties
    }
  }
};

export const AzureIaaSComputeVMProtectableItem: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Compute/virtualMachines",
  type: {
    name: "Composite",
    className: "AzureIaaSComputeVMProtectableItem",
    uberParent: "IaaSVMProtectableItem",
    polymorphicDiscriminator:
      IaaSVMProtectableItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...IaaSVMProtectableItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSAPAseSystemProtectableItem: coreClient.CompositeMapper = {
  serializedName: "SAPAseSystem",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSAPAseSystemProtectableItem",
    uberParent: "AzureVmWorkloadProtectableItem",
    polymorphicDiscriminator:
      AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadProtectableItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSAPHanaDatabaseProtectableItem: coreClient.CompositeMapper = {
  serializedName: "SAPHanaDatabase",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSAPHanaDatabaseProtectableItem",
    uberParent: "AzureVmWorkloadProtectableItem",
    polymorphicDiscriminator:
      AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadProtectableItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSAPHanaSystemProtectableItem: coreClient.CompositeMapper = {
  serializedName: "SAPHanaSystem",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSAPHanaSystemProtectableItem",
    uberParent: "AzureVmWorkloadProtectableItem",
    polymorphicDiscriminator:
      AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadProtectableItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSQLAvailabilityGroupProtectableItem: coreClient.CompositeMapper = {
  serializedName: "SQLAvailabilityGroupContainer",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSQLAvailabilityGroupProtectableItem",
    uberParent: "AzureVmWorkloadProtectableItem",
    polymorphicDiscriminator:
      AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadProtectableItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSQLDatabaseProtectableItem: coreClient.CompositeMapper = {
  serializedName: "SQLDataBase",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSQLDatabaseProtectableItem",
    uberParent: "AzureVmWorkloadProtectableItem",
    polymorphicDiscriminator:
      AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadProtectableItem.type.modelProperties
    }
  }
};

export const AzureVmWorkloadSQLInstanceProtectableItem: coreClient.CompositeMapper = {
  serializedName: "SQLInstance",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadSQLInstanceProtectableItem",
    uberParent: "AzureVmWorkloadProtectableItem",
    polymorphicDiscriminator:
      AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureVmWorkloadProtectableItem.type.modelProperties
    }
  }
};

export const AzureWorkloadSQLAutoProtectionIntent: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSQLAutoProtectionIntent",
  type: {
    name: "Composite",
    className: "AzureWorkloadSQLAutoProtectionIntent",
    uberParent: "AzureWorkloadAutoProtectionIntent",
    polymorphicDiscriminator:
      AzureWorkloadAutoProtectionIntent.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadAutoProtectionIntent.type.modelProperties,
      workloadItemType: {
        serializedName: "workloadItemType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureWorkloadSAPHanaPointInTimeRecoveryPoint: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSAPHanaPointInTimeRecoveryPoint",
  type: {
    name: "Composite",
    className: "AzureWorkloadSAPHanaPointInTimeRecoveryPoint",
    uberParent: "AzureWorkloadPointInTimeRecoveryPoint",
    polymorphicDiscriminator:
      AzureWorkloadPointInTimeRecoveryPoint.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadPointInTimeRecoveryPoint.type.modelProperties
    }
  }
};

export const AzureWorkloadSQLPointInTimeRecoveryPoint: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSQLPointInTimeRecoveryPoint",
  type: {
    name: "Composite",
    className: "AzureWorkloadSQLPointInTimeRecoveryPoint",
    uberParent: "AzureWorkloadSQLRecoveryPoint",
    polymorphicDiscriminator:
      AzureWorkloadSQLRecoveryPoint.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadSQLRecoveryPoint.type.modelProperties,
      timeRanges: {
        serializedName: "timeRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PointInTimeRange"
            }
          }
        }
      }
    }
  }
};

export const AzureWorkloadSAPHanaPointInTimeRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSAPHanaPointInTimeRestoreRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadSAPHanaPointInTimeRestoreRequest",
    uberParent: "AzureWorkloadSAPHanaRestoreRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...AzureWorkloadSAPHanaRestoreRequest.type.modelProperties,
      pointInTime: {
        serializedName: "pointInTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureWorkloadSAPHanaRestoreWithRehydrateRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSAPHanaRestoreWithRehydrateRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadSAPHanaRestoreWithRehydrateRequest",
    uberParent: "AzureWorkloadSAPHanaRestoreRequest",
    polymorphicDiscriminator:
      AzureWorkloadSAPHanaRestoreRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadSAPHanaRestoreRequest.type.modelProperties,
      recoveryPointRehydrationInfo: {
        serializedName: "recoveryPointRehydrationInfo",
        type: {
          name: "Composite",
          className: "RecoveryPointRehydrationInfo"
        }
      }
    }
  }
};

export const AzureWorkloadSQLPointInTimeRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSQLPointInTimeRestoreRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadSQLPointInTimeRestoreRequest",
    uberParent: "AzureWorkloadSQLRestoreRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...AzureWorkloadSQLRestoreRequest.type.modelProperties,
      pointInTime: {
        serializedName: "pointInTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureWorkloadSQLRestoreWithRehydrateRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSQLRestoreWithRehydrateRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadSQLRestoreWithRehydrateRequest",
    uberParent: "AzureWorkloadSQLRestoreRequest",
    polymorphicDiscriminator:
      AzureWorkloadSQLRestoreRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadSQLRestoreRequest.type.modelProperties,
      recoveryPointRehydrationInfo: {
        serializedName: "recoveryPointRehydrationInfo",
        type: {
          name: "Composite",
          className: "RecoveryPointRehydrationInfo"
        }
      }
    }
  }
};

export const AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest",
    uberParent: "AzureWorkloadSAPHanaPointInTimeRestoreRequest",
    polymorphicDiscriminator:
      AzureWorkloadSAPHanaPointInTimeRestoreRequest.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadSAPHanaPointInTimeRestoreRequest.type.modelProperties,
      recoveryPointRehydrationInfo: {
        serializedName: "recoveryPointRehydrationInfo",
        type: {
          name: "Composite",
          className: "RecoveryPointRehydrationInfo"
        }
      }
    }
  }
};

export const AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest: coreClient.CompositeMapper = {
  serializedName: "AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest",
  type: {
    name: "Composite",
    className: "AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest",
    uberParent: "AzureWorkloadSQLPointInTimeRestoreRequest",
    polymorphicDiscriminator:
      AzureWorkloadSQLPointInTimeRestoreRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureWorkloadSQLPointInTimeRestoreRequest.type.modelProperties,
      recoveryPointRehydrationInfo: {
        serializedName: "recoveryPointRehydrationInfo",
        type: {
          name: "Composite",
          className: "RecoveryPointRehydrationInfo"
        }
      }
    }
  }
};

export let discriminators = {
  FeatureSupportRequest: FeatureSupportRequest,
  ProtectionIntent: ProtectionIntent,
  OperationStatusExtendedInfo: OperationStatusExtendedInfo,
  VaultStorageConfigOperationResultResponse: VaultStorageConfigOperationResultResponse,
  ProtectedItem: ProtectedItem,
  RecoveryPoint: RecoveryPoint,
  RestoreRequest: RestoreRequest,
  ProtectionPolicy: ProtectionPolicy,
  Job: Job,
  OperationResultInfoBase: OperationResultInfoBase,
  ValidateOperationRequest: ValidateOperationRequest,
  BackupEngineBase: BackupEngineBase,
  ProtectableContainer: ProtectableContainer,
  ProtectionContainer: ProtectionContainer,
  WorkloadItem: WorkloadItem,
  BackupRequest: BackupRequest,
  ILRRequest: ILRRequest,
  WorkloadProtectableItem: WorkloadProtectableItem,
  SchedulePolicy: SchedulePolicy,
  RetentionPolicy: RetentionPolicy,
  "FeatureSupportRequest.AzureBackupGoals": AzureBackupGoalFeatureSupportRequest,
  "FeatureSupportRequest.AzureVMResourceBackup": AzureVMResourceFeatureSupportRequest,
  "ProtectionIntent.RecoveryServiceVaultItem": AzureRecoveryServiceVaultProtectionIntent,
  "ProtectionIntent.AzureResourceItem": AzureResourceProtectionIntent,
  "ProtectionIntent.AzureWorkloadContainerAutoProtectionIntent": AzureWorkloadContainerAutoProtectionIntent,
  "OperationStatusExtendedInfo.OperationStatusJobExtendedInfo": OperationStatusJobExtendedInfo,
  "OperationStatusExtendedInfo.OperationStatusJobsExtendedInfo": OperationStatusJobsExtendedInfo,
  "OperationStatusExtendedInfo.OperationStatusProvisionILRExtendedInfo": OperationStatusProvisionILRExtendedInfo,
  "OperationStatusExtendedInfo.OperationStatusValidateOperationExtendedInfo": OperationStatusValidateOperationExtendedInfo,
  "VaultStorageConfigOperationResultResponse.PrepareDataMoveResponse": PrepareDataMoveResponse,
  "ProtectedItem.AzureFileShareProtectedItem": AzureFileshareProtectedItem,
  "ProtectedItem.AzureIaaSVMProtectedItem": AzureIaaSVMProtectedItem,
  "ProtectedItem.Microsoft.Sql/servers/databases": AzureSqlProtectedItem,
  "ProtectedItem.AzureVmWorkloadProtectedItem": AzureVmWorkloadProtectedItem,
  "ProtectedItem.DPMProtectedItem": DPMProtectedItem,
  "ProtectedItem.GenericProtectedItem": GenericProtectedItem,
  "ProtectedItem.MabFileFolderProtectedItem": MabFileFolderProtectedItem,
  "RecoveryPoint.AzureFileShareRecoveryPoint": AzureFileShareRecoveryPoint,
  "RecoveryPoint.AzureWorkloadRecoveryPoint": AzureWorkloadRecoveryPoint,
  "RecoveryPoint.GenericRecoveryPoint": GenericRecoveryPoint,
  "RecoveryPoint.IaasVMRecoveryPoint": IaasVMRecoveryPoint,
  "RestoreRequest.AzureFileShareRestoreRequest": AzureFileShareRestoreRequest,
  "RestoreRequest.AzureWorkloadRestoreRequest": AzureWorkloadRestoreRequest,
  "RestoreRequest.IaasVMRestoreRequest": IaasVMRestoreRequest,
  "ProtectionPolicy.AzureWorkload": AzureVmWorkloadProtectionPolicy,
  "ProtectionPolicy.AzureStorage": AzureFileShareProtectionPolicy,
  "ProtectionPolicy.AzureIaasVM": AzureIaaSVMProtectionPolicy,
  "ProtectionPolicy.AzureSql": AzureSqlProtectionPolicy,
  "ProtectionPolicy.GenericProtectionPolicy": GenericProtectionPolicy,
  "ProtectionPolicy.MAB": MabProtectionPolicy,
  "Job.AzureIaaSVMJob": AzureIaaSVMJob,
  "Job.AzureIaaSVMJobV2": AzureIaaSVMJobV2,
  "Job.AzureStorageJob": AzureStorageJob,
  "Job.AzureWorkloadJob": AzureWorkloadJob,
  "Job.DpmJob": DpmJob,
  "Job.MabJob": MabJob,
  "Job.VaultJob": VaultJob,
  "OperationResultInfoBase.ExportJobsOperationResultInfo": ExportJobsOperationResultInfo,
  "OperationResultInfoBase.OperationResultInfo": OperationResultInfo,
  "ValidateOperationRequest.ValidateRestoreOperationRequest": ValidateRestoreOperationRequest,
  "BackupEngineBase.AzureBackupServerEngine": AzureBackupServerEngine,
  "BackupEngineBase.DpmBackupEngine": DpmBackupEngine,
  "ProtectableContainer.StorageContainer": AzureStorageProtectableContainer,
  "ProtectableContainer.VMAppContainer": AzureVMAppContainerProtectableContainer,
  "ProtectionContainer.DPMContainer": DpmContainer,
  "ProtectionContainer.IaasVMContainer": IaaSVMContainer,
  "ProtectionContainer.AzureWorkloadContainer": AzureWorkloadContainer,
  "ProtectionContainer.AzureSqlContainer": AzureSqlContainer,
  "ProtectionContainer.StorageContainer": AzureStorageContainer,
  "ProtectionContainer.GenericContainer": GenericContainer,
  "ProtectionContainer.Windows": MabContainer,
  "WorkloadItem.AzureVmWorkloadItem": AzureVmWorkloadItem,
  "BackupRequest.AzureFileShareBackupRequest": AzureFileShareBackupRequest,
  "BackupRequest.AzureWorkloadBackupRequest": AzureWorkloadBackupRequest,
  "BackupRequest.IaasVMBackupRequest": IaasVMBackupRequest,
  "ILRRequest.AzureFileShareProvisionILRRequest": AzureFileShareProvisionILRRequest,
  "ILRRequest.IaasVMILRRegistrationRequest": IaasVmilrRegistrationRequest,
  "WorkloadProtectableItem.AzureFileShare": AzureFileShareProtectableItem,
  "WorkloadProtectableItem.IaaSVMProtectableItem": IaaSVMProtectableItem,
  "WorkloadProtectableItem.AzureVmWorkloadProtectableItem": AzureVmWorkloadProtectableItem,
  "SchedulePolicy.LogSchedulePolicy": LogSchedulePolicy,
  "SchedulePolicy.LongTermSchedulePolicy": LongTermSchedulePolicy,
  "SchedulePolicy.SimpleSchedulePolicy": SimpleSchedulePolicy,
  "SchedulePolicy.SimpleSchedulePolicyV2": SimpleSchedulePolicyV2,
  "RetentionPolicy.LongTermRetentionPolicy": LongTermRetentionPolicy,
  "RetentionPolicy.SimpleRetentionPolicy": SimpleRetentionPolicy,
  "AzureRecoveryServiceVaultProtectionIntent.AzureWorkloadAutoProtectionIntent": AzureWorkloadAutoProtectionIntent,
  "AzureIaaSVMProtectedItem.Microsoft.ClassicCompute/virtualMachines": AzureIaaSClassicComputeVMProtectedItem,
  "AzureIaaSVMProtectedItem.Microsoft.Compute/virtualMachines": AzureIaaSComputeVMProtectedItem,
  "AzureVmWorkloadProtectedItem.AzureVmWorkloadSAPAseDatabase": AzureVmWorkloadSAPAseDatabaseProtectedItem,
  "AzureVmWorkloadProtectedItem.AzureVmWorkloadSAPHanaDatabase": AzureVmWorkloadSAPHanaDatabaseProtectedItem,
  "AzureVmWorkloadProtectedItem.AzureVmWorkloadSQLDatabase": AzureVmWorkloadSQLDatabaseProtectedItem,
  "AzureWorkloadRecoveryPoint.AzureWorkloadPointInTimeRecoveryPoint": AzureWorkloadPointInTimeRecoveryPoint,
  "AzureWorkloadRecoveryPoint.AzureWorkloadSAPHanaRecoveryPoint": AzureWorkloadSAPHanaRecoveryPoint,
  "AzureWorkloadRecoveryPoint.AzureWorkloadSQLRecoveryPoint": AzureWorkloadSQLRecoveryPoint,
  "AzureWorkloadRestoreRequest.AzureWorkloadPointInTimeRestoreRequest": AzureWorkloadPointInTimeRestoreRequest,
  "AzureWorkloadRestoreRequest.AzureWorkloadSAPHanaRestoreRequest": AzureWorkloadSAPHanaRestoreRequest,
  "AzureWorkloadRestoreRequest.AzureWorkloadSQLRestoreRequest": AzureWorkloadSQLRestoreRequest,
  "IaasVMRestoreRequest.IaasVMRestoreWithRehydrationRequest": IaasVMRestoreWithRehydrationRequest,
  "ValidateRestoreOperationRequest.ValidateIaasVMRestoreOperationRequest": ValidateIaasVMRestoreOperationRequest,
  "DpmContainer.AzureBackupServerContainer": AzureBackupServerContainer,
  "IaaSVMContainer.Microsoft.ClassicCompute/virtualMachines": AzureIaaSClassicComputeVMContainer,
  "IaaSVMContainer.Microsoft.Compute/virtualMachines": AzureIaaSComputeVMContainer,
  "AzureWorkloadContainer.SQLAGWorkLoadContainer": AzureSqlagWorkloadContainerProtectionContainer,
  "AzureWorkloadContainer.VMAppContainer": AzureVMAppContainerProtectionContainer,
  "AzureVmWorkloadItem.SAPAseDatabase": AzureVmWorkloadSAPAseDatabaseWorkloadItem,
  "AzureVmWorkloadItem.SAPAseSystem": AzureVmWorkloadSAPAseSystemWorkloadItem,
  "AzureVmWorkloadItem.SAPHanaDatabase": AzureVmWorkloadSAPHanaDatabaseWorkloadItem,
  "AzureVmWorkloadItem.SAPHanaSystem": AzureVmWorkloadSAPHanaSystemWorkloadItem,
  "AzureVmWorkloadItem.SQLDataBase": AzureVmWorkloadSQLDatabaseWorkloadItem,
  "AzureVmWorkloadItem.SQLInstance": AzureVmWorkloadSQLInstanceWorkloadItem,
  "IaaSVMProtectableItem.Microsoft.ClassicCompute/virtualMachines": AzureIaaSClassicComputeVMProtectableItem,
  "IaaSVMProtectableItem.Microsoft.Compute/virtualMachines": AzureIaaSComputeVMProtectableItem,
  "AzureVmWorkloadProtectableItem.SAPAseSystem": AzureVmWorkloadSAPAseSystemProtectableItem,
  "AzureVmWorkloadProtectableItem.SAPHanaDatabase": AzureVmWorkloadSAPHanaDatabaseProtectableItem,
  "AzureVmWorkloadProtectableItem.SAPHanaSystem": AzureVmWorkloadSAPHanaSystemProtectableItem,
  "AzureVmWorkloadProtectableItem.SQLAvailabilityGroupContainer": AzureVmWorkloadSQLAvailabilityGroupProtectableItem,
  "AzureVmWorkloadProtectableItem.SQLDataBase": AzureVmWorkloadSQLDatabaseProtectableItem,
  "AzureVmWorkloadProtectableItem.SQLInstance": AzureVmWorkloadSQLInstanceProtectableItem,
  "AzureWorkloadAutoProtectionIntent.AzureWorkloadSQLAutoProtectionIntent": AzureWorkloadSQLAutoProtectionIntent,
  "AzureWorkloadPointInTimeRecoveryPoint.AzureWorkloadSAPHanaPointInTimeRecoveryPoint": AzureWorkloadSAPHanaPointInTimeRecoveryPoint,
  "AzureWorkloadSQLRecoveryPoint.AzureWorkloadSQLPointInTimeRecoveryPoint": AzureWorkloadSQLPointInTimeRecoveryPoint,
  "AzureWorkloadSAPHanaRestoreRequest.AzureWorkloadSAPHanaPointInTimeRestoreRequest": AzureWorkloadSAPHanaPointInTimeRestoreRequest,
  "AzureWorkloadSAPHanaRestoreRequest.AzureWorkloadSAPHanaRestoreWithRehydrateRequest": AzureWorkloadSAPHanaRestoreWithRehydrateRequest,
  "AzureWorkloadSQLRestoreRequest.AzureWorkloadSQLPointInTimeRestoreRequest": AzureWorkloadSQLPointInTimeRestoreRequest,
  "AzureWorkloadSQLRestoreRequest.AzureWorkloadSQLRestoreWithRehydrateRequest": AzureWorkloadSQLRestoreWithRehydrateRequest,
  "AzureWorkloadSAPHanaPointInTimeRestoreRequest.AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest": AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest,
  "AzureWorkloadSQLPointInTimeRestoreRequest.AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest": AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest
};
