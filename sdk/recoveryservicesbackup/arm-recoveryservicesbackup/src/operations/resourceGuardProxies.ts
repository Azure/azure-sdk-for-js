/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ResourceGuardProxies } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RecoveryServicesBackupClient } from "../recoveryServicesBackupClient";
import {
  ResourceGuardProxyBaseResource,
  ResourceGuardProxiesGetNextOptionalParams,
  ResourceGuardProxiesGetOptionalParams,
  ResourceGuardProxiesGetResponse,
  ResourceGuardProxiesGetNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ResourceGuardProxies operations. */
export class ResourceGuardProxiesImpl implements ResourceGuardProxies {
  private readonly client: RecoveryServicesBackupClient;

  /**
   * Initialize a new instance of the class ResourceGuardProxies class.
   * @param client Reference to the service client
   */
  constructor(client: RecoveryServicesBackupClient) {
    this.client = client;
  }

  /**
   * List the ResourceGuardProxies under vault
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param options The options parameters.
   */
  public list(
    vaultName: string,
    resourceGroupName: string,
    options?: ResourceGuardProxiesGetOptionalParams
  ): PagedAsyncIterableIterator<ResourceGuardProxyBaseResource> {
    const iter = this.getPagingAll(vaultName, resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getPagingPage(vaultName, resourceGroupName, options);
      }
    };
  }

  private async *getPagingPage(
    vaultName: string,
    resourceGroupName: string,
    options?: ResourceGuardProxiesGetOptionalParams
  ): AsyncIterableIterator<ResourceGuardProxyBaseResource[]> {
    let result = await this._get(vaultName, resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getNext(
        vaultName,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getPagingAll(
    vaultName: string,
    resourceGroupName: string,
    options?: ResourceGuardProxiesGetOptionalParams
  ): AsyncIterableIterator<ResourceGuardProxyBaseResource> {
    for await (const page of this.getPagingPage(
      vaultName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the ResourceGuardProxies under vault
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param options The options parameters.
   */
  private _get(
    vaultName: string,
    resourceGroupName: string,
    options?: ResourceGuardProxiesGetOptionalParams
  ): Promise<ResourceGuardProxiesGetResponse> {
    return this.client.sendOperationRequest(
      { vaultName, resourceGroupName, options },
      getOperationSpec
    );
  }

  /**
   * GetNext
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param nextLink The nextLink from the previous successful call to the Get method.
   * @param options The options parameters.
   */
  private _getNext(
    vaultName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: ResourceGuardProxiesGetNextOptionalParams
  ): Promise<ResourceGuardProxiesGetNextResponse> {
    return this.client.sendOperationRequest(
      { vaultName, resourceGroupName, nextLink, options },
      getNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGuardProxyBaseResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGuardProxyBaseResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
