/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ResourceGuardProxy } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RecoveryServicesBackupClient } from "../recoveryServicesBackupClient";
import {
  ResourceGuardProxyGetOptionalParams,
  ResourceGuardProxyGetResponse,
  ResourceGuardProxyPutOptionalParams,
  ResourceGuardProxyPutResponse,
  ResourceGuardProxyDeleteOptionalParams,
  UnlockDeleteRequest,
  ResourceGuardProxyUnlockDeleteOptionalParams,
  ResourceGuardProxyUnlockDeleteResponse
} from "../models";

/** Class containing ResourceGuardProxy operations. */
export class ResourceGuardProxyImpl implements ResourceGuardProxy {
  private readonly client: RecoveryServicesBackupClient;

  /**
   * Initialize a new instance of the class ResourceGuardProxy class.
   * @param client Reference to the service client
   */
  constructor(client: RecoveryServicesBackupClient) {
    this.client = client;
  }

  /**
   * Returns ResourceGuardProxy under vault and with the name referenced in request
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceGuardProxyName
   * @param options The options parameters.
   */
  get(
    vaultName: string,
    resourceGroupName: string,
    resourceGuardProxyName: string,
    options?: ResourceGuardProxyGetOptionalParams
  ): Promise<ResourceGuardProxyGetResponse> {
    return this.client.sendOperationRequest(
      { vaultName, resourceGroupName, resourceGuardProxyName, options },
      getOperationSpec
    );
  }

  /**
   * Add or Update ResourceGuardProxy under vault
   * Secures vault critical operations
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceGuardProxyName
   * @param options The options parameters.
   */
  put(
    vaultName: string,
    resourceGroupName: string,
    resourceGuardProxyName: string,
    options?: ResourceGuardProxyPutOptionalParams
  ): Promise<ResourceGuardProxyPutResponse> {
    return this.client.sendOperationRequest(
      { vaultName, resourceGroupName, resourceGuardProxyName, options },
      putOperationSpec
    );
  }

  /**
   * Delete ResourceGuardProxy under vault
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceGuardProxyName
   * @param options The options parameters.
   */
  delete(
    vaultName: string,
    resourceGroupName: string,
    resourceGuardProxyName: string,
    options?: ResourceGuardProxyDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { vaultName, resourceGroupName, resourceGuardProxyName, options },
      deleteOperationSpec
    );
  }

  /**
   * Secures delete ResourceGuardProxy operations.
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceGuardProxyName
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  unlockDelete(
    vaultName: string,
    resourceGroupName: string,
    resourceGuardProxyName: string,
    parameters: UnlockDeleteRequest,
    options?: ResourceGuardProxyUnlockDeleteOptionalParams
  ): Promise<ResourceGuardProxyUnlockDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        resourceGuardProxyName,
        parameters,
        options
      },
      unlockDeleteOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGuardProxyBaseResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGuardProxyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const putOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGuardProxyBaseResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGuardProxyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGuardProxyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const unlockDeleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}/unlockDelete",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UnlockDeleteResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters20,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGuardProxyName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
