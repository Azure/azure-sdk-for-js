/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/resourceGuardProxyMappers";
import * as Parameters from "../models/parameters";
import { RecoveryServicesBackupClientContext } from "../recoveryServicesBackupClientContext";

/** Class representing a ResourceGuardProxy. */
export class ResourceGuardProxy {
  private readonly client: RecoveryServicesBackupClientContext;

  /**
   * Create a ResourceGuardProxy.
   * @param {RecoveryServicesBackupClientContext} client Reference to the service client.
   */
  constructor(client: RecoveryServicesBackupClientContext) {
    this.client = client;
  }

  /**
   * Returns ResourceGuardProxy under vault and with the name referenced in request
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param [options] The optional parameters
   * @returns Promise<Models.ResourceGuardProxyGetResponse>
   */
  get(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, options?: msRest.RequestOptionsBase): Promise<Models.ResourceGuardProxyGetResponse>;
  /**
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param callback The callback
   */
  get(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, callback: msRest.ServiceCallback<Models.ResourceGuardProxyBaseResource>): void;
  /**
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param options The optional parameters
   * @param callback The callback
   */
  get(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGuardProxyBaseResource>): void;
  get(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResourceGuardProxyBaseResource>, callback?: msRest.ServiceCallback<Models.ResourceGuardProxyBaseResource>): Promise<Models.ResourceGuardProxyGetResponse> {
    return this.client.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        resourceGuardProxyName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ResourceGuardProxyGetResponse>;
  }

  /**
   * Add or Update ResourceGuardProxy under vault
   * Secures vault critical operations
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param [options] The optional parameters
   * @returns Promise<Models.ResourceGuardProxyPutResponse>
   */
  put(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, options?: msRest.RequestOptionsBase): Promise<Models.ResourceGuardProxyPutResponse>;
  /**
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param callback The callback
   */
  put(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, callback: msRest.ServiceCallback<Models.ResourceGuardProxyBaseResource>): void;
  /**
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param options The optional parameters
   * @param callback The callback
   */
  put(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGuardProxyBaseResource>): void;
  put(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResourceGuardProxyBaseResource>, callback?: msRest.ServiceCallback<Models.ResourceGuardProxyBaseResource>): Promise<Models.ResourceGuardProxyPutResponse> {
    return this.client.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        resourceGuardProxyName,
        options
      },
      putOperationSpec,
      callback) as Promise<Models.ResourceGuardProxyPutResponse>;
  }

  /**
   * Delete ResourceGuardProxy under vault
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param callback The callback
   */
  deleteMethod(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        resourceGuardProxyName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Secures delete ResourceGuardProxy operations.
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<Models.ResourceGuardProxyUnlockDeleteResponse>
   */
  unlockDelete(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, parameters: Models.UnlockDeleteRequest, options?: msRest.RequestOptionsBase): Promise<Models.ResourceGuardProxyUnlockDeleteResponse>;
  /**
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param parameters Request body for operation
   * @param callback The callback
   */
  unlockDelete(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, parameters: Models.UnlockDeleteRequest, callback: msRest.ServiceCallback<Models.UnlockDeleteResponse>): void;
  /**
   * @param vaultName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param resourceGuardProxyName
   * @param parameters Request body for operation
   * @param options The optional parameters
   * @param callback The callback
   */
  unlockDelete(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, parameters: Models.UnlockDeleteRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UnlockDeleteResponse>): void;
  unlockDelete(vaultName: string, resourceGroupName: string, resourceGuardProxyName: string, parameters: Models.UnlockDeleteRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UnlockDeleteResponse>, callback?: msRest.ServiceCallback<Models.UnlockDeleteResponse>): Promise<Models.ResourceGuardProxyUnlockDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        resourceGuardProxyName,
        parameters,
        options
      },
      unlockDeleteOperationSpec,
      callback) as Promise<Models.ResourceGuardProxyUnlockDeleteResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGuardProxyName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGuardProxyBaseResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const putOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGuardProxyName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGuardProxyBaseResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGuardProxyName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const unlockDeleteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}/unlockDelete",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGuardProxyName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.UnlockDeleteRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.UnlockDeleteResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
