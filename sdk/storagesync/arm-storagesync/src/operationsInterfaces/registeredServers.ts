/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  RegisteredServer,
  RegisteredServersListByStorageSyncServiceOptionalParams,
  RegisteredServersGetOptionalParams,
  RegisteredServersGetResponse,
  RegisteredServerCreateParameters,
  RegisteredServersCreateOptionalParams,
  RegisteredServersCreateResponse,
  RegisteredServersDeleteOptionalParams,
  RegisteredServersDeleteResponse,
  TriggerRolloverRequest,
  RegisteredServersTriggerRolloverOptionalParams,
  RegisteredServersTriggerRolloverResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a RegisteredServers. */
export interface RegisteredServers {
  /**
   * Get a given registered server list.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param options The options parameters.
   */
  listByStorageSyncService(
    resourceGroupName: string,
    storageSyncServiceName: string,
    options?: RegisteredServersListByStorageSyncServiceOptionalParams
  ): PagedAsyncIterableIterator<RegisteredServer>;
  /**
   * Get a given registered server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param serverId GUID identifying the on-premises server.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    storageSyncServiceName: string,
    serverId: string,
    options?: RegisteredServersGetOptionalParams
  ): Promise<RegisteredServersGetResponse>;
  /**
   * Add a new registered server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param serverId GUID identifying the on-premises server.
   * @param parameters Body of Registered Server object.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    storageSyncServiceName: string,
    serverId: string,
    parameters: RegisteredServerCreateParameters,
    options?: RegisteredServersCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<RegisteredServersCreateResponse>,
      RegisteredServersCreateResponse
    >
  >;
  /**
   * Add a new registered server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param serverId GUID identifying the on-premises server.
   * @param parameters Body of Registered Server object.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    serverId: string,
    parameters: RegisteredServerCreateParameters,
    options?: RegisteredServersCreateOptionalParams
  ): Promise<RegisteredServersCreateResponse>;
  /**
   * Delete the given registered server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param serverId GUID identifying the on-premises server.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    storageSyncServiceName: string,
    serverId: string,
    options?: RegisteredServersDeleteOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<RegisteredServersDeleteResponse>,
      RegisteredServersDeleteResponse
    >
  >;
  /**
   * Delete the given registered server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param serverId GUID identifying the on-premises server.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    serverId: string,
    options?: RegisteredServersDeleteOptionalParams
  ): Promise<RegisteredServersDeleteResponse>;
  /**
   * Triggers Server certificate rollover.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param serverId Server Id
   * @param parameters Body of Trigger Rollover request.
   * @param options The options parameters.
   */
  beginTriggerRollover(
    resourceGroupName: string,
    storageSyncServiceName: string,
    serverId: string,
    parameters: TriggerRolloverRequest,
    options?: RegisteredServersTriggerRolloverOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<RegisteredServersTriggerRolloverResponse>,
      RegisteredServersTriggerRolloverResponse
    >
  >;
  /**
   * Triggers Server certificate rollover.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param serverId Server Id
   * @param parameters Body of Trigger Rollover request.
   * @param options The options parameters.
   */
  beginTriggerRolloverAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    serverId: string,
    parameters: TriggerRolloverRequest,
    options?: RegisteredServersTriggerRolloverOptionalParams
  ): Promise<RegisteredServersTriggerRolloverResponse>;
}
