/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { StorageSyncManagementClientContext } from "./storageSyncManagementClientContext";


class StorageSyncManagementClient extends StorageSyncManagementClientContext {
  // Operation groups
  operations: operations.Operations;
  storageSyncServices: operations.StorageSyncServices;
  privateLinkResources: operations.PrivateLinkResources;
  privateEndpointConnections: operations.PrivateEndpointConnections;
  syncGroups: operations.SyncGroups;
  cloudEndpoints: operations.CloudEndpoints;
  serverEndpoints: operations.ServerEndpoints;
  registeredServers: operations.RegisteredServers;
  workflows: operations.Workflows;
  operationStatus: operations.OperationStatusOperations;

  /**
   * Initializes a new instance of the StorageSyncManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure. Credentials
   * implementing the TokenCredential interface from the @azure/identity package are recommended. For
   * more information about these credentials, see
   * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
   * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
   * @azure/ms-rest-browserauth are also supported.
   * @param subscriptionId The ID of the target subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.StorageSyncManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.operations = new operations.Operations(this);
    this.storageSyncServices = new operations.StorageSyncServices(this);
    this.privateLinkResources = new operations.PrivateLinkResources(this);
    this.privateEndpointConnections = new operations.PrivateEndpointConnections(this);
    this.syncGroups = new operations.SyncGroups(this);
    this.cloudEndpoints = new operations.CloudEndpoints(this);
    this.serverEndpoints = new operations.ServerEndpoints(this);
    this.registeredServers = new operations.RegisteredServers(this);
    this.workflows = new operations.Workflows(this);
    this.operationStatus = new operations.OperationStatusOperations(this);
  }

  /**
   * Get Operation status
   * @param locationName The desired region to obtain information from.
   * @param operationId operation Id
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationOperationStatusResponse>
   */
  locationOperationStatusMethod(locationName: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationOperationStatusResponse>;
  /**
   * @param locationName The desired region to obtain information from.
   * @param operationId operation Id
   * @param callback The callback
   */
  locationOperationStatusMethod(locationName: string, operationId: string, callback: msRest.ServiceCallback<Models.LocationOperationStatus>): void;
  /**
   * @param locationName The desired region to obtain information from.
   * @param operationId operation Id
   * @param options The optional parameters
   * @param callback The callback
   */
  locationOperationStatusMethod(locationName: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LocationOperationStatus>): void;
  locationOperationStatusMethod(locationName: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LocationOperationStatus>, callback?: msRest.ServiceCallback<Models.LocationOperationStatus>): Promise<Models.LocationOperationStatusResponse> {
    return this.sendOperationRequest(
      {
        locationName,
        operationId,
        options
      },
      locationOperationStatusMethodOperationSpec,
      callback) as Promise<Models.LocationOperationStatusResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const locationOperationStatusMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/locations/{locationName}/operations/{operationId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.operationId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LocationOperationStatus,
      headersMapper: Mappers.LocationOperationStatusHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError,
      headersMapper: Mappers.LocationOperationStatusHeaders
    }
  },
  serializer
};

export {
  StorageSyncManagementClient,
  StorageSyncManagementClientContext,
  Models as StorageSyncManagementModels,
  Mappers as StorageSyncManagementMappers
};
export * from "./operations";
