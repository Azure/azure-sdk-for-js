/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  StorageSyncServicesImpl,
  PrivateLinkResourcesImpl,
  PrivateEndpointConnectionsImpl,
  SyncGroupsImpl,
  CloudEndpointsImpl,
  ServerEndpointsImpl,
  RegisteredServersImpl,
  WorkflowsImpl,
  OperationStatusOperationsImpl
} from "./operations";
import {
  Operations,
  StorageSyncServices,
  PrivateLinkResources,
  PrivateEndpointConnections,
  SyncGroups,
  CloudEndpoints,
  ServerEndpoints,
  RegisteredServers,
  Workflows,
  OperationStatusOperations
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  MicrosoftStorageSyncOptionalParams,
  LocationOperationStatusOptionalParams,
  LocationOperationStatusResponse
} from "./models";

export class MicrosoftStorageSync extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the MicrosoftStorageSync class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: MicrosoftStorageSyncOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: MicrosoftStorageSyncOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-storagesync/9.0.2`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
      if (!bearerTokenAuthenticationPolicyFound) {
        this.pipeline.removePolicy({
          name: coreRestPipeline.bearerTokenAuthenticationPolicyName
        });
        this.pipeline.addPolicy(
          coreRestPipeline.bearerTokenAuthenticationPolicy({
            scopes: `${optionsWithDefaults.baseUri}/.default`,
            challengeCallbacks: {
              authorizeRequestOnChallenge:
                coreClient.authorizeRequestOnClaimChallenge
            }
          })
        );
      }
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2020-09-01";
    this.operations = new OperationsImpl(this);
    this.storageSyncServices = new StorageSyncServicesImpl(this);
    this.privateLinkResources = new PrivateLinkResourcesImpl(this);
    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
    this.syncGroups = new SyncGroupsImpl(this);
    this.cloudEndpoints = new CloudEndpointsImpl(this);
    this.serverEndpoints = new ServerEndpointsImpl(this);
    this.registeredServers = new RegisteredServersImpl(this);
    this.workflows = new WorkflowsImpl(this);
    this.operationStatusOperations = new OperationStatusOperationsImpl(this);
  }

  /**
   * Get Operation status
   * @param locationName The desired region to obtain information from.
   * @param operationId operation Id
   * @param options The options parameters.
   */
  locationOperationStatus(
    locationName: string,
    operationId: string,
    options?: LocationOperationStatusOptionalParams
  ): Promise<LocationOperationStatusResponse> {
    return this.sendOperationRequest(
      { locationName, operationId, options },
      locationOperationStatusOperationSpec
    );
  }

  operations: Operations;
  storageSyncServices: StorageSyncServices;
  privateLinkResources: PrivateLinkResources;
  privateEndpointConnections: PrivateEndpointConnections;
  syncGroups: SyncGroups;
  cloudEndpoints: CloudEndpoints;
  serverEndpoints: ServerEndpoints;
  registeredServers: RegisteredServers;
  workflows: Workflows;
  operationStatusOperations: OperationStatusOperations;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const locationOperationStatusOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/locations/{locationName}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocationOperationStatus,
      headersMapper: Mappers.MicrosoftStorageSyncLocationOperationStatusHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.locationName,
    Parameters.subscriptionId,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
