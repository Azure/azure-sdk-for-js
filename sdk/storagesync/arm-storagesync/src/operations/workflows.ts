/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { Workflows } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftStorageSync } from "../microsoftStorageSync";
import {
  Workflow,
  WorkflowsListByStorageSyncServiceOptionalParams,
  WorkflowsListByStorageSyncServiceResponse,
  WorkflowsGetOptionalParams,
  WorkflowsGetResponse,
  WorkflowsAbortOptionalParams,
  WorkflowsAbortResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Workflows operations. */
export class WorkflowsImpl implements Workflows {
  private readonly client: MicrosoftStorageSync;

  /**
   * Initialize a new instance of the class Workflows class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftStorageSync) {
    this.client = client;
  }

  /**
   * Get a Workflow List
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param options The options parameters.
   */
  public listByStorageSyncService(
    resourceGroupName: string,
    storageSyncServiceName: string,
    options?: WorkflowsListByStorageSyncServiceOptionalParams
  ): PagedAsyncIterableIterator<Workflow> {
    const iter = this.listByStorageSyncServicePagingAll(
      resourceGroupName,
      storageSyncServiceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByStorageSyncServicePagingPage(
          resourceGroupName,
          storageSyncServiceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByStorageSyncServicePagingPage(
    resourceGroupName: string,
    storageSyncServiceName: string,
    options?: WorkflowsListByStorageSyncServiceOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Workflow[]> {
    let result: WorkflowsListByStorageSyncServiceResponse;
    result = await this._listByStorageSyncService(
      resourceGroupName,
      storageSyncServiceName,
      options
    );
    yield result.value || [];
  }

  private async *listByStorageSyncServicePagingAll(
    resourceGroupName: string,
    storageSyncServiceName: string,
    options?: WorkflowsListByStorageSyncServiceOptionalParams
  ): AsyncIterableIterator<Workflow> {
    for await (const page of this.listByStorageSyncServicePagingPage(
      resourceGroupName,
      storageSyncServiceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a Workflow List
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param options The options parameters.
   */
  private _listByStorageSyncService(
    resourceGroupName: string,
    storageSyncServiceName: string,
    options?: WorkflowsListByStorageSyncServiceOptionalParams
  ): Promise<WorkflowsListByStorageSyncServiceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageSyncServiceName, options },
      listByStorageSyncServiceOperationSpec
    );
  }

  /**
   * Get Workflows resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param workflowId workflow Id
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    storageSyncServiceName: string,
    workflowId: string,
    options?: WorkflowsGetOptionalParams
  ): Promise<WorkflowsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageSyncServiceName, workflowId, options },
      getOperationSpec
    );
  }

  /**
   * Abort the given workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param workflowId workflow Id
   * @param options The options parameters.
   */
  abort(
    resourceGroupName: string,
    storageSyncServiceName: string,
    workflowId: string,
    options?: WorkflowsAbortOptionalParams
  ): Promise<WorkflowsAbortResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageSyncServiceName, workflowId, options },
      abortOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByStorageSyncServiceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowArray,
      headersMapper: Mappers.WorkflowsListByStorageSyncServiceHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows/{workflowId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Workflow,
      headersMapper: Mappers.WorkflowsGetHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.workflowId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const abortOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows/{workflowId}/abort",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.WorkflowsAbortHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.workflowId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
