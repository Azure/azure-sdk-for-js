/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ServerEndpoints } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftStorageSync } from "../microsoftStorageSync";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ServerEndpoint,
  ServerEndpointsListBySyncGroupOptionalParams,
  ServerEndpointCreateParameters,
  ServerEndpointsCreateOptionalParams,
  ServerEndpointsCreateResponse,
  ServerEndpointsUpdateOptionalParams,
  ServerEndpointsUpdateResponse,
  ServerEndpointsGetOptionalParams,
  ServerEndpointsGetResponse,
  ServerEndpointsDeleteOptionalParams,
  ServerEndpointsDeleteResponse,
  ServerEndpointsListBySyncGroupResponse,
  RecallActionParameters,
  ServerEndpointsRecallActionOptionalParams,
  ServerEndpointsRecallActionResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServerEndpoints operations. */
export class ServerEndpointsImpl implements ServerEndpoints {
  private readonly client: MicrosoftStorageSync;

  /**
   * Initialize a new instance of the class ServerEndpoints class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftStorageSync) {
    this.client = client;
  }

  /**
   * Get a ServerEndpoint list.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param options The options parameters.
   */
  public listBySyncGroup(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: ServerEndpointsListBySyncGroupOptionalParams
  ): PagedAsyncIterableIterator<ServerEndpoint> {
    const iter = this.listBySyncGroupPagingAll(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySyncGroupPagingPage(
          resourceGroupName,
          storageSyncServiceName,
          syncGroupName,
          options
        );
      }
    };
  }

  private async *listBySyncGroupPagingPage(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: ServerEndpointsListBySyncGroupOptionalParams
  ): AsyncIterableIterator<ServerEndpoint[]> {
    let result = await this._listBySyncGroup(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      options
    );
    yield result.value || [];
  }

  private async *listBySyncGroupPagingAll(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: ServerEndpointsListBySyncGroupOptionalParams
  ): AsyncIterableIterator<ServerEndpoint> {
    for await (const page of this.listBySyncGroupPagingPage(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Create a new ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param parameters Body of Server Endpoint object.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    parameters: ServerEndpointCreateParameters,
    options?: ServerEndpointsCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ServerEndpointsCreateResponse>,
      ServerEndpointsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ServerEndpointsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName,
        parameters,
        options
      },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param parameters Body of Server Endpoint object.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    parameters: ServerEndpointCreateParameters,
    options?: ServerEndpointsCreateOptionalParams
  ): Promise<ServerEndpointsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      serverEndpointName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Patch a given ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    options?: ServerEndpointsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ServerEndpointsUpdateResponse>,
      ServerEndpointsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ServerEndpointsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName,
        options
      },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch a given ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    options?: ServerEndpointsUpdateOptionalParams
  ): Promise<ServerEndpointsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      serverEndpointName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get a ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    options?: ServerEndpointsGetOptionalParams
  ): Promise<ServerEndpointsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Delete a given ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    options?: ServerEndpointsDeleteOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ServerEndpointsDeleteResponse>,
      ServerEndpointsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ServerEndpointsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName,
        options
      },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a given ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    options?: ServerEndpointsDeleteOptionalParams
  ): Promise<ServerEndpointsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      serverEndpointName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get a ServerEndpoint list.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param options The options parameters.
   */
  private _listBySyncGroup(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: ServerEndpointsListBySyncGroupOptionalParams
  ): Promise<ServerEndpointsListBySyncGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageSyncServiceName, syncGroupName, options },
      listBySyncGroupOperationSpec
    );
  }

  /**
   * Recall a server endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param parameters Body of Recall Action object.
   * @param options The options parameters.
   */
  async beginRecallAction(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    parameters: RecallActionParameters,
    options?: ServerEndpointsRecallActionOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ServerEndpointsRecallActionResponse>,
      ServerEndpointsRecallActionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ServerEndpointsRecallActionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName,
        parameters,
        options
      },
      recallActionOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Recall a server endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param parameters Body of Recall Action object.
   * @param options The options parameters.
   */
  async beginRecallActionAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    parameters: RecallActionParameters,
    options?: ServerEndpointsRecallActionOptionalParams
  ): Promise<ServerEndpointsRecallActionResponse> {
    const poller = await this.beginRecallAction(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      serverEndpointName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsCreateHeaders
    },
    201: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsCreateHeaders
    },
    202: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsCreateHeaders
    },
    204: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.serverEndpointName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsUpdateHeaders
    },
    202: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsUpdateHeaders
    },
    204: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.serverEndpointName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsGetHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.serverEndpointName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ServerEndpointsDeleteHeaders
    },
    201: {
      headersMapper: Mappers.ServerEndpointsDeleteHeaders
    },
    202: {
      headersMapper: Mappers.ServerEndpointsDeleteHeaders
    },
    204: {
      headersMapper: Mappers.ServerEndpointsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.serverEndpointName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySyncGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerEndpointArray,
      headersMapper: Mappers.ServerEndpointsListBySyncGroupHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const recallActionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}/recallAction",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ServerEndpointsRecallActionHeaders
    },
    201: {
      headersMapper: Mappers.ServerEndpointsRecallActionHeaders
    },
    202: {
      headersMapper: Mappers.ServerEndpointsRecallActionHeaders
    },
    204: {
      headersMapper: Mappers.ServerEndpointsRecallActionHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.serverEndpointName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
