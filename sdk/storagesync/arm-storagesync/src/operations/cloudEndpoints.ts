/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { CloudEndpoints } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftStorageSync } from "../microsoftStorageSync";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  CloudEndpoint,
  CloudEndpointsListBySyncGroupOptionalParams,
  CloudEndpointsListBySyncGroupResponse,
  CloudEndpointCreateParameters,
  CloudEndpointsCreateOptionalParams,
  CloudEndpointsCreateResponse,
  CloudEndpointsGetOptionalParams,
  CloudEndpointsGetResponse,
  CloudEndpointsDeleteOptionalParams,
  CloudEndpointsDeleteResponse,
  BackupRequest,
  CloudEndpointsPreBackupOptionalParams,
  CloudEndpointsPreBackupResponse,
  CloudEndpointsPostBackupOptionalParams,
  CloudEndpointsPostBackupResponse,
  PreRestoreRequest,
  CloudEndpointsPreRestoreOptionalParams,
  CloudEndpointsRestoreheartbeatOptionalParams,
  CloudEndpointsRestoreheartbeatResponse,
  PostRestoreRequest,
  CloudEndpointsPostRestoreOptionalParams,
  TriggerChangeDetectionParameters,
  CloudEndpointsTriggerChangeDetectionOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CloudEndpoints operations. */
export class CloudEndpointsImpl implements CloudEndpoints {
  private readonly client: MicrosoftStorageSync;

  /**
   * Initialize a new instance of the class CloudEndpoints class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftStorageSync) {
    this.client = client;
  }

  /**
   * Get a CloudEndpoint List.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param options The options parameters.
   */
  public listBySyncGroup(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: CloudEndpointsListBySyncGroupOptionalParams
  ): PagedAsyncIterableIterator<CloudEndpoint> {
    const iter = this.listBySyncGroupPagingAll(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySyncGroupPagingPage(
          resourceGroupName,
          storageSyncServiceName,
          syncGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listBySyncGroupPagingPage(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: CloudEndpointsListBySyncGroupOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<CloudEndpoint[]> {
    let result: CloudEndpointsListBySyncGroupResponse;
    result = await this._listBySyncGroup(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      options
    );
    yield result.value || [];
  }

  private async *listBySyncGroupPagingAll(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: CloudEndpointsListBySyncGroupOptionalParams
  ): AsyncIterableIterator<CloudEndpoint> {
    for await (const page of this.listBySyncGroupPagingPage(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Create a new CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Cloud Endpoint resource.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: CloudEndpointCreateParameters,
    options?: CloudEndpointsCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CloudEndpointsCreateResponse>,
      CloudEndpointsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CloudEndpointsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        parameters,
        options
      },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Cloud Endpoint resource.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: CloudEndpointCreateParameters,
    options?: CloudEndpointsCreateOptionalParams
  ): Promise<CloudEndpointsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    options?: CloudEndpointsGetOptionalParams
  ): Promise<CloudEndpointsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Delete a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    options?: CloudEndpointsDeleteOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CloudEndpointsDeleteResponse>,
      CloudEndpointsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CloudEndpointsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        options
      },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    options?: CloudEndpointsDeleteOptionalParams
  ): Promise<CloudEndpointsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get a CloudEndpoint List.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param options The options parameters.
   */
  private _listBySyncGroup(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: CloudEndpointsListBySyncGroupOptionalParams
  ): Promise<CloudEndpointsListBySyncGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageSyncServiceName, syncGroupName, options },
      listBySyncGroupOperationSpec
    );
  }

  /**
   * Pre Backup a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Backup request.
   * @param options The options parameters.
   */
  async beginPreBackup(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: BackupRequest,
    options?: CloudEndpointsPreBackupOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CloudEndpointsPreBackupResponse>,
      CloudEndpointsPreBackupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CloudEndpointsPreBackupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        parameters,
        options
      },
      preBackupOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Pre Backup a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Backup request.
   * @param options The options parameters.
   */
  async beginPreBackupAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: BackupRequest,
    options?: CloudEndpointsPreBackupOptionalParams
  ): Promise<CloudEndpointsPreBackupResponse> {
    const poller = await this.beginPreBackup(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Post Backup a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Backup request.
   * @param options The options parameters.
   */
  async beginPostBackup(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: BackupRequest,
    options?: CloudEndpointsPostBackupOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CloudEndpointsPostBackupResponse>,
      CloudEndpointsPostBackupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CloudEndpointsPostBackupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        parameters,
        options
      },
      postBackupOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Post Backup a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Backup request.
   * @param options The options parameters.
   */
  async beginPostBackupAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: BackupRequest,
    options?: CloudEndpointsPostBackupOptionalParams
  ): Promise<CloudEndpointsPostBackupResponse> {
    const poller = await this.beginPostBackup(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Pre Restore a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async beginPreRestore(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: PreRestoreRequest,
    options?: CloudEndpointsPreRestoreOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        parameters,
        options
      },
      preRestoreOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Pre Restore a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async beginPreRestoreAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: PreRestoreRequest,
    options?: CloudEndpointsPreRestoreOptionalParams
  ): Promise<void> {
    const poller = await this.beginPreRestore(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Restore Heartbeat a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param options The options parameters.
   */
  restoreheartbeat(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    options?: CloudEndpointsRestoreheartbeatOptionalParams
  ): Promise<CloudEndpointsRestoreheartbeatResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        options
      },
      restoreheartbeatOperationSpec
    );
  }

  /**
   * Post Restore a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async beginPostRestore(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: PostRestoreRequest,
    options?: CloudEndpointsPostRestoreOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        parameters,
        options
      },
      postRestoreOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Post Restore a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async beginPostRestoreAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: PostRestoreRequest,
    options?: CloudEndpointsPostRestoreOptionalParams
  ): Promise<void> {
    const poller = await this.beginPostRestore(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Triggers detection of changes performed on Azure File share connected to the specified Azure File
   * Sync Cloud Endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Trigger Change Detection Action parameters.
   * @param options The options parameters.
   */
  async beginTriggerChangeDetection(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: TriggerChangeDetectionParameters,
    options?: CloudEndpointsTriggerChangeDetectionOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        parameters,
        options
      },
      triggerChangeDetectionOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Triggers detection of changes performed on Azure File share connected to the specified Azure File
   * Sync Cloud Endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Trigger Change Detection Action parameters.
   * @param options The options parameters.
   */
  async beginTriggerChangeDetectionAndWait(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: TriggerChangeDetectionParameters,
    options?: CloudEndpointsTriggerChangeDetectionOptionalParams
  ): Promise<void> {
    const poller = await this.beginTriggerChangeDetection(
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CloudEndpoint,
      headersMapper: Mappers.CloudEndpointsCreateHeaders
    },
    201: {
      bodyMapper: Mappers.CloudEndpoint,
      headersMapper: Mappers.CloudEndpointsCreateHeaders
    },
    202: {
      bodyMapper: Mappers.CloudEndpoint,
      headersMapper: Mappers.CloudEndpointsCreateHeaders
    },
    204: {
      bodyMapper: Mappers.CloudEndpoint,
      headersMapper: Mappers.CloudEndpointsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CloudEndpoint,
      headersMapper: Mappers.CloudEndpointsGetHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.CloudEndpointsDeleteHeaders
    },
    201: {
      headersMapper: Mappers.CloudEndpointsDeleteHeaders
    },
    202: {
      headersMapper: Mappers.CloudEndpointsDeleteHeaders
    },
    204: {
      headersMapper: Mappers.CloudEndpointsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySyncGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CloudEndpointArray,
      headersMapper: Mappers.CloudEndpointsListBySyncGroupHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const preBackupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prebackup",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.CloudEndpointsPreBackupHeaders
    },
    201: {
      headersMapper: Mappers.CloudEndpointsPreBackupHeaders
    },
    202: {
      headersMapper: Mappers.CloudEndpointsPreBackupHeaders
    },
    204: {
      headersMapper: Mappers.CloudEndpointsPreBackupHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postBackupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postbackup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PostBackupResponse,
      headersMapper: Mappers.CloudEndpointsPostBackupHeaders
    },
    201: {
      bodyMapper: Mappers.PostBackupResponse,
      headersMapper: Mappers.CloudEndpointsPostBackupHeaders
    },
    202: {
      bodyMapper: Mappers.PostBackupResponse,
      headersMapper: Mappers.CloudEndpointsPostBackupHeaders
    },
    204: {
      bodyMapper: Mappers.PostBackupResponse,
      headersMapper: Mappers.CloudEndpointsPostBackupHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const preRestoreOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prerestore",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const restoreheartbeatOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/restoreheartbeat",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.CloudEndpointsRestoreheartbeatHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const postRestoreOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postrestore",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const triggerChangeDetectionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/triggerChangeDetection",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
