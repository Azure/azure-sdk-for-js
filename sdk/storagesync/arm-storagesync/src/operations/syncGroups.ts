/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SyncGroups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftStorageSync } from "../microsoftStorageSync";
import {
  SyncGroup,
  SyncGroupsListByStorageSyncServiceOptionalParams,
  SyncGroupsListByStorageSyncServiceResponse,
  SyncGroupCreateParameters,
  SyncGroupsCreateOptionalParams,
  SyncGroupsCreateResponse,
  SyncGroupsGetOptionalParams,
  SyncGroupsGetResponse,
  SyncGroupsDeleteOptionalParams,
  SyncGroupsDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SyncGroups operations. */
export class SyncGroupsImpl implements SyncGroups {
  private readonly client: MicrosoftStorageSync;

  /**
   * Initialize a new instance of the class SyncGroups class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftStorageSync) {
    this.client = client;
  }

  /**
   * Get a SyncGroup List.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param options The options parameters.
   */
  public listByStorageSyncService(
    resourceGroupName: string,
    storageSyncServiceName: string,
    options?: SyncGroupsListByStorageSyncServiceOptionalParams
  ): PagedAsyncIterableIterator<SyncGroup> {
    const iter = this.listByStorageSyncServicePagingAll(
      resourceGroupName,
      storageSyncServiceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByStorageSyncServicePagingPage(
          resourceGroupName,
          storageSyncServiceName,
          options
        );
      }
    };
  }

  private async *listByStorageSyncServicePagingPage(
    resourceGroupName: string,
    storageSyncServiceName: string,
    options?: SyncGroupsListByStorageSyncServiceOptionalParams
  ): AsyncIterableIterator<SyncGroup[]> {
    let result = await this._listByStorageSyncService(
      resourceGroupName,
      storageSyncServiceName,
      options
    );
    yield result.value || [];
  }

  private async *listByStorageSyncServicePagingAll(
    resourceGroupName: string,
    storageSyncServiceName: string,
    options?: SyncGroupsListByStorageSyncServiceOptionalParams
  ): AsyncIterableIterator<SyncGroup> {
    for await (const page of this.listByStorageSyncServicePagingPage(
      resourceGroupName,
      storageSyncServiceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a SyncGroup List.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param options The options parameters.
   */
  private _listByStorageSyncService(
    resourceGroupName: string,
    storageSyncServiceName: string,
    options?: SyncGroupsListByStorageSyncServiceOptionalParams
  ): Promise<SyncGroupsListByStorageSyncServiceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageSyncServiceName, options },
      listByStorageSyncServiceOperationSpec
    );
  }

  /**
   * Create a new SyncGroup.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param parameters Sync Group Body
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    parameters: SyncGroupCreateParameters,
    options?: SyncGroupsCreateOptionalParams
  ): Promise<SyncGroupsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        parameters,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Get a given SyncGroup.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: SyncGroupsGetOptionalParams
  ): Promise<SyncGroupsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageSyncServiceName, syncGroupName, options },
      getOperationSpec
    );
  }

  /**
   * Delete a given SyncGroup.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: SyncGroupsDeleteOptionalParams
  ): Promise<SyncGroupsDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageSyncServiceName, syncGroupName, options },
      deleteOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByStorageSyncServiceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SyncGroupArray,
      headersMapper: Mappers.SyncGroupsListByStorageSyncServiceHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SyncGroup,
      headersMapper: Mappers.SyncGroupsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SyncGroup,
      headersMapper: Mappers.SyncGroupsGetHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.SyncGroupsDeleteHeaders
    },
    204: {},
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
