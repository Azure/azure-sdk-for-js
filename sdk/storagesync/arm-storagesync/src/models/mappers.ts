/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationEntityListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationEntityListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationEntity"
            }
          }
        }
      }
    }
  }
};

export const OperationEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationEntity",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplayInfo"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationProperties"
        }
      }
    }
  }
};

export const OperationDisplayInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplayInfo",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationResourceServiceSpecification"
        }
      }
    }
  }
};

export const OperationResourceServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResourceServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationResourceMetricSpecification"
            }
          }
        }
      }
    }
  }
};

export const OperationResourceMetricSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResourceMetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationResourceMetricSpecificationDimension"
            }
          }
        }
      }
    }
  }
};

export const OperationResourceMetricSpecificationDimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResourceMetricSpecificationDimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      toBeExportedForShoebox: {
        serializedName: "toBeExportedForShoebox",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StorageSyncError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "StorageSyncApiError"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "StorageSyncApiError"
        }
      }
    }
  }
};

export const StorageSyncApiError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncApiError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "StorageSyncErrorDetails"
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "StorageSyncInnerErrorDetails"
        }
      }
    }
  }
};

export const StorageSyncErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      requestUri: {
        serializedName: "requestUri",
        type: {
          name: "String"
        }
      },
      exceptionType: {
        serializedName: "exceptionType",
        type: {
          name: "String"
        }
      },
      httpMethod: {
        serializedName: "httpMethod",
        type: {
          name: "String"
        }
      },
      hashedMessage: {
        serializedName: "hashedMessage",
        type: {
          name: "String"
        }
      },
      httpErrorCode: {
        serializedName: "httpErrorCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSyncInnerErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncInnerErrorDetails",
    modelProperties: {
      callStack: {
        serializedName: "callStack",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      innerException: {
        serializedName: "innerException",
        type: {
          name: "String"
        }
      },
      innerExceptionCallStack: {
        serializedName: "innerExceptionCallStack",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.StorageSync/storageSyncServices",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "AlreadyExists"]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSyncServiceCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncServiceCreateParameters",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      incomingTrafficPolicy: {
        serializedName: "properties.incomingTrafficPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSyncServiceUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncServiceUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      incomingTrafficPolicy: {
        serializedName: "properties.incomingTrafficPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSyncServiceArray: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncServiceArray",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageSyncService"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const SyncGroupArray: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupArray",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncGroup"
            }
          }
        }
      }
    }
  }
};

export const CloudEndpointChangeEnumerationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointChangeEnumerationStatus",
    modelProperties: {
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastEnumerationStatus: {
        serializedName: "lastEnumerationStatus",
        type: {
          name: "Composite",
          className: "CloudEndpointLastChangeEnumerationStatus"
        }
      },
      activity: {
        serializedName: "activity",
        type: {
          name: "Composite",
          className: "CloudEndpointChangeEnumerationActivity"
        }
      }
    }
  }
};

export const CloudEndpointLastChangeEnumerationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointLastChangeEnumerationStatus",
    modelProperties: {
      startedTimestamp: {
        serializedName: "startedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      completedTimestamp: {
        serializedName: "completedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      namespaceFilesCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "namespaceFilesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      namespaceDirectoriesCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "namespaceDirectoriesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      namespaceSizeBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "namespaceSizeBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nextRunTimestamp: {
        serializedName: "nextRunTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CloudEndpointChangeEnumerationActivity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointChangeEnumerationActivity",
    modelProperties: {
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      operationState: {
        serializedName: "operationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusCode: {
        serializedName: "statusCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startedTimestamp: {
        serializedName: "startedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      processedFilesCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "processedFilesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      processedDirectoriesCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "processedDirectoriesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalFilesCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "totalFilesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalDirectoriesCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "totalDirectoriesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalSizeBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "totalSizeBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      progressPercent: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "progressPercent",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minutesRemaining: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "minutesRemaining",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalCountsState: {
        serializedName: "totalCountsState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deletesProgressPercent: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "deletesProgressPercent",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CloudEndpointArray: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointArray",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudEndpoint"
            }
          }
        }
      }
    }
  }
};

export const BackupRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupRequest",
    modelProperties: {
      azureFileShare: {
        serializedName: "azureFileShare",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PostBackupResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PostBackupResponse",
    modelProperties: {
      cloudEndpointName: {
        serializedName: "backupMetadata.cloudEndpointName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PreRestoreRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PreRestoreRequest",
    modelProperties: {
      partition: {
        serializedName: "partition",
        type: {
          name: "String"
        }
      },
      replicaGroup: {
        serializedName: "replicaGroup",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "requestId",
        type: {
          name: "String"
        }
      },
      azureFileShareUri: {
        serializedName: "azureFileShareUri",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      sourceAzureFileShareUri: {
        serializedName: "sourceAzureFileShareUri",
        type: {
          name: "String"
        }
      },
      backupMetadataPropertyBag: {
        serializedName: "backupMetadataPropertyBag",
        type: {
          name: "String"
        }
      },
      restoreFileSpec: {
        serializedName: "restoreFileSpec",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestoreFileSpec"
            }
          }
        }
      },
      pauseWaitForSyncDrainTimePeriodInSeconds: {
        serializedName: "pauseWaitForSyncDrainTimePeriodInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RestoreFileSpec: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestoreFileSpec",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      isdir: {
        serializedName: "isdir",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PostRestoreRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PostRestoreRequest",
    modelProperties: {
      partition: {
        serializedName: "partition",
        type: {
          name: "String"
        }
      },
      replicaGroup: {
        serializedName: "replicaGroup",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "requestId",
        type: {
          name: "String"
        }
      },
      azureFileShareUri: {
        serializedName: "azureFileShareUri",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      sourceAzureFileShareUri: {
        serializedName: "sourceAzureFileShareUri",
        type: {
          name: "String"
        }
      },
      failedFileList: {
        serializedName: "failedFileList",
        type: {
          name: "String"
        }
      },
      restoreFileSpec: {
        serializedName: "restoreFileSpec",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestoreFileSpec"
            }
          }
        }
      }
    }
  }
};

export const TriggerChangeDetectionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerChangeDetectionParameters",
    modelProperties: {
      directoryPath: {
        serializedName: "directoryPath",
        type: {
          name: "String"
        }
      },
      changeDetectionMode: {
        serializedName: "changeDetectionMode",
        type: {
          name: "String"
        }
      },
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ServerEndpointSyncStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointSyncStatus",
    modelProperties: {
      downloadHealth: {
        serializedName: "downloadHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uploadHealth: {
        serializedName: "uploadHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      combinedHealth: {
        serializedName: "combinedHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      syncActivity: {
        serializedName: "syncActivity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalPersistentFilesNotSyncingCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "totalPersistentFilesNotSyncingCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      uploadStatus: {
        serializedName: "uploadStatus",
        type: {
          name: "Composite",
          className: "ServerEndpointSyncSessionStatus"
        }
      },
      downloadStatus: {
        serializedName: "downloadStatus",
        type: {
          name: "Composite",
          className: "ServerEndpointSyncSessionStatus"
        }
      },
      uploadActivity: {
        serializedName: "uploadActivity",
        type: {
          name: "Composite",
          className: "ServerEndpointSyncActivityStatus"
        }
      },
      downloadActivity: {
        serializedName: "downloadActivity",
        type: {
          name: "Composite",
          className: "ServerEndpointSyncActivityStatus"
        }
      },
      offlineDataTransferStatus: {
        serializedName: "offlineDataTransferStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      backgroundDataDownloadActivity: {
        serializedName: "backgroundDataDownloadActivity",
        type: {
          name: "Composite",
          className: "ServerEndpointBackgroundDataDownloadActivity"
        }
      }
    }
  }
};

export const ServerEndpointSyncSessionStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointSyncSessionStatus",
    modelProperties: {
      lastSyncResult: {
        serializedName: "lastSyncResult",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastSyncTimestamp: {
        serializedName: "lastSyncTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastSyncSuccessTimestamp: {
        serializedName: "lastSyncSuccessTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastSyncPerItemErrorCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "lastSyncPerItemErrorCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      persistentFilesNotSyncingCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "persistentFilesNotSyncingCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      transientFilesNotSyncingCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "transientFilesNotSyncingCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      filesNotSyncingErrors: {
        serializedName: "filesNotSyncingErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerEndpointFilesNotSyncingError"
            }
          }
        }
      },
      lastSyncMode: {
        serializedName: "lastSyncMode",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerEndpointFilesNotSyncingError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointFilesNotSyncingError",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      persistentCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "persistentCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      transientCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "transientCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServerEndpointSyncActivityStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointSyncActivityStatus",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      perItemErrorCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "perItemErrorCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      appliedItemCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "appliedItemCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalItemCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "totalItemCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      appliedBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "appliedBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "totalBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      syncMode: {
        serializedName: "syncMode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sessionMinutesRemaining: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "sessionMinutesRemaining",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServerEndpointBackgroundDataDownloadActivity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointBackgroundDataDownloadActivity",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      startedTimestamp: {
        serializedName: "startedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      percentProgress: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "percentProgress",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      downloadedBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "downloadedBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServerEndpointCloudTieringStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointCloudTieringStatus",
    modelProperties: {
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthLastUpdatedTimestamp: {
        serializedName: "healthLastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastCloudTieringResult: {
        serializedName: "lastCloudTieringResult",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastSuccessTimestamp: {
        serializedName: "lastSuccessTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      spaceSavings: {
        serializedName: "spaceSavings",
        type: {
          name: "Composite",
          className: "CloudTieringSpaceSavings"
        }
      },
      cachePerformance: {
        serializedName: "cachePerformance",
        type: {
          name: "Composite",
          className: "CloudTieringCachePerformance"
        }
      },
      filesNotTiering: {
        serializedName: "filesNotTiering",
        type: {
          name: "Composite",
          className: "CloudTieringFilesNotTiering"
        }
      },
      volumeFreeSpacePolicyStatus: {
        serializedName: "volumeFreeSpacePolicyStatus",
        type: {
          name: "Composite",
          className: "CloudTieringVolumeFreeSpacePolicyStatus"
        }
      },
      datePolicyStatus: {
        serializedName: "datePolicyStatus",
        type: {
          name: "Composite",
          className: "CloudTieringDatePolicyStatus"
        }
      }
    }
  }
};

export const CloudTieringSpaceSavings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudTieringSpaceSavings",
    modelProperties: {
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      volumeSizeBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "volumeSizeBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalSizeCloudBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "totalSizeCloudBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      cachedSizeBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "cachedSizeBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      spaceSavingsPercent: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "spaceSavingsPercent",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      spaceSavingsBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "spaceSavingsBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CloudTieringCachePerformance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudTieringCachePerformance",
    modelProperties: {
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      cacheHitBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "cacheHitBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      cacheMissBytes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "cacheMissBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      cacheHitBytesPercent: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "cacheHitBytesPercent",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CloudTieringFilesNotTiering: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudTieringFilesNotTiering",
    modelProperties: {
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      totalFileCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "totalFileCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FilesNotTieringError"
            }
          }
        }
      }
    }
  }
};

export const FilesNotTieringError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FilesNotTieringError",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      fileCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "fileCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CloudTieringVolumeFreeSpacePolicyStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudTieringVolumeFreeSpacePolicyStatus",
    modelProperties: {
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      effectiveVolumeFreeSpacePolicy: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "effectiveVolumeFreeSpacePolicy",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currentVolumeFreeSpacePercent: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "currentVolumeFreeSpacePercent",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CloudTieringDatePolicyStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudTieringDatePolicyStatus",
    modelProperties: {
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      tieredFilesMostRecentAccessTimestamp: {
        serializedName: "tieredFilesMostRecentAccessTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ServerEndpointRecallStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointRecallStatus",
    modelProperties: {
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      totalRecallErrorsCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "totalRecallErrorsCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recallErrors: {
        serializedName: "recallErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerEndpointRecallError"
            }
          }
        }
      }
    }
  }
};

export const ServerEndpointRecallError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointRecallError",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      count: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "count",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServerEndpointUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointUpdateParameters",
    modelProperties: {
      cloudTiering: {
        serializedName: "properties.cloudTiering",
        type: {
          name: "String"
        }
      },
      volumeFreeSpacePercent: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.volumeFreeSpacePercent",
        type: {
          name: "Number"
        }
      },
      tierFilesOlderThanDays: {
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        serializedName: "properties.tierFilesOlderThanDays",
        type: {
          name: "Number"
        }
      },
      offlineDataTransfer: {
        serializedName: "properties.offlineDataTransfer",
        type: {
          name: "String"
        }
      },
      offlineDataTransferShareName: {
        serializedName: "properties.offlineDataTransferShareName",
        type: {
          name: "String"
        }
      },
      localCacheMode: {
        serializedName: "properties.localCacheMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerEndpointArray: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointArray",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerEndpoint"
            }
          }
        }
      }
    }
  }
};

export const RecallActionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecallActionParameters",
    modelProperties: {
      pattern: {
        serializedName: "pattern",
        type: {
          name: "String"
        }
      },
      recallPath: {
        serializedName: "recallPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegisteredServerArray: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegisteredServerArray",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegisteredServer"
            }
          }
        }
      }
    }
  }
};

export const TriggerRolloverRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerRolloverRequest",
    modelProperties: {
      serverCertificate: {
        serializedName: "serverCertificate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkflowArray: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowArray",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workflow"
            }
          }
        }
      }
    }
  }
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "StorageSyncApiError"
        }
      }
    }
  }
};

export const LocationOperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocationOperationStatus",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "StorageSyncApiError"
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SubscriptionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionState",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      istransitioning: {
        serializedName: "istransitioning",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ResourcesMoveInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcesMoveInfo",
    modelProperties: {
      targetResourceGroup: {
        serializedName: "targetResourceGroup",
        type: {
          name: "String"
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OperationDisplayResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplayResource",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const StorageSyncService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncService",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      incomingTrafficPolicy: {
        serializedName: "properties.incomingTrafficPolicy",
        type: {
          name: "String"
        }
      },
      storageSyncServiceStatus: {
        serializedName: "properties.storageSyncServiceStatus",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      storageSyncServiceUid: {
        serializedName: "properties.storageSyncServiceUid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastWorkflowId: {
        serializedName: "properties.lastWorkflowId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastOperationName: {
        serializedName: "properties.lastOperationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const SyncGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      uniqueId: {
        serializedName: "properties.uniqueId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      syncGroupStatus: {
        serializedName: "properties.syncGroupStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupCreateParameters",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const CloudEndpointCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointCreateParameters",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageAccountResourceId: {
        serializedName: "properties.storageAccountResourceId",
        type: {
          name: "String"
        }
      },
      azureFileShareName: {
        serializedName: "properties.azureFileShareName",
        type: {
          name: "String"
        }
      },
      storageAccountTenantId: {
        serializedName: "properties.storageAccountTenantId",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpoint",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageAccountResourceId: {
        serializedName: "properties.storageAccountResourceId",
        type: {
          name: "String"
        }
      },
      azureFileShareName: {
        serializedName: "properties.azureFileShareName",
        type: {
          name: "String"
        }
      },
      storageAccountTenantId: {
        serializedName: "properties.storageAccountTenantId",
        type: {
          name: "String"
        }
      },
      partnershipId: {
        serializedName: "properties.partnershipId",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      backupEnabled: {
        serializedName: "properties.backupEnabled",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      lastWorkflowId: {
        serializedName: "properties.lastWorkflowId",
        type: {
          name: "String"
        }
      },
      lastOperationName: {
        serializedName: "properties.lastOperationName",
        type: {
          name: "String"
        }
      },
      changeEnumerationStatus: {
        serializedName: "properties.changeEnumerationStatus",
        type: {
          name: "Composite",
          className: "CloudEndpointChangeEnumerationStatus"
        }
      }
    }
  }
};

export const ServerEndpointCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointCreateParameters",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      serverLocalPath: {
        serializedName: "properties.serverLocalPath",
        type: {
          name: "String"
        }
      },
      cloudTiering: {
        serializedName: "properties.cloudTiering",
        type: {
          name: "String"
        }
      },
      volumeFreeSpacePercent: {
        defaultValue: 20,
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.volumeFreeSpacePercent",
        type: {
          name: "Number"
        }
      },
      tierFilesOlderThanDays: {
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        serializedName: "properties.tierFilesOlderThanDays",
        type: {
          name: "Number"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      serverResourceId: {
        serializedName: "properties.serverResourceId",
        type: {
          name: "String"
        }
      },
      offlineDataTransfer: {
        serializedName: "properties.offlineDataTransfer",
        type: {
          name: "String"
        }
      },
      offlineDataTransferShareName: {
        serializedName: "properties.offlineDataTransferShareName",
        type: {
          name: "String"
        }
      },
      initialDownloadPolicy: {
        serializedName: "properties.initialDownloadPolicy",
        type: {
          name: "String"
        }
      },
      localCacheMode: {
        serializedName: "properties.localCacheMode",
        type: {
          name: "String"
        }
      },
      initialUploadPolicy: {
        serializedName: "properties.initialUploadPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpoint",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      serverLocalPath: {
        serializedName: "properties.serverLocalPath",
        type: {
          name: "String"
        }
      },
      cloudTiering: {
        serializedName: "properties.cloudTiering",
        type: {
          name: "String"
        }
      },
      volumeFreeSpacePercent: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.volumeFreeSpacePercent",
        type: {
          name: "Number"
        }
      },
      tierFilesOlderThanDays: {
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        serializedName: "properties.tierFilesOlderThanDays",
        type: {
          name: "Number"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      serverResourceId: {
        serializedName: "properties.serverResourceId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastWorkflowId: {
        serializedName: "properties.lastWorkflowId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastOperationName: {
        serializedName: "properties.lastOperationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      syncStatus: {
        serializedName: "properties.syncStatus",
        type: {
          name: "Composite",
          className: "ServerEndpointSyncStatus"
        }
      },
      offlineDataTransfer: {
        serializedName: "properties.offlineDataTransfer",
        type: {
          name: "String"
        }
      },
      offlineDataTransferStorageAccountResourceId: {
        serializedName:
          "properties.offlineDataTransferStorageAccountResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      offlineDataTransferStorageAccountTenantId: {
        serializedName: "properties.offlineDataTransferStorageAccountTenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      offlineDataTransferShareName: {
        serializedName: "properties.offlineDataTransferShareName",
        type: {
          name: "String"
        }
      },
      cloudTieringStatus: {
        serializedName: "properties.cloudTieringStatus",
        type: {
          name: "Composite",
          className: "ServerEndpointCloudTieringStatus"
        }
      },
      recallStatus: {
        serializedName: "properties.recallStatus",
        type: {
          name: "Composite",
          className: "ServerEndpointRecallStatus"
        }
      },
      initialDownloadPolicy: {
        serializedName: "properties.initialDownloadPolicy",
        type: {
          name: "String"
        }
      },
      localCacheMode: {
        serializedName: "properties.localCacheMode",
        type: {
          name: "String"
        }
      },
      initialUploadPolicy: {
        serializedName: "properties.initialUploadPolicy",
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegisteredServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegisteredServer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      serverCertificate: {
        serializedName: "properties.serverCertificate",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "properties.agentVersion",
        type: {
          name: "String"
        }
      },
      agentVersionStatus: {
        serializedName: "properties.agentVersionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentVersionExpirationDate: {
        serializedName: "properties.agentVersionExpirationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      serverOSVersion: {
        serializedName: "properties.serverOSVersion",
        type: {
          name: "String"
        }
      },
      serverManagementErrorCode: {
        serializedName: "properties.serverManagementErrorCode",
        type: {
          name: "Number"
        }
      },
      lastHeartBeat: {
        serializedName: "properties.lastHeartBeat",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      serverRole: {
        serializedName: "properties.serverRole",
        type: {
          name: "String"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        type: {
          name: "String"
        }
      },
      clusterName: {
        serializedName: "properties.clusterName",
        type: {
          name: "String"
        }
      },
      serverId: {
        serializedName: "properties.serverId",
        type: {
          name: "String"
        }
      },
      storageSyncServiceUid: {
        serializedName: "properties.storageSyncServiceUid",
        type: {
          name: "String"
        }
      },
      lastWorkflowId: {
        serializedName: "properties.lastWorkflowId",
        type: {
          name: "String"
        }
      },
      lastOperationName: {
        serializedName: "properties.lastOperationName",
        type: {
          name: "String"
        }
      },
      discoveryEndpointUri: {
        serializedName: "properties.discoveryEndpointUri",
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "properties.resourceLocation",
        type: {
          name: "String"
        }
      },
      serviceLocation: {
        serializedName: "properties.serviceLocation",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      managementEndpointUri: {
        serializedName: "properties.managementEndpointUri",
        type: {
          name: "String"
        }
      },
      monitoringEndpointUri: {
        serializedName: "properties.monitoringEndpointUri",
        type: {
          name: "String"
        }
      },
      monitoringConfiguration: {
        serializedName: "properties.monitoringConfiguration",
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegisteredServerCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegisteredServerCreateParameters",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      serverCertificate: {
        serializedName: "properties.serverCertificate",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "properties.agentVersion",
        type: {
          name: "String"
        }
      },
      serverOSVersion: {
        serializedName: "properties.serverOSVersion",
        type: {
          name: "String"
        }
      },
      lastHeartBeat: {
        serializedName: "properties.lastHeartBeat",
        type: {
          name: "String"
        }
      },
      serverRole: {
        serializedName: "properties.serverRole",
        type: {
          name: "String"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        type: {
          name: "String"
        }
      },
      clusterName: {
        serializedName: "properties.clusterName",
        type: {
          name: "String"
        }
      },
      serverId: {
        serializedName: "properties.serverId",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Workflow: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workflow",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      lastStepName: {
        serializedName: "properties.lastStepName",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "properties.operation",
        type: {
          name: "String"
        }
      },
      steps: {
        serializedName: "properties.steps",
        type: {
          name: "String"
        }
      },
      lastOperationId: {
        serializedName: "properties.lastOperationId",
        type: {
          name: "String"
        }
      },
      commandName: {
        serializedName: "properties.commandName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdTimestamp: {
        serializedName: "properties.createdTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastStatusTimestamp: {
        serializedName: "properties.lastStatusTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const OperationsListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsListHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsListNextHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSyncServicesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncServicesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSyncServicesGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncServicesGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSyncServicesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncServicesUpdateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSyncServicesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncServicesDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSyncServicesListByResourceGroupHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncServicesListByResourceGroupHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSyncServicesListBySubscriptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSyncServicesListBySubscriptionHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsListByStorageSyncServiceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsListByStorageSyncServiceHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupsListByStorageSyncServiceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupsListByStorageSyncServiceHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupsCreateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupsGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupsDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpointsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointsCreateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpointsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointsGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpointsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointsDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpointsListBySyncGroupHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointsListBySyncGroupHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpointsPreBackupHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointsPreBackupHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpointsPostBackupHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointsPostBackupHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpointsPreRestoreHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointsPreRestoreHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpointsRestoreheartbeatHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointsRestoreheartbeatHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpointsPostRestoreHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointsPostRestoreHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEndpointsTriggerChangeDetectionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEndpointsTriggerChangeDetectionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerEndpointsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointsCreateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerEndpointsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointsUpdateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerEndpointsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointsGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerEndpointsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointsDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerEndpointsListBySyncGroupHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointsListBySyncGroupHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerEndpointsRecallActionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerEndpointsRecallActionHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegisteredServersListByStorageSyncServiceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegisteredServersListByStorageSyncServiceHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegisteredServersGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegisteredServersGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegisteredServersCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegisteredServersCreateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegisteredServersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegisteredServersDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegisteredServersTriggerRolloverHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegisteredServersTriggerRolloverHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkflowsListByStorageSyncServiceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowsListByStorageSyncServiceHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkflowsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowsGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkflowsAbortHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowsAbortHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatusGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MicrosoftStorageSyncLocationOperationStatusHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MicrosoftStorageSyncLocationOperationStatusHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsCorrelationRequestId: {
        serializedName: "x-ms-correlation-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};
