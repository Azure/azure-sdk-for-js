/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/linkedServerMappers";
import * as Parameters from "../models/parameters";
import { RedisManagementClientContext } from "../redisManagementClientContext";

/** Class representing a LinkedServer. */
export class LinkedServer {
  private readonly client: RedisManagementClientContext;

  /**
   * Create a LinkedServer.
   * @param {RedisManagementClientContext} client Reference to the service client.
   */
  constructor(client: RedisManagementClientContext) {
    this.client = client;
  }

  /**
   * Adds a linked server to the Redis cache (requires Premium SKU).
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param linkedServerName The name of the linked server that is being added to the Redis cache.
   * @param parameters Parameters supplied to the Create Linked server operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedServerCreateResponse>
   */
  create(resourceGroupName: string, name: string, linkedServerName: string, parameters: Models.RedisLinkedServerCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerCreateResponse> {
    return this.beginCreate(resourceGroupName,name,linkedServerName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LinkedServerCreateResponse>;
  }

  /**
   * Deletes the linked server from a redis cache (requires Premium SKU).
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param linkedServerName The name of the linked server that is being added to the Redis cache.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param linkedServerName The name of the linked server that is being added to the Redis cache.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param linkedServerName The name of the linked server that is being added to the Redis cache.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        linkedServerName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets the detailed information about a linked server of a redis cache (requires Premium SKU).
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param linkedServerName The name of the linked server.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedServerGetResponse>
   */
  get(resourceGroupName: string, name: string, linkedServerName: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param linkedServerName The name of the linked server.
   * @param callback The callback
   */
  get(resourceGroupName: string, name: string, linkedServerName: string, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithProperties>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param linkedServerName The name of the linked server.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, name: string, linkedServerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithProperties>): void;
  get(resourceGroupName: string, name: string, linkedServerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisLinkedServerWithProperties>, callback?: msRest.ServiceCallback<Models.RedisLinkedServerWithProperties>): Promise<Models.LinkedServerGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        linkedServerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LinkedServerGetResponse>;
  }

  /**
   * Gets the list of linked servers associated with this redis cache (requires Premium SKU).
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedServerListResponse>
   */
  list(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param callback The callback
   */
  list(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;
  list(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>, callback?: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): Promise<Models.LinkedServerListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.LinkedServerListResponse>;
  }

  /**
   * Adds a linked server to the Redis cache (requires Premium SKU).
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param linkedServerName The name of the linked server that is being added to the Redis cache.
   * @param parameters Parameters supplied to the Create Linked server operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, name: string, linkedServerName: string, parameters: Models.RedisLinkedServerCreateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        linkedServerName,
        parameters,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Gets the list of linked servers associated with this redis cache (requires Premium SKU).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedServerListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>, callback?: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): Promise<Models.LinkedServerListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.LinkedServerListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.linkedServerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.linkedServerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RedisLinkedServerWithProperties
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RedisLinkedServerWithPropertiesList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.linkedServerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.RedisLinkedServerCreateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RedisLinkedServerWithProperties
    },
    201: {
      bodyMapper: Mappers.RedisLinkedServerWithProperties
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RedisLinkedServerWithPropertiesList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
