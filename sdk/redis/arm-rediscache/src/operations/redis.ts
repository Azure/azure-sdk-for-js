/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Redis } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RedisManagementClient } from "../redisManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  UpgradeNotification,
  RedisListUpgradeNotificationsNextOptionalParams,
  RedisListUpgradeNotificationsOptionalParams,
  RedisResource,
  RedisListByResourceGroupNextOptionalParams,
  RedisListByResourceGroupOptionalParams,
  RedisListBySubscriptionNextOptionalParams,
  RedisListBySubscriptionOptionalParams,
  CheckNameAvailabilityParameters,
  RedisCheckNameAvailabilityOptionalParams,
  RedisListUpgradeNotificationsResponse,
  RedisCreateParameters,
  RedisCreateOptionalParams,
  RedisCreateResponse,
  RedisUpdateParameters,
  RedisUpdateOptionalParams,
  RedisUpdateResponse,
  RedisDeleteOptionalParams,
  RedisGetOptionalParams,
  RedisGetResponse,
  RedisListByResourceGroupResponse,
  RedisListBySubscriptionResponse,
  RedisListKeysOptionalParams,
  RedisListKeysResponse,
  RedisRegenerateKeyParameters,
  RedisRegenerateKeyOptionalParams,
  RedisRegenerateKeyResponse,
  RedisRebootParameters,
  RedisForceRebootOptionalParams,
  RedisForceRebootOperationResponse,
  ImportRDBParameters,
  RedisImportDataOptionalParams,
  ExportRDBParameters,
  RedisExportDataOptionalParams,
  RedisListUpgradeNotificationsNextResponse,
  RedisListByResourceGroupNextResponse,
  RedisListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Redis operations. */
export class RedisImpl implements Redis {
  private readonly client: RedisManagementClient;

  /**
   * Initialize a new instance of the class Redis class.
   * @param client Reference to the service client
   */
  constructor(client: RedisManagementClient) {
    this.client = client;
  }

  /**
   * Gets any upgrade notifications for a Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param history how many minutes in past to look for upgrade notifications
   * @param options The options parameters.
   */
  public listUpgradeNotifications(
    resourceGroupName: string,
    name: string,
    history: number,
    options?: RedisListUpgradeNotificationsOptionalParams
  ): PagedAsyncIterableIterator<UpgradeNotification> {
    const iter = this.listUpgradeNotificationsPagingAll(
      resourceGroupName,
      name,
      history,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listUpgradeNotificationsPagingPage(
          resourceGroupName,
          name,
          history,
          options
        );
      }
    };
  }

  private async *listUpgradeNotificationsPagingPage(
    resourceGroupName: string,
    name: string,
    history: number,
    options?: RedisListUpgradeNotificationsOptionalParams
  ): AsyncIterableIterator<UpgradeNotification[]> {
    let result = await this._listUpgradeNotifications(
      resourceGroupName,
      name,
      history,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listUpgradeNotificationsNext(
        resourceGroupName,
        name,
        history,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listUpgradeNotificationsPagingAll(
    resourceGroupName: string,
    name: string,
    history: number,
    options?: RedisListUpgradeNotificationsOptionalParams
  ): AsyncIterableIterator<UpgradeNotification> {
    for await (const page of this.listUpgradeNotificationsPagingPage(
      resourceGroupName,
      name,
      history,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all Redis caches in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: RedisListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<RedisResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: RedisListByResourceGroupOptionalParams
  ): AsyncIterableIterator<RedisResource[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: RedisListByResourceGroupOptionalParams
  ): AsyncIterableIterator<RedisResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all Redis caches in the specified subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: RedisListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<RedisResource> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: RedisListBySubscriptionOptionalParams
  ): AsyncIterableIterator<RedisResource[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: RedisListBySubscriptionOptionalParams
  ): AsyncIterableIterator<RedisResource> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Checks that the redis cache name is valid and is not already in use.
   * @param parameters Parameters supplied to the CheckNameAvailability Redis operation. The only
   *                   supported resource type is 'Microsoft.Cache/redis'
   * @param options The options parameters.
   */
  checkNameAvailability(
    parameters: CheckNameAvailabilityParameters,
    options?: RedisCheckNameAvailabilityOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { parameters, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Gets any upgrade notifications for a Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param history how many minutes in past to look for upgrade notifications
   * @param options The options parameters.
   */
  private _listUpgradeNotifications(
    resourceGroupName: string,
    name: string,
    history: number,
    options?: RedisListUpgradeNotificationsOptionalParams
  ): Promise<RedisListUpgradeNotificationsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, history, options },
      listUpgradeNotificationsOperationSpec
    );
  }

  /**
   * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters supplied to the Create Redis operation.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    name: string,
    parameters: RedisCreateParameters,
    options?: RedisCreateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<RedisCreateResponse>, RedisCreateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RedisCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, parameters, options },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters supplied to the Create Redis operation.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    name: string,
    parameters: RedisCreateParameters,
    options?: RedisCreateOptionalParams
  ): Promise<RedisCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      name,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an existing Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters supplied to the Update Redis operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    name: string,
    parameters: RedisUpdateParameters,
    options?: RedisUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<RedisUpdateResponse>, RedisUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RedisUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, parameters, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update an existing Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters supplied to the Update Redis operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    name: string,
    parameters: RedisUpdateParameters,
    options?: RedisUpdateOptionalParams
  ): Promise<RedisUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      name,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    name: string,
    options?: RedisDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    name: string,
    options?: RedisDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(resourceGroupName, name, options);
    return poller.pollUntilDone();
  }

  /**
   * Gets a Redis cache (resource description).
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: RedisGetOptionalParams
  ): Promise<RedisGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getOperationSpec
    );
  }

  /**
   * Lists all Redis caches in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: RedisListByResourceGroupOptionalParams
  ): Promise<RedisListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets all Redis caches in the specified subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: RedisListBySubscriptionOptionalParams
  ): Promise<RedisListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Retrieve a Redis cache's access keys. This operation requires write permission to the cache
   * resource.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    name: string,
    options?: RedisListKeysOptionalParams
  ): Promise<RedisListKeysResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listKeysOperationSpec
    );
  }

  /**
   * Regenerate Redis cache's access keys. This operation requires write permission to the cache
   * resource.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Specifies which key to regenerate.
   * @param options The options parameters.
   */
  regenerateKey(
    resourceGroupName: string,
    name: string,
    parameters: RedisRegenerateKeyParameters,
    options?: RedisRegenerateKeyOptionalParams
  ): Promise<RedisRegenerateKeyResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, parameters, options },
      regenerateKeyOperationSpec
    );
  }

  /**
   * Reboot specified Redis node(s). This operation requires write permission to the cache resource.
   * There can be potential data loss.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Specifies which Redis node(s) to reboot.
   * @param options The options parameters.
   */
  forceReboot(
    resourceGroupName: string,
    name: string,
    parameters: RedisRebootParameters,
    options?: RedisForceRebootOptionalParams
  ): Promise<RedisForceRebootOperationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, parameters, options },
      forceRebootOperationSpec
    );
  }

  /**
   * Import data into Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters for Redis import operation.
   * @param options The options parameters.
   */
  async beginImportData(
    resourceGroupName: string,
    name: string,
    parameters: ImportRDBParameters,
    options?: RedisImportDataOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, parameters, options },
      importDataOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Import data into Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters for Redis import operation.
   * @param options The options parameters.
   */
  async beginImportDataAndWait(
    resourceGroupName: string,
    name: string,
    parameters: ImportRDBParameters,
    options?: RedisImportDataOptionalParams
  ): Promise<void> {
    const poller = await this.beginImportData(
      resourceGroupName,
      name,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Export data from the redis cache to blobs in a container.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters for Redis export operation.
   * @param options The options parameters.
   */
  async beginExportData(
    resourceGroupName: string,
    name: string,
    parameters: ExportRDBParameters,
    options?: RedisExportDataOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, parameters, options },
      exportDataOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Export data from the redis cache to blobs in a container.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters for Redis export operation.
   * @param options The options parameters.
   */
  async beginExportDataAndWait(
    resourceGroupName: string,
    name: string,
    parameters: ExportRDBParameters,
    options?: RedisExportDataOptionalParams
  ): Promise<void> {
    const poller = await this.beginExportData(
      resourceGroupName,
      name,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListUpgradeNotificationsNext
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param history how many minutes in past to look for upgrade notifications
   * @param nextLink The nextLink from the previous successful call to the ListUpgradeNotifications
   *                 method.
   * @param options The options parameters.
   */
  private _listUpgradeNotificationsNext(
    resourceGroupName: string,
    name: string,
    history: number,
    nextLink: string,
    options?: RedisListUpgradeNotificationsNextOptionalParams
  ): Promise<RedisListUpgradeNotificationsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, history, nextLink, options },
      listUpgradeNotificationsNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: RedisListByResourceGroupNextOptionalParams
  ): Promise<RedisListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: RedisListBySubscriptionNextOptionalParams
  ): Promise<RedisListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listUpgradeNotificationsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/listUpgradeNotifications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NotificationListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.history],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RedisResource
    },
    201: {
      bodyMapper: Mappers.RedisResource
    },
    202: {
      bodyMapper: Mappers.RedisResource
    },
    204: {
      bodyMapper: Mappers.RedisResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RedisResource
    },
    201: {
      bodyMapper: Mappers.RedisResource
    },
    202: {
      bodyMapper: Mappers.RedisResource
    },
    204: {
      bodyMapper: Mappers.RedisResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Cache/redis",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listKeysOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RedisAccessKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const regenerateKeyOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/regenerateKey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RedisAccessKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const forceRebootOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/forceReboot",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RedisForceRebootResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const importDataOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/import",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const exportDataOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/export",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listUpgradeNotificationsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NotificationListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.history],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
