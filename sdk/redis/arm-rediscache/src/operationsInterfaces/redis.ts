/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  UpgradeNotification,
  RedisListUpgradeNotificationsOptionalParams,
  RedisResource,
  RedisListByResourceGroupOptionalParams,
  RedisListBySubscriptionOptionalParams,
  CheckNameAvailabilityParameters,
  RedisCheckNameAvailabilityOptionalParams,
  RedisCreateParameters,
  RedisCreateOptionalParams,
  RedisCreateResponse,
  RedisUpdateParameters,
  RedisUpdateOptionalParams,
  RedisUpdateResponse,
  RedisDeleteOptionalParams,
  RedisGetOptionalParams,
  RedisGetResponse,
  RedisListKeysOptionalParams,
  RedisListKeysResponse,
  RedisRegenerateKeyParameters,
  RedisRegenerateKeyOptionalParams,
  RedisRegenerateKeyResponse,
  RedisRebootParameters,
  RedisForceRebootOptionalParams,
  RedisForceRebootOperationResponse,
  ImportRDBParameters,
  RedisImportDataOptionalParams,
  ExportRDBParameters,
  RedisExportDataOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Redis. */
export interface Redis {
  /**
   * Gets any upgrade notifications for a Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param history how many minutes in past to look for upgrade notifications
   * @param options The options parameters.
   */
  listUpgradeNotifications(
    resourceGroupName: string,
    name: string,
    history: number,
    options?: RedisListUpgradeNotificationsOptionalParams
  ): PagedAsyncIterableIterator<UpgradeNotification>;
  /**
   * Lists all Redis caches in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: RedisListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<RedisResource>;
  /**
   * Gets all Redis caches in the specified subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: RedisListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<RedisResource>;
  /**
   * Checks that the redis cache name is valid and is not already in use.
   * @param parameters Parameters supplied to the CheckNameAvailability Redis operation. The only
   *                   supported resource type is 'Microsoft.Cache/redis'
   * @param options The options parameters.
   */
  checkNameAvailability(
    parameters: CheckNameAvailabilityParameters,
    options?: RedisCheckNameAvailabilityOptionalParams
  ): Promise<void>;
  /**
   * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters supplied to the Create Redis operation.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    name: string,
    parameters: RedisCreateParameters,
    options?: RedisCreateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<RedisCreateResponse>, RedisCreateResponse>
  >;
  /**
   * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters supplied to the Create Redis operation.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    name: string,
    parameters: RedisCreateParameters,
    options?: RedisCreateOptionalParams
  ): Promise<RedisCreateResponse>;
  /**
   * Update an existing Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters supplied to the Update Redis operation.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    name: string,
    parameters: RedisUpdateParameters,
    options?: RedisUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<RedisUpdateResponse>, RedisUpdateResponse>
  >;
  /**
   * Update an existing Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters supplied to the Update Redis operation.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    name: string,
    parameters: RedisUpdateParameters,
    options?: RedisUpdateOptionalParams
  ): Promise<RedisUpdateResponse>;
  /**
   * Deletes a Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    name: string,
    options?: RedisDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    name: string,
    options?: RedisDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets a Redis cache (resource description).
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: RedisGetOptionalParams
  ): Promise<RedisGetResponse>;
  /**
   * Retrieve a Redis cache's access keys. This operation requires write permission to the cache
   * resource.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    name: string,
    options?: RedisListKeysOptionalParams
  ): Promise<RedisListKeysResponse>;
  /**
   * Regenerate Redis cache's access keys. This operation requires write permission to the cache
   * resource.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Specifies which key to regenerate.
   * @param options The options parameters.
   */
  regenerateKey(
    resourceGroupName: string,
    name: string,
    parameters: RedisRegenerateKeyParameters,
    options?: RedisRegenerateKeyOptionalParams
  ): Promise<RedisRegenerateKeyResponse>;
  /**
   * Reboot specified Redis node(s). This operation requires write permission to the cache resource.
   * There can be potential data loss.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Specifies which Redis node(s) to reboot.
   * @param options The options parameters.
   */
  forceReboot(
    resourceGroupName: string,
    name: string,
    parameters: RedisRebootParameters,
    options?: RedisForceRebootOptionalParams
  ): Promise<RedisForceRebootOperationResponse>;
  /**
   * Import data into Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters for Redis import operation.
   * @param options The options parameters.
   */
  beginImportData(
    resourceGroupName: string,
    name: string,
    parameters: ImportRDBParameters,
    options?: RedisImportDataOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Import data into Redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters for Redis import operation.
   * @param options The options parameters.
   */
  beginImportDataAndWait(
    resourceGroupName: string,
    name: string,
    parameters: ImportRDBParameters,
    options?: RedisImportDataOptionalParams
  ): Promise<void>;
  /**
   * Export data from the redis cache to blobs in a container.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters for Redis export operation.
   * @param options The options parameters.
   */
  beginExportData(
    resourceGroupName: string,
    name: string,
    parameters: ExportRDBParameters,
    options?: RedisExportDataOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Export data from the redis cache to blobs in a container.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters for Redis export operation.
   * @param options The options parameters.
   */
  beginExportDataAndWait(
    resourceGroupName: string,
    name: string,
    parameters: ExportRDBParameters,
    options?: RedisExportDataOptionalParams
  ): Promise<void>;
}
