/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  RedisFirewallRule,
  FirewallRulesListOptionalParams,
  FirewallRulesCreateOrUpdateOptionalParams,
  FirewallRulesCreateOrUpdateResponse,
  FirewallRulesGetOptionalParams,
  FirewallRulesGetResponse,
  FirewallRulesDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a FirewallRules. */
export interface FirewallRules {
  /**
   * Gets all firewall rules in the specified redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param cacheName The name of the Redis cache.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    cacheName: string,
    options?: FirewallRulesListOptionalParams
  ): PagedAsyncIterableIterator<RedisFirewallRule>;
  /**
   * Create or update a redis cache firewall rule
   * @param resourceGroupName The name of the resource group.
   * @param cacheName The name of the Redis cache.
   * @param ruleName The name of the firewall rule.
   * @param parameters Parameters supplied to the create or update redis firewall rule operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    cacheName: string,
    ruleName: string,
    parameters: RedisFirewallRule,
    options?: FirewallRulesCreateOrUpdateOptionalParams
  ): Promise<FirewallRulesCreateOrUpdateResponse>;
  /**
   * Gets a single firewall rule in a specified redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param cacheName The name of the Redis cache.
   * @param ruleName The name of the firewall rule.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    cacheName: string,
    ruleName: string,
    options?: FirewallRulesGetOptionalParams
  ): Promise<FirewallRulesGetResponse>;
  /**
   * Deletes a single firewall rule in a specified redis cache.
   * @param resourceGroupName The name of the resource group.
   * @param cacheName The name of the Redis cache.
   * @param ruleName The name of the firewall rule.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    cacheName: string,
    ruleName: string,
    options?: FirewallRulesDeleteOptionalParams
  ): Promise<void>;
}
