/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotificationListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotificationListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpgradeNotification"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpgradeNotification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpgradeNotification",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      upsellNotification: {
        serializedName: "upsellNotification",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const RedisCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisCreateParameters",
    modelProperties: {
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      redisConfiguration: {
        serializedName: "properties.redisConfiguration",
        type: {
          name: "Composite",
          className: "RedisCommonPropertiesRedisConfiguration"
        }
      },
      redisVersion: {
        serializedName: "properties.redisVersion",
        type: {
          name: "String"
        }
      },
      enableNonSslPort: {
        defaultValue: false,
        serializedName: "properties.enableNonSslPort",
        type: {
          name: "Boolean"
        }
      },
      replicasPerMaster: {
        serializedName: "properties.replicasPerMaster",
        type: {
          name: "Number"
        }
      },
      replicasPerPrimary: {
        serializedName: "properties.replicasPerPrimary",
        type: {
          name: "Number"
        }
      },
      tenantSettings: {
        serializedName: "properties.tenantSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      shardCount: {
        serializedName: "properties.shardCount",
        type: {
          name: "Number"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      subnetId: {
        constraints: {
          Pattern: new RegExp(
            "^\\/subscriptions\\/[^/]*\\/resourceGroups\\/[^/]*\\/providers\\/Microsoft.(ClassicNetwork|Network)\\/virtualNetworks\\/[^/]*\\/subnets\\/[^/]*$"
          )
        },
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      staticIP: {
        constraints: {
          Pattern: new RegExp("^\\d+\\.\\d+\\.\\d+\\.\\d+$")
        },
        serializedName: "properties.staticIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        required: true,
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RedisCommonProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisCommonProperties",
    modelProperties: {
      redisConfiguration: {
        serializedName: "redisConfiguration",
        type: {
          name: "Composite",
          className: "RedisCommonPropertiesRedisConfiguration"
        }
      },
      redisVersion: {
        serializedName: "redisVersion",
        type: {
          name: "String"
        }
      },
      enableNonSslPort: {
        defaultValue: false,
        serializedName: "enableNonSslPort",
        type: {
          name: "Boolean"
        }
      },
      replicasPerMaster: {
        serializedName: "replicasPerMaster",
        type: {
          name: "Number"
        }
      },
      replicasPerPrimary: {
        serializedName: "replicasPerPrimary",
        type: {
          name: "Number"
        }
      },
      tenantSettings: {
        serializedName: "tenantSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      shardCount: {
        serializedName: "shardCount",
        type: {
          name: "Number"
        }
      },
      minimumTlsVersion: {
        serializedName: "minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "publicNetworkAccess",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisCommonPropertiesRedisConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisCommonPropertiesRedisConfiguration",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      rdbBackupEnabled: {
        serializedName: "rdb-backup-enabled",
        type: {
          name: "String"
        }
      },
      rdbBackupFrequency: {
        serializedName: "rdb-backup-frequency",
        type: {
          name: "String"
        }
      },
      rdbBackupMaxSnapshotCount: {
        serializedName: "rdb-backup-max-snapshot-count",
        type: {
          name: "String"
        }
      },
      rdbStorageConnectionString: {
        serializedName: "rdb-storage-connection-string",
        type: {
          name: "String"
        }
      },
      aofBackupEnabled: {
        serializedName: "aof-backup-enabled",
        type: {
          name: "String"
        }
      },
      aofStorageConnectionString0: {
        serializedName: "aof-storage-connection-string-0",
        type: {
          name: "String"
        }
      },
      aofStorageConnectionString1: {
        serializedName: "aof-storage-connection-string-1",
        type: {
          name: "String"
        }
      },
      maxfragmentationmemoryReserved: {
        serializedName: "maxfragmentationmemory-reserved",
        type: {
          name: "String"
        }
      },
      maxmemoryPolicy: {
        serializedName: "maxmemory-policy",
        type: {
          name: "String"
        }
      },
      maxmemoryReserved: {
        serializedName: "maxmemory-reserved",
        type: {
          name: "String"
        }
      },
      maxmemoryDelta: {
        serializedName: "maxmemory-delta",
        type: {
          name: "String"
        }
      },
      maxclients: {
        serializedName: "maxclients",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      preferredDataArchiveAuthMethod: {
        serializedName: "preferred-data-archive-auth-method",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      preferredDataPersistenceAuthMethod: {
        serializedName: "preferred-data-persistence-auth-method",
        type: {
          name: "String"
        }
      },
      zonalConfiguration: {
        serializedName: "zonal-configuration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      authnotrequired: {
        serializedName: "authnotrequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const RedisAccessKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisAccessKeys",
    modelProperties: {
      primaryKey: {
        serializedName: "primaryKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisLinkedServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisLinkedServer",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisInstanceDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisInstanceDetails",
    modelProperties: {
      sslPort: {
        serializedName: "sslPort",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nonSslPort: {
        serializedName: "nonSslPort",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      zone: {
        serializedName: "zone",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      shardId: {
        serializedName: "shardId",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isMaster: {
        serializedName: "isMaster",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isPrimary: {
        serializedName: "isPrimary",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      redisConfiguration: {
        serializedName: "properties.redisConfiguration",
        type: {
          name: "Composite",
          className: "RedisCommonPropertiesRedisConfiguration"
        }
      },
      redisVersion: {
        serializedName: "properties.redisVersion",
        type: {
          name: "String"
        }
      },
      enableNonSslPort: {
        defaultValue: false,
        serializedName: "properties.enableNonSslPort",
        type: {
          name: "Boolean"
        }
      },
      replicasPerMaster: {
        serializedName: "properties.replicasPerMaster",
        type: {
          name: "Number"
        }
      },
      replicasPerPrimary: {
        serializedName: "properties.replicasPerPrimary",
        type: {
          name: "Number"
        }
      },
      tenantSettings: {
        serializedName: "properties.tenantSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      shardCount: {
        serializedName: "properties.shardCount",
        type: {
          name: "Number"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const RedisListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RedisResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisRegenerateKeyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisRegenerateKeyParameters",
    modelProperties: {
      keyType: {
        serializedName: "keyType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Primary", "Secondary"]
        }
      }
    }
  }
};

export const RedisRebootParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisRebootParameters",
    modelProperties: {
      rebootType: {
        serializedName: "rebootType",
        type: {
          name: "String"
        }
      },
      shardId: {
        serializedName: "shardId",
        type: {
          name: "Number"
        }
      },
      ports: {
        serializedName: "ports",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const RedisForceRebootResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisForceRebootResponse",
    modelProperties: {
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportRDBParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportRDBParameters",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "String"
        }
      },
      files: {
        serializedName: "files",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      preferredDataArchiveAuthMethod: {
        serializedName: "preferred-data-archive-auth-method",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportRDBParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportRDBParameters",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "prefix",
        required: true,
        type: {
          name: "String"
        }
      },
      container: {
        serializedName: "container",
        required: true,
        type: {
          name: "String"
        }
      },
      preferredDataArchiveAuthMethod: {
        serializedName: "preferred-data-archive-auth-method",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisFirewallRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisFirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RedisFirewallRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisPatchScheduleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisPatchScheduleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RedisPatchSchedule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduleEntry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleEntry",
    modelProperties: {
      dayOfWeek: {
        serializedName: "dayOfWeek",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "Everyday",
            "Weekend"
          ]
        }
      },
      startHourUtc: {
        serializedName: "startHourUtc",
        required: true,
        type: {
          name: "Number"
        }
      },
      maintenanceWindow: {
        serializedName: "maintenanceWindow",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const RedisLinkedServerCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisLinkedServerCreateParameters",
    modelProperties: {
      linkedRedisCacheId: {
        serializedName: "properties.linkedRedisCacheId",
        required: true,
        type: {
          name: "String"
        }
      },
      linkedRedisCacheLocation: {
        serializedName: "properties.linkedRedisCacheLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      serverRole: {
        serializedName: "properties.serverRole",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Primary", "Secondary"]
        }
      },
      geoReplicatedPrimaryHostName: {
        serializedName: "properties.geoReplicatedPrimaryHostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      primaryHostName: {
        serializedName: "properties.primaryHostName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisLinkedServerCreateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisLinkedServerCreateProperties",
    modelProperties: {
      linkedRedisCacheId: {
        serializedName: "linkedRedisCacheId",
        required: true,
        type: {
          name: "String"
        }
      },
      linkedRedisCacheLocation: {
        serializedName: "linkedRedisCacheLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      serverRole: {
        serializedName: "serverRole",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Primary", "Secondary"]
        }
      },
      geoReplicatedPrimaryHostName: {
        serializedName: "geoReplicatedPrimaryHostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      primaryHostName: {
        serializedName: "primaryHostName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisLinkedServerWithPropertiesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisLinkedServerWithPropertiesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RedisLinkedServerWithProperties"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const OperationStatusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusResult",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "percentComplete",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      operations: {
        serializedName: "operations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationStatusResult"
            }
          }
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetailAutoGenerated"
        }
      }
    }
  }
};

export const ErrorDetailAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetailAutoGenerated",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetailAutoGenerated"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const RedisCreateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisCreateProperties",
    modelProperties: {
      ...RedisCommonProperties.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      subnetId: {
        constraints: {
          Pattern: new RegExp(
            "^\\/subscriptions\\/[^/]*\\/resourceGroups\\/[^/]*\\/providers\\/Microsoft.(ClassicNetwork|Network)\\/virtualNetworks\\/[^/]*\\/subnets\\/[^/]*$"
          )
        },
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      staticIP: {
        constraints: {
          Pattern: new RegExp("^\\d+\\.\\d+\\.\\d+\\.\\d+$")
        },
        serializedName: "staticIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisUpdateProperties",
    modelProperties: {
      ...RedisCommonProperties.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RedisLinkedServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisLinkedServerProperties",
    modelProperties: {
      ...RedisLinkedServerCreateProperties.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      ...OperationStatusResult.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const RedisProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisProperties",
    modelProperties: {
      ...RedisCreateProperties.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sslPort: {
        serializedName: "sslPort",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      accessKeys: {
        serializedName: "accessKeys",
        type: {
          name: "Composite",
          className: "RedisAccessKeys"
        }
      },
      linkedServers: {
        serializedName: "linkedServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RedisLinkedServer"
            }
          }
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RedisInstanceDetails"
            }
          }
        }
      },
      privateEndpointConnections: {
        serializedName: "privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const RedisResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      redisConfiguration: {
        serializedName: "properties.redisConfiguration",
        type: {
          name: "Composite",
          className: "RedisCommonPropertiesRedisConfiguration"
        }
      },
      redisVersion: {
        serializedName: "properties.redisVersion",
        type: {
          name: "String"
        }
      },
      enableNonSslPort: {
        defaultValue: false,
        serializedName: "properties.enableNonSslPort",
        type: {
          name: "Boolean"
        }
      },
      replicasPerMaster: {
        serializedName: "properties.replicasPerMaster",
        type: {
          name: "Number"
        }
      },
      replicasPerPrimary: {
        serializedName: "properties.replicasPerPrimary",
        type: {
          name: "Number"
        }
      },
      tenantSettings: {
        serializedName: "properties.tenantSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      shardCount: {
        serializedName: "properties.shardCount",
        type: {
          name: "Number"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      subnetId: {
        constraints: {
          Pattern: new RegExp(
            "^\\/subscriptions\\/[^/]*\\/resourceGroups\\/[^/]*\\/providers\\/Microsoft.(ClassicNetwork|Network)\\/virtualNetworks\\/[^/]*\\/subnets\\/[^/]*$"
          )
        },
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      staticIP: {
        constraints: {
          Pattern: new RegExp("^\\d+\\.\\d+\\.\\d+\\.\\d+$")
        },
        serializedName: "properties.staticIP",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sslPort: {
        serializedName: "properties.sslPort",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      accessKeys: {
        serializedName: "properties.accessKeys",
        type: {
          name: "Composite",
          className: "RedisAccessKeys"
        }
      },
      linkedServers: {
        serializedName: "properties.linkedServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RedisLinkedServer"
            }
          }
        }
      },
      instances: {
        serializedName: "properties.instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RedisInstanceDetails"
            }
          }
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const RedisFirewallRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisFirewallRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      startIP: {
        serializedName: "properties.startIP",
        required: true,
        type: {
          name: "String"
        }
      },
      endIP: {
        serializedName: "properties.endIP",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisPatchSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisPatchSchedule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scheduleEntries: {
        serializedName: "properties.scheduleEntries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScheduleEntry"
            }
          }
        }
      }
    }
  }
};

export const RedisLinkedServerWithProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisLinkedServerWithProperties",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      linkedRedisCacheId: {
        serializedName: "properties.linkedRedisCacheId",
        type: {
          name: "String"
        }
      },
      linkedRedisCacheLocation: {
        serializedName: "properties.linkedRedisCacheLocation",
        type: {
          name: "String"
        }
      },
      serverRole: {
        serializedName: "properties.serverRole",
        type: {
          name: "Enum",
          allowedValues: ["Primary", "Secondary"]
        }
      },
      geoReplicatedPrimaryHostName: {
        serializedName: "properties.geoReplicatedPrimaryHostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      primaryHostName: {
        serializedName: "properties.primaryHostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisFirewallRuleCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisFirewallRuleCreateParameters",
    modelProperties: {
      ...RedisFirewallRule.type.modelProperties
    }
  }
};
