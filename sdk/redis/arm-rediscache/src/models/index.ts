/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results. */
export interface OperationListResult {
  /** List of operations supported by the resource provider. */
  value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** REST API operation */
export interface Operation {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** The object that describes the operation. */
  display?: OperationDisplay;
}

/** The object that describes the operation. */
export interface OperationDisplay {
  /** Friendly name of the resource provider */
  provider?: string;
  /** Operation type: read, write, delete, listKeys/action, etc. */
  operation?: string;
  /** Resource type on which the operation is performed. */
  resource?: string;
  /** Friendly name of the operation */
  description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Parameters body to pass for resource name availability check. */
export interface CheckNameAvailabilityParameters {
  /** Resource name. */
  name: string;
  /** Resource type. The only legal value of this property for checking redis cache name availability is 'Microsoft.Cache/redis'. */
  type: string;
}

/** The response of listUpgradeNotifications. */
export interface NotificationListResponse {
  /** List of all notifications. */
  value?: UpgradeNotification[];
  /**
   * Link for next set of notifications.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of upgrade notification. */
export interface UpgradeNotification {
  /**
   * Name of upgrade notification.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Timestamp when upgrade notification occurred.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timestamp?: Date;
  /**
   * Details about this upgrade notification
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly upsellNotification?: { [propertyName: string]: string };
}

/** Parameters supplied to the Create Redis operation. */
export interface RedisCreateParameters {
  /** A list of availability zones denoting where the resource needs to come from. */
  zones?: string[];
  /** The geo-location where the resource lives */
  location: string;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The identity of the resource. */
  identity?: ManagedServiceIdentity;
  /** All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc. */
  redisConfiguration?: RedisCommonPropertiesRedisConfiguration;
  /** Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'. */
  redisVersion?: string;
  /** Specifies whether the non-ssl Redis server port (6379) is enabled. */
  enableNonSslPort?: boolean;
  /** The number of replicas to be created per primary. */
  replicasPerMaster?: number;
  /** The number of replicas to be created per primary. */
  replicasPerPrimary?: number;
  /** A dictionary of tenant settings */
  tenantSettings?: { [propertyName: string]: string };
  /** The number of shards to be created on a Premium Cluster Cache. */
  shardCount?: number;
  /** Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2') */
  minimumTlsVersion?: TlsVersion;
  /** Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
  publicNetworkAccess?: PublicNetworkAccess;
  /** The SKU of the Redis cache to deploy. */
  sku: Sku;
  /** The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1 */
  subnetId?: string;
  /** Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default. */
  staticIP?: string;
}

/** SKU parameters supplied to the create Redis operation. */
export interface Sku {
  /** The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium) */
  name: SkuName;
  /** The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium). */
  family: SkuFamily;
  /** The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4). */
  capacity: number;
}

/** Create/Update/Get common properties of the redis cache. */
export interface RedisCommonProperties {
  /** All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc. */
  redisConfiguration?: RedisCommonPropertiesRedisConfiguration;
  /** Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'. */
  redisVersion?: string;
  /** Specifies whether the non-ssl Redis server port (6379) is enabled. */
  enableNonSslPort?: boolean;
  /** The number of replicas to be created per primary. */
  replicasPerMaster?: number;
  /** The number of replicas to be created per primary. */
  replicasPerPrimary?: number;
  /** A dictionary of tenant settings */
  tenantSettings?: { [propertyName: string]: string };
  /** The number of shards to be created on a Premium Cluster Cache. */
  shardCount?: number;
  /** Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2') */
  minimumTlsVersion?: TlsVersion;
  /** Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
  publicNetworkAccess?: PublicNetworkAccess;
}

/** All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc. */
export interface RedisCommonPropertiesRedisConfiguration {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Specifies whether the rdb backup is enabled */
  rdbBackupEnabled?: string;
  /** Specifies the frequency for creating rdb backup in minutes. Valid values: (15, 30, 60, 360, 720, 1440) */
  rdbBackupFrequency?: string;
  /** Specifies the maximum number of snapshots for rdb backup */
  rdbBackupMaxSnapshotCount?: string;
  /** The storage account connection string for storing rdb file */
  rdbStorageConnectionString?: string;
  /** Specifies whether the aof backup is enabled */
  aofBackupEnabled?: string;
  /** First storage account connection string */
  aofStorageConnectionString0?: string;
  /** Second storage account connection string */
  aofStorageConnectionString1?: string;
  /** Value in megabytes reserved for fragmentation per shard */
  maxfragmentationmemoryReserved?: string;
  /** The eviction strategy used when your data won't fit within its memory limit. */
  maxmemoryPolicy?: string;
  /** Value in megabytes reserved for non-cache usage per shard e.g. failover. */
  maxmemoryReserved?: string;
  /** Value in megabytes reserved for non-cache usage per shard e.g. failover. */
  maxmemoryDelta?: string;
  /**
   * The max clients config
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxclients?: string;
  /**
   * Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly preferredDataArchiveAuthMethod?: string;
  /** Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity, default value is SAS */
  preferredDataPersistenceAuthMethod?: string;
  /**
   * Zonal Configuration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zonalConfiguration?: string;
  /** Specifies whether the authentication is disabled. Setting this property is highly discouraged from security point of view. */
  authnotrequired?: string;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Redis cache access keys. */
export interface RedisAccessKeys {
  /**
   * The current primary key that clients can use to authenticate with Redis cache.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryKey?: string;
  /**
   * The current secondary key that clients can use to authenticate with Redis cache.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryKey?: string;
}

/** Linked server Id */
export interface RedisLinkedServer {
  /**
   * Linked server Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Details of single instance of redis. */
export interface RedisInstanceDetails {
  /**
   * Redis instance SSL port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sslPort?: number;
  /**
   * If enableNonSslPort is true, provides Redis instance Non-SSL port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nonSslPort?: number;
  /**
   * If the Cache uses availability zones, specifies availability zone where this instance is located.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zone?: string;
  /**
   * If clustering is enabled, the Shard ID of Redis Instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly shardId?: number;
  /**
   * Specifies whether the instance is a primary node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isMaster?: boolean;
  /**
   * Specifies whether the instance is a primary node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isPrimary?: boolean;
}

/** The Private Endpoint resource. */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for Private Endpoint
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval/rejection of the connection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Parameters supplied to the Update Redis operation. */
export interface RedisUpdateParameters {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The identity of the resource. */
  identity?: ManagedServiceIdentity;
  /** All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc. */
  redisConfiguration?: RedisCommonPropertiesRedisConfiguration;
  /** Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'. */
  redisVersion?: string;
  /** Specifies whether the non-ssl Redis server port (6379) is enabled. */
  enableNonSslPort?: boolean;
  /** The number of replicas to be created per primary. */
  replicasPerMaster?: number;
  /** The number of replicas to be created per primary. */
  replicasPerPrimary?: number;
  /** A dictionary of tenant settings */
  tenantSettings?: { [propertyName: string]: string };
  /** The number of shards to be created on a Premium Cluster Cache. */
  shardCount?: number;
  /** Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2') */
  minimumTlsVersion?: TlsVersion;
  /** Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
  publicNetworkAccess?: PublicNetworkAccess;
  /** The SKU of the Redis cache to deploy. */
  sku?: Sku;
}

/** The response of list Redis operation. */
export interface RedisListResult {
  /** List of Redis cache instances. */
  value?: RedisResource[];
  /**
   * Link for next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Specifies which Redis access keys to reset. */
export interface RedisRegenerateKeyParameters {
  /** The Redis access key to regenerate. */
  keyType: RedisKeyType;
}

/** Specifies which Redis node(s) to reboot. */
export interface RedisRebootParameters {
  /** Which Redis node(s) to reboot. Depending on this value data loss is possible. */
  rebootType?: RebootType;
  /** If clustering is enabled, the ID of the shard to be rebooted. */
  shardId?: number;
  /** A list of redis instances to reboot, specified by per-instance SSL ports or non-SSL ports. */
  ports?: number[];
}

/** Response to force reboot for Redis cache. */
export interface RedisForceRebootResponse {
  /**
   * Status message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** Parameters for Redis import operation. */
export interface ImportRDBParameters {
  /** File format. */
  format?: string;
  /** files to import. */
  files: string[];
  /** Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS */
  preferredDataArchiveAuthMethod?: string;
}

/** Parameters for Redis export operation. */
export interface ExportRDBParameters {
  /** File format. */
  format?: string;
  /** Prefix to use for exported files. */
  prefix: string;
  /** Container name to export to. */
  container: string;
  /** Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS */
  preferredDataArchiveAuthMethod?: string;
}

/** The response of list firewall rules Redis operation. */
export interface RedisFirewallRuleListResult {
  /** Results of the list firewall rules operation. */
  value?: RedisFirewallRule[];
  /**
   * Link for next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The response of list patch schedules Redis operation. */
export interface RedisPatchScheduleListResult {
  /** Results of the list patch schedules operation. */
  value?: RedisPatchSchedule[];
  /**
   * Link for next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Patch schedule entry for a Premium Redis Cache. */
export interface ScheduleEntry {
  /** Day of the week when a cache can be patched. */
  dayOfWeek: DayOfWeek;
  /** Start hour after which cache patching can start. */
  startHourUtc: number;
  /** ISO8601 timespan specifying how much time cache patching can take. */
  maintenanceWindow?: string;
}

/** Parameter required for creating a linked server to redis cache. */
export interface RedisLinkedServerCreateParameters {
  /** Fully qualified resourceId of the linked redis cache. */
  linkedRedisCacheId: string;
  /** Location of the linked redis cache. */
  linkedRedisCacheLocation: string;
  /** Role of the linked server. */
  serverRole: ReplicationRole;
  /**
   * The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for seamless Geo Failover experience.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geoReplicatedPrimaryHostName?: string;
  /**
   * The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or after the Geo Failover.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryHostName?: string;
}

/** Create properties for a linked server */
export interface RedisLinkedServerCreateProperties {
  /** Fully qualified resourceId of the linked redis cache. */
  linkedRedisCacheId: string;
  /** Location of the linked redis cache. */
  linkedRedisCacheLocation: string;
  /** Role of the linked server. */
  serverRole: ReplicationRole;
  /**
   * The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for seamless Geo Failover experience.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geoReplicatedPrimaryHostName?: string;
  /**
   * The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or after the Geo Failover.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryHostName?: string;
}

/** List of linked servers (with properties) of a Redis cache. */
export interface RedisLinkedServerWithPropertiesList {
  /** List of linked servers (with properties) of a Redis cache. */
  value?: RedisLinkedServerWithProperties[];
  /**
   * Link for next set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** List of private endpoint connection associated with the specified storage account */
export interface PrivateEndpointConnectionListResult {
  /** Array of private endpoint connections */
  value?: PrivateEndpointConnection[];
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: PrivateLinkResource[];
}

/** The current status of an async operation. */
export interface OperationStatusResult {
  /** Fully qualified ID for the async operation. */
  id?: string;
  /** Name of the async operation. */
  name?: string;
  /** Operation status. */
  status: string;
  /** Percent of the operation that is complete. */
  percentComplete?: number;
  /** The start time of the operation. */
  startTime?: Date;
  /** The end time of the operation. */
  endTime?: Date;
  /** The operations list. */
  operations?: OperationStatusResult[];
  /** If present, details of the operation error. */
  error?: ErrorDetailAutoGenerated;
}

/** The error detail. */
export interface ErrorDetailAutoGenerated {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetailAutoGenerated[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Properties supplied to Create Redis operation. */
export interface RedisCreateProperties extends RedisCommonProperties {
  /** The SKU of the Redis cache to deploy. */
  sku: Sku;
  /** The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1 */
  subnetId?: string;
  /** Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default. */
  staticIP?: string;
}

/** Patchable properties of the redis cache. */
export interface RedisUpdateProperties extends RedisCommonProperties {
  /** The SKU of the Redis cache to deploy. */
  sku?: Sku;
}

/** The Private Endpoint Connection resource. */
export interface PrivateEndpointConnection extends Resource {
  /** The resource of private end point. */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** A private link resource */
export interface PrivateLinkResource extends Resource {
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** The private link resource Private link DNS zone name. */
  requiredZoneNames?: string[];
}

/** Properties of a linked server to be returned in get/put response */
export interface RedisLinkedServerProperties
  extends RedisLinkedServerCreateProperties {
  /**
   * Terminal state of the link between primary and secondary redis cache.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Asynchronous operation status */
export interface OperationStatus extends OperationStatusResult {
  /** Additional properties from RP, only when operation is successful */
  properties?: { [propertyName: string]: any };
}

/** Properties of the redis cache. */
export interface RedisProperties extends RedisCreateProperties {
  /**
   * Redis instance provisioning status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Redis host name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostName?: string;
  /**
   * Redis non-SSL port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly port?: number;
  /**
   * Redis SSL port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sslPort?: number;
  /**
   * The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessKeys?: RedisAccessKeys;
  /**
   * List of the linked servers associated with the cache
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkedServers?: RedisLinkedServer[];
  /**
   * List of the Redis instances associated with the cache
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: RedisInstanceDetails[];
  /**
   * List of private endpoint connection associated with the specified redis cache
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** A single Redis item in List or Get Operation. */
export interface RedisResource extends TrackedResource {
  /** A list of availability zones denoting where the resource needs to come from. */
  zones?: string[];
  /** The identity of the resource. */
  identity?: ManagedServiceIdentity;
  /** All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc. */
  redisConfiguration?: RedisCommonPropertiesRedisConfiguration;
  /** Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'. */
  redisVersion?: string;
  /** Specifies whether the non-ssl Redis server port (6379) is enabled. */
  enableNonSslPort?: boolean;
  /** The number of replicas to be created per primary. */
  replicasPerMaster?: number;
  /** The number of replicas to be created per primary. */
  replicasPerPrimary?: number;
  /** A dictionary of tenant settings */
  tenantSettings?: { [propertyName: string]: string };
  /** The number of shards to be created on a Premium Cluster Cache. */
  shardCount?: number;
  /** Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2') */
  minimumTlsVersion?: TlsVersion;
  /** Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
  publicNetworkAccess?: PublicNetworkAccess;
  /** The SKU of the Redis cache to deploy. */
  sku: Sku;
  /** The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1 */
  subnetId?: string;
  /** Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default. */
  staticIP?: string;
  /**
   * Redis instance provisioning status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Redis host name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostName?: string;
  /**
   * Redis non-SSL port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly port?: number;
  /**
   * Redis SSL port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sslPort?: number;
  /**
   * The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessKeys?: RedisAccessKeys;
  /**
   * List of the linked servers associated with the cache
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkedServers?: RedisLinkedServer[];
  /**
   * List of the Redis instances associated with the cache
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: RedisInstanceDetails[];
  /**
   * List of private endpoint connection associated with the specified redis cache
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses permitted to connect */
export interface RedisFirewallRule extends ProxyResource {
  /** lowest IP address included in the range */
  startIP: string;
  /** highest IP address included in the range */
  endIP: string;
}

/** Response to put/get patch schedules for Redis cache. */
export interface RedisPatchSchedule extends ProxyResource {
  /**
   * The geo-location where the resource lives
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /** List of patch schedules for a Redis cache. */
  scheduleEntries: ScheduleEntry[];
}

/** Response to put/get linked server (with properties) for Redis cache. */
export interface RedisLinkedServerWithProperties extends ProxyResource {
  /** Fully qualified resourceId of the linked redis cache. */
  linkedRedisCacheId?: string;
  /** Location of the linked redis cache. */
  linkedRedisCacheLocation?: string;
  /** Role of the linked server. */
  serverRole?: ReplicationRole;
  /**
   * The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for seamless Geo Failover experience.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geoReplicatedPrimaryHostName?: string;
  /**
   * The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or after the Geo Failover.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryHostName?: string;
  /**
   * Terminal state of the link between primary and secondary redis cache.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Parameters required for creating a firewall rule on redis cache. (Note, you can just use the FirewallRule type instead now.) */
export interface RedisFirewallRuleCreateParameters extends RedisFirewallRule {}

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  /** Basic */
  Basic = "Basic",
  /** Standard */
  Standard = "Standard",
  /** Premium */
  Premium = "Premium"
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard** \
 * **Premium**
 */
export type SkuName = string;

/** Known values of {@link SkuFamily} that the service accepts. */
export enum KnownSkuFamily {
  /** C */
  C = "C",
  /** P */
  P = "P"
}

/**
 * Defines values for SkuFamily. \
 * {@link KnownSkuFamily} can be used interchangeably with SkuFamily,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **C** \
 * **P**
 */
export type SkuFamily = string;

/** Known values of {@link TlsVersion} that the service accepts. */
export enum KnownTlsVersion {
  /** One0 */
  One0 = "1.0",
  /** One1 */
  One1 = "1.1",
  /** One2 */
  One2 = "1.2"
}

/**
 * Defines values for TlsVersion. \
 * {@link KnownTlsVersion} can be used interchangeably with TlsVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **1.0** \
 * **1.1** \
 * **1.2**
 */
export type TlsVersion = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PublicNetworkAccess = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned, UserAssigned"
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Deleting */
  Deleting = "Deleting",
  /** Disabled */
  Disabled = "Disabled",
  /** Failed */
  Failed = "Failed",
  /** Linking */
  Linking = "Linking",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** RecoveringScaleFailure */
  RecoveringScaleFailure = "RecoveringScaleFailure",
  /** Scaling */
  Scaling = "Scaling",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Unlinking */
  Unlinking = "Unlinking",
  /** Unprovisioning */
  Unprovisioning = "Unprovisioning",
  /** Updating */
  Updating = "Updating"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Deleting** \
 * **Disabled** \
 * **Failed** \
 * **Linking** \
 * **Provisioning** \
 * **RecoveringScaleFailure** \
 * **Scaling** \
 * **Succeeded** \
 * **Unlinking** \
 * **Unprovisioning** \
 * **Updating**
 */
export type ProvisioningState = string;

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointServiceConnectionStatus {
  /** Pending */
  Pending = "Pending",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected"
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownPrivateEndpointConnectionProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Creating */
  Creating = "Creating",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export type PrivateEndpointConnectionProvisioningState = string;

/** Known values of {@link RebootType} that the service accepts. */
export enum KnownRebootType {
  /** PrimaryNode */
  PrimaryNode = "PrimaryNode",
  /** SecondaryNode */
  SecondaryNode = "SecondaryNode",
  /** AllNodes */
  AllNodes = "AllNodes"
}

/**
 * Defines values for RebootType. \
 * {@link KnownRebootType} can be used interchangeably with RebootType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PrimaryNode** \
 * **SecondaryNode** \
 * **AllNodes**
 */
export type RebootType = string;

/** Known values of {@link DefaultName} that the service accepts. */
export enum KnownDefaultName {
  /** Default */
  Default = "default"
}

/**
 * Defines values for DefaultName. \
 * {@link KnownDefaultName} can be used interchangeably with DefaultName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export type DefaultName = string;
/** Defines values for RedisKeyType. */
export type RedisKeyType = "Primary" | "Secondary";
/** Defines values for DayOfWeek. */
export type DayOfWeek =
  | "Monday"
  | "Tuesday"
  | "Wednesday"
  | "Thursday"
  | "Friday"
  | "Saturday"
  | "Sunday"
  | "Everyday"
  | "Weekend";
/** Defines values for ReplicationRole. */
export type ReplicationRole = "Primary" | "Secondary";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface RedisCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RedisListUpgradeNotificationsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listUpgradeNotifications operation. */
export type RedisListUpgradeNotificationsResponse = NotificationListResponse;

/** Optional parameters. */
export interface RedisCreateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type RedisCreateResponse = RedisResource;

/** Optional parameters. */
export interface RedisUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type RedisUpdateResponse = RedisResource;

/** Optional parameters. */
export interface RedisDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RedisGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RedisGetResponse = RedisResource;

/** Optional parameters. */
export interface RedisListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type RedisListByResourceGroupResponse = RedisListResult;

/** Optional parameters. */
export interface RedisListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type RedisListBySubscriptionResponse = RedisListResult;

/** Optional parameters. */
export interface RedisListKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listKeys operation. */
export type RedisListKeysResponse = RedisAccessKeys;

/** Optional parameters. */
export interface RedisRegenerateKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateKey operation. */
export type RedisRegenerateKeyResponse = RedisAccessKeys;

/** Optional parameters. */
export interface RedisForceRebootOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the forceReboot operation. */
export type RedisForceRebootOperationResponse = RedisForceRebootResponse;

/** Optional parameters. */
export interface RedisImportDataOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RedisExportDataOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RedisListUpgradeNotificationsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listUpgradeNotificationsNext operation. */
export type RedisListUpgradeNotificationsNextResponse = NotificationListResponse;

/** Optional parameters. */
export interface RedisListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type RedisListByResourceGroupNextResponse = RedisListResult;

/** Optional parameters. */
export interface RedisListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type RedisListBySubscriptionNextResponse = RedisListResult;

/** Optional parameters. */
export interface FirewallRulesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type FirewallRulesListResponse = RedisFirewallRuleListResult;

/** Optional parameters. */
export interface FirewallRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type FirewallRulesCreateOrUpdateResponse = RedisFirewallRule;

/** Optional parameters. */
export interface FirewallRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FirewallRulesGetResponse = RedisFirewallRule;

/** Optional parameters. */
export interface FirewallRulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FirewallRulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type FirewallRulesListNextResponse = RedisFirewallRuleListResult;

/** Optional parameters. */
export interface PatchSchedulesListByRedisResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByRedisResource operation. */
export type PatchSchedulesListByRedisResourceResponse = RedisPatchScheduleListResult;

/** Optional parameters. */
export interface PatchSchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PatchSchedulesCreateOrUpdateResponse = RedisPatchSchedule;

/** Optional parameters. */
export interface PatchSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PatchSchedulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PatchSchedulesGetResponse = RedisPatchSchedule;

/** Optional parameters. */
export interface PatchSchedulesListByRedisResourceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByRedisResourceNext operation. */
export type PatchSchedulesListByRedisResourceNextResponse = RedisPatchScheduleListResult;

/** Optional parameters. */
export interface LinkedServerCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type LinkedServerCreateResponse = RedisLinkedServerWithProperties;

/** Optional parameters. */
export interface LinkedServerDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LinkedServerGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LinkedServerGetResponse = RedisLinkedServerWithProperties;

/** Optional parameters. */
export interface LinkedServerListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LinkedServerListResponse = RedisLinkedServerWithPropertiesList;

/** Optional parameters. */
export interface LinkedServerListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LinkedServerListNextResponse = RedisLinkedServerWithPropertiesList;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsPutOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put operation. */
export type PrivateEndpointConnectionsPutResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PrivateLinkResourcesListByRedisCacheOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByRedisCache operation. */
export type PrivateLinkResourcesListByRedisCacheResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface AsyncOperationStatusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AsyncOperationStatusGetResponse = OperationStatus;

/** Optional parameters. */
export interface RedisManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
