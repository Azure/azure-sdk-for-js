/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ConnectedClusterIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedClusterIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "SystemAssigned",
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["None", "SystemAssigned"]
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ConnectedClusterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedClusterPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ListClusterUserCredentialProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListClusterUserCredentialProperties",
    modelProperties: {
      authenticationMethod: {
        serializedName: "authenticationMethod",
        required: true,
        type: {
          name: "String"
        }
      },
      clientProxy: {
        serializedName: "clientProxy",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CredentialResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CredentialResults",
    modelProperties: {
      hybridConnectionConfig: {
        serializedName: "hybridConnectionConfig",
        type: {
          name: "Composite",
          className: "HybridConnectionConfig"
        }
      },
      kubeconfigs: {
        serializedName: "kubeconfigs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CredentialResult"
            }
          }
        }
      }
    }
  }
};

export const HybridConnectionConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridConnectionConfig",
    modelProperties: {
      expirationTime: {
        serializedName: "expirationTime",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      hybridConnectionName: {
        serializedName: "hybridConnectionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      relay: {
        serializedName: "relay",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      token: {
        serializedName: "token",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CredentialResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CredentialResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const ConnectedClusterList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedClusterList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedCluster"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectedCluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedCluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ConnectedClusterIdentity"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      agentPublicKeyCertificate: {
        serializedName: "properties.agentPublicKeyCertificate",
        required: true,
        type: {
          name: "String"
        }
      },
      kubernetesVersion: {
        serializedName: "properties.kubernetesVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalNodeCount: {
        serializedName: "properties.totalNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalCoreCount: {
        serializedName: "properties.totalCoreCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      agentVersion: {
        serializedName: "properties.agentVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      distribution: {
        serializedName: "properties.distribution",
        type: {
          name: "String"
        }
      },
      infrastructure: {
        serializedName: "properties.infrastructure",
        type: {
          name: "String"
        }
      },
      offering: {
        serializedName: "properties.offering",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedIdentityCertificateExpirationTime: {
        serializedName: "properties.managedIdentityCertificateExpirationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastConnectivityTime: {
        serializedName: "properties.lastConnectivityTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      connectivityStatus: {
        serializedName: "properties.connectivityStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
