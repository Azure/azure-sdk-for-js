/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/monitorMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftLogzContext } from "../microsoftLogzContext";

/** Class representing a Monitor. */
export class Monitor {
  private readonly client: MicrosoftLogzContext;

  /**
   * Create a Monitor.
   * @param {MicrosoftLogzContext} client Reference to the service client.
   */
  constructor(client: MicrosoftLogzContext) {
    this.client = client;
  }

  /**
   * @summary Returns the payload that needs to be passed in the request body for installing Logz.io
   * agent on a VM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorVMHostPayloadResponse>
   */
  vMHostPayload(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitorVMHostPayloadResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  vMHostPayload(resourceGroupName: string, monitorName: string, callback: msRest.ServiceCallback<Models.VMExtensionPayload>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  vMHostPayload(resourceGroupName: string, monitorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VMExtensionPayload>): void;
  vMHostPayload(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VMExtensionPayload>, callback?: msRest.ServiceCallback<Models.VMExtensionPayload>): Promise<Models.MonitorVMHostPayloadResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      vMHostPayloadOperationSpec,
      callback) as Promise<Models.MonitorVMHostPayloadResponse>;
  }

  /**
   * @summary Sending request to update the collection when Logz.io agent has been installed on a VM
   * for a given monitor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorListVmHostUpdateResponse>
   */
  listVmHostUpdate(resourceGroupName: string, monitorName: string, options?: Models.MonitorListVmHostUpdateOptionalParams): Promise<Models.MonitorListVmHostUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  listVmHostUpdate(resourceGroupName: string, monitorName: string, callback: msRest.ServiceCallback<Models.VMResourcesListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  listVmHostUpdate(resourceGroupName: string, monitorName: string, options: Models.MonitorListVmHostUpdateOptionalParams, callback: msRest.ServiceCallback<Models.VMResourcesListResponse>): void;
  listVmHostUpdate(resourceGroupName: string, monitorName: string, options?: Models.MonitorListVmHostUpdateOptionalParams | msRest.ServiceCallback<Models.VMResourcesListResponse>, callback?: msRest.ServiceCallback<Models.VMResourcesListResponse>): Promise<Models.MonitorListVmHostUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      listVmHostUpdateOperationSpec,
      callback) as Promise<Models.MonitorListVmHostUpdateResponse>;
  }

  /**
   * @summary List the compute resources currently being monitored by the Logz main account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorListVMHostsResponse>
   */
  listVMHosts(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitorListVMHostsResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  listVMHosts(resourceGroupName: string, monitorName: string, callback: msRest.ServiceCallback<Models.VMResourcesListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  listVMHosts(resourceGroupName: string, monitorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VMResourcesListResponse>): void;
  listVMHosts(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VMResourcesListResponse>, callback?: msRest.ServiceCallback<Models.VMResourcesListResponse>): Promise<Models.MonitorListVMHostsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      listVMHostsOperationSpec,
      callback) as Promise<Models.MonitorListVMHostsResponse>;
  }

  /**
   * @summary Sending request to update the collection when Logz.io agent has been installed on a VM
   * for a given monitor.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorListVmHostUpdateNextResponse>
   */
  listVmHostUpdateNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitorListVmHostUpdateNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listVmHostUpdateNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VMResourcesListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVmHostUpdateNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VMResourcesListResponse>): void;
  listVmHostUpdateNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VMResourcesListResponse>, callback?: msRest.ServiceCallback<Models.VMResourcesListResponse>): Promise<Models.MonitorListVmHostUpdateNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listVmHostUpdateNextOperationSpec,
      callback) as Promise<Models.MonitorListVmHostUpdateNextResponse>;
  }

  /**
   * @summary List the compute resources currently being monitored by the Logz main account resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorListVMHostsNextResponse>
   */
  listVMHostsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitorListVMHostsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listVMHostsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VMResourcesListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVMHostsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VMResourcesListResponse>): void;
  listVMHostsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VMResourcesListResponse>, callback?: msRest.ServiceCallback<Models.VMResourcesListResponse>): Promise<Models.MonitorListVMHostsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listVMHostsNextOperationSpec,
      callback) as Promise<Models.MonitorListVMHostsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const vMHostPayloadOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/vmHostPayload",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VMExtensionPayload
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listVmHostUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/vmHostUpdate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.VMHostUpdateRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listVMHostsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/listVMHosts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listVmHostUpdateNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listVMHostsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
