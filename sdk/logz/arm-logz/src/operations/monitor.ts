/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Monitor } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftLogz } from "../microsoftLogz";
import {
  VMResources,
  MonitorListVmHostUpdateNextOptionalParams,
  MonitorListVmHostUpdateOptionalParams,
  MonitorListVmHostUpdateResponse,
  MonitorListVMHostsNextOptionalParams,
  MonitorListVMHostsOptionalParams,
  MonitorListVMHostsResponse,
  MonitorVMHostPayloadOptionalParams,
  MonitorVMHostPayloadResponse,
  MonitorListVmHostUpdateNextResponse,
  MonitorListVMHostsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Monitor operations. */
export class MonitorImpl implements Monitor {
  private readonly client: MicrosoftLogz;

  /**
   * Initialize a new instance of the class Monitor class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftLogz) {
    this.client = client;
  }

  /**
   * Sending request to update the collection when Logz.io agent has been installed on a VM for a given
   * monitor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The options parameters.
   */
  public listVmHostUpdate(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorListVmHostUpdateOptionalParams
  ): PagedAsyncIterableIterator<VMResources> {
    const iter = this.listVmHostUpdatePagingAll(
      resourceGroupName,
      monitorName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listVmHostUpdatePagingPage(
          resourceGroupName,
          monitorName,
          options,
          settings
        );
      }
    };
  }

  private async *listVmHostUpdatePagingPage(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorListVmHostUpdateOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<VMResources[]> {
    let result: MonitorListVmHostUpdateResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listVmHostUpdate(
        resourceGroupName,
        monitorName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listVmHostUpdateNext(
        resourceGroupName,
        monitorName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listVmHostUpdatePagingAll(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorListVmHostUpdateOptionalParams
  ): AsyncIterableIterator<VMResources> {
    for await (const page of this.listVmHostUpdatePagingPage(
      resourceGroupName,
      monitorName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the compute resources currently being monitored by the Logz main account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The options parameters.
   */
  public listVMHosts(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorListVMHostsOptionalParams
  ): PagedAsyncIterableIterator<VMResources> {
    const iter = this.listVMHostsPagingAll(
      resourceGroupName,
      monitorName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listVMHostsPagingPage(
          resourceGroupName,
          monitorName,
          options,
          settings
        );
      }
    };
  }

  private async *listVMHostsPagingPage(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorListVMHostsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<VMResources[]> {
    let result: MonitorListVMHostsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listVMHosts(resourceGroupName, monitorName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listVMHostsNext(
        resourceGroupName,
        monitorName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listVMHostsPagingAll(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorListVMHostsOptionalParams
  ): AsyncIterableIterator<VMResources> {
    for await (const page of this.listVMHostsPagingPage(
      resourceGroupName,
      monitorName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns the payload that needs to be passed in the request body for installing Logz.io agent on a
   * VM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The options parameters.
   */
  vMHostPayload(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorVMHostPayloadOptionalParams
  ): Promise<MonitorVMHostPayloadResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, options },
      vMHostPayloadOperationSpec
    );
  }

  /**
   * Sending request to update the collection when Logz.io agent has been installed on a VM for a given
   * monitor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The options parameters.
   */
  private _listVmHostUpdate(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorListVmHostUpdateOptionalParams
  ): Promise<MonitorListVmHostUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, options },
      listVmHostUpdateOperationSpec
    );
  }

  /**
   * List the compute resources currently being monitored by the Logz main account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The options parameters.
   */
  private _listVMHosts(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorListVMHostsOptionalParams
  ): Promise<MonitorListVMHostsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, options },
      listVMHostsOperationSpec
    );
  }

  /**
   * ListVmHostUpdateNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param nextLink The nextLink from the previous successful call to the ListVmHostUpdate method.
   * @param options The options parameters.
   */
  private _listVmHostUpdateNext(
    resourceGroupName: string,
    monitorName: string,
    nextLink: string,
    options?: MonitorListVmHostUpdateNextOptionalParams
  ): Promise<MonitorListVmHostUpdateNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, nextLink, options },
      listVmHostUpdateNextOperationSpec
    );
  }

  /**
   * ListVMHostsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param nextLink The nextLink from the previous successful call to the ListVMHosts method.
   * @param options The options parameters.
   */
  private _listVMHostsNext(
    resourceGroupName: string,
    monitorName: string,
    nextLink: string,
    options?: MonitorListVMHostsNextOptionalParams
  ): Promise<MonitorListVMHostsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, nextLink, options },
      listVMHostsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const vMHostPayloadOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/vmHostPayload",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VMExtensionPayload
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVmHostUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/vmHostUpdate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listVMHostsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/listVMHosts",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVmHostUpdateNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listVMHostsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
