/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/singleSignOnMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftLogzContext } from "../microsoftLogzContext";

/** Class representing a SingleSignOn. */
export class SingleSignOn {
  private readonly client: MicrosoftLogzContext;

  /**
   * Create a SingleSignOn.
   * @param {MicrosoftLogzContext} client Reference to the service client.
   */
  constructor(client: MicrosoftLogzContext) {
    this.client = client;
  }

  /**
   * @summary List the single sign-on configurations for a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.SingleSignOnListResponse>
   */
  list(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase): Promise<Models.SingleSignOnListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  list(resourceGroupName: string, monitorName: string, callback: msRest.ServiceCallback<Models.LogzSingleSignOnResourceListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, monitorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogzSingleSignOnResourceListResponse>): void;
  list(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogzSingleSignOnResourceListResponse>, callback?: msRest.ServiceCallback<Models.LogzSingleSignOnResourceListResponse>): Promise<Models.SingleSignOnListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SingleSignOnListResponse>;
  }

  /**
   * @summary Configures single-sign-on for this resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param configurationName
   * @param [options] The optional parameters
   * @returns Promise<Models.SingleSignOnCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, monitorName: string, configurationName: string, options?: Models.SingleSignOnCreateOrUpdateOptionalParams): Promise<Models.SingleSignOnCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,monitorName,configurationName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SingleSignOnCreateOrUpdateResponse>;
  }

  /**
   * @summary Gets the Logz single sign-on resource for the given Monitor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param configurationName
   * @param [options] The optional parameters
   * @returns Promise<Models.SingleSignOnGetResponse>
   */
  get(resourceGroupName: string, monitorName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.SingleSignOnGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param configurationName
   * @param callback The callback
   */
  get(resourceGroupName: string, monitorName: string, configurationName: string, callback: msRest.ServiceCallback<Models.LogzSingleSignOnResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param configurationName
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, monitorName: string, configurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogzSingleSignOnResource>): void;
  get(resourceGroupName: string, monitorName: string, configurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogzSingleSignOnResource>, callback?: msRest.ServiceCallback<Models.LogzSingleSignOnResource>): Promise<Models.SingleSignOnGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        configurationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SingleSignOnGetResponse>;
  }

  /**
   * @summary Configures single-sign-on for this resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param configurationName
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, monitorName: string, configurationName: string, options?: Models.SingleSignOnBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        monitorName,
        configurationName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * @summary List the single sign-on configurations for a given monitor resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SingleSignOnListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SingleSignOnListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LogzSingleSignOnResourceListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogzSingleSignOnResourceListResponse>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogzSingleSignOnResourceListResponse>, callback?: msRest.ServiceCallback<Models.LogzSingleSignOnResourceListResponse>): Promise<Models.SingleSignOnListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SingleSignOnListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/singleSignOnConfigurations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogzSingleSignOnResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/singleSignOnConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogzSingleSignOnResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/singleSignOnConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.LogzSingleSignOnResource
  },
  responses: {
    200: {
      bodyMapper: Mappers.LogzSingleSignOnResource
    },
    201: {
      bodyMapper: Mappers.LogzSingleSignOnResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogzSingleSignOnResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
