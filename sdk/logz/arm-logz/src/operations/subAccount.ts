/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SubAccount } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftLogz } from "../microsoftLogz";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  LogzMonitorResource,
  SubAccountListNextOptionalParams,
  SubAccountListOptionalParams,
  MonitoredResource,
  SubAccountListMonitoredResourcesNextOptionalParams,
  SubAccountListMonitoredResourcesOptionalParams,
  VMResources,
  SubAccountListVmHostUpdateNextOptionalParams,
  SubAccountListVmHostUpdateOptionalParams,
  SubAccountListVMHostsNextOptionalParams,
  SubAccountListVMHostsOptionalParams,
  SubAccountListResponse,
  SubAccountCreateOptionalParams,
  SubAccountCreateResponse,
  SubAccountGetOptionalParams,
  SubAccountGetResponse,
  SubAccountDeleteOptionalParams,
  SubAccountUpdateOptionalParams,
  SubAccountUpdateResponse,
  SubAccountListMonitoredResourcesResponse,
  SubAccountVMHostPayloadOptionalParams,
  SubAccountVMHostPayloadResponse,
  SubAccountListVmHostUpdateResponse,
  SubAccountListVMHostsResponse,
  SubAccountListNextResponse,
  SubAccountListMonitoredResourcesNextResponse,
  SubAccountListVmHostUpdateNextResponse,
  SubAccountListVMHostsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SubAccount operations. */
export class SubAccountImpl implements SubAccount {
  private readonly client: MicrosoftLogz;

  /**
   * Initialize a new instance of the class SubAccount class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftLogz) {
    this.client = client;
  }

  /**
   * List the sub account under a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    monitorName: string,
    options?: SubAccountListOptionalParams
  ): PagedAsyncIterableIterator<LogzMonitorResource> {
    const iter = this.listPagingAll(resourceGroupName, monitorName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroupName, monitorName, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    monitorName: string,
    options?: SubAccountListOptionalParams
  ): AsyncIterableIterator<LogzMonitorResource[]> {
    let result = await this._list(resourceGroupName, monitorName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        monitorName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    monitorName: string,
    options?: SubAccountListOptionalParams
  ): AsyncIterableIterator<LogzMonitorResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      monitorName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the resources currently being monitored by the Logz sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  public listMonitoredResources(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListMonitoredResourcesOptionalParams
  ): PagedAsyncIterableIterator<MonitoredResource> {
    const iter = this.listMonitoredResourcesPagingAll(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listMonitoredResourcesPagingPage(
          resourceGroupName,
          monitorName,
          subAccountName,
          options
        );
      }
    };
  }

  private async *listMonitoredResourcesPagingPage(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListMonitoredResourcesOptionalParams
  ): AsyncIterableIterator<MonitoredResource[]> {
    let result = await this._listMonitoredResources(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listMonitoredResourcesNext(
        resourceGroupName,
        monitorName,
        subAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listMonitoredResourcesPagingAll(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListMonitoredResourcesOptionalParams
  ): AsyncIterableIterator<MonitoredResource> {
    for await (const page of this.listMonitoredResourcesPagingPage(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Sending request to update the collection when Logz.io agent has been installed on a VM for a given
   * monitor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  public listVmHostUpdate(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListVmHostUpdateOptionalParams
  ): PagedAsyncIterableIterator<VMResources> {
    const iter = this.listVmHostUpdatePagingAll(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listVmHostUpdatePagingPage(
          resourceGroupName,
          monitorName,
          subAccountName,
          options
        );
      }
    };
  }

  private async *listVmHostUpdatePagingPage(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListVmHostUpdateOptionalParams
  ): AsyncIterableIterator<VMResources[]> {
    let result = await this._listVmHostUpdate(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listVmHostUpdateNext(
        resourceGroupName,
        monitorName,
        subAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listVmHostUpdatePagingAll(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListVmHostUpdateOptionalParams
  ): AsyncIterableIterator<VMResources> {
    for await (const page of this.listVmHostUpdatePagingPage(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the compute resources currently being monitored by the Logz sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  public listVMHosts(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListVMHostsOptionalParams
  ): PagedAsyncIterableIterator<VMResources> {
    const iter = this.listVMHostsPagingAll(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listVMHostsPagingPage(
          resourceGroupName,
          monitorName,
          subAccountName,
          options
        );
      }
    };
  }

  private async *listVMHostsPagingPage(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListVMHostsOptionalParams
  ): AsyncIterableIterator<VMResources[]> {
    let result = await this._listVMHosts(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listVMHostsNext(
        resourceGroupName,
        monitorName,
        subAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listVMHostsPagingAll(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListVMHostsOptionalParams
  ): AsyncIterableIterator<VMResources> {
    for await (const page of this.listVMHostsPagingPage(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the sub account under a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    monitorName: string,
    options?: SubAccountListOptionalParams
  ): Promise<SubAccountListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, options },
      listOperationSpec
    );
  }

  /**
   * Create sub account under a given monitor resource. This create operation can take upto 10 minutes to
   * complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SubAccountCreateResponse>,
      SubAccountCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SubAccountCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, monitorName, subAccountName, options },
      createOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Create sub account under a given monitor resource. This create operation can take upto 10 minutes to
   * complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountCreateOptionalParams
  ): Promise<SubAccountCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get a sub account under a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountGetOptionalParams
  ): Promise<SubAccountGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, options },
      getOperationSpec
    );
  }

  /**
   * Delete a sub account resource. This delete operation can take upto 10 minutes to complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, monitorName, subAccountName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
  }

  /**
   * Delete a sub account resource. This delete operation can take upto 10 minutes to complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountUpdateOptionalParams
  ): Promise<SubAccountUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, options },
      updateOperationSpec
    );
  }

  /**
   * List the resources currently being monitored by the Logz sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  private _listMonitoredResources(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListMonitoredResourcesOptionalParams
  ): Promise<SubAccountListMonitoredResourcesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, options },
      listMonitoredResourcesOperationSpec
    );
  }

  /**
   * Returns the payload that needs to be passed as a request for installing Logz.io agent on a VM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  vMHostPayload(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountVMHostPayloadOptionalParams
  ): Promise<SubAccountVMHostPayloadResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, options },
      vMHostPayloadOperationSpec
    );
  }

  /**
   * Sending request to update the collection when Logz.io agent has been installed on a VM for a given
   * monitor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  private _listVmHostUpdate(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListVmHostUpdateOptionalParams
  ): Promise<SubAccountListVmHostUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, options },
      listVmHostUpdateOperationSpec
    );
  }

  /**
   * List the compute resources currently being monitored by the Logz sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  private _listVMHosts(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListVMHostsOptionalParams
  ): Promise<SubAccountListVMHostsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, options },
      listVMHostsOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    monitorName: string,
    nextLink: string,
    options?: SubAccountListNextOptionalParams
  ): Promise<SubAccountListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListMonitoredResourcesNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param nextLink The nextLink from the previous successful call to the ListMonitoredResources method.
   * @param options The options parameters.
   */
  private _listMonitoredResourcesNext(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    nextLink: string,
    options?: SubAccountListMonitoredResourcesNextOptionalParams
  ): Promise<SubAccountListMonitoredResourcesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, nextLink, options },
      listMonitoredResourcesNextOperationSpec
    );
  }

  /**
   * ListVmHostUpdateNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param nextLink The nextLink from the previous successful call to the ListVmHostUpdate method.
   * @param options The options parameters.
   */
  private _listVmHostUpdateNext(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    nextLink: string,
    options?: SubAccountListVmHostUpdateNextOptionalParams
  ): Promise<SubAccountListVmHostUpdateNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, nextLink, options },
      listVmHostUpdateNextOperationSpec
    );
  }

  /**
   * ListVMHostsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param nextLink The nextLink from the previous successful call to the ListVMHosts method.
   * @param options The options parameters.
   */
  private _listVMHostsNext(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    nextLink: string,
    options?: SubAccountListVMHostsNextOptionalParams
  ): Promise<SubAccountListVMHostsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, nextLink, options },
      listVMHostsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogzMonitorResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.LogzMonitorResource
    },
    201: {
      bodyMapper: Mappers.LogzMonitorResource
    },
    202: {
      bodyMapper: Mappers.LogzMonitorResource
    },
    204: {
      bodyMapper: Mappers.LogzMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogzMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.LogzMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listMonitoredResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}/listMonitoredResources",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoredResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const vMHostPayloadOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}/vmHostPayload",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VMExtensionPayload
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVmHostUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}/vmHostUpdate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listVMHostsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}/listVMHosts",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogzMonitorResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMonitoredResourcesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoredResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.nextLink,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVmHostUpdateNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.nextLink,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listVMHostsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMResourcesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.nextLink,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
