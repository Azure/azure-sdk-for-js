/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/subAccountMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftLogzContext } from "../microsoftLogzContext";

/** Class representing a SubAccount. */
export class SubAccount {
  private readonly client: MicrosoftLogzContext;

  /**
   * Create a SubAccount.
   * @param {MicrosoftLogzContext} client Reference to the service client.
   */
  constructor(client: MicrosoftLogzContext) {
    this.client = client;
  }

  /**
   * @summary List the sub account under a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.SubAccountListResponse>
   */
  list(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase): Promise<Models.SubAccountListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  list(resourceGroupName: string, monitorName: string, callback: msRest.ServiceCallback<Models.LogzMonitorResourceListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, monitorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogzMonitorResourceListResponse>): void;
  list(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogzMonitorResourceListResponse>, callback?: msRest.ServiceCallback<Models.LogzMonitorResourceListResponse>): Promise<Models.SubAccountListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SubAccountListResponse>;
  }

  /**
   * @summary Create sub account under a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.SubAccountCreateResponse>
   */
  create(resourceGroupName: string, monitorName: string, subAccountName: string, options?: Models.SubAccountCreateOptionalParams): Promise<Models.SubAccountCreateResponse> {
    return this.beginCreate(resourceGroupName,monitorName,subAccountName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SubAccountCreateResponse>;
  }

  /**
   * @summary Get a sub account under a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.SubAccountGetResponse>
   */
  get(resourceGroupName: string, monitorName: string, subAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.SubAccountGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param callback The callback
   */
  get(resourceGroupName: string, monitorName: string, subAccountName: string, callback: msRest.ServiceCallback<Models.LogzMonitorResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, monitorName: string, subAccountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogzMonitorResource>): void;
  get(resourceGroupName: string, monitorName: string, subAccountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogzMonitorResource>, callback?: msRest.ServiceCallback<Models.LogzMonitorResource>): Promise<Models.SubAccountGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        subAccountName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SubAccountGetResponse>;
  }

  /**
   * @summary Delete a sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.SubAccountDeleteResponse>
   */
  deleteMethod(resourceGroupName: string, monitorName: string, subAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.SubAccountDeleteResponse> {
    return this.beginDeleteMethod(resourceGroupName,monitorName,subAccountName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SubAccountDeleteResponse>;
  }

  /**
   * @summary Update a monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.SubAccountUpdateResponse>
   */
  update(resourceGroupName: string, monitorName: string, subAccountName: string, options?: Models.SubAccountUpdateOptionalParams): Promise<Models.SubAccountUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param callback The callback
   */
  update(resourceGroupName: string, monitorName: string, subAccountName: string, callback: msRest.ServiceCallback<Models.LogzMonitorResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, monitorName: string, subAccountName: string, options: Models.SubAccountUpdateOptionalParams, callback: msRest.ServiceCallback<Models.LogzMonitorResource>): void;
  update(resourceGroupName: string, monitorName: string, subAccountName: string, options?: Models.SubAccountUpdateOptionalParams | msRest.ServiceCallback<Models.LogzMonitorResource>, callback?: msRest.ServiceCallback<Models.LogzMonitorResource>): Promise<Models.SubAccountUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        subAccountName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.SubAccountUpdateResponse>;
  }

  /**
   * @summary List the resources currently being monitored by the Logz sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.SubAccountListMonitoredResourcesResponse>
   */
  listMonitoredResources(resourceGroupName: string, monitorName: string, subAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.SubAccountListMonitoredResourcesResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param callback The callback
   */
  listMonitoredResources(resourceGroupName: string, monitorName: string, subAccountName: string, callback: msRest.ServiceCallback<Models.MonitoredResourceListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  listMonitoredResources(resourceGroupName: string, monitorName: string, subAccountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MonitoredResourceListResponse>): void;
  listMonitoredResources(resourceGroupName: string, monitorName: string, subAccountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MonitoredResourceListResponse>, callback?: msRest.ServiceCallback<Models.MonitoredResourceListResponse>): Promise<Models.SubAccountListMonitoredResourcesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        subAccountName,
        options
      },
      listMonitoredResourcesOperationSpec,
      callback) as Promise<Models.SubAccountListMonitoredResourcesResponse>;
  }

  /**
   * @summary Create sub account under a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, monitorName: string, subAccountName: string, options?: Models.SubAccountBeginCreateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        monitorName,
        subAccountName,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * @summary Delete a sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, monitorName: string, subAccountName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        monitorName,
        subAccountName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * @summary List the sub account under a given monitor resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubAccountListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SubAccountListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LogzMonitorResourceListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogzMonitorResourceListResponse>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogzMonitorResourceListResponse>, callback?: msRest.ServiceCallback<Models.LogzMonitorResourceListResponse>): Promise<Models.SubAccountListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SubAccountListNextResponse>;
  }

  /**
   * @summary List the resources currently being monitored by the Logz sub account resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubAccountListMonitoredResourcesNextResponse>
   */
  listMonitoredResourcesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SubAccountListMonitoredResourcesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listMonitoredResourcesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MonitoredResourceListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMonitoredResourcesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MonitoredResourceListResponse>): void;
  listMonitoredResourcesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MonitoredResourceListResponse>, callback?: msRest.ServiceCallback<Models.MonitoredResourceListResponse>): Promise<Models.SubAccountListMonitoredResourcesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listMonitoredResourcesNextOperationSpec,
      callback) as Promise<Models.SubAccountListMonitoredResourcesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogzMonitorResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogzMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.LogzMonitorResourceUpdateParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.LogzMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listMonitoredResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}/listMonitoredResources",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MonitoredResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.LogzMonitorResource
  },
  responses: {
    200: {
      bodyMapper: Mappers.LogzMonitorResource
    },
    201: {
      bodyMapper: Mappers.LogzMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.SubAccountDeleteHeaders
    },
    202: {
      headersMapper: Mappers.SubAccountDeleteHeaders
    },
    204: {
      headersMapper: Mappers.SubAccountDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.SubAccountDeleteHeaders
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogzMonitorResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listMonitoredResourcesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MonitoredResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
