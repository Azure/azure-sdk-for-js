/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/tagRulesMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftLogzContext } from "../microsoftLogzContext";

/** Class representing a TagRules. */
export class TagRules {
  private readonly client: MicrosoftLogzContext;

  /**
   * Create a TagRules.
   * @param {MicrosoftLogzContext} client Reference to the service client.
   */
  constructor(client: MicrosoftLogzContext) {
    this.client = client;
  }

  /**
   * @summary List the tag rules for a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.TagRulesListResponse>
   */
  list(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase): Promise<Models.TagRulesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  list(resourceGroupName: string, monitorName: string, callback: msRest.ServiceCallback<Models.MonitoringTagRulesListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, monitorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MonitoringTagRulesListResponse>): void;
  list(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MonitoringTagRulesListResponse>, callback?: msRest.ServiceCallback<Models.MonitoringTagRulesListResponse>): Promise<Models.TagRulesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.TagRulesListResponse>;
  }

  /**
   * @summary Create or update a tag rule set for a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param ruleSetName
   * @param [options] The optional parameters
   * @returns Promise<Models.TagRulesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: Models.TagRulesCreateOrUpdateOptionalParams): Promise<Models.TagRulesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param ruleSetName
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, monitorName: string, ruleSetName: string, callback: msRest.ServiceCallback<Models.MonitoringTagRules>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param ruleSetName
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, monitorName: string, ruleSetName: string, options: Models.TagRulesCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.MonitoringTagRules>): void;
  createOrUpdate(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: Models.TagRulesCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.MonitoringTagRules>, callback?: msRest.ServiceCallback<Models.MonitoringTagRules>): Promise<Models.TagRulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        ruleSetName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.TagRulesCreateOrUpdateResponse>;
  }

  /**
   * @summary Get a tag rule set for a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param ruleSetName
   * @param [options] The optional parameters
   * @returns Promise<Models.TagRulesGetResponse>
   */
  get(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: msRest.RequestOptionsBase): Promise<Models.TagRulesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param ruleSetName
   * @param callback The callback
   */
  get(resourceGroupName: string, monitorName: string, ruleSetName: string, callback: msRest.ServiceCallback<Models.MonitoringTagRules>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param ruleSetName
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, monitorName: string, ruleSetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MonitoringTagRules>): void;
  get(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MonitoringTagRules>, callback?: msRest.ServiceCallback<Models.MonitoringTagRules>): Promise<Models.TagRulesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        ruleSetName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.TagRulesGetResponse>;
  }

  /**
   * @summary Delete a tag rule set for a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param ruleSetName
   * @param [options] The optional parameters
   * @returns Promise<Models.TagRulesDeleteResponse>
   */
  deleteMethod(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: msRest.RequestOptionsBase): Promise<Models.TagRulesDeleteResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param ruleSetName
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, monitorName: string, ruleSetName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param ruleSetName
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, monitorName: string, ruleSetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.TagRulesDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        ruleSetName,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.TagRulesDeleteResponse>;
  }

  /**
   * @summary List the tag rules for a given monitor resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagRulesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TagRulesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MonitoringTagRulesListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MonitoringTagRulesListResponse>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MonitoringTagRulesListResponse>, callback?: msRest.ServiceCallback<Models.MonitoringTagRulesListResponse>): Promise<Models.TagRulesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.TagRulesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/tagRules",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringTagRulesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/tagRules/{ruleSetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.ruleSetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      properties: [
        "options",
        "properties"
      ]
    },
    mapper: Mappers.MonitoringTagRules
  },
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringTagRules
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/tagRules/{ruleSetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.ruleSetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringTagRules
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/tagRules/{ruleSetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.ruleSetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.TagRulesDeleteHeaders
    },
    202: {
      headersMapper: Mappers.TagRulesDeleteHeaders
    },
    204: {
      headersMapper: Mappers.TagRulesDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.TagRulesDeleteHeaders
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringTagRulesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
