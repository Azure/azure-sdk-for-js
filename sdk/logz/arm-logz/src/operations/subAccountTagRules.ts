/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SubAccountTagRules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftLogz } from "../microsoftLogz";
import {
  MonitoringTagRules,
  SubAccountTagRulesListNextOptionalParams,
  SubAccountTagRulesListOptionalParams,
  SubAccountTagRulesListResponse,
  SubAccountTagRulesCreateOrUpdateOptionalParams,
  SubAccountTagRulesCreateOrUpdateResponse,
  SubAccountTagRulesGetOptionalParams,
  SubAccountTagRulesGetResponse,
  SubAccountTagRulesDeleteOptionalParams,
  SubAccountTagRulesDeleteResponse,
  SubAccountTagRulesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SubAccountTagRules operations. */
export class SubAccountTagRulesImpl implements SubAccountTagRules {
  private readonly client: MicrosoftLogz;

  /**
   * Initialize a new instance of the class SubAccountTagRules class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftLogz) {
    this.client = client;
  }

  /**
   * List the tag rules for a given sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountTagRulesListOptionalParams
  ): PagedAsyncIterableIterator<MonitoringTagRules> {
    const iter = this.listPagingAll(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          monitorName,
          subAccountName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountTagRulesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<MonitoringTagRules[]> {
    let result: SubAccountTagRulesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        monitorName,
        subAccountName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        monitorName,
        subAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountTagRulesListOptionalParams
  ): AsyncIterableIterator<MonitoringTagRules> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      monitorName,
      subAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the tag rules for a given sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountTagRulesListOptionalParams
  ): Promise<SubAccountTagRulesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, options },
      listOperationSpec
    );
  }

  /**
   * Create or update a tag rule set for a given sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param ruleSetName
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    ruleSetName: string,
    options?: SubAccountTagRulesCreateOrUpdateOptionalParams
  ): Promise<SubAccountTagRulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, ruleSetName, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Get a tag rule set for a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param ruleSetName
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    ruleSetName: string,
    options?: SubAccountTagRulesGetOptionalParams
  ): Promise<SubAccountTagRulesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, ruleSetName, options },
      getOperationSpec
    );
  }

  /**
   * Delete a tag rule set for a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param ruleSetName
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    ruleSetName: string,
    options?: SubAccountTagRulesDeleteOptionalParams
  ): Promise<SubAccountTagRulesDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, ruleSetName, options },
      deleteOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    nextLink: string,
    options?: SubAccountTagRulesListNextOptionalParams
  ): Promise<SubAccountTagRulesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, subAccountName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}/tagRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringTagRulesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}/tagRules/{ruleSetName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringTagRules
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.ruleSetName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}/tagRules/{ruleSetName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringTagRules
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.ruleSetName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logz/monitors/{monitorName}/accounts/{subAccountName}/tagRules/{ruleSetName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    202: {
      headersMapper: Mappers.SubAccountTagRulesDeleteHeaders
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.ruleSetName,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringTagRulesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.nextLink,
    Parameters.subAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
