/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Response of a list operation. */
export interface MonitoredResourceListResponse {
  /** Results of a list operation. */
  value?: MonitoredResource[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

/** The properties of a resource currently being monitored by the Logz monitor resource. */
export interface MonitoredResource {
  /** The ARM id of the resource. */
  id?: string;
  /** Flag indicating if resource is sending metrics to Logz. */
  sendingMetrics?: boolean;
  /** Reason for why the resource is sending metrics (or why it is not sending). */
  reasonForMetricsStatus?: string;
  /** Flag indicating if resource is sending logs to Logz. */
  sendingLogs?: boolean;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Reason for why the resource is sending logs (or why it is not sending). */
  reasonForLogsStatus?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Result of GET request to list the Microsoft.Logz operations. */
export interface OperationListResult {
  /** List of operations supported by the Microsoft.Logz provider. */
  value?: OperationResult[];
  /** URL to get the next set of operation list results if there are any. */
  nextLink?: string;
}

/** A Microsoft.Logz REST API operation. */
export interface OperationResult {
  /** Operation name, i.e., {provider}/{resource}/{operation}. */
  name?: string;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
  /** The object that represents the operation. */
  display?: OperationDisplay;
  /** Origin of the operation */
  origin?: string;
}

/** The object that represents the operation. */
export interface OperationDisplay {
  /** Service provider, i.e., Microsoft.Logz. */
  provider?: string;
  /** Type on which the operation is performed, e.g., 'monitors'. */
  resource?: string;
  /** Operation type, e.g., read, write, delete, etc. */
  operation?: string;
  /** Description of the operation, e.g., 'Write monitors'. */
  description?: string;
}

/** Response of a list operation. */
export interface LogzMonitorResourceListResponse {
  /** Results of a list operation. */
  value?: LogzMonitorResource[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

export interface LogzMonitorResource {
  /**
   * ARM id of the monitor resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * Name of the monitor resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the monitor resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Properties specific to the monitor resource. */
  properties?: MonitorProperties;
  identity?: IdentityProperties;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
  location: string;
}

/** Properties specific to the monitor resource. */
export interface MonitorProperties {
  /**
   * Flag specifying if the resource provisioning state as tracked by ARM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Flag specifying if the resource monitoring is enabled or disabled. */
  monitoringStatus?: MonitoringStatus;
  /** Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. */
  marketplaceSubscriptionStatus?: MarketplaceSubscriptionStatus;
  logzOrganizationProperties?: LogzOrganizationProperties;
  userInfo?: UserInfo;
  planData?: PlanData;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly liftrResourceCategory?: LiftrResourceCategories;
  /**
   * The priority of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly liftrResourcePreference?: number;
}

export interface LogzOrganizationProperties {
  /** Name of the Logz organization. */
  companyName?: string;
  /**
   * Id of the Logz organization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The Id of the Enterprise App used for Single sign on. */
  enterpriseAppId?: string;
  /** The login URL specific to this Logz Organization. */
  singleSignOnUrl?: string;
}

export interface UserInfo {
  /** First Name of the user */
  firstName?: string;
  /** Last Name of the user */
  lastName?: string;
  /** Email of the user used by Logz for contacting them if needed */
  emailAddress?: string;
  /** Phone number of the user used by Logz for contacting them if needed */
  phoneNumber?: string;
}

export interface PlanData {
  /** different usage type like PAYG/COMMITTED. this could be enum */
  usageType?: string;
  /** different billing cycles like MONTHLY/WEEKLY. this could be enum */
  billingCycle?: string;
  /** plan id as published by Logz */
  planDetails?: string;
  /** date when plan was applied */
  effectiveDate?: Date;
}

export interface IdentityProperties {
  /**
   * The identity ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  type?: ManagedIdentityTypes;
}

/** The parameters for a PATCH request to a monitor resource. */
export interface LogzMonitorResourceUpdateParameters {
  /** The set of properties that can be update in a PATCH request to a monitor resource. */
  properties?: MonitorUpdateProperties;
  /** The new tags of the monitor resource. */
  tags?: { [propertyName: string]: string };
}

/** The set of properties that can be update in a PATCH request to a monitor resource. */
export interface MonitorUpdateProperties {
  /** Flag specifying if the resource monitoring is enabled or disabled. */
  monitoringStatus?: MonitoringStatus;
}

/** Response of a list operation. */
export interface MonitoringTagRulesListResponse {
  /** Results of a list operation. */
  value?: MonitoringTagRules[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

/** Capture logs and metrics of Azure resources based on ARM tags. */
export interface MonitoringTagRules {
  /**
   * Name of the rule set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The id of the rule set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The type of the rule set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Definition of the properties for a TagRules resource. */
  properties?: MonitoringTagRulesProperties;
}

/** Definition of the properties for a TagRules resource. */
export interface MonitoringTagRulesProperties {
  /**
   * Flag specifying if the resource provisioning state as tracked by ARM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Set of rules for sending logs for the Monitor resource. */
  logRules?: LogRules;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Set of rules for sending logs for the Monitor resource. */
export interface LogRules {
  /** Flag specifying if AAD logs should be sent for the Monitor resource. */
  sendAadLogs?: boolean;
  /** Flag specifying if subscription logs should be sent for the Monitor resource. */
  sendSubscriptionLogs?: boolean;
  /** Flag specifying if activity logs from Azure resources should be sent for the Monitor resource. */
  sendActivityLogs?: boolean;
  /** List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags. */
  filteringTags?: FilteringTag[];
}

/** The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored. */
export interface FilteringTag {
  /** The name (also known as the key) of the tag. */
  name?: string;
  /** The value of the tag. */
  value?: string;
  /** Valid actions for a filtering tag. Exclusion takes priority over inclusion. */
  action?: TagAction;
}

/** Response of a list operation. */
export interface LogzSingleSignOnResourceListResponse {
  /** Results of a list operation. */
  value?: LogzSingleSignOnResource[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

export interface LogzSingleSignOnResource {
  /**
   * ARM id of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  properties?: LogzSingleSignOnProperties;
}

export interface LogzSingleSignOnProperties {
  /** Various states of the SSO resource */
  singleSignOnState?: SingleSignOnStates;
  /** The Id of the Enterprise App used for Single sign-on. */
  enterpriseAppId?: string;
  /** The login URL specific to this Logz Organization. */
  singleSignOnUrl?: string;
  /**
   * Flag specifying if the resource provisioning state as tracked by ARM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Response of payload to be passed while installing VM agent. */
export interface VMExtensionPayload {
  /** API Key corresponding to the resource. */
  apiKey?: string;
  /** Logz.io region where the resource has been created. */
  region?: string;
}

/** Request of a list VM Host Update Operation. */
export interface VMHostUpdateRequest {
  /** Request of a list vm host update operation. */
  vmResourceIds?: VMResources[];
  /** Specifies the state of the operation - install/ delete. */
  state?: VMHostUpdateStates;
}

/** VM Resource Ids */
export interface VMResources {
  /** Request of a list vm host update operation. */
  id?: string;
  /** Version of the Logz agent installed on the VM. */
  agentVersion?: string;
}

/** Response of a list VM Host Update Operation. */
export interface VMResourcesListResponse {
  /** Response of a list vm host update operation. */
  value?: VMResources[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

/** Request for checking user's role for Logz.io account. */
export interface UserRoleRequest {
  /** Email of the user used by Logz for contacting them if needed */
  emailAddress?: string;
}

/** Response for list of user's role for Logz.io account. */
export interface UserRoleListResponse {
  /** List of user roles for Logz.io account. */
  value?: UserRoleResponse[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

/** Response for checking user's role for Logz.io account. */
export interface UserRoleResponse {
  /** User roles on configured in Logz.io account. */
  role?: UserRole;
}

/** Defines headers for Monitors_delete operation. */
export interface MonitorsDeleteHeaders {
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for TagRules_delete operation. */
export interface TagRulesDeleteHeaders {
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for SubAccount_delete operation. */
export interface SubAccountDeleteHeaders {
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for SubAccountTagRules_delete operation. */
export interface SubAccountTagRulesDeleteHeaders {
  /** URL to query for status of the operation. */
  location?: string;
}

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  Accepted = "Accepted",
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "Canceled",
  Deleted = "Deleted",
  NotSpecified = "NotSpecified"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **NotSpecified**
 */
export type ProvisioningState = string;

/** Known values of {@link MonitoringStatus} that the service accepts. */
export enum KnownMonitoringStatus {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for MonitoringStatus. \
 * {@link KnownMonitoringStatus} can be used interchangeably with MonitoringStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type MonitoringStatus = string;

/** Known values of {@link MarketplaceSubscriptionStatus} that the service accepts. */
export enum KnownMarketplaceSubscriptionStatus {
  Active = "Active",
  Suspended = "Suspended"
}

/**
 * Defines values for MarketplaceSubscriptionStatus. \
 * {@link KnownMarketplaceSubscriptionStatus} can be used interchangeably with MarketplaceSubscriptionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Suspended**
 */
export type MarketplaceSubscriptionStatus = string;

/** Known values of {@link LiftrResourceCategories} that the service accepts. */
export enum KnownLiftrResourceCategories {
  Unknown = "Unknown",
  MonitorLogs = "MonitorLogs"
}

/**
 * Defines values for LiftrResourceCategories. \
 * {@link KnownLiftrResourceCategories} can be used interchangeably with LiftrResourceCategories,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **MonitorLogs**
 */
export type LiftrResourceCategories = string;

/** Known values of {@link ManagedIdentityTypes} that the service accepts. */
export enum KnownManagedIdentityTypes {
  SystemAssigned = "SystemAssigned",
  UserAssigned = "UserAssigned"
}

/**
 * Defines values for ManagedIdentityTypes. \
 * {@link KnownManagedIdentityTypes} can be used interchangeably with ManagedIdentityTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned**
 */
export type ManagedIdentityTypes = string;

/** Known values of {@link TagAction} that the service accepts. */
export enum KnownTagAction {
  Include = "Include",
  Exclude = "Exclude"
}

/**
 * Defines values for TagAction. \
 * {@link KnownTagAction} can be used interchangeably with TagAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Include** \
 * **Exclude**
 */
export type TagAction = string;

/** Known values of {@link SingleSignOnStates} that the service accepts. */
export enum KnownSingleSignOnStates {
  Initial = "Initial",
  Enable = "Enable",
  Disable = "Disable",
  Existing = "Existing"
}

/**
 * Defines values for SingleSignOnStates. \
 * {@link KnownSingleSignOnStates} can be used interchangeably with SingleSignOnStates,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Enable** \
 * **Disable** \
 * **Existing**
 */
export type SingleSignOnStates = string;

/** Known values of {@link VMHostUpdateStates} that the service accepts. */
export enum KnownVMHostUpdateStates {
  Install = "Install",
  Delete = "Delete"
}

/**
 * Defines values for VMHostUpdateStates. \
 * {@link KnownVMHostUpdateStates} can be used interchangeably with VMHostUpdateStates,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Install** \
 * **Delete**
 */
export type VMHostUpdateStates = string;

/** Known values of {@link UserRole} that the service accepts. */
export enum KnownUserRole {
  None = "None",
  User = "User",
  Admin = "Admin"
}

/**
 * Defines values for UserRole. \
 * {@link KnownUserRole} can be used interchangeably with UserRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **User** \
 * **Admin**
 */
export type UserRole = string;

/** Optional parameters. */
export interface MonitorsListMonitoredResourcesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMonitoredResources operation. */
export type MonitorsListMonitoredResourcesResponse = MonitoredResourceListResponse;

/** Optional parameters. */
export interface MonitorsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type MonitorsListBySubscriptionResponse = LogzMonitorResourceListResponse;

/** Optional parameters. */
export interface MonitorsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type MonitorsListByResourceGroupResponse = LogzMonitorResourceListResponse;

/** Optional parameters. */
export interface MonitorsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MonitorsGetResponse = LogzMonitorResource;

/** Optional parameters. */
export interface MonitorsCreateOptionalParams
  extends coreClient.OperationOptions {
  body?: LogzMonitorResource;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type MonitorsCreateResponse = LogzMonitorResource;

/** Optional parameters. */
export interface MonitorsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The parameters for a PATCH request to a monitor resource. */
  body?: LogzMonitorResourceUpdateParameters;
}

/** Contains response data for the update operation. */
export type MonitorsUpdateResponse = LogzMonitorResource;

/** Optional parameters. */
export interface MonitorsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface MonitorsListUserRolesOptionalParams
  extends coreClient.OperationOptions {
  /** Request for checking user's role for Logz.io account. */
  body?: UserRoleRequest;
}

/** Contains response data for the listUserRoles operation. */
export type MonitorsListUserRolesResponse = UserRoleListResponse;

/** Optional parameters. */
export interface MonitorsListMonitoredResourcesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMonitoredResourcesNext operation. */
export type MonitorsListMonitoredResourcesNextResponse = MonitoredResourceListResponse;

/** Optional parameters. */
export interface MonitorsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type MonitorsListBySubscriptionNextResponse = LogzMonitorResourceListResponse;

/** Optional parameters. */
export interface MonitorsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type MonitorsListByResourceGroupNextResponse = LogzMonitorResourceListResponse;

/** Optional parameters. */
export interface MonitorsListUserRolesNextOptionalParams
  extends coreClient.OperationOptions {
  /** Request for checking user's role for Logz.io account. */
  body?: UserRoleRequest;
}

/** Contains response data for the listUserRolesNext operation. */
export type MonitorsListUserRolesNextResponse = UserRoleListResponse;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface TagRulesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TagRulesListResponse = MonitoringTagRulesListResponse;

/** Optional parameters. */
export interface TagRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Capture logs and metrics of Azure resources based on ARM tags. */
  body?: MonitoringTagRules;
}

/** Contains response data for the createOrUpdate operation. */
export type TagRulesCreateOrUpdateResponse = MonitoringTagRules;

/** Optional parameters. */
export interface TagRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TagRulesGetResponse = MonitoringTagRules;

/** Optional parameters. */
export interface TagRulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the delete operation. */
export type TagRulesDeleteResponse = TagRulesDeleteHeaders;

/** Optional parameters. */
export interface TagRulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TagRulesListNextResponse = MonitoringTagRulesListResponse;

/** Optional parameters. */
export interface SingleSignOnListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SingleSignOnListResponse = LogzSingleSignOnResourceListResponse;

/** Optional parameters. */
export interface SingleSignOnCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  body?: LogzSingleSignOnResource;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SingleSignOnCreateOrUpdateResponse = LogzSingleSignOnResource;

/** Optional parameters. */
export interface SingleSignOnGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SingleSignOnGetResponse = LogzSingleSignOnResource;

/** Optional parameters. */
export interface SingleSignOnListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SingleSignOnListNextResponse = LogzSingleSignOnResourceListResponse;

/** Optional parameters. */
export interface SubAccountListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SubAccountListResponse = LogzMonitorResourceListResponse;

/** Optional parameters. */
export interface SubAccountCreateOptionalParams
  extends coreClient.OperationOptions {
  body?: LogzMonitorResource;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type SubAccountCreateResponse = LogzMonitorResource;

/** Optional parameters. */
export interface SubAccountGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SubAccountGetResponse = LogzMonitorResource;

/** Optional parameters. */
export interface SubAccountDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SubAccountUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The parameters for a PATCH request to a monitor resource. */
  body?: LogzMonitorResourceUpdateParameters;
}

/** Contains response data for the update operation. */
export type SubAccountUpdateResponse = LogzMonitorResource;

/** Optional parameters. */
export interface SubAccountListMonitoredResourcesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMonitoredResources operation. */
export type SubAccountListMonitoredResourcesResponse = MonitoredResourceListResponse;

/** Optional parameters. */
export interface SubAccountVMHostPayloadOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the vMHostPayload operation. */
export type SubAccountVMHostPayloadResponse = VMExtensionPayload;

/** Optional parameters. */
export interface SubAccountListVmHostUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Request body to update the collection for agent installed in the given monitor. */
  body?: VMHostUpdateRequest;
}

/** Contains response data for the listVmHostUpdate operation. */
export type SubAccountListVmHostUpdateResponse = VMResourcesListResponse;

/** Optional parameters. */
export interface SubAccountListVMHostsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVMHosts operation. */
export type SubAccountListVMHostsResponse = VMResourcesListResponse;

/** Optional parameters. */
export interface SubAccountListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SubAccountListNextResponse = LogzMonitorResourceListResponse;

/** Optional parameters. */
export interface SubAccountListMonitoredResourcesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMonitoredResourcesNext operation. */
export type SubAccountListMonitoredResourcesNextResponse = MonitoredResourceListResponse;

/** Optional parameters. */
export interface SubAccountListVmHostUpdateNextOptionalParams
  extends coreClient.OperationOptions {
  /** Request body to update the collection for agent installed in the given monitor. */
  body?: VMHostUpdateRequest;
}

/** Contains response data for the listVmHostUpdateNext operation. */
export type SubAccountListVmHostUpdateNextResponse = VMResourcesListResponse;

/** Optional parameters. */
export interface SubAccountListVMHostsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVMHostsNext operation. */
export type SubAccountListVMHostsNextResponse = VMResourcesListResponse;

/** Optional parameters. */
export interface SubAccountTagRulesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SubAccountTagRulesListResponse = MonitoringTagRulesListResponse;

/** Optional parameters. */
export interface SubAccountTagRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Capture logs and metrics of Azure resources based on ARM tags. */
  body?: MonitoringTagRules;
}

/** Contains response data for the createOrUpdate operation. */
export type SubAccountTagRulesCreateOrUpdateResponse = MonitoringTagRules;

/** Optional parameters. */
export interface SubAccountTagRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SubAccountTagRulesGetResponse = MonitoringTagRules;

/** Optional parameters. */
export interface SubAccountTagRulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the delete operation. */
export type SubAccountTagRulesDeleteResponse = SubAccountTagRulesDeleteHeaders;

/** Optional parameters. */
export interface SubAccountTagRulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SubAccountTagRulesListNextResponse = MonitoringTagRulesListResponse;

/** Optional parameters. */
export interface MonitorVMHostPayloadOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the vMHostPayload operation. */
export type MonitorVMHostPayloadResponse = VMExtensionPayload;

/** Optional parameters. */
export interface MonitorListVmHostUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Request body to update the collection for agent installed in the given monitor. */
  body?: VMHostUpdateRequest;
}

/** Contains response data for the listVmHostUpdate operation. */
export type MonitorListVmHostUpdateResponse = VMResourcesListResponse;

/** Optional parameters. */
export interface MonitorListVMHostsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVMHosts operation. */
export type MonitorListVMHostsResponse = VMResourcesListResponse;

/** Optional parameters. */
export interface MonitorListVmHostUpdateNextOptionalParams
  extends coreClient.OperationOptions {
  /** Request body to update the collection for agent installed in the given monitor. */
  body?: VMHostUpdateRequest;
}

/** Contains response data for the listVmHostUpdateNext operation. */
export type MonitorListVmHostUpdateNextResponse = VMResourcesListResponse;

/** Optional parameters. */
export interface MonitorListVMHostsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVMHostsNext operation. */
export type MonitorListVMHostsNextResponse = VMResourcesListResponse;

/** Optional parameters. */
export interface MicrosoftLogzOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
