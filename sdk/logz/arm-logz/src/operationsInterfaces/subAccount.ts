/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  LogzMonitorResource,
  SubAccountListOptionalParams,
  MonitoredResource,
  SubAccountListMonitoredResourcesOptionalParams,
  VMResources,
  SubAccountListVmHostUpdateOptionalParams,
  SubAccountListVMHostsOptionalParams,
  SubAccountCreateOptionalParams,
  SubAccountCreateResponse,
  SubAccountGetOptionalParams,
  SubAccountGetResponse,
  SubAccountDeleteOptionalParams,
  SubAccountUpdateOptionalParams,
  SubAccountUpdateResponse,
  SubAccountVMHostPayloadOptionalParams,
  SubAccountVMHostPayloadResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SubAccount. */
export interface SubAccount {
  /**
   * List the sub account under a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    monitorName: string,
    options?: SubAccountListOptionalParams
  ): PagedAsyncIterableIterator<LogzMonitorResource>;
  /**
   * List the resources currently being monitored by the Logz sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  listMonitoredResources(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListMonitoredResourcesOptionalParams
  ): PagedAsyncIterableIterator<MonitoredResource>;
  /**
   * Sending request to update the collection when Logz.io agent has been installed on a VM for a given
   * monitor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  listVmHostUpdate(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListVmHostUpdateOptionalParams
  ): PagedAsyncIterableIterator<VMResources>;
  /**
   * List the compute resources currently being monitored by the Logz sub account resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  listVMHosts(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountListVMHostsOptionalParams
  ): PagedAsyncIterableIterator<VMResources>;
  /**
   * Create sub account under a given monitor resource. This create operation can take upto 10 minutes to
   * complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SubAccountCreateResponse>,
      SubAccountCreateResponse
    >
  >;
  /**
   * Create sub account under a given monitor resource. This create operation can take upto 10 minutes to
   * complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountCreateOptionalParams
  ): Promise<SubAccountCreateResponse>;
  /**
   * Get a sub account under a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountGetOptionalParams
  ): Promise<SubAccountGetResponse>;
  /**
   * Delete a sub account resource. This delete operation can take upto 10 minutes to complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete a sub account resource. This delete operation can take upto 10 minutes to complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountDeleteOptionalParams
  ): Promise<void>;
  /**
   * Update a monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountUpdateOptionalParams
  ): Promise<SubAccountUpdateResponse>;
  /**
   * Returns the payload that needs to be passed as a request for installing Logz.io agent on a VM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param subAccountName Sub Account resource name
   * @param options The options parameters.
   */
  vMHostPayload(
    resourceGroupName: string,
    monitorName: string,
    subAccountName: string,
    options?: SubAccountVMHostPayloadOptionalParams
  ): Promise<SubAccountVMHostPayloadResponse>;
}
