/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { MigrationRecoveryPoints } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import {
  MigrationRecoveryPoint,
  MigrationRecoveryPointsListByReplicationMigrationItemsNextOptionalParams,
  MigrationRecoveryPointsListByReplicationMigrationItemsOptionalParams,
  MigrationRecoveryPointsListByReplicationMigrationItemsResponse,
  MigrationRecoveryPointsGetOptionalParams,
  MigrationRecoveryPointsGetResponse,
  MigrationRecoveryPointsListByReplicationMigrationItemsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing MigrationRecoveryPoints operations. */
export class MigrationRecoveryPointsImpl implements MigrationRecoveryPoints {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class MigrationRecoveryPoints class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Gets the recovery points for a migration item.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric unique name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param options The options parameters.
   */
  public listByReplicationMigrationItems(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: MigrationRecoveryPointsListByReplicationMigrationItemsOptionalParams
  ): PagedAsyncIterableIterator<MigrationRecoveryPoint> {
    const iter = this.listByReplicationMigrationItemsPagingAll(
      resourceName,
      resourceGroupName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByReplicationMigrationItemsPagingPage(
          resourceName,
          resourceGroupName,
          fabricName,
          protectionContainerName,
          migrationItemName,
          options,
          settings
        );
      }
    };
  }

  private async *listByReplicationMigrationItemsPagingPage(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: MigrationRecoveryPointsListByReplicationMigrationItemsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<MigrationRecoveryPoint[]> {
    let result: MigrationRecoveryPointsListByReplicationMigrationItemsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByReplicationMigrationItems(
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByReplicationMigrationItemsNext(
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByReplicationMigrationItemsPagingAll(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: MigrationRecoveryPointsListByReplicationMigrationItemsOptionalParams
  ): AsyncIterableIterator<MigrationRecoveryPoint> {
    for await (const page of this.listByReplicationMigrationItemsPagingPage(
      resourceName,
      resourceGroupName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the recovery points for a migration item.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric unique name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param options The options parameters.
   */
  private _listByReplicationMigrationItems(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: MigrationRecoveryPointsListByReplicationMigrationItemsOptionalParams
  ): Promise<MigrationRecoveryPointsListByReplicationMigrationItemsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        options
      },
      listByReplicationMigrationItemsOperationSpec
    );
  }

  /**
   * Gets a recovery point for a migration item.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric unique name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param migrationRecoveryPointName The migration recovery point name.
   * @param options The options parameters.
   */
  get(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    migrationRecoveryPointName: string,
    options?: MigrationRecoveryPointsGetOptionalParams
  ): Promise<MigrationRecoveryPointsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        migrationRecoveryPointName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * ListByReplicationMigrationItemsNext
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric unique name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByReplicationMigrationItems method.
   * @param options The options parameters.
   */
  private _listByReplicationMigrationItemsNext(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    nextLink: string,
    options?: MigrationRecoveryPointsListByReplicationMigrationItemsNextOptionalParams
  ): Promise<
    MigrationRecoveryPointsListByReplicationMigrationItemsNextResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        nextLink,
        options
      },
      listByReplicationMigrationItemsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationMigrationItemsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationRecoveryPointCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints/{migrationRecoveryPointName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationRecoveryPoint
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
    Parameters.migrationRecoveryPointName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByReplicationMigrationItemsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationRecoveryPointCollection
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
