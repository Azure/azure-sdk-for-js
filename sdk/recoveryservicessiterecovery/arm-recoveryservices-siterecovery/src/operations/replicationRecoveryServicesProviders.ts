/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ReplicationRecoveryServicesProviders } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  RecoveryServicesProvider,
  ReplicationRecoveryServicesProvidersListByReplicationFabricsNextOptionalParams,
  ReplicationRecoveryServicesProvidersListByReplicationFabricsOptionalParams,
  ReplicationRecoveryServicesProvidersListByReplicationFabricsResponse,
  ReplicationRecoveryServicesProvidersListNextOptionalParams,
  ReplicationRecoveryServicesProvidersListOptionalParams,
  ReplicationRecoveryServicesProvidersListResponse,
  ReplicationRecoveryServicesProvidersGetOptionalParams,
  ReplicationRecoveryServicesProvidersGetResponse,
  AddRecoveryServicesProviderInput,
  ReplicationRecoveryServicesProvidersCreateOptionalParams,
  ReplicationRecoveryServicesProvidersCreateResponse,
  ReplicationRecoveryServicesProvidersPurgeOptionalParams,
  ReplicationRecoveryServicesProvidersRefreshProviderOptionalParams,
  ReplicationRecoveryServicesProvidersRefreshProviderResponse,
  ReplicationRecoveryServicesProvidersDeleteOptionalParams,
  ReplicationRecoveryServicesProvidersListByReplicationFabricsNextResponse,
  ReplicationRecoveryServicesProvidersListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationRecoveryServicesProviders operations. */
export class ReplicationRecoveryServicesProvidersImpl
  implements ReplicationRecoveryServicesProviders {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationRecoveryServicesProviders class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists the registered recovery services providers for the specified fabric.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  public listByReplicationFabrics(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    options?: ReplicationRecoveryServicesProvidersListByReplicationFabricsOptionalParams
  ): PagedAsyncIterableIterator<RecoveryServicesProvider> {
    const iter = this.listByReplicationFabricsPagingAll(
      resourceName,
      resourceGroupName,
      fabricName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByReplicationFabricsPagingPage(
          resourceName,
          resourceGroupName,
          fabricName,
          options,
          settings
        );
      }
    };
  }

  private async *listByReplicationFabricsPagingPage(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    options?: ReplicationRecoveryServicesProvidersListByReplicationFabricsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<RecoveryServicesProvider[]> {
    let result: ReplicationRecoveryServicesProvidersListByReplicationFabricsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByReplicationFabrics(
        resourceName,
        resourceGroupName,
        fabricName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByReplicationFabricsNext(
        resourceName,
        resourceGroupName,
        fabricName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByReplicationFabricsPagingAll(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    options?: ReplicationRecoveryServicesProvidersListByReplicationFabricsOptionalParams
  ): AsyncIterableIterator<RecoveryServicesProvider> {
    for await (const page of this.listByReplicationFabricsPagingPage(
      resourceName,
      resourceGroupName,
      fabricName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the registered recovery services providers in the vault.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param options The options parameters.
   */
  public list(
    resourceName: string,
    resourceGroupName: string,
    options?: ReplicationRecoveryServicesProvidersListOptionalParams
  ): PagedAsyncIterableIterator<RecoveryServicesProvider> {
    const iter = this.listPagingAll(resourceName, resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceName,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceName: string,
    resourceGroupName: string,
    options?: ReplicationRecoveryServicesProvidersListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<RecoveryServicesProvider[]> {
    let result: ReplicationRecoveryServicesProvidersListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceName, resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceName,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceName: string,
    resourceGroupName: string,
    options?: ReplicationRecoveryServicesProvidersListOptionalParams
  ): AsyncIterableIterator<RecoveryServicesProvider> {
    for await (const page of this.listPagingPage(
      resourceName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the registered recovery services providers for the specified fabric.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  private _listByReplicationFabrics(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    options?: ReplicationRecoveryServicesProvidersListByReplicationFabricsOptionalParams
  ): Promise<
    ReplicationRecoveryServicesProvidersListByReplicationFabricsResponse
  > {
    return this.client.sendOperationRequest(
      { resourceName, resourceGroupName, fabricName, options },
      listByReplicationFabricsOperationSpec
    );
  }

  /**
   * Gets the details of registered recovery services provider.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param providerName Recovery services provider name.
   * @param options The options parameters.
   */
  get(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    providerName: string,
    options?: ReplicationRecoveryServicesProvidersGetOptionalParams
  ): Promise<ReplicationRecoveryServicesProvidersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceName, resourceGroupName, fabricName, providerName, options },
      getOperationSpec
    );
  }

  /**
   * The operation to add a recovery services provider.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param providerName Recovery services provider name.
   * @param addProviderInput Add provider input.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    providerName: string,
    addProviderInput: AddRecoveryServicesProviderInput,
    options?: ReplicationRecoveryServicesProvidersCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryServicesProvidersCreateResponse>,
      ReplicationRecoveryServicesProvidersCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryServicesProvidersCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceName,
        resourceGroupName,
        fabricName,
        providerName,
        addProviderInput,
        options
      },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to add a recovery services provider.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param providerName Recovery services provider name.
   * @param addProviderInput Add provider input.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    providerName: string,
    addProviderInput: AddRecoveryServicesProviderInput,
    options?: ReplicationRecoveryServicesProvidersCreateOptionalParams
  ): Promise<ReplicationRecoveryServicesProvidersCreateResponse> {
    const poller = await this.beginCreate(
      resourceName,
      resourceGroupName,
      fabricName,
      providerName,
      addProviderInput,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to purge(force delete) a recovery services provider from the vault.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param providerName Recovery services provider name.
   * @param options The options parameters.
   */
  async beginPurge(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    providerName: string,
    options?: ReplicationRecoveryServicesProvidersPurgeOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceName, resourceGroupName, fabricName, providerName, options },
      purgeOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to purge(force delete) a recovery services provider from the vault.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param providerName Recovery services provider name.
   * @param options The options parameters.
   */
  async beginPurgeAndWait(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    providerName: string,
    options?: ReplicationRecoveryServicesProvidersPurgeOptionalParams
  ): Promise<void> {
    const poller = await this.beginPurge(
      resourceName,
      resourceGroupName,
      fabricName,
      providerName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to refresh the information from the recovery services provider.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param providerName Recovery services provider name.
   * @param options The options parameters.
   */
  async beginRefreshProvider(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    providerName: string,
    options?: ReplicationRecoveryServicesProvidersRefreshProviderOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        ReplicationRecoveryServicesProvidersRefreshProviderResponse
      >,
      ReplicationRecoveryServicesProvidersRefreshProviderResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryServicesProvidersRefreshProviderResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceName, resourceGroupName, fabricName, providerName, options },
      refreshProviderOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to refresh the information from the recovery services provider.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param providerName Recovery services provider name.
   * @param options The options parameters.
   */
  async beginRefreshProviderAndWait(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    providerName: string,
    options?: ReplicationRecoveryServicesProvidersRefreshProviderOptionalParams
  ): Promise<ReplicationRecoveryServicesProvidersRefreshProviderResponse> {
    const poller = await this.beginRefreshProvider(
      resourceName,
      resourceGroupName,
      fabricName,
      providerName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to removes/delete(unregister) a recovery services provider from the vault.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param providerName Recovery services provider name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    providerName: string,
    options?: ReplicationRecoveryServicesProvidersDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceName, resourceGroupName, fabricName, providerName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to removes/delete(unregister) a recovery services provider from the vault.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param providerName Recovery services provider name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    providerName: string,
    options?: ReplicationRecoveryServicesProvidersDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceName,
      resourceGroupName,
      fabricName,
      providerName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the registered recovery services providers in the vault.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param options The options parameters.
   */
  private _list(
    resourceName: string,
    resourceGroupName: string,
    options?: ReplicationRecoveryServicesProvidersListOptionalParams
  ): Promise<ReplicationRecoveryServicesProvidersListResponse> {
    return this.client.sendOperationRequest(
      { resourceName, resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * ListByReplicationFabricsNext
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
   *                 method.
   * @param options The options parameters.
   */
  private _listByReplicationFabricsNext(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    nextLink: string,
    options?: ReplicationRecoveryServicesProvidersListByReplicationFabricsNextOptionalParams
  ): Promise<
    ReplicationRecoveryServicesProvidersListByReplicationFabricsNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceName, resourceGroupName, fabricName, nextLink, options },
      listByReplicationFabricsNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: ReplicationRecoveryServicesProvidersListNextOptionalParams
  ): Promise<ReplicationRecoveryServicesProvidersListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceName, resourceGroupName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationFabricsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryServicesProviderCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryServicesProvider
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.providerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryServicesProvider
    },
    201: {
      bodyMapper: Mappers.RecoveryServicesProvider
    },
    202: {
      bodyMapper: Mappers.RecoveryServicesProvider
    },
    204: {
      bodyMapper: Mappers.RecoveryServicesProvider
    }
  },
  requestBody: Parameters.addProviderInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.providerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const purgeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.providerName
  ],
  serializer
};
const refreshProviderOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/refreshProvider",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryServicesProvider
    },
    201: {
      bodyMapper: Mappers.RecoveryServicesProvider
    },
    202: {
      bodyMapper: Mappers.RecoveryServicesProvider
    },
    204: {
      bodyMapper: Mappers.RecoveryServicesProvider
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.providerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/remove",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.providerName
  ],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryServicesProviders",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryServicesProviderCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByReplicationFabricsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryServicesProviderCollection
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryServicesProviderCollection
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
