/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ReplicationJobs } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Job,
  ReplicationJobsListNextOptionalParams,
  ReplicationJobsListOptionalParams,
  ReplicationJobsListResponse,
  ReplicationJobsGetOptionalParams,
  ReplicationJobsGetResponse,
  ReplicationJobsCancelOptionalParams,
  ReplicationJobsCancelResponse,
  ReplicationJobsRestartOptionalParams,
  ReplicationJobsRestartResponse,
  ResumeJobParams,
  ReplicationJobsResumeOptionalParams,
  ReplicationJobsResumeResponse,
  JobQueryParameter,
  ReplicationJobsExportOptionalParams,
  ReplicationJobsExportResponse,
  ReplicationJobsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationJobs operations. */
export class ReplicationJobsImpl implements ReplicationJobs {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationJobs class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of Azure Site Recovery Jobs for the vault.
   * @param options The options parameters.
   */
  public list(
    options?: ReplicationJobsListOptionalParams
  ): PagedAsyncIterableIterator<Job> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ReplicationJobsListOptionalParams
  ): AsyncIterableIterator<Job[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ReplicationJobsListOptionalParams
  ): AsyncIterableIterator<Job> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the list of Azure Site Recovery Jobs for the vault.
   * @param options The options parameters.
   */
  private _list(
    options?: ReplicationJobsListOptionalParams
  ): Promise<ReplicationJobsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Get the details of an Azure Site Recovery job.
   * @param jobName Job identifier.
   * @param options The options parameters.
   */
  get(
    jobName: string,
    options?: ReplicationJobsGetOptionalParams
  ): Promise<ReplicationJobsGetResponse> {
    return this.client.sendOperationRequest(
      { jobName, options },
      getOperationSpec
    );
  }

  /**
   * The operation to cancel an Azure Site Recovery job.
   * @param jobName Job identifier.
   * @param options The options parameters.
   */
  async beginCancel(
    jobName: string,
    options?: ReplicationJobsCancelOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationJobsCancelResponse>,
      ReplicationJobsCancelResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationJobsCancelResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { jobName, options },
      cancelOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to cancel an Azure Site Recovery job.
   * @param jobName Job identifier.
   * @param options The options parameters.
   */
  async beginCancelAndWait(
    jobName: string,
    options?: ReplicationJobsCancelOptionalParams
  ): Promise<ReplicationJobsCancelResponse> {
    const poller = await this.beginCancel(jobName, options);
    return poller.pollUntilDone();
  }

  /**
   * The operation to restart an Azure Site Recovery job.
   * @param jobName Job identifier.
   * @param options The options parameters.
   */
  async beginRestart(
    jobName: string,
    options?: ReplicationJobsRestartOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationJobsRestartResponse>,
      ReplicationJobsRestartResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationJobsRestartResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { jobName, options },
      restartOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to restart an Azure Site Recovery job.
   * @param jobName Job identifier.
   * @param options The options parameters.
   */
  async beginRestartAndWait(
    jobName: string,
    options?: ReplicationJobsRestartOptionalParams
  ): Promise<ReplicationJobsRestartResponse> {
    const poller = await this.beginRestart(jobName, options);
    return poller.pollUntilDone();
  }

  /**
   * The operation to resume an Azure Site Recovery job.
   * @param jobName Job identifier.
   * @param resumeJobParams Resume rob comments.
   * @param options The options parameters.
   */
  async beginResume(
    jobName: string,
    resumeJobParams: ResumeJobParams,
    options?: ReplicationJobsResumeOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationJobsResumeResponse>,
      ReplicationJobsResumeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationJobsResumeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { jobName, resumeJobParams, options },
      resumeOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to resume an Azure Site Recovery job.
   * @param jobName Job identifier.
   * @param resumeJobParams Resume rob comments.
   * @param options The options parameters.
   */
  async beginResumeAndWait(
    jobName: string,
    resumeJobParams: ResumeJobParams,
    options?: ReplicationJobsResumeOptionalParams
  ): Promise<ReplicationJobsResumeResponse> {
    const poller = await this.beginResume(jobName, resumeJobParams, options);
    return poller.pollUntilDone();
  }

  /**
   * The operation to export the details of the Azure Site Recovery jobs of the vault.
   * @param jobQueryParameter job query filter.
   * @param options The options parameters.
   */
  async beginExport(
    jobQueryParameter: JobQueryParameter,
    options?: ReplicationJobsExportOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationJobsExportResponse>,
      ReplicationJobsExportResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationJobsExportResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { jobQueryParameter, options },
      exportOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to export the details of the Azure Site Recovery jobs of the vault.
   * @param jobQueryParameter job query filter.
   * @param options The options parameters.
   */
  async beginExportAndWait(
    jobQueryParameter: JobQueryParameter,
    options?: ReplicationJobsExportOptionalParams
  ): Promise<ReplicationJobsExportResponse> {
    const poller = await this.beginExport(jobQueryParameter, options);
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ReplicationJobsListNextOptionalParams
  ): Promise<ReplicationJobsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobCollection
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    201: {
      bodyMapper: Mappers.Job
    },
    202: {
      bodyMapper: Mappers.Job
    },
    204: {
      bodyMapper: Mappers.Job
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const restartOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/restart",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    201: {
      bodyMapper: Mappers.Job
    },
    202: {
      bodyMapper: Mappers.Job
    },
    204: {
      bodyMapper: Mappers.Job
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resumeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/resume",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    201: {
      bodyMapper: Mappers.Job
    },
    202: {
      bodyMapper: Mappers.Job
    },
    204: {
      bodyMapper: Mappers.Job
    }
  },
  requestBody: Parameters.resumeJobParams,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const exportOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/export",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    201: {
      bodyMapper: Mappers.Job
    },
    202: {
      bodyMapper: Mappers.Job
    },
    204: {
      bodyMapper: Mappers.Job
    }
  },
  requestBody: Parameters.jobQueryParameter,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobCollection
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
