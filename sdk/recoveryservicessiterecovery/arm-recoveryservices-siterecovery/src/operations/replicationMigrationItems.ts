/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ReplicationMigrationItems } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  MigrationItem,
  ReplicationMigrationItemsListByReplicationProtectionContainersNextOptionalParams,
  ReplicationMigrationItemsListByReplicationProtectionContainersOptionalParams,
  ReplicationMigrationItemsListNextOptionalParams,
  ReplicationMigrationItemsListOptionalParams,
  ReplicationMigrationItemsListByReplicationProtectionContainersResponse,
  ReplicationMigrationItemsGetOptionalParams,
  ReplicationMigrationItemsGetResponse,
  EnableMigrationInput,
  ReplicationMigrationItemsCreateOptionalParams,
  ReplicationMigrationItemsCreateResponse,
  ReplicationMigrationItemsDeleteOptionalParams,
  UpdateMigrationItemInput,
  ReplicationMigrationItemsUpdateOptionalParams,
  ReplicationMigrationItemsUpdateResponse,
  MigrateInput,
  ReplicationMigrationItemsMigrateOptionalParams,
  ReplicationMigrationItemsMigrateResponse,
  ResyncInput,
  ReplicationMigrationItemsResyncOptionalParams,
  ReplicationMigrationItemsResyncResponse,
  TestMigrateInput,
  ReplicationMigrationItemsTestMigrateOptionalParams,
  ReplicationMigrationItemsTestMigrateResponse,
  TestMigrateCleanupInput,
  ReplicationMigrationItemsTestMigrateCleanupOptionalParams,
  ReplicationMigrationItemsTestMigrateCleanupResponse,
  ReplicationMigrationItemsListResponse,
  ReplicationMigrationItemsListByReplicationProtectionContainersNextResponse,
  ReplicationMigrationItemsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationMigrationItems operations. */
export class ReplicationMigrationItemsImpl
  implements ReplicationMigrationItems {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationMigrationItems class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of ASR migration items in the protection container.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The options parameters.
   */
  public listByReplicationProtectionContainers(
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationMigrationItemsListByReplicationProtectionContainersOptionalParams
  ): PagedAsyncIterableIterator<MigrationItem> {
    const iter = this.listByReplicationProtectionContainersPagingAll(
      fabricName,
      protectionContainerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByReplicationProtectionContainersPagingPage(
          fabricName,
          protectionContainerName,
          options
        );
      }
    };
  }

  private async *listByReplicationProtectionContainersPagingPage(
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationMigrationItemsListByReplicationProtectionContainersOptionalParams
  ): AsyncIterableIterator<MigrationItem[]> {
    let result = await this._listByReplicationProtectionContainers(
      fabricName,
      protectionContainerName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByReplicationProtectionContainersNext(
        fabricName,
        protectionContainerName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByReplicationProtectionContainersPagingAll(
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationMigrationItemsListByReplicationProtectionContainersOptionalParams
  ): AsyncIterableIterator<MigrationItem> {
    for await (const page of this.listByReplicationProtectionContainersPagingPage(
      fabricName,
      protectionContainerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of migration items in the vault.
   * @param options The options parameters.
   */
  public list(
    options?: ReplicationMigrationItemsListOptionalParams
  ): PagedAsyncIterableIterator<MigrationItem> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ReplicationMigrationItemsListOptionalParams
  ): AsyncIterableIterator<MigrationItem[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ReplicationMigrationItemsListOptionalParams
  ): AsyncIterableIterator<MigrationItem> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the list of ASR migration items in the protection container.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The options parameters.
   */
  private _listByReplicationProtectionContainers(
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationMigrationItemsListByReplicationProtectionContainersOptionalParams
  ): Promise<
    ReplicationMigrationItemsListByReplicationProtectionContainersResponse
  > {
    return this.client.sendOperationRequest(
      { fabricName, protectionContainerName, options },
      listByReplicationProtectionContainersOperationSpec
    );
  }

  /**
   * Gets the details of a migration item.
   * @param fabricName Fabric unique name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param options The options parameters.
   */
  get(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: ReplicationMigrationItemsGetOptionalParams
  ): Promise<ReplicationMigrationItemsGetResponse> {
    return this.client.sendOperationRequest(
      { fabricName, protectionContainerName, migrationItemName, options },
      getOperationSpec
    );
  }

  /**
   * The operation to create an ASR migration item (enable migration).
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Enable migration input.
   * @param options The options parameters.
   */
  async beginCreate(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: EnableMigrationInput,
    options?: ReplicationMigrationItemsCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationMigrationItemsCreateResponse>,
      ReplicationMigrationItemsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationMigrationItemsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        fabricName,
        protectionContainerName,
        migrationItemName,
        input,
        options
      },
      createOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to create an ASR migration item (enable migration).
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Enable migration input.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: EnableMigrationInput,
    options?: ReplicationMigrationItemsCreateOptionalParams
  ): Promise<ReplicationMigrationItemsCreateResponse> {
    const poller = await this.beginCreate(
      fabricName,
      protectionContainerName,
      migrationItemName,
      input,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to delete an ASR migration item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param options The options parameters.
   */
  async beginDelete(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: ReplicationMigrationItemsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { fabricName, protectionContainerName, migrationItemName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to delete an ASR migration item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: ReplicationMigrationItemsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      fabricName,
      protectionContainerName,
      migrationItemName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to update the recovery settings of an ASR migration item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Update migration item input.
   * @param options The options parameters.
   */
  async beginUpdate(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: UpdateMigrationItemInput,
    options?: ReplicationMigrationItemsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationMigrationItemsUpdateResponse>,
      ReplicationMigrationItemsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationMigrationItemsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        fabricName,
        protectionContainerName,
        migrationItemName,
        input,
        options
      },
      updateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to update the recovery settings of an ASR migration item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Update migration item input.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: UpdateMigrationItemInput,
    options?: ReplicationMigrationItemsUpdateOptionalParams
  ): Promise<ReplicationMigrationItemsUpdateResponse> {
    const poller = await this.beginUpdate(
      fabricName,
      protectionContainerName,
      migrationItemName,
      input,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to initiate migration of the item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param migrateInput Migrate input.
   * @param options The options parameters.
   */
  async beginMigrate(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    migrateInput: MigrateInput,
    options?: ReplicationMigrationItemsMigrateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationMigrationItemsMigrateResponse>,
      ReplicationMigrationItemsMigrateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationMigrationItemsMigrateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        fabricName,
        protectionContainerName,
        migrationItemName,
        migrateInput,
        options
      },
      migrateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to initiate migration of the item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param migrateInput Migrate input.
   * @param options The options parameters.
   */
  async beginMigrateAndWait(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    migrateInput: MigrateInput,
    options?: ReplicationMigrationItemsMigrateOptionalParams
  ): Promise<ReplicationMigrationItemsMigrateResponse> {
    const poller = await this.beginMigrate(
      fabricName,
      protectionContainerName,
      migrationItemName,
      migrateInput,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to resynchronize replication of an ASR migration item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Resync input.
   * @param options The options parameters.
   */
  async beginResync(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: ResyncInput,
    options?: ReplicationMigrationItemsResyncOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationMigrationItemsResyncResponse>,
      ReplicationMigrationItemsResyncResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationMigrationItemsResyncResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        fabricName,
        protectionContainerName,
        migrationItemName,
        input,
        options
      },
      resyncOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to resynchronize replication of an ASR migration item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Resync input.
   * @param options The options parameters.
   */
  async beginResyncAndWait(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: ResyncInput,
    options?: ReplicationMigrationItemsResyncOptionalParams
  ): Promise<ReplicationMigrationItemsResyncResponse> {
    const poller = await this.beginResync(
      fabricName,
      protectionContainerName,
      migrationItemName,
      input,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to initiate test migration of the item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param testMigrateInput Test migrate input.
   * @param options The options parameters.
   */
  async beginTestMigrate(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    testMigrateInput: TestMigrateInput,
    options?: ReplicationMigrationItemsTestMigrateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationMigrationItemsTestMigrateResponse>,
      ReplicationMigrationItemsTestMigrateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationMigrationItemsTestMigrateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        fabricName,
        protectionContainerName,
        migrationItemName,
        testMigrateInput,
        options
      },
      testMigrateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to initiate test migration of the item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param testMigrateInput Test migrate input.
   * @param options The options parameters.
   */
  async beginTestMigrateAndWait(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    testMigrateInput: TestMigrateInput,
    options?: ReplicationMigrationItemsTestMigrateOptionalParams
  ): Promise<ReplicationMigrationItemsTestMigrateResponse> {
    const poller = await this.beginTestMigrate(
      fabricName,
      protectionContainerName,
      migrationItemName,
      testMigrateInput,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to initiate test migrate cleanup.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param testMigrateCleanupInput Test migrate cleanup input.
   * @param options The options parameters.
   */
  async beginTestMigrateCleanup(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    testMigrateCleanupInput: TestMigrateCleanupInput,
    options?: ReplicationMigrationItemsTestMigrateCleanupOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationMigrationItemsTestMigrateCleanupResponse>,
      ReplicationMigrationItemsTestMigrateCleanupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationMigrationItemsTestMigrateCleanupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        fabricName,
        protectionContainerName,
        migrationItemName,
        testMigrateCleanupInput,
        options
      },
      testMigrateCleanupOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to initiate test migrate cleanup.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param testMigrateCleanupInput Test migrate cleanup input.
   * @param options The options parameters.
   */
  async beginTestMigrateCleanupAndWait(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    testMigrateCleanupInput: TestMigrateCleanupInput,
    options?: ReplicationMigrationItemsTestMigrateCleanupOptionalParams
  ): Promise<ReplicationMigrationItemsTestMigrateCleanupResponse> {
    const poller = await this.beginTestMigrateCleanup(
      fabricName,
      protectionContainerName,
      migrationItemName,
      testMigrateCleanupInput,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the list of migration items in the vault.
   * @param options The options parameters.
   */
  private _list(
    options?: ReplicationMigrationItemsListOptionalParams
  ): Promise<ReplicationMigrationItemsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListByReplicationProtectionContainersNext
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByReplicationProtectionContainers method.
   * @param options The options parameters.
   */
  private _listByReplicationProtectionContainersNext(
    fabricName: string,
    protectionContainerName: string,
    nextLink: string,
    options?: ReplicationMigrationItemsListByReplicationProtectionContainersNextOptionalParams
  ): Promise<
    ReplicationMigrationItemsListByReplicationProtectionContainersNextResponse
  > {
    return this.client.sendOperationRequest(
      { fabricName, protectionContainerName, nextLink, options },
      listByReplicationProtectionContainersNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ReplicationMigrationItemsListNextOptionalParams
  ): Promise<ReplicationMigrationItemsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationProtectionContainersOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItemCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken,
    Parameters.takeToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.input3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion, Parameters.deleteOption],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.input4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const migrateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.migrateInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const resyncOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/resync",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.input5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const testMigrateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.testMigrateInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const testMigrateCleanupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrateCleanup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.testMigrateCleanupInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationMigrationItems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItemCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken,
    Parameters.takeToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByReplicationProtectionContainersNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItemCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken,
    Parameters.takeToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItemCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken,
    Parameters.takeToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
