/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ReplicationMigrationItems } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  MigrationItem,
  ReplicationMigrationItemsListByReplicationProtectionContainersNextOptionalParams,
  ReplicationMigrationItemsListByReplicationProtectionContainersOptionalParams,
  ReplicationMigrationItemsListByReplicationProtectionContainersResponse,
  ReplicationMigrationItemsListNextOptionalParams,
  ReplicationMigrationItemsListOptionalParams,
  ReplicationMigrationItemsListResponse,
  ReplicationMigrationItemsGetOptionalParams,
  ReplicationMigrationItemsGetResponse,
  EnableMigrationInput,
  ReplicationMigrationItemsCreateOptionalParams,
  ReplicationMigrationItemsCreateResponse,
  ReplicationMigrationItemsDeleteOptionalParams,
  UpdateMigrationItemInput,
  ReplicationMigrationItemsUpdateOptionalParams,
  ReplicationMigrationItemsUpdateResponse,
  MigrateInput,
  ReplicationMigrationItemsMigrateOptionalParams,
  ReplicationMigrationItemsMigrateResponse,
  PauseReplicationInput,
  ReplicationMigrationItemsPauseReplicationOptionalParams,
  ReplicationMigrationItemsPauseReplicationResponse,
  ResumeReplicationInput,
  ReplicationMigrationItemsResumeReplicationOptionalParams,
  ReplicationMigrationItemsResumeReplicationResponse,
  ResyncInput,
  ReplicationMigrationItemsResyncOptionalParams,
  ReplicationMigrationItemsResyncResponse,
  TestMigrateInput,
  ReplicationMigrationItemsTestMigrateOptionalParams,
  ReplicationMigrationItemsTestMigrateResponse,
  TestMigrateCleanupInput,
  ReplicationMigrationItemsTestMigrateCleanupOptionalParams,
  ReplicationMigrationItemsTestMigrateCleanupResponse,
  ReplicationMigrationItemsListByReplicationProtectionContainersNextResponse,
  ReplicationMigrationItemsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationMigrationItems operations. */
export class ReplicationMigrationItemsImpl
  implements ReplicationMigrationItems
{
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationMigrationItems class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of ASR migration items in the protection container.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The options parameters.
   */
  public listByReplicationProtectionContainers(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationMigrationItemsListByReplicationProtectionContainersOptionalParams,
  ): PagedAsyncIterableIterator<MigrationItem> {
    const iter = this.listByReplicationProtectionContainersPagingAll(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByReplicationProtectionContainersPagingPage(
          resourceGroupName,
          resourceName,
          fabricName,
          protectionContainerName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByReplicationProtectionContainersPagingPage(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationMigrationItemsListByReplicationProtectionContainersOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<MigrationItem[]> {
    let result: ReplicationMigrationItemsListByReplicationProtectionContainersResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByReplicationProtectionContainers(
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByReplicationProtectionContainersNext(
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByReplicationProtectionContainersPagingAll(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationMigrationItemsListByReplicationProtectionContainersOptionalParams,
  ): AsyncIterableIterator<MigrationItem> {
    for await (const page of this.listByReplicationProtectionContainersPagingPage(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of migration items in the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationMigrationItemsListOptionalParams,
  ): PagedAsyncIterableIterator<MigrationItem> {
    const iter = this.listPagingAll(resourceGroupName, resourceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          resourceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationMigrationItemsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<MigrationItem[]> {
    let result: ReplicationMigrationItemsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, resourceName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        resourceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationMigrationItemsListOptionalParams,
  ): AsyncIterableIterator<MigrationItem> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      resourceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of ASR migration items in the protection container.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The options parameters.
   */
  private _listByReplicationProtectionContainers(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationMigrationItemsListByReplicationProtectionContainersOptionalParams,
  ): Promise<ReplicationMigrationItemsListByReplicationProtectionContainersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        options,
      },
      listByReplicationProtectionContainersOperationSpec,
    );
  }

  /**
   * Gets the details of a migration item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric unique name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: ReplicationMigrationItemsGetOptionalParams,
  ): Promise<ReplicationMigrationItemsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * The operation to create an ASR migration item (enable migration).
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Enable migration input.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: EnableMigrationInput,
    options?: ReplicationMigrationItemsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationMigrationItemsCreateResponse>,
      ReplicationMigrationItemsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationMigrationItemsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        input,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationMigrationItemsCreateResponse,
      OperationState<ReplicationMigrationItemsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to create an ASR migration item (enable migration).
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Enable migration input.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: EnableMigrationInput,
    options?: ReplicationMigrationItemsCreateOptionalParams,
  ): Promise<ReplicationMigrationItemsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      input,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to delete an ASR migration item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: ReplicationMigrationItemsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to delete an ASR migration item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: ReplicationMigrationItemsDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to update the recovery settings of an ASR migration item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Update migration item input.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: UpdateMigrationItemInput,
    options?: ReplicationMigrationItemsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationMigrationItemsUpdateResponse>,
      ReplicationMigrationItemsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationMigrationItemsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        input,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationMigrationItemsUpdateResponse,
      OperationState<ReplicationMigrationItemsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to update the recovery settings of an ASR migration item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Update migration item input.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: UpdateMigrationItemInput,
    options?: ReplicationMigrationItemsUpdateOptionalParams,
  ): Promise<ReplicationMigrationItemsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      input,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to initiate migration of the item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param migrateInput Migrate input.
   * @param options The options parameters.
   */
  async beginMigrate(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    migrateInput: MigrateInput,
    options?: ReplicationMigrationItemsMigrateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationMigrationItemsMigrateResponse>,
      ReplicationMigrationItemsMigrateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationMigrationItemsMigrateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        migrateInput,
        options,
      },
      spec: migrateOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationMigrationItemsMigrateResponse,
      OperationState<ReplicationMigrationItemsMigrateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to initiate migration of the item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param migrateInput Migrate input.
   * @param options The options parameters.
   */
  async beginMigrateAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    migrateInput: MigrateInput,
    options?: ReplicationMigrationItemsMigrateOptionalParams,
  ): Promise<ReplicationMigrationItemsMigrateResponse> {
    const poller = await this.beginMigrate(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      migrateInput,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to initiate pause replication of the item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param pauseReplicationInput Pause replication input.
   * @param options The options parameters.
   */
  async beginPauseReplication(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    pauseReplicationInput: PauseReplicationInput,
    options?: ReplicationMigrationItemsPauseReplicationOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationMigrationItemsPauseReplicationResponse>,
      ReplicationMigrationItemsPauseReplicationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationMigrationItemsPauseReplicationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        pauseReplicationInput,
        options,
      },
      spec: pauseReplicationOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationMigrationItemsPauseReplicationResponse,
      OperationState<ReplicationMigrationItemsPauseReplicationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to initiate pause replication of the item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param pauseReplicationInput Pause replication input.
   * @param options The options parameters.
   */
  async beginPauseReplicationAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    pauseReplicationInput: PauseReplicationInput,
    options?: ReplicationMigrationItemsPauseReplicationOptionalParams,
  ): Promise<ReplicationMigrationItemsPauseReplicationResponse> {
    const poller = await this.beginPauseReplication(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      pauseReplicationInput,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to initiate resume replication of the item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param resumeReplicationInput Resume replication input.
   * @param options The options parameters.
   */
  async beginResumeReplication(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    resumeReplicationInput: ResumeReplicationInput,
    options?: ReplicationMigrationItemsResumeReplicationOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationMigrationItemsResumeReplicationResponse>,
      ReplicationMigrationItemsResumeReplicationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationMigrationItemsResumeReplicationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        resumeReplicationInput,
        options,
      },
      spec: resumeReplicationOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationMigrationItemsResumeReplicationResponse,
      OperationState<ReplicationMigrationItemsResumeReplicationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to initiate resume replication of the item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param resumeReplicationInput Resume replication input.
   * @param options The options parameters.
   */
  async beginResumeReplicationAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    resumeReplicationInput: ResumeReplicationInput,
    options?: ReplicationMigrationItemsResumeReplicationOptionalParams,
  ): Promise<ReplicationMigrationItemsResumeReplicationResponse> {
    const poller = await this.beginResumeReplication(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      resumeReplicationInput,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to resynchronize replication of an ASR migration item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Resync input.
   * @param options The options parameters.
   */
  async beginResync(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: ResyncInput,
    options?: ReplicationMigrationItemsResyncOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationMigrationItemsResyncResponse>,
      ReplicationMigrationItemsResyncResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationMigrationItemsResyncResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        input,
        options,
      },
      spec: resyncOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationMigrationItemsResyncResponse,
      OperationState<ReplicationMigrationItemsResyncResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to resynchronize replication of an ASR migration item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Resync input.
   * @param options The options parameters.
   */
  async beginResyncAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: ResyncInput,
    options?: ReplicationMigrationItemsResyncOptionalParams,
  ): Promise<ReplicationMigrationItemsResyncResponse> {
    const poller = await this.beginResync(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      input,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to initiate test migration of the item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param testMigrateInput Test migrate input.
   * @param options The options parameters.
   */
  async beginTestMigrate(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    testMigrateInput: TestMigrateInput,
    options?: ReplicationMigrationItemsTestMigrateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationMigrationItemsTestMigrateResponse>,
      ReplicationMigrationItemsTestMigrateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationMigrationItemsTestMigrateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        testMigrateInput,
        options,
      },
      spec: testMigrateOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationMigrationItemsTestMigrateResponse,
      OperationState<ReplicationMigrationItemsTestMigrateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to initiate test migration of the item.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param testMigrateInput Test migrate input.
   * @param options The options parameters.
   */
  async beginTestMigrateAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    testMigrateInput: TestMigrateInput,
    options?: ReplicationMigrationItemsTestMigrateOptionalParams,
  ): Promise<ReplicationMigrationItemsTestMigrateResponse> {
    const poller = await this.beginTestMigrate(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      testMigrateInput,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to initiate test migrate cleanup.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param testMigrateCleanupInput Test migrate cleanup input.
   * @param options The options parameters.
   */
  async beginTestMigrateCleanup(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    testMigrateCleanupInput: TestMigrateCleanupInput,
    options?: ReplicationMigrationItemsTestMigrateCleanupOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationMigrationItemsTestMigrateCleanupResponse>,
      ReplicationMigrationItemsTestMigrateCleanupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationMigrationItemsTestMigrateCleanupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        testMigrateCleanupInput,
        options,
      },
      spec: testMigrateCleanupOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationMigrationItemsTestMigrateCleanupResponse,
      OperationState<ReplicationMigrationItemsTestMigrateCleanupResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to initiate test migrate cleanup.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param testMigrateCleanupInput Test migrate cleanup input.
   * @param options The options parameters.
   */
  async beginTestMigrateCleanupAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    testMigrateCleanupInput: TestMigrateCleanupInput,
    options?: ReplicationMigrationItemsTestMigrateCleanupOptionalParams,
  ): Promise<ReplicationMigrationItemsTestMigrateCleanupResponse> {
    const poller = await this.beginTestMigrateCleanup(
      resourceGroupName,
      resourceName,
      fabricName,
      protectionContainerName,
      migrationItemName,
      testMigrateCleanupInput,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the list of migration items in the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationMigrationItemsListOptionalParams,
  ): Promise<ReplicationMigrationItemsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listOperationSpec,
    );
  }

  /**
   * ListByReplicationProtectionContainersNext
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByReplicationProtectionContainers method.
   * @param options The options parameters.
   */
  private _listByReplicationProtectionContainersNext(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    protectionContainerName: string,
    nextLink: string,
    options?: ReplicationMigrationItemsListByReplicationProtectionContainersNextOptionalParams,
  ): Promise<ReplicationMigrationItemsListByReplicationProtectionContainersNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        fabricName,
        protectionContainerName,
        nextLink,
        options,
      },
      listByReplicationProtectionContainersNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    resourceName: string,
    nextLink: string,
    options?: ReplicationMigrationItemsListNextOptionalParams,
  ): Promise<ReplicationMigrationItemsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationProtectionContainersOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.MigrationItemCollection,
      },
    },
    queryParameters: [
      Parameters.apiVersion,
      Parameters.filter,
      Parameters.skipToken,
      Parameters.takeToken,
    ],
    urlParameters: [
      Parameters.$host,
      Parameters.resourceGroupName,
      Parameters.subscriptionId,
      Parameters.resourceName,
      Parameters.fabricName,
      Parameters.protectionContainerName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem,
    },
    201: {
      bodyMapper: Mappers.MigrationItem,
    },
    202: {
      bodyMapper: Mappers.MigrationItem,
    },
    204: {
      bodyMapper: Mappers.MigrationItem,
    },
  },
  requestBody: Parameters.input3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion, Parameters.deleteOption],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
  ],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem,
    },
    201: {
      bodyMapper: Mappers.MigrationItem,
    },
    202: {
      bodyMapper: Mappers.MigrationItem,
    },
    204: {
      bodyMapper: Mappers.MigrationItem,
    },
  },
  requestBody: Parameters.input4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const migrateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem,
    },
    201: {
      bodyMapper: Mappers.MigrationItem,
    },
    202: {
      bodyMapper: Mappers.MigrationItem,
    },
    204: {
      bodyMapper: Mappers.MigrationItem,
    },
  },
  requestBody: Parameters.migrateInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const pauseReplicationOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/pauseReplication",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem,
    },
    201: {
      bodyMapper: Mappers.MigrationItem,
    },
    202: {
      bodyMapper: Mappers.MigrationItem,
    },
    204: {
      bodyMapper: Mappers.MigrationItem,
    },
  },
  requestBody: Parameters.pauseReplicationInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const resumeReplicationOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/resumeReplication",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem,
    },
    201: {
      bodyMapper: Mappers.MigrationItem,
    },
    202: {
      bodyMapper: Mappers.MigrationItem,
    },
    204: {
      bodyMapper: Mappers.MigrationItem,
    },
  },
  requestBody: Parameters.resumeReplicationInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const resyncOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/resync",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem,
    },
    201: {
      bodyMapper: Mappers.MigrationItem,
    },
    202: {
      bodyMapper: Mappers.MigrationItem,
    },
    204: {
      bodyMapper: Mappers.MigrationItem,
    },
  },
  requestBody: Parameters.input5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const testMigrateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem,
    },
    201: {
      bodyMapper: Mappers.MigrationItem,
    },
    202: {
      bodyMapper: Mappers.MigrationItem,
    },
    204: {
      bodyMapper: Mappers.MigrationItem,
    },
  },
  requestBody: Parameters.testMigrateInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const testMigrateCleanupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrateCleanup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem,
    },
    201: {
      bodyMapper: Mappers.MigrationItem,
    },
    202: {
      bodyMapper: Mappers.MigrationItem,
    },
    204: {
      bodyMapper: Mappers.MigrationItem,
    },
  },
  requestBody: Parameters.testMigrateCleanupInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationMigrationItems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItemCollection,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken,
    Parameters.takeToken,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByReplicationProtectionContainersNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.MigrationItemCollection,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.resourceGroupName,
      Parameters.subscriptionId,
      Parameters.nextLink,
      Parameters.resourceName,
      Parameters.fabricName,
      Parameters.protectionContainerName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItemCollection,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
