/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ReplicationProtectionContainers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ProtectionContainer,
  ReplicationProtectionContainersListByReplicationFabricsNextOptionalParams,
  ReplicationProtectionContainersListByReplicationFabricsOptionalParams,
  ReplicationProtectionContainersListNextOptionalParams,
  ReplicationProtectionContainersListOptionalParams,
  ReplicationProtectionContainersListByReplicationFabricsResponse,
  ReplicationProtectionContainersGetOptionalParams,
  ReplicationProtectionContainersGetResponse,
  CreateProtectionContainerInput,
  ReplicationProtectionContainersCreateOptionalParams,
  ReplicationProtectionContainersCreateResponse,
  DiscoverProtectableItemRequest,
  ReplicationProtectionContainersDiscoverProtectableItemOptionalParams,
  ReplicationProtectionContainersDiscoverProtectableItemResponse,
  ReplicationProtectionContainersDeleteOptionalParams,
  SwitchProtectionInput,
  ReplicationProtectionContainersSwitchProtectionOptionalParams,
  ReplicationProtectionContainersSwitchProtectionResponse,
  ReplicationProtectionContainersListResponse,
  ReplicationProtectionContainersListByReplicationFabricsNextResponse,
  ReplicationProtectionContainersListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationProtectionContainers operations. */
export class ReplicationProtectionContainersImpl
  implements ReplicationProtectionContainers {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationProtectionContainers class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists the protection containers in the specified fabric.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  public listByReplicationFabrics(
    fabricName: string,
    options?: ReplicationProtectionContainersListByReplicationFabricsOptionalParams
  ): PagedAsyncIterableIterator<ProtectionContainer> {
    const iter = this.listByReplicationFabricsPagingAll(fabricName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByReplicationFabricsPagingPage(fabricName, options);
      }
    };
  }

  private async *listByReplicationFabricsPagingPage(
    fabricName: string,
    options?: ReplicationProtectionContainersListByReplicationFabricsOptionalParams
  ): AsyncIterableIterator<ProtectionContainer[]> {
    let result = await this._listByReplicationFabrics(fabricName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByReplicationFabricsNext(
        fabricName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByReplicationFabricsPagingAll(
    fabricName: string,
    options?: ReplicationProtectionContainersListByReplicationFabricsOptionalParams
  ): AsyncIterableIterator<ProtectionContainer> {
    for await (const page of this.listByReplicationFabricsPagingPage(
      fabricName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the protection containers in a vault.
   * @param options The options parameters.
   */
  public list(
    options?: ReplicationProtectionContainersListOptionalParams
  ): PagedAsyncIterableIterator<ProtectionContainer> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ReplicationProtectionContainersListOptionalParams
  ): AsyncIterableIterator<ProtectionContainer[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ReplicationProtectionContainersListOptionalParams
  ): AsyncIterableIterator<ProtectionContainer> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists the protection containers in the specified fabric.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  private _listByReplicationFabrics(
    fabricName: string,
    options?: ReplicationProtectionContainersListByReplicationFabricsOptionalParams
  ): Promise<ReplicationProtectionContainersListByReplicationFabricsResponse> {
    return this.client.sendOperationRequest(
      { fabricName, options },
      listByReplicationFabricsOperationSpec
    );
  }

  /**
   * Gets the details of a protection container.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The options parameters.
   */
  get(
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationProtectionContainersGetOptionalParams
  ): Promise<ReplicationProtectionContainersGetResponse> {
    return this.client.sendOperationRequest(
      { fabricName, protectionContainerName, options },
      getOperationSpec
    );
  }

  /**
   * Operation to create a protection container.
   * @param fabricName Unique fabric ARM name.
   * @param protectionContainerName Unique protection container ARM name.
   * @param creationInput Creation input.
   * @param options The options parameters.
   */
  async beginCreate(
    fabricName: string,
    protectionContainerName: string,
    creationInput: CreateProtectionContainerInput,
    options?: ReplicationProtectionContainersCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationProtectionContainersCreateResponse>,
      ReplicationProtectionContainersCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationProtectionContainersCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { fabricName, protectionContainerName, creationInput, options },
      createOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Operation to create a protection container.
   * @param fabricName Unique fabric ARM name.
   * @param protectionContainerName Unique protection container ARM name.
   * @param creationInput Creation input.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    fabricName: string,
    protectionContainerName: string,
    creationInput: CreateProtectionContainerInput,
    options?: ReplicationProtectionContainersCreateOptionalParams
  ): Promise<ReplicationProtectionContainersCreateResponse> {
    const poller = await this.beginCreate(
      fabricName,
      protectionContainerName,
      creationInput,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to a add a protectable item to a protection container(Add physical server).
   * @param fabricName The name of the fabric.
   * @param protectionContainerName The name of the protection container.
   * @param discoverProtectableItemRequest The request object to add a protectable item.
   * @param options The options parameters.
   */
  async beginDiscoverProtectableItem(
    fabricName: string,
    protectionContainerName: string,
    discoverProtectableItemRequest: DiscoverProtectableItemRequest,
    options?: ReplicationProtectionContainersDiscoverProtectableItemOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        ReplicationProtectionContainersDiscoverProtectableItemResponse
      >,
      ReplicationProtectionContainersDiscoverProtectableItemResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationProtectionContainersDiscoverProtectableItemResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        fabricName,
        protectionContainerName,
        discoverProtectableItemRequest,
        options
      },
      discoverProtectableItemOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to a add a protectable item to a protection container(Add physical server).
   * @param fabricName The name of the fabric.
   * @param protectionContainerName The name of the protection container.
   * @param discoverProtectableItemRequest The request object to add a protectable item.
   * @param options The options parameters.
   */
  async beginDiscoverProtectableItemAndWait(
    fabricName: string,
    protectionContainerName: string,
    discoverProtectableItemRequest: DiscoverProtectableItemRequest,
    options?: ReplicationProtectionContainersDiscoverProtectableItemOptionalParams
  ): Promise<ReplicationProtectionContainersDiscoverProtectableItemResponse> {
    const poller = await this.beginDiscoverProtectableItem(
      fabricName,
      protectionContainerName,
      discoverProtectableItemRequest,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Operation to remove a protection container.
   * @param fabricName Unique fabric ARM name.
   * @param protectionContainerName Unique protection container ARM name.
   * @param options The options parameters.
   */
  async beginDelete(
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationProtectionContainersDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { fabricName, protectionContainerName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Operation to remove a protection container.
   * @param fabricName Unique fabric ARM name.
   * @param protectionContainerName Unique protection container ARM name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationProtectionContainersDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      fabricName,
      protectionContainerName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Operation to switch protection from one container to another or one replication provider to another.
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param switchInput Switch protection input.
   * @param options The options parameters.
   */
  async beginSwitchProtection(
    fabricName: string,
    protectionContainerName: string,
    switchInput: SwitchProtectionInput,
    options?: ReplicationProtectionContainersSwitchProtectionOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        ReplicationProtectionContainersSwitchProtectionResponse
      >,
      ReplicationProtectionContainersSwitchProtectionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationProtectionContainersSwitchProtectionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { fabricName, protectionContainerName, switchInput, options },
      switchProtectionOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Operation to switch protection from one container to another or one replication provider to another.
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param switchInput Switch protection input.
   * @param options The options parameters.
   */
  async beginSwitchProtectionAndWait(
    fabricName: string,
    protectionContainerName: string,
    switchInput: SwitchProtectionInput,
    options?: ReplicationProtectionContainersSwitchProtectionOptionalParams
  ): Promise<ReplicationProtectionContainersSwitchProtectionResponse> {
    const poller = await this.beginSwitchProtection(
      fabricName,
      protectionContainerName,
      switchInput,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the protection containers in a vault.
   * @param options The options parameters.
   */
  private _list(
    options?: ReplicationProtectionContainersListOptionalParams
  ): Promise<ReplicationProtectionContainersListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListByReplicationFabricsNext
   * @param fabricName Fabric name.
   * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
   *                 method.
   * @param options The options parameters.
   */
  private _listByReplicationFabricsNext(
    fabricName: string,
    nextLink: string,
    options?: ReplicationProtectionContainersListByReplicationFabricsNextOptionalParams
  ): Promise<
    ReplicationProtectionContainersListByReplicationFabricsNextResponse
  > {
    return this.client.sendOperationRequest(
      { fabricName, nextLink, options },
      listByReplicationFabricsNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ReplicationProtectionContainersListNextOptionalParams
  ): Promise<ReplicationProtectionContainersListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationFabricsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainerCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainer
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainer
    },
    201: {
      bodyMapper: Mappers.ProtectionContainer
    },
    202: {
      bodyMapper: Mappers.ProtectionContainer
    },
    204: {
      bodyMapper: Mappers.ProtectionContainer
    }
  },
  requestBody: Parameters.creationInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const discoverProtectableItemOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/discoverProtectableItem",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainer
    },
    201: {
      bodyMapper: Mappers.ProtectionContainer
    },
    202: {
      bodyMapper: Mappers.ProtectionContainer
    },
    204: {
      bodyMapper: Mappers.ProtectionContainer
    }
  },
  requestBody: Parameters.discoverProtectableItemRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/remove",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  serializer
};
const switchProtectionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/switchprotection",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainer
    },
    201: {
      bodyMapper: Mappers.ProtectionContainer
    },
    202: {
      bodyMapper: Mappers.ProtectionContainer
    },
    204: {
      bodyMapper: Mappers.ProtectionContainer
    }
  },
  requestBody: Parameters.switchInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainerCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByReplicationFabricsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainerCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainerCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
