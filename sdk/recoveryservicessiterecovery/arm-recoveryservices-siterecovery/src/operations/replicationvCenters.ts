/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ReplicationvCenters } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  VCenter,
  ReplicationvCentersListByReplicationFabricsNextOptionalParams,
  ReplicationvCentersListByReplicationFabricsOptionalParams,
  ReplicationvCentersListNextOptionalParams,
  ReplicationvCentersListOptionalParams,
  ReplicationvCentersListByReplicationFabricsResponse,
  ReplicationvCentersGetOptionalParams,
  ReplicationvCentersGetResponse,
  AddVCenterRequest,
  ReplicationvCentersCreateOptionalParams,
  ReplicationvCentersCreateResponse,
  ReplicationvCentersDeleteOptionalParams,
  UpdateVCenterRequest,
  ReplicationvCentersUpdateOptionalParams,
  ReplicationvCentersUpdateResponse,
  ReplicationvCentersListResponse,
  ReplicationvCentersListByReplicationFabricsNextResponse,
  ReplicationvCentersListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationvCenters operations. */
export class ReplicationvCentersImpl implements ReplicationvCenters {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationvCenters class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists the vCenter servers registered in a fabric.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  public listByReplicationFabrics(
    fabricName: string,
    options?: ReplicationvCentersListByReplicationFabricsOptionalParams
  ): PagedAsyncIterableIterator<VCenter> {
    const iter = this.listByReplicationFabricsPagingAll(fabricName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByReplicationFabricsPagingPage(fabricName, options);
      }
    };
  }

  private async *listByReplicationFabricsPagingPage(
    fabricName: string,
    options?: ReplicationvCentersListByReplicationFabricsOptionalParams
  ): AsyncIterableIterator<VCenter[]> {
    let result = await this._listByReplicationFabrics(fabricName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByReplicationFabricsNext(
        fabricName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByReplicationFabricsPagingAll(
    fabricName: string,
    options?: ReplicationvCentersListByReplicationFabricsOptionalParams
  ): AsyncIterableIterator<VCenter> {
    for await (const page of this.listByReplicationFabricsPagingPage(
      fabricName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the vCenter servers registered in the vault.
   * @param options The options parameters.
   */
  public list(
    options?: ReplicationvCentersListOptionalParams
  ): PagedAsyncIterableIterator<VCenter> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ReplicationvCentersListOptionalParams
  ): AsyncIterableIterator<VCenter[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ReplicationvCentersListOptionalParams
  ): AsyncIterableIterator<VCenter> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists the vCenter servers registered in a fabric.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  private _listByReplicationFabrics(
    fabricName: string,
    options?: ReplicationvCentersListByReplicationFabricsOptionalParams
  ): Promise<ReplicationvCentersListByReplicationFabricsResponse> {
    return this.client.sendOperationRequest(
      { fabricName, options },
      listByReplicationFabricsOperationSpec
    );
  }

  /**
   * Gets the details of a registered vCenter server(Add vCenter server).
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param options The options parameters.
   */
  get(
    fabricName: string,
    vcenterName: string,
    options?: ReplicationvCentersGetOptionalParams
  ): Promise<ReplicationvCentersGetResponse> {
    return this.client.sendOperationRequest(
      { fabricName, vcenterName, options },
      getOperationSpec
    );
  }

  /**
   * The operation to create a vCenter object..
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param addVCenterRequest The input to the add vCenter operation.
   * @param options The options parameters.
   */
  async beginCreate(
    fabricName: string,
    vcenterName: string,
    addVCenterRequest: AddVCenterRequest,
    options?: ReplicationvCentersCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationvCentersCreateResponse>,
      ReplicationvCentersCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationvCentersCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { fabricName, vcenterName, addVCenterRequest, options },
      createOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to create a vCenter object..
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param addVCenterRequest The input to the add vCenter operation.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    fabricName: string,
    vcenterName: string,
    addVCenterRequest: AddVCenterRequest,
    options?: ReplicationvCentersCreateOptionalParams
  ): Promise<ReplicationvCentersCreateResponse> {
    const poller = await this.beginCreate(
      fabricName,
      vcenterName,
      addVCenterRequest,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to remove(unregister) a registered vCenter server from the vault.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param options The options parameters.
   */
  async beginDelete(
    fabricName: string,
    vcenterName: string,
    options?: ReplicationvCentersDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { fabricName, vcenterName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to remove(unregister) a registered vCenter server from the vault.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    fabricName: string,
    vcenterName: string,
    options?: ReplicationvCentersDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(fabricName, vcenterName, options);
    return poller.pollUntilDone();
  }

  /**
   * The operation to update a registered vCenter.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param updateVCenterRequest The input to the update vCenter operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    fabricName: string,
    vcenterName: string,
    updateVCenterRequest: UpdateVCenterRequest,
    options?: ReplicationvCentersUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationvCentersUpdateResponse>,
      ReplicationvCentersUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationvCentersUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { fabricName, vcenterName, updateVCenterRequest, options },
      updateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to update a registered vCenter.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param updateVCenterRequest The input to the update vCenter operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    fabricName: string,
    vcenterName: string,
    updateVCenterRequest: UpdateVCenterRequest,
    options?: ReplicationvCentersUpdateOptionalParams
  ): Promise<ReplicationvCentersUpdateResponse> {
    const poller = await this.beginUpdate(
      fabricName,
      vcenterName,
      updateVCenterRequest,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the vCenter servers registered in the vault.
   * @param options The options parameters.
   */
  private _list(
    options?: ReplicationvCentersListOptionalParams
  ): Promise<ReplicationvCentersListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListByReplicationFabricsNext
   * @param fabricName Fabric name.
   * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
   *                 method.
   * @param options The options parameters.
   */
  private _listByReplicationFabricsNext(
    fabricName: string,
    nextLink: string,
    options?: ReplicationvCentersListByReplicationFabricsNextOptionalParams
  ): Promise<ReplicationvCentersListByReplicationFabricsNextResponse> {
    return this.client.sendOperationRequest(
      { fabricName, nextLink, options },
      listByReplicationFabricsNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ReplicationvCentersListNextOptionalParams
  ): Promise<ReplicationvCentersListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationFabricsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenter
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.vcenterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VCenter
    },
    201: {
      bodyMapper: Mappers.VCenter
    },
    202: {
      bodyMapper: Mappers.VCenter
    },
    204: {
      bodyMapper: Mappers.VCenter
    }
  },
  requestBody: Parameters.addVCenterRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.vcenterName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.vcenterName
  ],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VCenter
    },
    201: {
      bodyMapper: Mappers.VCenter
    },
    202: {
      bodyMapper: Mappers.VCenter
    },
    204: {
      bodyMapper: Mappers.VCenter
    }
  },
  requestBody: Parameters.updateVCenterRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.vcenterName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationvCenters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByReplicationFabricsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
