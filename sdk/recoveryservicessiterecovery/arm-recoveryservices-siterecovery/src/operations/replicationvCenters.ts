/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ReplicationvCenters } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  VCenter,
  ReplicationvCentersListByReplicationFabricsNextOptionalParams,
  ReplicationvCentersListByReplicationFabricsOptionalParams,
  ReplicationvCentersListByReplicationFabricsResponse,
  ReplicationvCentersListNextOptionalParams,
  ReplicationvCentersListOptionalParams,
  ReplicationvCentersListResponse,
  ReplicationvCentersGetOptionalParams,
  ReplicationvCentersGetResponse,
  AddVCenterRequest,
  ReplicationvCentersCreateOptionalParams,
  ReplicationvCentersCreateResponse,
  ReplicationvCentersDeleteOptionalParams,
  UpdateVCenterRequest,
  ReplicationvCentersUpdateOptionalParams,
  ReplicationvCentersUpdateResponse,
  ReplicationvCentersListByReplicationFabricsNextResponse,
  ReplicationvCentersListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationvCenters operations. */
export class ReplicationvCentersImpl implements ReplicationvCenters {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationvCenters class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists the vCenter servers registered in a fabric.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  public listByReplicationFabrics(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    options?: ReplicationvCentersListByReplicationFabricsOptionalParams,
  ): PagedAsyncIterableIterator<VCenter> {
    const iter = this.listByReplicationFabricsPagingAll(
      resourceGroupName,
      resourceName,
      fabricName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByReplicationFabricsPagingPage(
          resourceGroupName,
          resourceName,
          fabricName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByReplicationFabricsPagingPage(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    options?: ReplicationvCentersListByReplicationFabricsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<VCenter[]> {
    let result: ReplicationvCentersListByReplicationFabricsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByReplicationFabrics(
        resourceGroupName,
        resourceName,
        fabricName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByReplicationFabricsNext(
        resourceGroupName,
        resourceName,
        fabricName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByReplicationFabricsPagingAll(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    options?: ReplicationvCentersListByReplicationFabricsOptionalParams,
  ): AsyncIterableIterator<VCenter> {
    for await (const page of this.listByReplicationFabricsPagingPage(
      resourceGroupName,
      resourceName,
      fabricName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the vCenter servers registered in the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationvCentersListOptionalParams,
  ): PagedAsyncIterableIterator<VCenter> {
    const iter = this.listPagingAll(resourceGroupName, resourceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          resourceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationvCentersListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<VCenter[]> {
    let result: ReplicationvCentersListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, resourceName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        resourceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationvCentersListOptionalParams,
  ): AsyncIterableIterator<VCenter> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      resourceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the vCenter servers registered in a fabric.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  private _listByReplicationFabrics(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    options?: ReplicationvCentersListByReplicationFabricsOptionalParams,
  ): Promise<ReplicationvCentersListByReplicationFabricsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, fabricName, options },
      listByReplicationFabricsOperationSpec,
    );
  }

  /**
   * Gets the details of a registered vCenter server(Add vCenter server).
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    vcenterName: string,
    options?: ReplicationvCentersGetOptionalParams,
  ): Promise<ReplicationvCentersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, fabricName, vcenterName, options },
      getOperationSpec,
    );
  }

  /**
   * The operation to create a vCenter object..
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param addVCenterRequest The input to the add vCenter operation.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    vcenterName: string,
    addVCenterRequest: AddVCenterRequest,
    options?: ReplicationvCentersCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationvCentersCreateResponse>,
      ReplicationvCentersCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationvCentersCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        vcenterName,
        addVCenterRequest,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationvCentersCreateResponse,
      OperationState<ReplicationvCentersCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to create a vCenter object..
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param addVCenterRequest The input to the add vCenter operation.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    vcenterName: string,
    addVCenterRequest: AddVCenterRequest,
    options?: ReplicationvCentersCreateOptionalParams,
  ): Promise<ReplicationvCentersCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      resourceName,
      fabricName,
      vcenterName,
      addVCenterRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to remove(unregister) a registered vCenter server from the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    vcenterName: string,
    options?: ReplicationvCentersDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        vcenterName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to remove(unregister) a registered vCenter server from the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    vcenterName: string,
    options?: ReplicationvCentersDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      resourceName,
      fabricName,
      vcenterName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to update a registered vCenter.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param updateVCenterRequest The input to the update vCenter operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    vcenterName: string,
    updateVCenterRequest: UpdateVCenterRequest,
    options?: ReplicationvCentersUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationvCentersUpdateResponse>,
      ReplicationvCentersUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationvCentersUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        vcenterName,
        updateVCenterRequest,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationvCentersUpdateResponse,
      OperationState<ReplicationvCentersUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to update a registered vCenter.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param vcenterName vcenter name.
   * @param updateVCenterRequest The input to the update vCenter operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    vcenterName: string,
    updateVCenterRequest: UpdateVCenterRequest,
    options?: ReplicationvCentersUpdateOptionalParams,
  ): Promise<ReplicationvCentersUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      resourceName,
      fabricName,
      vcenterName,
      updateVCenterRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the vCenter servers registered in the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationvCentersListOptionalParams,
  ): Promise<ReplicationvCentersListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listOperationSpec,
    );
  }

  /**
   * ListByReplicationFabricsNext
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Fabric name.
   * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
   *                 method.
   * @param options The options parameters.
   */
  private _listByReplicationFabricsNext(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    nextLink: string,
    options?: ReplicationvCentersListByReplicationFabricsNextOptionalParams,
  ): Promise<ReplicationvCentersListByReplicationFabricsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, fabricName, nextLink, options },
      listByReplicationFabricsNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    resourceName: string,
    nextLink: string,
    options?: ReplicationvCentersListNextOptionalParams,
  ): Promise<ReplicationvCentersListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationFabricsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenter,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.vcenterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VCenter,
    },
    201: {
      bodyMapper: Mappers.VCenter,
    },
    202: {
      bodyMapper: Mappers.VCenter,
    },
    204: {
      bodyMapper: Mappers.VCenter,
    },
  },
  requestBody: Parameters.addVCenterRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.vcenterName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.vcenterName,
  ],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VCenter,
    },
    201: {
      bodyMapper: Mappers.VCenter,
    },
    202: {
      bodyMapper: Mappers.VCenter,
    },
    204: {
      bodyMapper: Mappers.VCenter,
    },
  },
  requestBody: Parameters.updateVCenterRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.vcenterName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationvCenters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByReplicationFabricsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
    Parameters.fabricName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
