/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ReplicationNetworks } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import {
  Network,
  ReplicationNetworksListByReplicationFabricsNextOptionalParams,
  ReplicationNetworksListByReplicationFabricsOptionalParams,
  ReplicationNetworksListNextOptionalParams,
  ReplicationNetworksListOptionalParams,
  ReplicationNetworksListByReplicationFabricsResponse,
  ReplicationNetworksGetOptionalParams,
  ReplicationNetworksGetResponse,
  ReplicationNetworksListResponse,
  ReplicationNetworksListByReplicationFabricsNextResponse,
  ReplicationNetworksListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationNetworks operations. */
export class ReplicationNetworksImpl implements ReplicationNetworks {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationNetworks class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists the networks available for a fabric.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  public listByReplicationFabrics(
    fabricName: string,
    options?: ReplicationNetworksListByReplicationFabricsOptionalParams
  ): PagedAsyncIterableIterator<Network> {
    const iter = this.listByReplicationFabricsPagingAll(fabricName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByReplicationFabricsPagingPage(fabricName, options);
      }
    };
  }

  private async *listByReplicationFabricsPagingPage(
    fabricName: string,
    options?: ReplicationNetworksListByReplicationFabricsOptionalParams
  ): AsyncIterableIterator<Network[]> {
    let result = await this._listByReplicationFabrics(fabricName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByReplicationFabricsNext(
        fabricName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByReplicationFabricsPagingAll(
    fabricName: string,
    options?: ReplicationNetworksListByReplicationFabricsOptionalParams
  ): AsyncIterableIterator<Network> {
    for await (const page of this.listByReplicationFabricsPagingPage(
      fabricName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the networks available in a vault.
   * @param options The options parameters.
   */
  public list(
    options?: ReplicationNetworksListOptionalParams
  ): PagedAsyncIterableIterator<Network> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ReplicationNetworksListOptionalParams
  ): AsyncIterableIterator<Network[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ReplicationNetworksListOptionalParams
  ): AsyncIterableIterator<Network> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists the networks available for a fabric.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  private _listByReplicationFabrics(
    fabricName: string,
    options?: ReplicationNetworksListByReplicationFabricsOptionalParams
  ): Promise<ReplicationNetworksListByReplicationFabricsResponse> {
    return this.client.sendOperationRequest(
      { fabricName, options },
      listByReplicationFabricsOperationSpec
    );
  }

  /**
   * Gets the details of a network.
   * @param fabricName Server Id.
   * @param networkName Primary network name.
   * @param options The options parameters.
   */
  get(
    fabricName: string,
    networkName: string,
    options?: ReplicationNetworksGetOptionalParams
  ): Promise<ReplicationNetworksGetResponse> {
    return this.client.sendOperationRequest(
      { fabricName, networkName, options },
      getOperationSpec
    );
  }

  /**
   * Lists the networks available in a vault.
   * @param options The options parameters.
   */
  private _list(
    options?: ReplicationNetworksListOptionalParams
  ): Promise<ReplicationNetworksListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListByReplicationFabricsNext
   * @param fabricName Fabric name.
   * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
   *                 method.
   * @param options The options parameters.
   */
  private _listByReplicationFabricsNext(
    fabricName: string,
    nextLink: string,
    options?: ReplicationNetworksListByReplicationFabricsNextOptionalParams
  ): Promise<ReplicationNetworksListByReplicationFabricsNextResponse> {
    return this.client.sendOperationRequest(
      { fabricName, nextLink, options },
      listByReplicationFabricsNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ReplicationNetworksListNextOptionalParams
  ): Promise<ReplicationNetworksListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationFabricsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Network
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.networkName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByReplicationFabricsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
