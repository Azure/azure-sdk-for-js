/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/replicationEligibilityResultsOperationsMappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClientContext } from "../siteRecoveryManagementClientContext";

/** Class representing a ReplicationEligibilityResultsOperations. */
export class ReplicationEligibilityResultsOperations {
  private readonly client: SiteRecoveryManagementClientContext;

  /**
   * Create a ReplicationEligibilityResultsOperations.
   * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
   */
  constructor(client: SiteRecoveryManagementClientContext) {
    this.client = client;
  }

  /**
   * Validates whether a given VM can be protected or not in which case returns list of errors.
   * @summary Gets the validation errors in case the VM is unsuitable for protection.
   * @param virtualMachineName Virtual Machine name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationEligibilityResultsListResponse>
   */
  list(virtualMachineName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationEligibilityResultsListResponse> {
    return this.beginList(virtualMachineName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationEligibilityResultsListResponse>;
  }

  /**
   * Validates whether a given VM can be protected or not in which case returns list of errors.
   * @summary Gets the validation errors in case the VM is unsuitable for protection.
   * @param virtualMachineName Virtual Machine name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationEligibilityResultsGetResponse>
   */
  get(virtualMachineName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationEligibilityResultsGetResponse> {
    return this.beginGet(virtualMachineName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationEligibilityResultsGetResponse>;
  }

  /**
   * Validates whether a given VM can be protected or not in which case returns list of errors.
   * @summary Gets the validation errors in case the VM is unsuitable for protection.
   * @param virtualMachineName Virtual Machine name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginList(virtualMachineName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        virtualMachineName,
        options
      },
      beginListOperationSpec,
      options);
  }

  /**
   * Validates whether a given VM can be protected or not in which case returns list of errors.
   * @summary Gets the validation errors in case the VM is unsuitable for protection.
   * @param virtualMachineName Virtual Machine name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGet(virtualMachineName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        virtualMachineName,
        options
      },
      beginGetOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const beginListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}/providers/Microsoft.RecoveryServices/replicationEligibilityResults",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualMachineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationEligibilityResultsCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}/providers/Microsoft.RecoveryServices/replicationEligibilityResults/default",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualMachineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationEligibilityResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
