/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ReplicationNetworkMappings } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  NetworkMapping,
  ReplicationNetworkMappingsListByReplicationNetworksNextOptionalParams,
  ReplicationNetworkMappingsListByReplicationNetworksOptionalParams,
  ReplicationNetworkMappingsListByReplicationNetworksResponse,
  ReplicationNetworkMappingsListNextOptionalParams,
  ReplicationNetworkMappingsListOptionalParams,
  ReplicationNetworkMappingsListResponse,
  ReplicationNetworkMappingsGetOptionalParams,
  ReplicationNetworkMappingsGetResponse,
  CreateNetworkMappingInput,
  ReplicationNetworkMappingsCreateOptionalParams,
  ReplicationNetworkMappingsCreateResponse,
  ReplicationNetworkMappingsDeleteOptionalParams,
  UpdateNetworkMappingInput,
  ReplicationNetworkMappingsUpdateOptionalParams,
  ReplicationNetworkMappingsUpdateResponse,
  ReplicationNetworkMappingsListByReplicationNetworksNextResponse,
  ReplicationNetworkMappingsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationNetworkMappings operations. */
export class ReplicationNetworkMappingsImpl
  implements ReplicationNetworkMappings
{
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationNetworkMappings class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists all ASR network mappings for the specified network.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Primary fabric name.
   * @param networkName Primary network name.
   * @param options The options parameters.
   */
  public listByReplicationNetworks(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    options?: ReplicationNetworkMappingsListByReplicationNetworksOptionalParams,
  ): PagedAsyncIterableIterator<NetworkMapping> {
    const iter = this.listByReplicationNetworksPagingAll(
      resourceGroupName,
      resourceName,
      fabricName,
      networkName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByReplicationNetworksPagingPage(
          resourceGroupName,
          resourceName,
          fabricName,
          networkName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByReplicationNetworksPagingPage(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    options?: ReplicationNetworkMappingsListByReplicationNetworksOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<NetworkMapping[]> {
    let result: ReplicationNetworkMappingsListByReplicationNetworksResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByReplicationNetworks(
        resourceGroupName,
        resourceName,
        fabricName,
        networkName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByReplicationNetworksNext(
        resourceGroupName,
        resourceName,
        fabricName,
        networkName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByReplicationNetworksPagingAll(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    options?: ReplicationNetworkMappingsListByReplicationNetworksOptionalParams,
  ): AsyncIterableIterator<NetworkMapping> {
    for await (const page of this.listByReplicationNetworksPagingPage(
      resourceGroupName,
      resourceName,
      fabricName,
      networkName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists all ASR network mappings in the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationNetworkMappingsListOptionalParams,
  ): PagedAsyncIterableIterator<NetworkMapping> {
    const iter = this.listPagingAll(resourceGroupName, resourceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          resourceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationNetworkMappingsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<NetworkMapping[]> {
    let result: ReplicationNetworkMappingsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, resourceName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        resourceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationNetworkMappingsListOptionalParams,
  ): AsyncIterableIterator<NetworkMapping> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      resourceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists all ASR network mappings for the specified network.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Primary fabric name.
   * @param networkName Primary network name.
   * @param options The options parameters.
   */
  private _listByReplicationNetworks(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    options?: ReplicationNetworkMappingsListByReplicationNetworksOptionalParams,
  ): Promise<ReplicationNetworkMappingsListByReplicationNetworksResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, fabricName, networkName, options },
      listByReplicationNetworksOperationSpec,
    );
  }

  /**
   * Gets the details of an ASR network mapping.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Primary fabric name.
   * @param networkName Primary network name.
   * @param networkMappingName Network mapping name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    networkMappingName: string,
    options?: ReplicationNetworkMappingsGetOptionalParams,
  ): Promise<ReplicationNetworkMappingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        fabricName,
        networkName,
        networkMappingName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * The operation to create an ASR network mapping.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Primary fabric name.
   * @param networkName Primary network name.
   * @param networkMappingName Network mapping name.
   * @param input Create network mapping input.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    networkMappingName: string,
    input: CreateNetworkMappingInput,
    options?: ReplicationNetworkMappingsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationNetworkMappingsCreateResponse>,
      ReplicationNetworkMappingsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationNetworkMappingsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        networkName,
        networkMappingName,
        input,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationNetworkMappingsCreateResponse,
      OperationState<ReplicationNetworkMappingsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to create an ASR network mapping.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Primary fabric name.
   * @param networkName Primary network name.
   * @param networkMappingName Network mapping name.
   * @param input Create network mapping input.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    networkMappingName: string,
    input: CreateNetworkMappingInput,
    options?: ReplicationNetworkMappingsCreateOptionalParams,
  ): Promise<ReplicationNetworkMappingsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      resourceName,
      fabricName,
      networkName,
      networkMappingName,
      input,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to delete a network mapping.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Primary fabric name.
   * @param networkName Primary network name.
   * @param networkMappingName ARM Resource Name for network mapping.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    networkMappingName: string,
    options?: ReplicationNetworkMappingsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        networkName,
        networkMappingName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to delete a network mapping.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Primary fabric name.
   * @param networkName Primary network name.
   * @param networkMappingName ARM Resource Name for network mapping.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    networkMappingName: string,
    options?: ReplicationNetworkMappingsDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      resourceName,
      fabricName,
      networkName,
      networkMappingName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to update an ASR network mapping.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Primary fabric name.
   * @param networkName Primary network name.
   * @param networkMappingName Network mapping name.
   * @param input Update network mapping input.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    networkMappingName: string,
    input: UpdateNetworkMappingInput,
    options?: ReplicationNetworkMappingsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationNetworkMappingsUpdateResponse>,
      ReplicationNetworkMappingsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReplicationNetworkMappingsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        fabricName,
        networkName,
        networkMappingName,
        input,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ReplicationNetworkMappingsUpdateResponse,
      OperationState<ReplicationNetworkMappingsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to update an ASR network mapping.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Primary fabric name.
   * @param networkName Primary network name.
   * @param networkMappingName Network mapping name.
   * @param input Update network mapping input.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    networkMappingName: string,
    input: UpdateNetworkMappingInput,
    options?: ReplicationNetworkMappingsUpdateOptionalParams,
  ): Promise<ReplicationNetworkMappingsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      resourceName,
      fabricName,
      networkName,
      networkMappingName,
      input,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists all ASR network mappings in the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    resourceName: string,
    options?: ReplicationNetworkMappingsListOptionalParams,
  ): Promise<ReplicationNetworkMappingsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listOperationSpec,
    );
  }

  /**
   * ListByReplicationNetworksNext
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param fabricName Primary fabric name.
   * @param networkName Primary network name.
   * @param nextLink The nextLink from the previous successful call to the ListByReplicationNetworks
   *                 method.
   * @param options The options parameters.
   */
  private _listByReplicationNetworksNext(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    networkName: string,
    nextLink: string,
    options?: ReplicationNetworkMappingsListByReplicationNetworksNextOptionalParams,
  ): Promise<ReplicationNetworkMappingsListByReplicationNetworksNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        fabricName,
        networkName,
        nextLink,
        options,
      },
      listByReplicationNetworksNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName The name of the recovery services vault.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    resourceName: string,
    nextLink: string,
    options?: ReplicationNetworkMappingsListNextOptionalParams,
  ): Promise<ReplicationNetworkMappingsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationNetworksOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkMappingCollection,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.networkName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkMapping,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.networkName,
    Parameters.networkMappingName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkMapping,
    },
    201: {
      bodyMapper: Mappers.NetworkMapping,
    },
    202: {
      bodyMapper: Mappers.NetworkMapping,
    },
    204: {
      bodyMapper: Mappers.NetworkMapping,
    },
  },
  requestBody: Parameters.input1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.networkName,
    Parameters.networkMappingName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.networkName,
    Parameters.networkMappingName,
  ],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkMapping,
    },
    201: {
      bodyMapper: Mappers.NetworkMapping,
    },
    202: {
      bodyMapper: Mappers.NetworkMapping,
    },
    204: {
      bodyMapper: Mappers.NetworkMapping,
    },
  },
  requestBody: Parameters.input2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.networkName,
    Parameters.networkMappingName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworkMappings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkMappingCollection,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByReplicationNetworksNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkMappingCollection,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.networkName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkMappingCollection,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
