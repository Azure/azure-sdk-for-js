/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ReplicationRecoveryPlans } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  RecoveryPlan,
  ReplicationRecoveryPlansListNextOptionalParams,
  ReplicationRecoveryPlansListOptionalParams,
  ReplicationRecoveryPlansListResponse,
  ReplicationRecoveryPlansGetOptionalParams,
  ReplicationRecoveryPlansGetResponse,
  CreateRecoveryPlanInput,
  ReplicationRecoveryPlansCreateOptionalParams,
  ReplicationRecoveryPlansCreateResponse,
  ReplicationRecoveryPlansDeleteOptionalParams,
  UpdateRecoveryPlanInput,
  ReplicationRecoveryPlansUpdateOptionalParams,
  ReplicationRecoveryPlansUpdateResponse,
  ReplicationRecoveryPlansFailoverCancelOptionalParams,
  ReplicationRecoveryPlansFailoverCancelResponse,
  ReplicationRecoveryPlansFailoverCommitOptionalParams,
  ReplicationRecoveryPlansFailoverCommitResponse,
  RecoveryPlanPlannedFailoverInput,
  ReplicationRecoveryPlansPlannedFailoverOptionalParams,
  ReplicationRecoveryPlansPlannedFailoverResponse,
  ReplicationRecoveryPlansReprotectOptionalParams,
  ReplicationRecoveryPlansReprotectResponse,
  RecoveryPlanTestFailoverInput,
  ReplicationRecoveryPlansTestFailoverOptionalParams,
  ReplicationRecoveryPlansTestFailoverResponse,
  RecoveryPlanTestFailoverCleanupInput,
  ReplicationRecoveryPlansTestFailoverCleanupOptionalParams,
  ReplicationRecoveryPlansTestFailoverCleanupResponse,
  RecoveryPlanUnplannedFailoverInput,
  ReplicationRecoveryPlansUnplannedFailoverOptionalParams,
  ReplicationRecoveryPlansUnplannedFailoverResponse,
  ReplicationRecoveryPlansListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationRecoveryPlans operations. */
export class ReplicationRecoveryPlansImpl implements ReplicationRecoveryPlans {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationRecoveryPlans class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists the recovery plans in the vault.
   * @param options The options parameters.
   */
  public list(
    options?: ReplicationRecoveryPlansListOptionalParams
  ): PagedAsyncIterableIterator<RecoveryPlan> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ReplicationRecoveryPlansListOptionalParams
  ): AsyncIterableIterator<RecoveryPlan[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ReplicationRecoveryPlansListOptionalParams
  ): AsyncIterableIterator<RecoveryPlan> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists the recovery plans in the vault.
   * @param options The options parameters.
   */
  private _list(
    options?: ReplicationRecoveryPlansListOptionalParams
  ): Promise<ReplicationRecoveryPlansListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets the details of the recovery plan.
   * @param recoveryPlanName Name of the recovery plan.
   * @param options The options parameters.
   */
  get(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansGetOptionalParams
  ): Promise<ReplicationRecoveryPlansGetResponse> {
    return this.client.sendOperationRequest(
      { recoveryPlanName, options },
      getOperationSpec
    );
  }

  /**
   * The operation to create a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery Plan creation input.
   * @param options The options parameters.
   */
  async beginCreate(
    recoveryPlanName: string,
    input: CreateRecoveryPlanInput,
    options?: ReplicationRecoveryPlansCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansCreateResponse>,
      ReplicationRecoveryPlansCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryPlansCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { recoveryPlanName, input, options },
      createOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to create a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery Plan creation input.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    recoveryPlanName: string,
    input: CreateRecoveryPlanInput,
    options?: ReplicationRecoveryPlansCreateOptionalParams
  ): Promise<ReplicationRecoveryPlansCreateResponse> {
    const poller = await this.beginCreate(recoveryPlanName, input, options);
    return poller.pollUntilDone();
  }

  /**
   * Delete a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async beginDelete(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { recoveryPlanName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Delete a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(recoveryPlanName, options);
    return poller.pollUntilDone();
  }

  /**
   * The operation to update a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Update recovery plan input.
   * @param options The options parameters.
   */
  async beginUpdate(
    recoveryPlanName: string,
    input: UpdateRecoveryPlanInput,
    options?: ReplicationRecoveryPlansUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansUpdateResponse>,
      ReplicationRecoveryPlansUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryPlansUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { recoveryPlanName, input, options },
      updateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to update a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Update recovery plan input.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    recoveryPlanName: string,
    input: UpdateRecoveryPlanInput,
    options?: ReplicationRecoveryPlansUpdateOptionalParams
  ): Promise<ReplicationRecoveryPlansUpdateResponse> {
    const poller = await this.beginUpdate(recoveryPlanName, input, options);
    return poller.pollUntilDone();
  }

  /**
   * The operation to cancel the failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async beginFailoverCancel(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansFailoverCancelOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansFailoverCancelResponse>,
      ReplicationRecoveryPlansFailoverCancelResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryPlansFailoverCancelResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { recoveryPlanName, options },
      failoverCancelOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to cancel the failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async beginFailoverCancelAndWait(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansFailoverCancelOptionalParams
  ): Promise<ReplicationRecoveryPlansFailoverCancelResponse> {
    const poller = await this.beginFailoverCancel(recoveryPlanName, options);
    return poller.pollUntilDone();
  }

  /**
   * The operation to commit the failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async beginFailoverCommit(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansFailoverCommitOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansFailoverCommitResponse>,
      ReplicationRecoveryPlansFailoverCommitResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryPlansFailoverCommitResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { recoveryPlanName, options },
      failoverCommitOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to commit the failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async beginFailoverCommitAndWait(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansFailoverCommitOptionalParams
  ): Promise<ReplicationRecoveryPlansFailoverCommitResponse> {
    const poller = await this.beginFailoverCommit(recoveryPlanName, options);
    return poller.pollUntilDone();
  }

  /**
   * The operation to start the planned failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Failover input.
   * @param options The options parameters.
   */
  async beginPlannedFailover(
    recoveryPlanName: string,
    input: RecoveryPlanPlannedFailoverInput,
    options?: ReplicationRecoveryPlansPlannedFailoverOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansPlannedFailoverResponse>,
      ReplicationRecoveryPlansPlannedFailoverResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryPlansPlannedFailoverResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { recoveryPlanName, input, options },
      plannedFailoverOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to start the planned failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Failover input.
   * @param options The options parameters.
   */
  async beginPlannedFailoverAndWait(
    recoveryPlanName: string,
    input: RecoveryPlanPlannedFailoverInput,
    options?: ReplicationRecoveryPlansPlannedFailoverOptionalParams
  ): Promise<ReplicationRecoveryPlansPlannedFailoverResponse> {
    const poller = await this.beginPlannedFailover(
      recoveryPlanName,
      input,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to reprotect(reverse replicate) a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async beginReprotect(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansReprotectOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansReprotectResponse>,
      ReplicationRecoveryPlansReprotectResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryPlansReprotectResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { recoveryPlanName, options },
      reprotectOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to reprotect(reverse replicate) a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async beginReprotectAndWait(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansReprotectOptionalParams
  ): Promise<ReplicationRecoveryPlansReprotectResponse> {
    const poller = await this.beginReprotect(recoveryPlanName, options);
    return poller.pollUntilDone();
  }

  /**
   * The operation to start the test failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan test failover input.
   * @param options The options parameters.
   */
  async beginTestFailover(
    recoveryPlanName: string,
    input: RecoveryPlanTestFailoverInput,
    options?: ReplicationRecoveryPlansTestFailoverOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansTestFailoverResponse>,
      ReplicationRecoveryPlansTestFailoverResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryPlansTestFailoverResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { recoveryPlanName, input, options },
      testFailoverOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to start the test failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan test failover input.
   * @param options The options parameters.
   */
  async beginTestFailoverAndWait(
    recoveryPlanName: string,
    input: RecoveryPlanTestFailoverInput,
    options?: ReplicationRecoveryPlansTestFailoverOptionalParams
  ): Promise<ReplicationRecoveryPlansTestFailoverResponse> {
    const poller = await this.beginTestFailover(
      recoveryPlanName,
      input,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to cleanup test failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan test failover cleanup input.
   * @param options The options parameters.
   */
  async beginTestFailoverCleanup(
    recoveryPlanName: string,
    input: RecoveryPlanTestFailoverCleanupInput,
    options?: ReplicationRecoveryPlansTestFailoverCleanupOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansTestFailoverCleanupResponse>,
      ReplicationRecoveryPlansTestFailoverCleanupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryPlansTestFailoverCleanupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { recoveryPlanName, input, options },
      testFailoverCleanupOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to cleanup test failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan test failover cleanup input.
   * @param options The options parameters.
   */
  async beginTestFailoverCleanupAndWait(
    recoveryPlanName: string,
    input: RecoveryPlanTestFailoverCleanupInput,
    options?: ReplicationRecoveryPlansTestFailoverCleanupOptionalParams
  ): Promise<ReplicationRecoveryPlansTestFailoverCleanupResponse> {
    const poller = await this.beginTestFailoverCleanup(
      recoveryPlanName,
      input,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to start the unplanned failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan unplanned failover input.
   * @param options The options parameters.
   */
  async beginUnplannedFailover(
    recoveryPlanName: string,
    input: RecoveryPlanUnplannedFailoverInput,
    options?: ReplicationRecoveryPlansUnplannedFailoverOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansUnplannedFailoverResponse>,
      ReplicationRecoveryPlansUnplannedFailoverResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationRecoveryPlansUnplannedFailoverResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { recoveryPlanName, input, options },
      unplannedFailoverOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * The operation to start the unplanned failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan unplanned failover input.
   * @param options The options parameters.
   */
  async beginUnplannedFailoverAndWait(
    recoveryPlanName: string,
    input: RecoveryPlanUnplannedFailoverInput,
    options?: ReplicationRecoveryPlansUnplannedFailoverOptionalParams
  ): Promise<ReplicationRecoveryPlansUnplannedFailoverResponse> {
    const poller = await this.beginUnplannedFailover(
      recoveryPlanName,
      input,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ReplicationRecoveryPlansListNextOptionalParams
  ): Promise<ReplicationRecoveryPlansListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlanCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const failoverCancelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const failoverCommitOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCommit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const plannedFailoverOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/plannedFailover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const reprotectOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/reProtect",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const testFailoverOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const testFailoverCleanupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailoverCleanup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const unplannedFailoverOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/unplannedFailover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlanCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
