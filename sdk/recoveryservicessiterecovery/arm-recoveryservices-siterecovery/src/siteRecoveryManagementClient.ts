/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  ReplicationAlertSettingsImpl,
  ReplicationAppliancesImpl,
  ReplicationEligibilityResultsOperationsImpl,
  ReplicationEventsImpl,
  ReplicationFabricsImpl,
  ReplicationLogicalNetworksImpl,
  ReplicationNetworksImpl,
  ReplicationNetworkMappingsImpl,
  ReplicationProtectionContainersImpl,
  ReplicationMigrationItemsImpl,
  MigrationRecoveryPointsImpl,
  ReplicationProtectableItemsImpl,
  ReplicationProtectedItemsImpl,
  RecoveryPointsImpl,
  TargetComputeSizesImpl,
  ReplicationProtectionContainerMappingsImpl,
  ReplicationRecoveryServicesProvidersImpl,
  ReplicationStorageClassificationsImpl,
  ReplicationStorageClassificationMappingsImpl,
  ReplicationvCentersImpl,
  ReplicationJobsImpl,
  ReplicationPoliciesImpl,
  ReplicationProtectionIntentsImpl,
  ReplicationRecoveryPlansImpl,
  SupportedOperatingSystemsOperationsImpl,
  ReplicationVaultHealthImpl,
  ReplicationVaultSettingImpl
} from "./operations";
import {
  Operations,
  ReplicationAlertSettings,
  ReplicationAppliances,
  ReplicationEligibilityResultsOperations,
  ReplicationEvents,
  ReplicationFabrics,
  ReplicationLogicalNetworks,
  ReplicationNetworks,
  ReplicationNetworkMappings,
  ReplicationProtectionContainers,
  ReplicationMigrationItems,
  MigrationRecoveryPoints,
  ReplicationProtectableItems,
  ReplicationProtectedItems,
  RecoveryPoints,
  TargetComputeSizes,
  ReplicationProtectionContainerMappings,
  ReplicationRecoveryServicesProviders,
  ReplicationStorageClassifications,
  ReplicationStorageClassificationMappings,
  ReplicationvCenters,
  ReplicationJobs,
  ReplicationPolicies,
  ReplicationProtectionIntents,
  ReplicationRecoveryPlans,
  SupportedOperatingSystemsOperations,
  ReplicationVaultHealth,
  ReplicationVaultSetting
} from "./operationsInterfaces";
import { SiteRecoveryManagementClientOptionalParams } from "./models";

export class SiteRecoveryManagementClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the SiteRecoveryManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The subscription Id.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: SiteRecoveryManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: SiteRecoveryManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-recoveryservices-siterecovery/5.0.2`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2022-10-01";
    this.operations = new OperationsImpl(this);
    this.replicationAlertSettings = new ReplicationAlertSettingsImpl(this);
    this.replicationAppliances = new ReplicationAppliancesImpl(this);
    this.replicationEligibilityResultsOperations = new ReplicationEligibilityResultsOperationsImpl(
      this
    );
    this.replicationEvents = new ReplicationEventsImpl(this);
    this.replicationFabrics = new ReplicationFabricsImpl(this);
    this.replicationLogicalNetworks = new ReplicationLogicalNetworksImpl(this);
    this.replicationNetworks = new ReplicationNetworksImpl(this);
    this.replicationNetworkMappings = new ReplicationNetworkMappingsImpl(this);
    this.replicationProtectionContainers = new ReplicationProtectionContainersImpl(
      this
    );
    this.replicationMigrationItems = new ReplicationMigrationItemsImpl(this);
    this.migrationRecoveryPoints = new MigrationRecoveryPointsImpl(this);
    this.replicationProtectableItems = new ReplicationProtectableItemsImpl(
      this
    );
    this.replicationProtectedItems = new ReplicationProtectedItemsImpl(this);
    this.recoveryPoints = new RecoveryPointsImpl(this);
    this.targetComputeSizes = new TargetComputeSizesImpl(this);
    this.replicationProtectionContainerMappings = new ReplicationProtectionContainerMappingsImpl(
      this
    );
    this.replicationRecoveryServicesProviders = new ReplicationRecoveryServicesProvidersImpl(
      this
    );
    this.replicationStorageClassifications = new ReplicationStorageClassificationsImpl(
      this
    );
    this.replicationStorageClassificationMappings = new ReplicationStorageClassificationMappingsImpl(
      this
    );
    this.replicationvCenters = new ReplicationvCentersImpl(this);
    this.replicationJobs = new ReplicationJobsImpl(this);
    this.replicationPolicies = new ReplicationPoliciesImpl(this);
    this.replicationProtectionIntents = new ReplicationProtectionIntentsImpl(
      this
    );
    this.replicationRecoveryPlans = new ReplicationRecoveryPlansImpl(this);
    this.supportedOperatingSystemsOperations = new SupportedOperatingSystemsOperationsImpl(
      this
    );
    this.replicationVaultHealth = new ReplicationVaultHealthImpl(this);
    this.replicationVaultSetting = new ReplicationVaultSettingImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  operations: Operations;
  replicationAlertSettings: ReplicationAlertSettings;
  replicationAppliances: ReplicationAppliances;
  replicationEligibilityResultsOperations: ReplicationEligibilityResultsOperations;
  replicationEvents: ReplicationEvents;
  replicationFabrics: ReplicationFabrics;
  replicationLogicalNetworks: ReplicationLogicalNetworks;
  replicationNetworks: ReplicationNetworks;
  replicationNetworkMappings: ReplicationNetworkMappings;
  replicationProtectionContainers: ReplicationProtectionContainers;
  replicationMigrationItems: ReplicationMigrationItems;
  migrationRecoveryPoints: MigrationRecoveryPoints;
  replicationProtectableItems: ReplicationProtectableItems;
  replicationProtectedItems: ReplicationProtectedItems;
  recoveryPoints: RecoveryPoints;
  targetComputeSizes: TargetComputeSizes;
  replicationProtectionContainerMappings: ReplicationProtectionContainerMappings;
  replicationRecoveryServicesProviders: ReplicationRecoveryServicesProviders;
  replicationStorageClassifications: ReplicationStorageClassifications;
  replicationStorageClassificationMappings: ReplicationStorageClassificationMappings;
  replicationvCenters: ReplicationvCenters;
  replicationJobs: ReplicationJobs;
  replicationPolicies: ReplicationPolicies;
  replicationProtectionIntents: ReplicationProtectionIntents;
  replicationRecoveryPlans: ReplicationRecoveryPlans;
  supportedOperatingSystemsOperations: SupportedOperatingSystemsOperations;
  replicationVaultHealth: ReplicationVaultHealth;
  replicationVaultSetting: ReplicationVaultSetting;
}
