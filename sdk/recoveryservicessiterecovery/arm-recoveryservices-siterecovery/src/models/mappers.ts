/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationsDiscoveryCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDiscoveryCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationsDiscovery"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsDiscovery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDiscovery",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const Display: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Alert"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertProperties",
    modelProperties: {
      sendToOwners: {
        serializedName: "sendToOwners",
        type: {
          name: "String"
        }
      },
      customEmailAddresses: {
        serializedName: "customEmailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigureAlertRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigureAlertRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConfigureAlertRequestProperties"
        }
      }
    }
  }
};

export const ConfigureAlertRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigureAlertRequestProperties",
    modelProperties: {
      sendToOwners: {
        serializedName: "sendToOwners",
        type: {
          name: "String"
        }
      },
      customEmailAddresses: {
        serializedName: "customEmailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplianceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplianceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationAppliance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationAppliance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationAppliance",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReplicationApplianceProperties"
        }
      }
    }
  }
};

export const ReplicationApplianceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationApplianceProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ApplianceSpecificDetails"
        }
      }
    }
  }
};

export const ApplianceSpecificDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplianceSpecificDetails",
    uberParent: "ApplianceSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationEligibilityResultsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationEligibilityResultsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationEligibilityResults"
            }
          }
        }
      }
    }
  }
};

export const ReplicationEligibilityResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationEligibilityResults",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReplicationEligibilityResultsProperties"
        }
      }
    }
  }
};

export const ReplicationEligibilityResultsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationEligibilityResultsProperties",
    modelProperties: {
      clientRequestId: {
        serializedName: "clientRequestId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationEligibilityResultsErrorInfo"
            }
          }
        }
      }
    }
  }
};

export const ReplicationEligibilityResultsErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationEligibilityResultsErrorInfo",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Event"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventProperties",
    modelProperties: {
      eventCode: {
        serializedName: "eventCode",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      eventType: {
        serializedName: "eventType",
        type: {
          name: "String"
        }
      },
      affectedObjectFriendlyName: {
        serializedName: "affectedObjectFriendlyName",
        type: {
          name: "String"
        }
      },
      affectedObjectCorrelationId: {
        serializedName: "affectedObjectCorrelationId",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      timeOfOccurrence: {
        serializedName: "timeOfOccurrence",
        type: {
          name: "DateTime"
        }
      },
      fabricId: {
        serializedName: "fabricId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "EventProviderSpecificDetails"
        }
      },
      eventSpecificDetails: {
        serializedName: "eventSpecificDetails",
        type: {
          name: "Composite",
          className: "EventSpecificDetails"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      }
    }
  }
};

export const EventProviderSpecificDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventProviderSpecificDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSpecificDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSpecificDetails",
    uberParent: "EventSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthError",
    modelProperties: {
      innerHealthErrors: {
        serializedName: "innerHealthErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InnerHealthError"
            }
          }
        }
      },
      errorSource: {
        serializedName: "errorSource",
        type: {
          name: "String"
        }
      },
      errorType: {
        serializedName: "errorType",
        type: {
          name: "String"
        }
      },
      errorLevel: {
        serializedName: "errorLevel",
        type: {
          name: "String"
        }
      },
      errorCategory: {
        serializedName: "errorCategory",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      summaryMessage: {
        serializedName: "summaryMessage",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "String"
        }
      },
      creationTimeUtc: {
        serializedName: "creationTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      recoveryProviderErrorMessage: {
        serializedName: "recoveryProviderErrorMessage",
        type: {
          name: "String"
        }
      },
      entityId: {
        serializedName: "entityId",
        type: {
          name: "String"
        }
      },
      errorId: {
        serializedName: "errorId",
        type: {
          name: "String"
        }
      },
      customerResolvability: {
        serializedName: "customerResolvability",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerHealthError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerHealthError",
    modelProperties: {
      errorSource: {
        serializedName: "errorSource",
        type: {
          name: "String"
        }
      },
      errorType: {
        serializedName: "errorType",
        type: {
          name: "String"
        }
      },
      errorLevel: {
        serializedName: "errorLevel",
        type: {
          name: "String"
        }
      },
      errorCategory: {
        serializedName: "errorCategory",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      summaryMessage: {
        serializedName: "summaryMessage",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "String"
        }
      },
      creationTimeUtc: {
        serializedName: "creationTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      recoveryProviderErrorMessage: {
        serializedName: "recoveryProviderErrorMessage",
        type: {
          name: "String"
        }
      },
      entityId: {
        serializedName: "entityId",
        type: {
          name: "String"
        }
      },
      errorId: {
        serializedName: "errorId",
        type: {
          name: "String"
        }
      },
      customerResolvability: {
        serializedName: "customerResolvability",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Fabric"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      encryptionDetails: {
        serializedName: "encryptionDetails",
        type: {
          name: "Composite",
          className: "EncryptionDetails"
        }
      },
      rolloverEncryptionDetails: {
        serializedName: "rolloverEncryptionDetails",
        type: {
          name: "Composite",
          className: "EncryptionDetails"
        }
      },
      internalIdentifier: {
        serializedName: "internalIdentifier",
        type: {
          name: "String"
        }
      },
      bcdrState: {
        serializedName: "bcdrState",
        type: {
          name: "String"
        }
      },
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "FabricSpecificDetails"
        }
      },
      healthErrorDetails: {
        serializedName: "healthErrorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      health: {
        serializedName: "health",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionDetails",
    modelProperties: {
      kekState: {
        serializedName: "kekState",
        type: {
          name: "String"
        }
      },
      kekCertThumbprint: {
        serializedName: "kekCertThumbprint",
        type: {
          name: "String"
        }
      },
      kekCertExpiryDate: {
        serializedName: "kekCertExpiryDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const FabricSpecificDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricSpecificDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricCreationInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricCreationInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FabricCreationInputProperties"
        }
      }
    }
  }
};

export const FabricCreationInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricCreationInputProperties",
    modelProperties: {
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "FabricSpecificCreationInput"
        }
      }
    }
  }
};

export const FabricSpecificCreationInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricSpecificCreationInput",
    uberParent: "FabricSpecificCreationInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverProcessServerRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverProcessServerRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FailoverProcessServerRequestProperties"
        }
      }
    }
  }
};

export const FailoverProcessServerRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverProcessServerRequestProperties",
    modelProperties: {
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      sourceProcessServerId: {
        serializedName: "sourceProcessServerId",
        type: {
          name: "String"
        }
      },
      targetProcessServerId: {
        serializedName: "targetProcessServerId",
        type: {
          name: "String"
        }
      },
      vmsToMigrate: {
        serializedName: "vmsToMigrate",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      updateType: {
        serializedName: "updateType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RenewCertificateInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RenewCertificateInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RenewCertificateInputProperties"
        }
      }
    }
  }
};

export const RenewCertificateInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RenewCertificateInputProperties",
    modelProperties: {
      renewCertificateType: {
        serializedName: "renewCertificateType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogicalNetworkCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogicalNetworkCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogicalNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogicalNetworkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogicalNetworkProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      networkVirtualizationStatus: {
        serializedName: "networkVirtualizationStatus",
        type: {
          name: "String"
        }
      },
      logicalNetworkUsage: {
        serializedName: "logicalNetworkUsage",
        type: {
          name: "String"
        }
      },
      logicalNetworkDefinitionsStatus: {
        serializedName: "logicalNetworkDefinitionsStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Network"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProperties",
    modelProperties: {
      fabricType: {
        serializedName: "fabricType",
        type: {
          name: "String"
        }
      },
      subnets: {
        serializedName: "subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Subnet"
            }
          }
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      networkType: {
        serializedName: "networkType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Subnet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Subnet",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      addressList: {
        serializedName: "addressList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NetworkMappingCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkMappingCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkMapping"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkMappingProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkMappingProperties",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      primaryNetworkFriendlyName: {
        serializedName: "primaryNetworkFriendlyName",
        type: {
          name: "String"
        }
      },
      primaryNetworkId: {
        serializedName: "primaryNetworkId",
        type: {
          name: "String"
        }
      },
      primaryFabricFriendlyName: {
        serializedName: "primaryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      recoveryNetworkFriendlyName: {
        serializedName: "recoveryNetworkFriendlyName",
        type: {
          name: "String"
        }
      },
      recoveryNetworkId: {
        serializedName: "recoveryNetworkId",
        type: {
          name: "String"
        }
      },
      recoveryFabricArmId: {
        serializedName: "recoveryFabricArmId",
        type: {
          name: "String"
        }
      },
      recoveryFabricFriendlyName: {
        serializedName: "recoveryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      fabricSpecificSettings: {
        serializedName: "fabricSpecificSettings",
        type: {
          name: "Composite",
          className: "NetworkMappingFabricSpecificSettings"
        }
      }
    }
  }
};

export const NetworkMappingFabricSpecificSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkMappingFabricSpecificSettings",
    uberParent: "NetworkMappingFabricSpecificSettings",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateNetworkMappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateNetworkMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateNetworkMappingInputProperties"
        }
      }
    }
  }
};

export const CreateNetworkMappingInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateNetworkMappingInputProperties",
    modelProperties: {
      recoveryFabricName: {
        serializedName: "recoveryFabricName",
        type: {
          name: "String"
        }
      },
      recoveryNetworkId: {
        serializedName: "recoveryNetworkId",
        required: true,
        type: {
          name: "String"
        }
      },
      fabricSpecificDetails: {
        serializedName: "fabricSpecificDetails",
        type: {
          name: "Composite",
          className: "FabricSpecificCreateNetworkMappingInput"
        }
      }
    }
  }
};

export const FabricSpecificCreateNetworkMappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricSpecificCreateNetworkMappingInput",
    uberParent: "FabricSpecificCreateNetworkMappingInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateNetworkMappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateNetworkMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateNetworkMappingInputProperties"
        }
      }
    }
  }
};

export const UpdateNetworkMappingInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateNetworkMappingInputProperties",
    modelProperties: {
      recoveryFabricName: {
        serializedName: "recoveryFabricName",
        type: {
          name: "String"
        }
      },
      recoveryNetworkId: {
        serializedName: "recoveryNetworkId",
        type: {
          name: "String"
        }
      },
      fabricSpecificDetails: {
        serializedName: "fabricSpecificDetails",
        type: {
          name: "Composite",
          className: "FabricSpecificUpdateNetworkMappingInput"
        }
      }
    }
  }
};

export const FabricSpecificUpdateNetworkMappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricSpecificUpdateNetworkMappingInput",
    uberParent: "FabricSpecificUpdateNetworkMappingInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainerCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainerCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtectionContainer"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainerProperties",
    modelProperties: {
      fabricFriendlyName: {
        serializedName: "fabricFriendlyName",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      fabricType: {
        serializedName: "fabricType",
        type: {
          name: "String"
        }
      },
      protectedItemCount: {
        serializedName: "protectedItemCount",
        type: {
          name: "Number"
        }
      },
      pairingStatus: {
        serializedName: "pairingStatus",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      },
      fabricSpecificDetails: {
        serializedName: "fabricSpecificDetails",
        type: {
          name: "Composite",
          className: "ProtectionContainerFabricSpecificDetails"
        }
      }
    }
  }
};

export const ProtectionContainerFabricSpecificDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainerFabricSpecificDetails",
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateProtectionContainerInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateProtectionContainerInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateProtectionContainerInputProperties"
        }
      }
    }
  }
};

export const CreateProtectionContainerInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateProtectionContainerInputProperties",
    modelProperties: {
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationProviderSpecificContainerCreationInput"
            }
          }
        }
      }
    }
  }
};

export const ReplicationProviderSpecificContainerCreationInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProviderSpecificContainerCreationInput",
    uberParent: "ReplicationProviderSpecificContainerCreationInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiscoverProtectableItemRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiscoverProtectableItemRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DiscoverProtectableItemRequestProperties"
        }
      }
    }
  }
};

export const DiscoverProtectableItemRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiscoverProtectableItemRequestProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationItemCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationItemCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MigrationItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationItemProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationItemProperties",
    modelProperties: {
      machineName: {
        serializedName: "machineName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyFriendlyName: {
        serializedName: "policyFriendlyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recoveryServicesProviderId: {
        serializedName: "recoveryServicesProviderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      replicationStatus: {
        serializedName: "replicationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrationState: {
        serializedName: "migrationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrationStateDescription: {
        serializedName: "migrationStateDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastTestMigrationTime: {
        serializedName: "lastTestMigrationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastTestMigrationStatus: {
        serializedName: "lastTestMigrationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastMigrationTime: {
        serializedName: "lastMigrationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastMigrationStatus: {
        serializedName: "lastMigrationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testMigrateState: {
        serializedName: "testMigrateState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testMigrateStateDescription: {
        serializedName: "testMigrateStateDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      allowedOperations: {
        serializedName: "allowedOperations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      currentJob: {
        serializedName: "currentJob",
        type: {
          name: "Composite",
          className: "CurrentJobDetails"
        }
      },
      criticalJobHistory: {
        serializedName: "criticalJobHistory",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CriticalJobHistoryDetails"
            }
          }
        }
      },
      eventCorrelationId: {
        serializedName: "eventCorrelationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "MigrationProviderSpecificSettings"
        }
      }
    }
  }
};

export const CurrentJobDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CurrentJobDetails",
    modelProperties: {
      jobName: {
        serializedName: "jobName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CriticalJobHistoryDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CriticalJobHistoryDetails",
    modelProperties: {
      jobName: {
        serializedName: "jobName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      jobStatus: {
        serializedName: "jobStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationProviderSpecificSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationProviderSpecificSettings",
    uberParent: "MigrationProviderSpecificSettings",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnableMigrationInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnableMigrationInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EnableMigrationInputProperties"
        }
      }
    }
  }
};

export const EnableMigrationInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnableMigrationInputProperties",
    modelProperties: {
      policyId: {
        serializedName: "policyId",
        required: true,
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "EnableMigrationProviderSpecificInput"
        }
      }
    }
  }
};

export const EnableMigrationProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnableMigrationProviderSpecificInput",
    uberParent: "EnableMigrationProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateMigrationItemInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateMigrationItemInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateMigrationItemInputProperties"
        }
      }
    }
  }
};

export const UpdateMigrationItemInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateMigrationItemInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "UpdateMigrationItemProviderSpecificInput"
        }
      }
    }
  }
};

export const UpdateMigrationItemProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateMigrationItemProviderSpecificInput",
    uberParent: "UpdateMigrationItemProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrateInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrateInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MigrateInputProperties"
        }
      }
    }
  }
};

export const MigrateInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrateInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "MigrateProviderSpecificInput"
        }
      }
    }
  }
};

export const MigrateProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrateProviderSpecificInput",
    uberParent: "MigrateProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationRecoveryPointCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationRecoveryPointCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MigrationRecoveryPoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationRecoveryPointProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationRecoveryPointProperties",
    modelProperties: {
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PauseReplicationInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PauseReplicationInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PauseReplicationInputProperties"
        }
      }
    }
  }
};

export const PauseReplicationInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PauseReplicationInputProperties",
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResumeReplicationInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResumeReplicationInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ResumeReplicationInputProperties"
        }
      }
    }
  }
};

export const ResumeReplicationInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResumeReplicationInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ResumeReplicationProviderSpecificInput"
        }
      }
    }
  }
};

export const ResumeReplicationProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResumeReplicationProviderSpecificInput",
    uberParent: "ResumeReplicationProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResyncInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResyncInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ResyncInputProperties"
        }
      }
    }
  }
};

export const ResyncInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResyncInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ResyncProviderSpecificInput"
        }
      }
    }
  }
};

export const ResyncProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResyncProviderSpecificInput",
    uberParent: "ResyncProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestMigrateInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestMigrateInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TestMigrateInputProperties"
        }
      }
    }
  }
};

export const TestMigrateInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestMigrateInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "TestMigrateProviderSpecificInput"
        }
      }
    }
  }
};

export const TestMigrateProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestMigrateProviderSpecificInput",
    uberParent: "TestMigrateProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestMigrateCleanupInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestMigrateCleanupInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TestMigrateCleanupInputProperties"
        }
      }
    }
  }
};

export const TestMigrateCleanupInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestMigrateCleanupInputProperties",
    modelProperties: {
      comments: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "comments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectableItemCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectableItemCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtectableItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectableItemProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectableItemProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      protectionStatus: {
        serializedName: "protectionStatus",
        type: {
          name: "String"
        }
      },
      replicationProtectedItemId: {
        serializedName: "replicationProtectedItemId",
        type: {
          name: "String"
        }
      },
      recoveryServicesProviderId: {
        serializedName: "recoveryServicesProviderId",
        type: {
          name: "String"
        }
      },
      protectionReadinessErrors: {
        serializedName: "protectionReadinessErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      supportedReplicationProviders: {
        serializedName: "supportedReplicationProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "ConfigurationSettings"
        }
      }
    }
  }
};

export const ConfigurationSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationSettings",
    uberParent: "ConfigurationSettings",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationProtectedItemCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProtectedItemCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationProtectedItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationProtectedItemProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProtectedItemProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      protectedItemType: {
        serializedName: "protectedItemType",
        type: {
          name: "String"
        }
      },
      protectableItemId: {
        serializedName: "protectableItemId",
        type: {
          name: "String"
        }
      },
      recoveryServicesProviderId: {
        serializedName: "recoveryServicesProviderId",
        type: {
          name: "String"
        }
      },
      primaryFabricFriendlyName: {
        serializedName: "primaryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      primaryFabricProvider: {
        serializedName: "primaryFabricProvider",
        type: {
          name: "String"
        }
      },
      recoveryFabricFriendlyName: {
        serializedName: "recoveryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      recoveryFabricId: {
        serializedName: "recoveryFabricId",
        type: {
          name: "String"
        }
      },
      primaryProtectionContainerFriendlyName: {
        serializedName: "primaryProtectionContainerFriendlyName",
        type: {
          name: "String"
        }
      },
      recoveryProtectionContainerFriendlyName: {
        serializedName: "recoveryProtectionContainerFriendlyName",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      },
      protectionStateDescription: {
        serializedName: "protectionStateDescription",
        type: {
          name: "String"
        }
      },
      activeLocation: {
        serializedName: "activeLocation",
        type: {
          name: "String"
        }
      },
      testFailoverState: {
        serializedName: "testFailoverState",
        type: {
          name: "String"
        }
      },
      testFailoverStateDescription: {
        serializedName: "testFailoverStateDescription",
        type: {
          name: "String"
        }
      },
      switchProviderState: {
        serializedName: "switchProviderState",
        type: {
          name: "String"
        }
      },
      switchProviderStateDescription: {
        serializedName: "switchProviderStateDescription",
        type: {
          name: "String"
        }
      },
      allowedOperations: {
        serializedName: "allowedOperations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      replicationHealth: {
        serializedName: "replicationHealth",
        type: {
          name: "String"
        }
      },
      failoverHealth: {
        serializedName: "failoverHealth",
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      policyFriendlyName: {
        serializedName: "policyFriendlyName",
        type: {
          name: "String"
        }
      },
      lastSuccessfulFailoverTime: {
        serializedName: "lastSuccessfulFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      lastSuccessfulTestFailoverTime: {
        serializedName: "lastSuccessfulTestFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      currentScenario: {
        serializedName: "currentScenario",
        type: {
          name: "Composite",
          className: "CurrentScenarioDetails"
        }
      },
      failoverRecoveryPointId: {
        serializedName: "failoverRecoveryPointId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ReplicationProviderSpecificSettings"
        }
      },
      recoveryContainerId: {
        serializedName: "recoveryContainerId",
        type: {
          name: "String"
        }
      },
      eventCorrelationId: {
        serializedName: "eventCorrelationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CurrentScenarioDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CurrentScenarioDetails",
    modelProperties: {
      scenarioName: {
        serializedName: "scenarioName",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ReplicationProviderSpecificSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProviderSpecificSettings",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnableProtectionInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnableProtectionInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EnableProtectionInputProperties"
        }
      }
    }
  }
};

export const EnableProtectionInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnableProtectionInputProperties",
    modelProperties: {
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      protectableItemId: {
        serializedName: "protectableItemId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "EnableProtectionProviderSpecificInput"
        }
      }
    }
  }
};

export const EnableProtectionProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnableProtectionProviderSpecificInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateReplicationProtectedItemInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateReplicationProtectedItemInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateReplicationProtectedItemInputProperties"
        }
      }
    }
  }
};

export const UpdateReplicationProtectedItemInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateReplicationProtectedItemInputProperties",
    modelProperties: {
      recoveryAzureVMName: {
        serializedName: "recoveryAzureVMName",
        type: {
          name: "String"
        }
      },
      recoveryAzureVMSize: {
        serializedName: "recoveryAzureVMSize",
        type: {
          name: "String"
        }
      },
      selectedRecoveryAzureNetworkId: {
        serializedName: "selectedRecoveryAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedTfoAzureNetworkId: {
        serializedName: "selectedTfoAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedSourceNicId: {
        serializedName: "selectedSourceNicId",
        type: {
          name: "String"
        }
      },
      enableRdpOnTargetOption: {
        serializedName: "enableRdpOnTargetOption",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMNicInputDetails"
            }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "UpdateReplicationProtectedItemProviderInput"
        }
      }
    }
  }
};

export const VMNicInputDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMNicInputDetails",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        type: {
          name: "String"
        }
      },
      ipConfigs: {
        serializedName: "ipConfigs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPConfigInputDetails"
            }
          }
        }
      },
      selectionType: {
        serializedName: "selectionType",
        type: {
          name: "String"
        }
      },
      recoveryNetworkSecurityGroupId: {
        serializedName: "recoveryNetworkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      enableAcceleratedNetworkingOnRecovery: {
        serializedName: "enableAcceleratedNetworkingOnRecovery",
        type: {
          name: "Boolean"
        }
      },
      tfoNetworkSecurityGroupId: {
        serializedName: "tfoNetworkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      enableAcceleratedNetworkingOnTfo: {
        serializedName: "enableAcceleratedNetworkingOnTfo",
        type: {
          name: "Boolean"
        }
      },
      recoveryNicName: {
        serializedName: "recoveryNicName",
        type: {
          name: "String"
        }
      },
      recoveryNicResourceGroupName: {
        serializedName: "recoveryNicResourceGroupName",
        type: {
          name: "String"
        }
      },
      reuseExistingNic: {
        serializedName: "reuseExistingNic",
        type: {
          name: "Boolean"
        }
      },
      tfoNicName: {
        serializedName: "tfoNicName",
        type: {
          name: "String"
        }
      },
      tfoNicResourceGroupName: {
        serializedName: "tfoNicResourceGroupName",
        type: {
          name: "String"
        }
      },
      tfoReuseExistingNic: {
        serializedName: "tfoReuseExistingNic",
        type: {
          name: "Boolean"
        }
      },
      targetNicName: {
        serializedName: "targetNicName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IPConfigInputDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPConfigInputDetails",
    modelProperties: {
      ipConfigName: {
        serializedName: "ipConfigName",
        type: {
          name: "String"
        }
      },
      isPrimary: {
        serializedName: "isPrimary",
        type: {
          name: "Boolean"
        }
      },
      isSeletedForFailover: {
        serializedName: "isSeletedForFailover",
        type: {
          name: "Boolean"
        }
      },
      recoverySubnetName: {
        serializedName: "recoverySubnetName",
        type: {
          name: "String"
        }
      },
      recoveryStaticIPAddress: {
        serializedName: "recoveryStaticIPAddress",
        type: {
          name: "String"
        }
      },
      recoveryPublicIPAddressId: {
        serializedName: "recoveryPublicIPAddressId",
        type: {
          name: "String"
        }
      },
      recoveryLBBackendAddressPoolIds: {
        serializedName: "recoveryLBBackendAddressPoolIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tfoSubnetName: {
        serializedName: "tfoSubnetName",
        type: {
          name: "String"
        }
      },
      tfoStaticIPAddress: {
        serializedName: "tfoStaticIPAddress",
        type: {
          name: "String"
        }
      },
      tfoPublicIPAddressId: {
        serializedName: "tfoPublicIPAddressId",
        type: {
          name: "String"
        }
      },
      tfoLBBackendAddressPoolIds: {
        serializedName: "tfoLBBackendAddressPoolIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UpdateReplicationProtectedItemProviderInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateReplicationProtectedItemProviderInput",
    uberParent: "UpdateReplicationProtectedItemProviderInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddDisksInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddDisksInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AddDisksInputProperties"
        }
      }
    }
  }
};

export const AddDisksInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddDisksInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "AddDisksProviderSpecificInput"
        }
      }
    }
  }
};

export const AddDisksProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddDisksProviderSpecificInput",
    uberParent: "AddDisksProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplyRecoveryPointInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplyRecoveryPointInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ApplyRecoveryPointInputProperties"
        }
      }
    }
  }
};

export const ApplyRecoveryPointInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplyRecoveryPointInputProperties",
    modelProperties: {
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ApplyRecoveryPointProviderSpecificInput"
        }
      }
    }
  }
};

export const ApplyRecoveryPointProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplyRecoveryPointProviderSpecificInput",
    uberParent: "ApplyRecoveryPointProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlannedFailoverInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlannedFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PlannedFailoverInputProperties"
        }
      }
    }
  }
};

export const PlannedFailoverInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlannedFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "PlannedFailoverProviderSpecificFailoverInput"
        }
      }
    }
  }
};

export const PlannedFailoverProviderSpecificFailoverInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlannedFailoverProviderSpecificFailoverInput",
    uberParent: "PlannedFailoverProviderSpecificFailoverInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPointCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPointProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointProperties",
    modelProperties: {
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ProviderSpecificRecoveryPointDetails"
        }
      }
    }
  }
};

export const ProviderSpecificRecoveryPointDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderSpecificRecoveryPointDetails",
    uberParent: "ProviderSpecificRecoveryPointDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DisableProtectionInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DisableProtectionInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DisableProtectionInputProperties"
        }
      }
    }
  }
};

export const DisableProtectionInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DisableProtectionInputProperties",
    modelProperties: {
      disableProtectionReason: {
        serializedName: "disableProtectionReason",
        type: {
          name: "String"
        }
      },
      replicationProviderInput: {
        serializedName: "replicationProviderInput",
        type: {
          name: "Composite",
          className: "DisableProtectionProviderSpecificInput"
        }
      }
    }
  }
};

export const DisableProtectionProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DisableProtectionProviderSpecificInput",
    uberParent: "DisableProtectionProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RemoveDisksInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoveDisksInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RemoveDisksInputProperties"
        }
      }
    }
  }
};

export const RemoveDisksInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoveDisksInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "RemoveDisksProviderSpecificInput"
        }
      }
    }
  }
};

export const RemoveDisksProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoveDisksProviderSpecificInput",
    uberParent: "RemoveDisksProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReverseReplicationInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReverseReplicationInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReverseReplicationInputProperties"
        }
      }
    }
  }
};

export const ReverseReplicationInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReverseReplicationInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ReverseReplicationProviderSpecificInput"
        }
      }
    }
  }
};

export const ReverseReplicationProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReverseReplicationProviderSpecificInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResolveHealthInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResolveHealthInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ResolveHealthInputProperties"
        }
      }
    }
  }
};

export const ResolveHealthInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResolveHealthInputProperties",
    modelProperties: {
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResolveHealthError"
            }
          }
        }
      }
    }
  }
};

export const ResolveHealthError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResolveHealthError",
    modelProperties: {
      healthErrorId: {
        serializedName: "healthErrorId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SwitchProviderInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SwitchProviderInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SwitchProviderInputProperties"
        }
      }
    }
  }
};

export const SwitchProviderInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SwitchProviderInputProperties",
    modelProperties: {
      targetInstanceType: {
        serializedName: "targetInstanceType",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "SwitchProviderSpecificInput"
        }
      }
    }
  }
};

export const SwitchProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SwitchProviderSpecificInput",
    uberParent: "SwitchProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetComputeSizeCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetComputeSizeCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetComputeSize"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetComputeSize: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetComputeSize",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TargetComputeSizeProperties"
        }
      }
    }
  }
};

export const TargetComputeSizeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetComputeSizeProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      cpuCoresCount: {
        serializedName: "cpuCoresCount",
        type: {
          name: "Number"
        }
      },
      vCPUsAvailable: {
        serializedName: "vCPUsAvailable",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      memoryInGB: {
        serializedName: "memoryInGB",
        type: {
          name: "Number"
        }
      },
      maxDataDiskCount: {
        serializedName: "maxDataDiskCount",
        type: {
          name: "Number"
        }
      },
      maxNicsCount: {
        serializedName: "maxNicsCount",
        type: {
          name: "Number"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeSizeErrorDetails"
            }
          }
        }
      },
      highIopsSupported: {
        serializedName: "highIopsSupported",
        type: {
          name: "String"
        }
      },
      hyperVGenerations: {
        serializedName: "hyperVGenerations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ComputeSizeErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeSizeErrorDetails",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestFailoverInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TestFailoverInputProperties"
        }
      }
    }
  }
};

export const TestFailoverInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        type: {
          name: "String"
        }
      },
      networkType: {
        serializedName: "networkType",
        type: {
          name: "String"
        }
      },
      networkId: {
        serializedName: "networkId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "TestFailoverProviderSpecificInput"
        }
      }
    }
  }
};

export const TestFailoverProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestFailoverProviderSpecificInput",
    uberParent: "TestFailoverProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestFailoverCleanupInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestFailoverCleanupInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TestFailoverCleanupInputProperties"
        }
      }
    }
  }
};

export const TestFailoverCleanupInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestFailoverCleanupInputProperties",
    modelProperties: {
      comments: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "comments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnplannedFailoverInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnplannedFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UnplannedFailoverInputProperties"
        }
      }
    }
  }
};

export const UnplannedFailoverInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnplannedFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        type: {
          name: "String"
        }
      },
      sourceSiteOperations: {
        serializedName: "sourceSiteOperations",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "UnplannedFailoverProviderSpecificInput"
        }
      }
    }
  }
};

export const UnplannedFailoverProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnplannedFailoverProviderSpecificInput",
    uberParent: "UnplannedFailoverProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateApplianceForReplicationProtectedItemInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateApplianceForReplicationProtectedItemInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateApplianceForReplicationProtectedItemInputProperties"
        }
      }
    }
  }
};

export const UpdateApplianceForReplicationProtectedItemInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateApplianceForReplicationProtectedItemInputProperties",
    modelProperties: {
      targetApplianceId: {
        serializedName: "targetApplianceId",
        required: true,
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className:
            "UpdateApplianceForReplicationProtectedItemProviderSpecificInput"
        }
      }
    }
  }
};

export const UpdateApplianceForReplicationProtectedItemProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "UpdateApplianceForReplicationProtectedItemProviderSpecificInput",
    uberParent:
      "UpdateApplianceForReplicationProtectedItemProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateMobilityServiceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateMobilityServiceRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateMobilityServiceRequestProperties"
        }
      }
    }
  }
};

export const UpdateMobilityServiceRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateMobilityServiceRequestProperties",
    modelProperties: {
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainerMappingCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainerMappingCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtectionContainerMapping"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainerMappingProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainerMappingProperties",
    modelProperties: {
      targetProtectionContainerId: {
        serializedName: "targetProtectionContainerId",
        type: {
          name: "String"
        }
      },
      targetProtectionContainerFriendlyName: {
        serializedName: "targetProtectionContainerFriendlyName",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ProtectionContainerMappingProviderSpecificDetails"
        }
      },
      health: {
        serializedName: "health",
        type: {
          name: "String"
        }
      },
      healthErrorDetails: {
        serializedName: "healthErrorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      sourceProtectionContainerFriendlyName: {
        serializedName: "sourceProtectionContainerFriendlyName",
        type: {
          name: "String"
        }
      },
      sourceFabricFriendlyName: {
        serializedName: "sourceFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      targetFabricFriendlyName: {
        serializedName: "targetFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      policyFriendlyName: {
        serializedName: "policyFriendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainerMappingProviderSpecificDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainerMappingProviderSpecificDetails",
    uberParent: "ProtectionContainerMappingProviderSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateProtectionContainerMappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateProtectionContainerMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateProtectionContainerMappingInputProperties"
        }
      }
    }
  }
};

export const CreateProtectionContainerMappingInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateProtectionContainerMappingInputProperties",
    modelProperties: {
      targetProtectionContainerId: {
        serializedName: "targetProtectionContainerId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Composite",
          className: "ReplicationProviderSpecificContainerMappingInput"
        }
      }
    }
  }
};

export const ReplicationProviderSpecificContainerMappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProviderSpecificContainerMappingInput",
    uberParent: "ReplicationProviderSpecificContainerMappingInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateProtectionContainerMappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateProtectionContainerMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateProtectionContainerMappingInputProperties"
        }
      }
    }
  }
};

export const UpdateProtectionContainerMappingInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateProtectionContainerMappingInputProperties",
    modelProperties: {
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Composite",
          className: "ReplicationProviderSpecificUpdateContainerMappingInput"
        }
      }
    }
  }
};

export const ReplicationProviderSpecificUpdateContainerMappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProviderSpecificUpdateContainerMappingInput",
    uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RemoveProtectionContainerMappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoveProtectionContainerMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RemoveProtectionContainerMappingInputProperties"
        }
      }
    }
  }
};

export const RemoveProtectionContainerMappingInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoveProtectionContainerMappingInputProperties",
    modelProperties: {
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Composite",
          className: "ReplicationProviderContainerUnmappingInput"
        }
      }
    }
  }
};

export const ReplicationProviderContainerUnmappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProviderContainerUnmappingInput",
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SwitchProtectionInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SwitchProtectionInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SwitchProtectionInputProperties"
        }
      }
    }
  }
};

export const SwitchProtectionInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SwitchProtectionInputProperties",
    modelProperties: {
      replicationProtectedItemName: {
        serializedName: "replicationProtectedItemName",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "SwitchProtectionProviderSpecificInput"
        }
      }
    }
  }
};

export const SwitchProtectionProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SwitchProtectionProviderSpecificInput",
    uberParent: "SwitchProtectionProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryServicesProviderCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryServicesProviderCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryServicesProvider"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryServicesProviderProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryServicesProviderProperties",
    modelProperties: {
      fabricType: {
        serializedName: "fabricType",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      providerVersion: {
        serializedName: "providerVersion",
        type: {
          name: "String"
        }
      },
      serverVersion: {
        serializedName: "serverVersion",
        type: {
          name: "String"
        }
      },
      providerVersionState: {
        serializedName: "providerVersionState",
        type: {
          name: "String"
        }
      },
      providerVersionExpiryDate: {
        serializedName: "providerVersionExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      fabricFriendlyName: {
        serializedName: "fabricFriendlyName",
        type: {
          name: "String"
        }
      },
      lastHeartBeat: {
        serializedName: "lastHeartBeat",
        type: {
          name: "DateTime"
        }
      },
      connectionStatus: {
        serializedName: "connectionStatus",
        type: {
          name: "String"
        }
      },
      protectedItemCount: {
        serializedName: "protectedItemCount",
        type: {
          name: "Number"
        }
      },
      allowedScenarios: {
        serializedName: "allowedScenarios",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      healthErrorDetails: {
        serializedName: "healthErrorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      draIdentifier: {
        serializedName: "draIdentifier",
        type: {
          name: "String"
        }
      },
      machineId: {
        serializedName: "machineId",
        type: {
          name: "String"
        }
      },
      machineName: {
        serializedName: "machineName",
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        type: {
          name: "String"
        }
      },
      authenticationIdentityDetails: {
        serializedName: "authenticationIdentityDetails",
        type: {
          name: "Composite",
          className: "IdentityProviderDetails"
        }
      },
      resourceAccessIdentityDetails: {
        serializedName: "resourceAccessIdentityDetails",
        type: {
          name: "Composite",
          className: "IdentityProviderDetails"
        }
      },
      dataPlaneAuthenticationIdentityDetails: {
        serializedName: "dataPlaneAuthenticationIdentityDetails",
        type: {
          name: "Composite",
          className: "IdentityProviderDetails"
        }
      },
      providerVersionDetails: {
        serializedName: "providerVersionDetails",
        type: {
          name: "Composite",
          className: "VersionDetails"
        }
      }
    }
  }
};

export const IdentityProviderDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityProviderDetails",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      applicationId: {
        serializedName: "applicationId",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String"
        }
      },
      audience: {
        serializedName: "audience",
        type: {
          name: "String"
        }
      },
      aadAuthority: {
        serializedName: "aadAuthority",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VersionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VersionDetails",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      expiryDate: {
        serializedName: "expiryDate",
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddRecoveryServicesProviderInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddRecoveryServicesProviderInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AddRecoveryServicesProviderInputProperties"
        }
      }
    }
  }
};

export const AddRecoveryServicesProviderInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddRecoveryServicesProviderInputProperties",
    modelProperties: {
      machineName: {
        serializedName: "machineName",
        required: true,
        type: {
          name: "String"
        }
      },
      machineId: {
        serializedName: "machineId",
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        type: {
          name: "String"
        }
      },
      authenticationIdentityInput: {
        serializedName: "authenticationIdentityInput",
        type: {
          name: "Composite",
          className: "IdentityProviderInput"
        }
      },
      resourceAccessIdentityInput: {
        serializedName: "resourceAccessIdentityInput",
        type: {
          name: "Composite",
          className: "IdentityProviderInput"
        }
      },
      dataPlaneAuthenticationIdentityInput: {
        serializedName: "dataPlaneAuthenticationIdentityInput",
        type: {
          name: "Composite",
          className: "IdentityProviderInput"
        }
      }
    }
  }
};

export const IdentityProviderInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityProviderInput",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "String"
        }
      },
      applicationId: {
        serializedName: "applicationId",
        required: true,
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        required: true,
        type: {
          name: "String"
        }
      },
      audience: {
        serializedName: "audience",
        required: true,
        type: {
          name: "String"
        }
      },
      aadAuthority: {
        serializedName: "aadAuthority",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageClassificationCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassificationCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageClassification"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageClassificationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassificationProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageClassificationMappingCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassificationMappingCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageClassificationMapping"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageClassificationMappingProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassificationMappingProperties",
    modelProperties: {
      targetStorageClassificationId: {
        serializedName: "targetStorageClassificationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageClassificationMappingInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassificationMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageMappingInputProperties"
        }
      }
    }
  }
};

export const StorageMappingInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageMappingInputProperties",
    modelProperties: {
      targetStorageClassificationId: {
        serializedName: "targetStorageClassificationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VCenterCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VCenterCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VCenter"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VCenterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VCenterProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      internalId: {
        serializedName: "internalId",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      discoveryStatus: {
        serializedName: "discoveryStatus",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      infrastructureId: {
        serializedName: "infrastructureId",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      fabricArmResourceName: {
        serializedName: "fabricArmResourceName",
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      }
    }
  }
};

export const AddVCenterRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddVCenterRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AddVCenterRequestProperties"
        }
      }
    }
  }
};

export const AddVCenterRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddVCenterRequestProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateVCenterRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateVCenterRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateVCenterRequestProperties"
        }
      }
    }
  }
};

export const UpdateVCenterRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateVCenterRequestProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Job"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobProperties",
    modelProperties: {
      activityId: {
        serializedName: "activityId",
        type: {
          name: "String"
        }
      },
      scenarioName: {
        serializedName: "scenarioName",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      stateDescription: {
        serializedName: "stateDescription",
        type: {
          name: "String"
        }
      },
      tasks: {
        serializedName: "tasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ASRTask"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobErrorDetails"
            }
          }
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      allowedActions: {
        serializedName: "allowedActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      targetObjectId: {
        serializedName: "targetObjectId",
        type: {
          name: "String"
        }
      },
      targetObjectName: {
        serializedName: "targetObjectName",
        type: {
          name: "String"
        }
      },
      targetInstanceType: {
        serializedName: "targetInstanceType",
        type: {
          name: "String"
        }
      },
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "JobDetails"
        }
      }
    }
  }
};

export const ASRTask: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ASRTask",
    modelProperties: {
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      allowedActions: {
        serializedName: "allowedActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      stateDescription: {
        serializedName: "stateDescription",
        type: {
          name: "String"
        }
      },
      taskType: {
        serializedName: "taskType",
        type: {
          name: "String"
        }
      },
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "TaskTypeDetails"
        }
      },
      groupTaskCustomDetails: {
        serializedName: "groupTaskCustomDetails",
        type: {
          name: "Composite",
          className: "GroupTaskDetails"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobErrorDetails"
            }
          }
        }
      }
    }
  }
};

export const TaskTypeDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskTypeDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupTaskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupTaskDetails",
    uberParent: "GroupTaskDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      },
      childTasks: {
        serializedName: "childTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ASRTask"
            }
          }
        }
      }
    }
  }
};

export const JobErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobErrorDetails",
    modelProperties: {
      serviceErrorDetails: {
        serializedName: "serviceErrorDetails",
        type: {
          name: "Composite",
          className: "ServiceError"
        }
      },
      providerErrorDetails: {
        serializedName: "providerErrorDetails",
        type: {
          name: "Composite",
          className: "ProviderError"
        }
      },
      errorLevel: {
        serializedName: "errorLevel",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "String"
        }
      },
      activityId: {
        serializedName: "activityId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProviderError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderError",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "Number"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      errorId: {
        serializedName: "errorId",
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      },
      affectedObjectDetails: {
        serializedName: "affectedObjectDetails",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ResumeJobParams: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResumeJobParams",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ResumeJobParamsProperties"
        }
      }
    }
  }
};

export const ResumeJobParamsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResumeJobParamsProperties",
    modelProperties: {
      comments: {
        serializedName: "comments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobQueryParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobQueryParameter",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String"
        }
      },
      fabricId: {
        serializedName: "fabricId",
        type: {
          name: "String"
        }
      },
      affectedObjectTypes: {
        serializedName: "affectedObjectTypes",
        type: {
          name: "String"
        }
      },
      jobStatus: {
        serializedName: "jobStatus",
        type: {
          name: "String"
        }
      },
      jobOutputType: {
        serializedName: "jobOutputType",
        type: {
          name: "String"
        }
      },
      jobName: {
        serializedName: "jobName",
        type: {
          name: "String"
        }
      },
      timezoneOffset: {
        serializedName: "timezoneOffset",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PolicyCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Policy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "PolicyProviderSpecificDetails"
        }
      }
    }
  }
};

export const PolicyProviderSpecificDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyProviderSpecificDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreatePolicyInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreatePolicyInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreatePolicyInputProperties"
        }
      }
    }
  }
};

export const CreatePolicyInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreatePolicyInputProperties",
    modelProperties: {
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Composite",
          className: "PolicyProviderSpecificInput"
        }
      }
    }
  }
};

export const PolicyProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyProviderSpecificInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdatePolicyInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdatePolicyInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdatePolicyInputProperties"
        }
      }
    }
  }
};

export const UpdatePolicyInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdatePolicyInputProperties",
    modelProperties: {
      replicationProviderSettings: {
        serializedName: "replicationProviderSettings",
        type: {
          name: "Composite",
          className: "PolicyProviderSpecificInput"
        }
      }
    }
  }
};

export const ReplicationProtectionIntentCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProtectionIntentCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationProtectionIntent"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationProtectionIntentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProtectionIntentProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobState: {
        serializedName: "jobState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isActive: {
        serializedName: "isActive",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      creationTimeUTC: {
        serializedName: "creationTimeUTC",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ReplicationProtectionIntentProviderSpecificSettings"
        }
      }
    }
  }
};

export const ReplicationProtectionIntentProviderSpecificSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProtectionIntentProviderSpecificSettings",
    uberParent: "ReplicationProtectionIntentProviderSpecificSettings",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateProtectionIntentInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateProtectionIntentInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateProtectionIntentProperties"
        }
      }
    }
  }
};

export const CreateProtectionIntentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateProtectionIntentProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "CreateProtectionIntentProviderSpecificDetails"
        }
      }
    }
  }
};

export const CreateProtectionIntentProviderSpecificDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateProtectionIntentProviderSpecificDetails",
    uberParent: "CreateProtectionIntentProviderSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlan"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      primaryFabricId: {
        serializedName: "primaryFabricId",
        type: {
          name: "String"
        }
      },
      primaryFabricFriendlyName: {
        serializedName: "primaryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      recoveryFabricId: {
        serializedName: "recoveryFabricId",
        type: {
          name: "String"
        }
      },
      recoveryFabricFriendlyName: {
        serializedName: "recoveryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      failoverDeploymentModel: {
        serializedName: "failoverDeploymentModel",
        type: {
          name: "String"
        }
      },
      replicationProviders: {
        serializedName: "replicationProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowedOperations: {
        serializedName: "allowedOperations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      lastPlannedFailoverTime: {
        serializedName: "lastPlannedFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      lastUnplannedFailoverTime: {
        serializedName: "lastUnplannedFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      lastTestFailoverTime: {
        serializedName: "lastTestFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      currentScenario: {
        serializedName: "currentScenario",
        type: {
          name: "Composite",
          className: "CurrentScenarioDetails"
        }
      },
      currentScenarioStatus: {
        serializedName: "currentScenarioStatus",
        type: {
          name: "String"
        }
      },
      currentScenarioStatusDescription: {
        serializedName: "currentScenarioStatusDescription",
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanGroup"
            }
          }
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProviderSpecificDetails"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanGroup",
    modelProperties: {
      groupType: {
        serializedName: "groupType",
        required: true,
        type: {
          name: "String"
        }
      },
      replicationProtectedItems: {
        serializedName: "replicationProtectedItems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProtectedItem"
            }
          }
        }
      },
      startGroupActions: {
        serializedName: "startGroupActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanAction"
            }
          }
        }
      },
      endGroupActions: {
        serializedName: "endGroupActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanAction"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanProtectedItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanProtectedItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      virtualMachineId: {
        serializedName: "virtualMachineId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanAction",
    modelProperties: {
      actionName: {
        serializedName: "actionName",
        required: true,
        type: {
          name: "String"
        }
      },
      failoverTypes: {
        serializedName: "failoverTypes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      failoverDirections: {
        serializedName: "failoverDirections",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "RecoveryPlanActionDetails"
        }
      }
    }
  }
};

export const RecoveryPlanActionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanActionDetails",
    uberParent: "RecoveryPlanActionDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanProviderSpecificDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanProviderSpecificDetails",
    uberParent: "RecoveryPlanProviderSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateRecoveryPlanInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateRecoveryPlanInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateRecoveryPlanInputProperties"
        }
      }
    }
  }
};

export const CreateRecoveryPlanInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateRecoveryPlanInputProperties",
    modelProperties: {
      primaryFabricId: {
        serializedName: "primaryFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryFabricId: {
        serializedName: "recoveryFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      failoverDeploymentModel: {
        serializedName: "failoverDeploymentModel",
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "groups",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanGroup"
            }
          }
        }
      },
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProviderSpecificInput"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanProviderSpecificInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanProviderSpecificInput",
    uberParent: "RecoveryPlanProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRecoveryPlanInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRecoveryPlanInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateRecoveryPlanInputProperties"
        }
      }
    }
  }
};

export const UpdateRecoveryPlanInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRecoveryPlanInputProperties",
    modelProperties: {
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanGroup"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanPlannedFailoverInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanPlannedFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPlanPlannedFailoverInputProperties"
        }
      }
    }
  }
};

export const RecoveryPlanPlannedFailoverInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanPlannedFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        required: true,
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProviderSpecificFailoverInput"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanProviderSpecificFailoverInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanProviderSpecificFailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanTestFailoverInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanTestFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPlanTestFailoverInputProperties"
        }
      }
    }
  }
};

export const RecoveryPlanTestFailoverInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanTestFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        required: true,
        type: {
          name: "String"
        }
      },
      networkType: {
        serializedName: "networkType",
        required: true,
        type: {
          name: "String"
        }
      },
      networkId: {
        serializedName: "networkId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProviderSpecificFailoverInput"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanTestFailoverCleanupInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanTestFailoverCleanupInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPlanTestFailoverCleanupInputProperties"
        }
      }
    }
  }
};

export const RecoveryPlanTestFailoverCleanupInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanTestFailoverCleanupInputProperties",
    modelProperties: {
      comments: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "comments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanUnplannedFailoverInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanUnplannedFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPlanUnplannedFailoverInputProperties"
        }
      }
    }
  }
};

export const RecoveryPlanUnplannedFailoverInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlanUnplannedFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceSiteOperations: {
        serializedName: "sourceSiteOperations",
        required: true,
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProviderSpecificFailoverInput"
            }
          }
        }
      }
    }
  }
};

export const SupportedOSProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedOSProperties",
    modelProperties: {
      supportedOsList: {
        serializedName: "supportedOsList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedOSProperty"
            }
          }
        }
      }
    }
  }
};

export const SupportedOSProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedOSProperty",
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      },
      supportedOs: {
        serializedName: "supportedOs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedOSDetails"
            }
          }
        }
      }
    }
  }
};

export const SupportedOSDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedOSDetails",
    modelProperties: {
      osName: {
        serializedName: "osName",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      osVersions: {
        serializedName: "osVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OSVersionWrapper"
            }
          }
        }
      }
    }
  }
};

export const OSVersionWrapper: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSVersionWrapper",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      servicePack: {
        serializedName: "servicePack",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultHealthProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultHealthProperties",
    modelProperties: {
      vaultErrors: {
        serializedName: "vaultErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      protectedItemsHealth: {
        serializedName: "protectedItemsHealth",
        type: {
          name: "Composite",
          className: "ResourceHealthSummary"
        }
      },
      fabricsHealth: {
        serializedName: "fabricsHealth",
        type: {
          name: "Composite",
          className: "ResourceHealthSummary"
        }
      },
      containersHealth: {
        serializedName: "containersHealth",
        type: {
          name: "Composite",
          className: "ResourceHealthSummary"
        }
      }
    }
  }
};

export const ResourceHealthSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceHealthSummary",
    modelProperties: {
      resourceCount: {
        serializedName: "resourceCount",
        type: {
          name: "Number"
        }
      },
      issues: {
        serializedName: "issues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorSummary"
            }
          }
        }
      },
      categorizedResourceCounts: {
        serializedName: "categorizedResourceCounts",
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      }
    }
  }
};

export const HealthErrorSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthErrorSummary",
    modelProperties: {
      summaryCode: {
        serializedName: "summaryCode",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      summaryMessage: {
        serializedName: "summaryMessage",
        type: {
          name: "String"
        }
      },
      affectedResourceType: {
        serializedName: "affectedResourceType",
        type: {
          name: "String"
        }
      },
      affectedResourceSubtype: {
        serializedName: "affectedResourceSubtype",
        type: {
          name: "String"
        }
      },
      affectedResourceCorrelationIds: {
        serializedName: "affectedResourceCorrelationIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VaultSettingCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultSettingCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VaultSetting"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultSettingProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultSettingProperties",
    modelProperties: {
      migrationSolutionId: {
        serializedName: "migrationSolutionId",
        type: {
          name: "String"
        }
      },
      vmwareToAzureProviderType: {
        serializedName: "vmwareToAzureProviderType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultSettingCreationInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultSettingCreationInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultSettingCreationInputProperties"
        }
      }
    }
  }
};

export const VaultSettingCreationInputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultSettingCreationInputProperties",
    modelProperties: {
      migrationSolutionId: {
        serializedName: "migrationSolutionId",
        type: {
          name: "String"
        }
      },
      vmwareToAzureProviderType: {
        serializedName: "vmwareToAzureProviderType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AVmDiskInputDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "A2AVmDiskInputDetails",
    modelProperties: {
      diskUri: {
        serializedName: "diskUri",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryAzureStorageAccountId: {
        serializedName: "recoveryAzureStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      primaryStagingAzureStorageAccountId: {
        serializedName: "primaryStagingAzureStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AVmManagedDiskInputDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "A2AVmManagedDiskInputDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        required: true,
        type: {
          name: "String"
        }
      },
      primaryStagingAzureStorageAccountId: {
        serializedName: "primaryStagingAzureStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryReplicaDiskAccountType: {
        serializedName: "recoveryReplicaDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryTargetDiskAccountType: {
        serializedName: "recoveryTargetDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryDiskEncryptionSetId: {
        serializedName: "recoveryDiskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      }
    }
  }
};

export const DiskEncryptionInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskEncryptionInfo",
    modelProperties: {
      diskEncryptionKeyInfo: {
        serializedName: "diskEncryptionKeyInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionKeyInfo"
        }
      },
      keyEncryptionKeyInfo: {
        serializedName: "keyEncryptionKeyInfo",
        type: {
          name: "Composite",
          className: "KeyEncryptionKeyInfo"
        }
      }
    }
  }
};

export const DiskEncryptionKeyInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskEncryptionKeyInfo",
    modelProperties: {
      secretIdentifier: {
        serializedName: "secretIdentifier",
        type: {
          name: "String"
        }
      },
      keyVaultResourceArmId: {
        serializedName: "keyVaultResourceArmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyEncryptionKeyInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyEncryptionKeyInfo",
    modelProperties: {
      keyIdentifier: {
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      keyVaultResourceArmId: {
        serializedName: "keyVaultResourceArmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionProfileCustomDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionProfileCustomDetails",
    uberParent: "ProtectionProfileCustomDetails",
    polymorphicDiscriminator: {
      serializedName: "resourceType",
      clientName: "resourceType"
    },
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCustomDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountCustomDetails",
    uberParent: "StorageAccountCustomDetails",
    polymorphicDiscriminator: {
      serializedName: "resourceType",
      clientName: "resourceType"
    },
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryAvailabilitySetCustomDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryAvailabilitySetCustomDetails",
    uberParent: "RecoveryAvailabilitySetCustomDetails",
    polymorphicDiscriminator: {
      serializedName: "resourceType",
      clientName: "resourceType"
    },
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryVirtualNetworkCustomDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryVirtualNetworkCustomDetails",
    uberParent: "RecoveryVirtualNetworkCustomDetails",
    polymorphicDiscriminator: {
      serializedName: "resourceType",
      clientName: "resourceType"
    },
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryProximityPlacementGroupCustomDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryProximityPlacementGroupCustomDetails",
    uberParent: "RecoveryProximityPlacementGroupCustomDetails",
    polymorphicDiscriminator: {
      serializedName: "resourceType",
      clientName: "resourceType"
    },
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AProtectionIntentDiskInputDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "A2AProtectionIntentDiskInputDetails",
    modelProperties: {
      diskUri: {
        serializedName: "diskUri",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryAzureStorageAccountCustomInput: {
        serializedName: "recoveryAzureStorageAccountCustomInput",
        type: {
          name: "Composite",
          className: "StorageAccountCustomDetails"
        }
      },
      primaryStagingStorageAccountCustomInput: {
        serializedName: "primaryStagingStorageAccountCustomInput",
        type: {
          name: "Composite",
          className: "StorageAccountCustomDetails"
        }
      }
    }
  }
};

export const A2AProtectionIntentManagedDiskInputDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "A2AProtectionIntentManagedDiskInputDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        required: true,
        type: {
          name: "String"
        }
      },
      primaryStagingStorageAccountCustomInput: {
        serializedName: "primaryStagingStorageAccountCustomInput",
        type: {
          name: "Composite",
          className: "StorageAccountCustomDetails"
        }
      },
      recoveryResourceGroupCustomInput: {
        serializedName: "recoveryResourceGroupCustomInput",
        type: {
          name: "Composite",
          className: "RecoveryResourceGroupCustomDetails"
        }
      },
      recoveryReplicaDiskAccountType: {
        serializedName: "recoveryReplicaDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryTargetDiskAccountType: {
        serializedName: "recoveryTargetDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryDiskEncryptionSetId: {
        serializedName: "recoveryDiskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      }
    }
  }
};

export const RecoveryResourceGroupCustomDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryResourceGroupCustomDetails",
    uberParent: "RecoveryResourceGroupCustomDetails",
    polymorphicDiscriminator: {
      serializedName: "resourceType",
      clientName: "resourceType"
    },
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AExtendedLocationDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "A2AExtendedLocationDetails",
    modelProperties: {
      primaryExtendedLocation: {
        serializedName: "primaryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      recoveryExtendedLocation: {
        serializedName: "recoveryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      }
    }
  }
};

export const A2AProtectedDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "A2AProtectedDiskDetails",
    modelProperties: {
      diskUri: {
        serializedName: "diskUri",
        type: {
          name: "String"
        }
      },
      recoveryAzureStorageAccountId: {
        serializedName: "recoveryAzureStorageAccountId",
        type: {
          name: "String"
        }
      },
      primaryDiskAzureStorageAccountId: {
        serializedName: "primaryDiskAzureStorageAccountId",
        type: {
          name: "String"
        }
      },
      recoveryDiskUri: {
        serializedName: "recoveryDiskUri",
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      diskCapacityInBytes: {
        serializedName: "diskCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      primaryStagingAzureStorageAccountId: {
        serializedName: "primaryStagingAzureStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        type: {
          name: "Boolean"
        }
      },
      monitoringPercentageCompletion: {
        serializedName: "monitoringPercentageCompletion",
        type: {
          name: "Number"
        }
      },
      monitoringJobType: {
        serializedName: "monitoringJobType",
        type: {
          name: "String"
        }
      },
      dataPendingInStagingStorageAccountInMB: {
        serializedName: "dataPendingInStagingStorageAccountInMB",
        type: {
          name: "Number"
        }
      },
      dataPendingAtSourceAgentInMB: {
        serializedName: "dataPendingAtSourceAgentInMB",
        type: {
          name: "Number"
        }
      },
      diskState: {
        serializedName: "diskState",
        type: {
          name: "String"
        }
      },
      allowedDiskLevelOperation: {
        serializedName: "allowedDiskLevelOperation",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isDiskEncrypted: {
        serializedName: "isDiskEncrypted",
        type: {
          name: "Boolean"
        }
      },
      secretIdentifier: {
        serializedName: "secretIdentifier",
        type: {
          name: "String"
        }
      },
      dekKeyVaultArmId: {
        serializedName: "dekKeyVaultArmId",
        type: {
          name: "String"
        }
      },
      isDiskKeyEncrypted: {
        serializedName: "isDiskKeyEncrypted",
        type: {
          name: "Boolean"
        }
      },
      keyIdentifier: {
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      kekKeyVaultArmId: {
        serializedName: "kekKeyVaultArmId",
        type: {
          name: "String"
        }
      },
      failoverDiskName: {
        serializedName: "failoverDiskName",
        type: {
          name: "String"
        }
      },
      tfoDiskName: {
        serializedName: "tfoDiskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AProtectedManagedDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "A2AProtectedManagedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryTargetDiskId: {
        serializedName: "recoveryTargetDiskId",
        type: {
          name: "String"
        }
      },
      recoveryReplicaDiskId: {
        serializedName: "recoveryReplicaDiskId",
        type: {
          name: "String"
        }
      },
      recoveryOrignalTargetDiskId: {
        serializedName: "recoveryOrignalTargetDiskId",
        type: {
          name: "String"
        }
      },
      recoveryReplicaDiskAccountType: {
        serializedName: "recoveryReplicaDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryTargetDiskAccountType: {
        serializedName: "recoveryTargetDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryDiskEncryptionSetId: {
        serializedName: "recoveryDiskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      primaryDiskEncryptionSetId: {
        serializedName: "primaryDiskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      diskCapacityInBytes: {
        serializedName: "diskCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      primaryStagingAzureStorageAccountId: {
        serializedName: "primaryStagingAzureStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        type: {
          name: "Boolean"
        }
      },
      monitoringPercentageCompletion: {
        serializedName: "monitoringPercentageCompletion",
        type: {
          name: "Number"
        }
      },
      monitoringJobType: {
        serializedName: "monitoringJobType",
        type: {
          name: "String"
        }
      },
      dataPendingInStagingStorageAccountInMB: {
        serializedName: "dataPendingInStagingStorageAccountInMB",
        type: {
          name: "Number"
        }
      },
      dataPendingAtSourceAgentInMB: {
        serializedName: "dataPendingAtSourceAgentInMB",
        type: {
          name: "Number"
        }
      },
      diskState: {
        serializedName: "diskState",
        type: {
          name: "String"
        }
      },
      allowedDiskLevelOperation: {
        serializedName: "allowedDiskLevelOperation",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isDiskEncrypted: {
        serializedName: "isDiskEncrypted",
        type: {
          name: "Boolean"
        }
      },
      secretIdentifier: {
        serializedName: "secretIdentifier",
        type: {
          name: "String"
        }
      },
      dekKeyVaultArmId: {
        serializedName: "dekKeyVaultArmId",
        type: {
          name: "String"
        }
      },
      isDiskKeyEncrypted: {
        serializedName: "isDiskKeyEncrypted",
        type: {
          name: "Boolean"
        }
      },
      keyIdentifier: {
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      kekKeyVaultArmId: {
        serializedName: "kekKeyVaultArmId",
        type: {
          name: "String"
        }
      },
      failoverDiskName: {
        serializedName: "failoverDiskName",
        type: {
          name: "String"
        }
      },
      tfoDiskName: {
        serializedName: "tfoDiskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AUnprotectedDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "A2AUnprotectedDiskDetails",
    modelProperties: {
      diskLunId: {
        serializedName: "diskLunId",
        type: {
          name: "Number"
        }
      },
      diskAutoProtectionStatus: {
        serializedName: "diskAutoProtectionStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMNicDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMNicDetails",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        type: {
          name: "String"
        }
      },
      replicaNicId: {
        serializedName: "replicaNicId",
        type: {
          name: "String"
        }
      },
      sourceNicArmId: {
        serializedName: "sourceNicArmId",
        type: {
          name: "String"
        }
      },
      vMNetworkName: {
        serializedName: "vMNetworkName",
        type: {
          name: "String"
        }
      },
      recoveryVMNetworkId: {
        serializedName: "recoveryVMNetworkId",
        type: {
          name: "String"
        }
      },
      ipConfigs: {
        serializedName: "ipConfigs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPConfigDetails"
            }
          }
        }
      },
      selectionType: {
        serializedName: "selectionType",
        type: {
          name: "String"
        }
      },
      recoveryNetworkSecurityGroupId: {
        serializedName: "recoveryNetworkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      enableAcceleratedNetworkingOnRecovery: {
        serializedName: "enableAcceleratedNetworkingOnRecovery",
        type: {
          name: "Boolean"
        }
      },
      tfoVMNetworkId: {
        serializedName: "tfoVMNetworkId",
        type: {
          name: "String"
        }
      },
      tfoNetworkSecurityGroupId: {
        serializedName: "tfoNetworkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      enableAcceleratedNetworkingOnTfo: {
        serializedName: "enableAcceleratedNetworkingOnTfo",
        type: {
          name: "Boolean"
        }
      },
      recoveryNicName: {
        serializedName: "recoveryNicName",
        type: {
          name: "String"
        }
      },
      recoveryNicResourceGroupName: {
        serializedName: "recoveryNicResourceGroupName",
        type: {
          name: "String"
        }
      },
      reuseExistingNic: {
        defaultValue: false,
        serializedName: "reuseExistingNic",
        type: {
          name: "Boolean"
        }
      },
      tfoRecoveryNicName: {
        serializedName: "tfoRecoveryNicName",
        type: {
          name: "String"
        }
      },
      tfoRecoveryNicResourceGroupName: {
        serializedName: "tfoRecoveryNicResourceGroupName",
        type: {
          name: "String"
        }
      },
      tfoReuseExistingNic: {
        defaultValue: false,
        serializedName: "tfoReuseExistingNic",
        type: {
          name: "Boolean"
        }
      },
      targetNicName: {
        serializedName: "targetNicName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IPConfigDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPConfigDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isPrimary: {
        serializedName: "isPrimary",
        type: {
          name: "Boolean"
        }
      },
      subnetName: {
        serializedName: "subnetName",
        type: {
          name: "String"
        }
      },
      staticIPAddress: {
        serializedName: "staticIPAddress",
        type: {
          name: "String"
        }
      },
      ipAddressType: {
        serializedName: "ipAddressType",
        type: {
          name: "String"
        }
      },
      isSeletedForFailover: {
        serializedName: "isSeletedForFailover",
        type: {
          name: "Boolean"
        }
      },
      recoverySubnetName: {
        serializedName: "recoverySubnetName",
        type: {
          name: "String"
        }
      },
      recoveryStaticIPAddress: {
        serializedName: "recoveryStaticIPAddress",
        type: {
          name: "String"
        }
      },
      recoveryIPAddressType: {
        serializedName: "recoveryIPAddressType",
        type: {
          name: "String"
        }
      },
      recoveryPublicIPAddressId: {
        serializedName: "recoveryPublicIPAddressId",
        type: {
          name: "String"
        }
      },
      recoveryLBBackendAddressPoolIds: {
        serializedName: "recoveryLBBackendAddressPoolIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tfoSubnetName: {
        serializedName: "tfoSubnetName",
        type: {
          name: "String"
        }
      },
      tfoStaticIPAddress: {
        serializedName: "tfoStaticIPAddress",
        type: {
          name: "String"
        }
      },
      tfoPublicIPAddressId: {
        serializedName: "tfoPublicIPAddressId",
        type: {
          name: "String"
        }
      },
      tfoLBBackendAddressPoolIds: {
        serializedName: "tfoLBBackendAddressPoolIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureToAzureVmSyncedConfigDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureToAzureVmSyncedConfigDetails",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      inputEndpoints: {
        serializedName: "inputEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InputEndpoint"
            }
          }
        }
      }
    }
  }
};

export const InputEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputEndpoint",
    modelProperties: {
      endpointName: {
        serializedName: "endpointName",
        type: {
          name: "String"
        }
      },
      privatePort: {
        serializedName: "privatePort",
        type: {
          name: "Number"
        }
      },
      publicPort: {
        serializedName: "publicPort",
        type: {
          name: "Number"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AVmManagedDiskUpdateDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "A2AVmManagedDiskUpdateDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      recoveryTargetDiskAccountType: {
        serializedName: "recoveryTargetDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryReplicaDiskAccountType: {
        serializedName: "recoveryReplicaDiskAccountType",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      },
      failoverDiskName: {
        serializedName: "failoverDiskName",
        type: {
          name: "String"
        }
      },
      tfoDiskName: {
        serializedName: "tfoDiskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AZoneDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "A2AZoneDetails",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentDetails",
    modelProperties: {
      agentId: {
        serializedName: "agentId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      machineId: {
        serializedName: "machineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      disks: {
        serializedName: "disks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentDiskDetails"
            }
          }
        }
      }
    }
  }
};

export const AgentDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isOSDisk: {
        serializedName: "isOSDisk",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capacityInBytes: {
        serializedName: "capacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lunId: {
        serializedName: "lunId",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplianceQueryParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplianceQueryParameter",
    modelProperties: {
      providerType: {
        serializedName: "providerType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureVmDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureVmDiskDetails",
    modelProperties: {
      vhdType: {
        serializedName: "vhdType",
        type: {
          name: "String"
        }
      },
      vhdId: {
        serializedName: "vhdId",
        type: {
          name: "String"
        }
      },
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      vhdName: {
        serializedName: "vhdName",
        type: {
          name: "String"
        }
      },
      maxSizeMB: {
        serializedName: "maxSizeMB",
        type: {
          name: "String"
        }
      },
      targetDiskLocation: {
        serializedName: "targetDiskLocation",
        type: {
          name: "String"
        }
      },
      targetDiskName: {
        serializedName: "targetDiskName",
        type: {
          name: "String"
        }
      },
      lunId: {
        serializedName: "lunId",
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      customTargetDiskName: {
        serializedName: "customTargetDiskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InconsistentVmDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InconsistentVmDetails",
    modelProperties: {
      vmName: {
        serializedName: "vmName",
        type: {
          name: "String"
        }
      },
      cloudName: {
        serializedName: "cloudName",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      errorIds: {
        serializedName: "errorIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DataStore: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataStore",
    modelProperties: {
      symbolicName: {
        serializedName: "symbolicName",
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "uuid",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "String"
        }
      },
      freeSpace: {
        serializedName: "freeSpace",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskDetails",
    modelProperties: {
      maxSizeMB: {
        serializedName: "maxSizeMB",
        type: {
          name: "Number"
        }
      },
      vhdType: {
        serializedName: "vhdType",
        type: {
          name: "String"
        }
      },
      vhdId: {
        serializedName: "vhdId",
        type: {
          name: "String"
        }
      },
      vhdName: {
        serializedName: "vhdName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskVolumeDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskVolumeDetails",
    modelProperties: {
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DraDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DraDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastHeartbeatUtc: {
        serializedName: "lastHeartbeatUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      forwardProtectedItemCount: {
        serializedName: "forwardProtectedItemCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      reverseProtectedItemCount: {
        serializedName: "reverseProtectedItemCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EventQueryParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventQueryParameter",
    modelProperties: {
      eventCode: {
        serializedName: "eventCode",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      eventType: {
        serializedName: "eventType",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      affectedObjectFriendlyName: {
        serializedName: "affectedObjectFriendlyName",
        type: {
          name: "String"
        }
      },
      affectedObjectCorrelationId: {
        serializedName: "affectedObjectCorrelationId",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const FabricQueryParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricQueryParameter",
    modelProperties: {
      zoneToZoneMappings: {
        serializedName: "zoneToZoneMappings",
        type: {
          name: "String"
        }
      },
      fetchAgentDetails: {
        serializedName: "fetchAgentDetails",
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      discoveryType: {
        serializedName: "discoveryType",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobEntity",
    modelProperties: {
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      jobFriendlyName: {
        serializedName: "jobFriendlyName",
        type: {
          name: "String"
        }
      },
      targetObjectId: {
        serializedName: "targetObjectId",
        type: {
          name: "String"
        }
      },
      targetObjectName: {
        serializedName: "targetObjectName",
        type: {
          name: "String"
        }
      },
      targetInstanceType: {
        serializedName: "targetInstanceType",
        type: {
          name: "String"
        }
      },
      jobScenarioName: {
        serializedName: "jobScenarioName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverReplicationProtectedItemDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverReplicationProtectedItemDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      testVmName: {
        serializedName: "testVmName",
        type: {
          name: "String"
        }
      },
      testVmFriendlyName: {
        serializedName: "testVmFriendlyName",
        type: {
          name: "String"
        }
      },
      networkConnectionStatus: {
        serializedName: "networkConnectionStatus",
        type: {
          name: "String"
        }
      },
      networkFriendlyName: {
        serializedName: "networkFriendlyName",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const HyperVHostDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVHostDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      marsAgentVersion: {
        serializedName: "marsAgentVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureDiskInputDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureDiskInputDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureManagedDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureManagedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      seedManagedDiskId: {
        serializedName: "seedManagedDiskId",
        type: {
          name: "String"
        }
      },
      replicaDiskType: {
        serializedName: "replicaDiskType",
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InitialReplicationDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InitialReplicationDetails",
    modelProperties: {
      initialReplicationType: {
        serializedName: "initialReplicationType",
        type: {
          name: "String"
        }
      },
      initialReplicationProgressPercentage: {
        serializedName: "initialReplicationProgressPercentage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OSDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSDetails",
    modelProperties: {
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      productType: {
        serializedName: "productType",
        type: {
          name: "String"
        }
      },
      osEdition: {
        serializedName: "osEdition",
        type: {
          name: "String"
        }
      },
      oSVersion: {
        serializedName: "oSVersion",
        type: {
          name: "String"
        }
      },
      oSMajorVersion: {
        serializedName: "oSMajorVersion",
        type: {
          name: "String"
        }
      },
      oSMinorVersion: {
        serializedName: "oSMinorVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateDiskInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateDiskInput",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetDiskName: {
        serializedName: "targetDiskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAgentDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageAgentDetails",
    modelProperties: {
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      agentUpdateStatus: {
        serializedName: "agentUpdateStatus",
        type: {
          name: "String"
        }
      },
      postUpdateRebootStatus: {
        serializedName: "postUpdateRebootStatus",
        type: {
          name: "String"
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const InMageAzureV2DiskInputDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageAzureV2DiskInputDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2ManagedDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageAzureV2ManagedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      seedManagedDiskId: {
        serializedName: "seedManagedDiskId",
        type: {
          name: "String"
        }
      },
      replicaDiskType: {
        serializedName: "replicaDiskType",
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      targetDiskName: {
        serializedName: "targetDiskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2ProtectedDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageAzureV2ProtectedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      protectionStage: {
        serializedName: "protectionStage",
        type: {
          name: "String"
        }
      },
      healthErrorCode: {
        serializedName: "healthErrorCode",
        type: {
          name: "String"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        type: {
          name: "String"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        type: {
          name: "Number"
        }
      },
      resyncDurationInSeconds: {
        serializedName: "resyncDurationInSeconds",
        type: {
          name: "Number"
        }
      },
      diskCapacityInBytes: {
        serializedName: "diskCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      fileSystemCapacityInBytes: {
        serializedName: "fileSystemCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      sourceDataInMegaBytes: {
        serializedName: "sourceDataInMegaBytes",
        type: {
          name: "Number"
        }
      },
      psDataInMegaBytes: {
        serializedName: "psDataInMegaBytes",
        type: {
          name: "Number"
        }
      },
      targetDataInMegaBytes: {
        serializedName: "targetDataInMegaBytes",
        type: {
          name: "Number"
        }
      },
      diskResized: {
        serializedName: "diskResized",
        type: {
          name: "String"
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      },
      resyncProcessedBytes: {
        serializedName: "resyncProcessedBytes",
        type: {
          name: "Number"
        }
      },
      resyncTotalTransferredBytes: {
        serializedName: "resyncTotalTransferredBytes",
        type: {
          name: "Number"
        }
      },
      resyncLast15MinutesTransferredBytes: {
        serializedName: "resyncLast15MinutesTransferredBytes",
        type: {
          name: "Number"
        }
      },
      resyncLastDataTransferTimeUTC: {
        serializedName: "resyncLastDataTransferTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      resyncStartTime: {
        serializedName: "resyncStartTime",
        type: {
          name: "DateTime"
        }
      },
      progressHealth: {
        serializedName: "progressHealth",
        type: {
          name: "String"
        }
      },
      progressStatus: {
        serializedName: "progressStatus",
        type: {
          name: "String"
        }
      },
      secondsToTakeSwitchProvider: {
        serializedName: "secondsToTakeSwitchProvider",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InMageAzureV2SwitchProviderBlockingErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageAzureV2SwitchProviderBlockingErrorDetails",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessageParameters: {
        serializedName: "errorMessageParameters",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      errorTags: {
        serializedName: "errorTags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const InMageAzureV2SwitchProviderDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageAzureV2SwitchProviderDetails",
    modelProperties: {
      targetVaultId: {
        serializedName: "targetVaultId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetResourceId: {
        serializedName: "targetResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetFabricId: {
        serializedName: "targetFabricId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetApplianceId: {
        serializedName: "targetApplianceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      diskSizeInMB: {
        serializedName: "diskSizeInMB",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      diskConfiguration: {
        serializedName: "diskConfiguration",
        type: {
          name: "String"
        }
      },
      volumeList: {
        serializedName: "volumeList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskVolumeDetails"
            }
          }
        }
      }
    }
  }
};

export const InMageDiskExclusionInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageDiskExclusionInput",
    modelProperties: {
      volumeOptions: {
        serializedName: "volumeOptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageVolumeExclusionOptions"
            }
          }
        }
      },
      diskSignatureOptions: {
        serializedName: "diskSignatureOptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageDiskSignatureExclusionOptions"
            }
          }
        }
      }
    }
  }
};

export const InMageVolumeExclusionOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageVolumeExclusionOptions",
    modelProperties: {
      volumeLabel: {
        serializedName: "volumeLabel",
        type: {
          name: "String"
        }
      },
      onlyExcludeIfSingleVolume: {
        serializedName: "onlyExcludeIfSingleVolume",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageDiskSignatureExclusionOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageDiskSignatureExclusionOptions",
    modelProperties: {
      diskSignature: {
        serializedName: "diskSignature",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageFabricSwitchProviderBlockingErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageFabricSwitchProviderBlockingErrorDetails",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessageParameters: {
        serializedName: "errorMessageParameters",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      errorTags: {
        serializedName: "errorTags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const InMageProtectedDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageProtectedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      protectionStage: {
        serializedName: "protectionStage",
        type: {
          name: "String"
        }
      },
      healthErrorCode: {
        serializedName: "healthErrorCode",
        type: {
          name: "String"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        type: {
          name: "String"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        type: {
          name: "Number"
        }
      },
      resyncDurationInSeconds: {
        serializedName: "resyncDurationInSeconds",
        type: {
          name: "Number"
        }
      },
      diskCapacityInBytes: {
        serializedName: "diskCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      fileSystemCapacityInBytes: {
        serializedName: "fileSystemCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      sourceDataInMB: {
        serializedName: "sourceDataInMB",
        type: {
          name: "Number"
        }
      },
      psDataInMB: {
        serializedName: "psDataInMB",
        type: {
          name: "Number"
        }
      },
      targetDataInMB: {
        serializedName: "targetDataInMB",
        type: {
          name: "Number"
        }
      },
      diskResized: {
        serializedName: "diskResized",
        type: {
          name: "String"
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      },
      resyncProcessedBytes: {
        serializedName: "resyncProcessedBytes",
        type: {
          name: "Number"
        }
      },
      resyncTotalTransferredBytes: {
        serializedName: "resyncTotalTransferredBytes",
        type: {
          name: "Number"
        }
      },
      resyncLast15MinutesTransferredBytes: {
        serializedName: "resyncLast15MinutesTransferredBytes",
        type: {
          name: "Number"
        }
      },
      resyncLastDataTransferTimeUTC: {
        serializedName: "resyncLastDataTransferTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      resyncStartTime: {
        serializedName: "resyncStartTime",
        type: {
          name: "DateTime"
        }
      },
      progressHealth: {
        serializedName: "progressHealth",
        type: {
          name: "String"
        }
      },
      progressStatus: {
        serializedName: "progressStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmAgentUpgradeBlockingErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmAgentUpgradeBlockingErrorDetails",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessageParameters: {
        serializedName: "errorMessageParameters",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      errorTags: {
        serializedName: "errorTags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const InMageRcmApplianceDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmApplianceDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricArmId: {
        serializedName: "fabricArmId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      processServer: {
        serializedName: "processServer",
        type: {
          name: "Composite",
          className: "ProcessServerDetails"
        }
      },
      rcmProxy: {
        serializedName: "rcmProxy",
        type: {
          name: "Composite",
          className: "RcmProxyDetails"
        }
      },
      pushInstaller: {
        serializedName: "pushInstaller",
        type: {
          name: "Composite",
          className: "PushInstallerDetails"
        }
      },
      replicationAgent: {
        serializedName: "replicationAgent",
        type: {
          name: "Composite",
          className: "ReplicationAgentDetails"
        }
      },
      reprotectAgent: {
        serializedName: "reprotectAgent",
        type: {
          name: "Composite",
          className: "ReprotectAgentDetails"
        }
      },
      marsAgent: {
        serializedName: "marsAgent",
        type: {
          name: "Composite",
          className: "MarsAgentDetails"
        }
      },
      dra: {
        serializedName: "dra",
        type: {
          name: "Composite",
          className: "DraDetails"
        }
      },
      switchProviderBlockingErrorDetails: {
        serializedName: "switchProviderBlockingErrorDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageRcmFabricSwitchProviderBlockingErrorDetails"
            }
          }
        }
      }
    }
  }
};

export const ProcessServerDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProcessServerDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastHeartbeatUtc: {
        serializedName: "lastHeartbeatUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      totalMemoryInBytes: {
        serializedName: "totalMemoryInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      availableMemoryInBytes: {
        serializedName: "availableMemoryInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      usedMemoryInBytes: {
        serializedName: "usedMemoryInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      memoryUsagePercentage: {
        serializedName: "memoryUsagePercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalSpaceInBytes: {
        serializedName: "totalSpaceInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      availableSpaceInBytes: {
        serializedName: "availableSpaceInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      usedSpaceInBytes: {
        serializedName: "usedSpaceInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      freeSpacePercentage: {
        serializedName: "freeSpacePercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      throughputUploadPendingDataInBytes: {
        serializedName: "throughputUploadPendingDataInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      throughputInBytes: {
        serializedName: "throughputInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      processorUsagePercentage: {
        serializedName: "processorUsagePercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      throughputStatus: {
        serializedName: "throughputStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemLoad: {
        serializedName: "systemLoad",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      systemLoadStatus: {
        serializedName: "systemLoadStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskUsageStatus: {
        serializedName: "diskUsageStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memoryUsageStatus: {
        serializedName: "memoryUsageStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      processorUsageStatus: {
        serializedName: "processorUsageStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      protectedItemCount: {
        serializedName: "protectedItemCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      historicHealth: {
        serializedName: "historicHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RcmProxyDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RcmProxyDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientAuthenticationType: {
        serializedName: "clientAuthenticationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastHeartbeatUtc: {
        serializedName: "lastHeartbeatUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      }
    }
  }
};

export const PushInstallerDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PushInstallerDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastHeartbeatUtc: {
        serializedName: "lastHeartbeatUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      }
    }
  }
};

export const ReplicationAgentDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationAgentDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastHeartbeatUtc: {
        serializedName: "lastHeartbeatUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      }
    }
  }
};

export const ReprotectAgentDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReprotectAgentDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastHeartbeatUtc: {
        serializedName: "lastHeartbeatUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      protectedItemCount: {
        serializedName: "protectedItemCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      accessibleDatastores: {
        serializedName: "accessibleDatastores",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vcenterId: {
        serializedName: "vcenterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastDiscoveryInUtc: {
        serializedName: "lastDiscoveryInUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MarsAgentDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarsAgentDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastHeartbeatUtc: {
        serializedName: "lastHeartbeatUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      }
    }
  }
};

export const InMageRcmFabricSwitchProviderBlockingErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmFabricSwitchProviderBlockingErrorDetails",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessageParameters: {
        serializedName: "errorMessageParameters",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      errorTags: {
        serializedName: "errorTags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const InMageRcmDiscoveredProtectedVmDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmDiscoveredProtectedVmDetails",
    modelProperties: {
      vCenterId: {
        serializedName: "vCenterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCenterFqdn: {
        serializedName: "vCenterFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datastores: {
        serializedName: "datastores",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vmwareToolsStatus: {
        serializedName: "vmwareToolsStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerStatus: {
        serializedName: "powerStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmFqdn: {
        serializedName: "vmFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedTimestamp: {
        serializedName: "updatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      isDeleted: {
        serializedName: "isDeleted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      lastDiscoveryTimeInUtc: {
        serializedName: "lastDiscoveryTimeInUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const InMageRcmDiskInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmDiskInput",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        required: true,
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        required: true,
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmDisksDefaultInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmDisksDefaultInput",
    modelProperties: {
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        required: true,
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmFailbackDiscoveredProtectedVmDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmFailbackDiscoveredProtectedVmDetails",
    modelProperties: {
      vCenterId: {
        serializedName: "vCenterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCenterFqdn: {
        serializedName: "vCenterFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datastores: {
        serializedName: "datastores",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vmwareToolsStatus: {
        serializedName: "vmwareToolsStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerStatus: {
        serializedName: "powerStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmFqdn: {
        serializedName: "vmFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedTimestamp: {
        serializedName: "updatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      isDeleted: {
        serializedName: "isDeleted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      lastDiscoveryTimeInUtc: {
        serializedName: "lastDiscoveryTimeInUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const InMageRcmFailbackMobilityAgentDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmFailbackMobilityAgentDetails",
    modelProperties: {
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestVersion: {
        serializedName: "latestVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      driverVersion: {
        serializedName: "driverVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestUpgradableVersionWithoutReboot: {
        serializedName: "latestUpgradableVersionWithoutReboot",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentVersionExpiryDate: {
        serializedName: "agentVersionExpiryDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      driverVersionExpiryDate: {
        serializedName: "driverVersionExpiryDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastHeartbeatUtc: {
        serializedName: "lastHeartbeatUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      reasonsBlockingUpgrade: {
        serializedName: "reasonsBlockingUpgrade",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isUpgradeable: {
        serializedName: "isUpgradeable",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmFailbackNicDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmFailbackNicDetails",
    modelProperties: {
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      adapterType: {
        serializedName: "adapterType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceIpAddress: {
        serializedName: "sourceIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmFailbackProtectedDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmFailbackProtectedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isOSDisk: {
        serializedName: "isOSDisk",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capacityInBytes: {
        serializedName: "capacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      diskUuid: {
        serializedName: "diskUuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataPendingInLogDataStoreInMB: {
        serializedName: "dataPendingInLogDataStoreInMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      dataPendingAtSourceAgentInMB: {
        serializedName: "dataPendingAtSourceAgentInMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isInitialReplicationComplete: {
        serializedName: "isInitialReplicationComplete",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      irDetails: {
        serializedName: "irDetails",
        type: {
          name: "Composite",
          className: "InMageRcmFailbackSyncDetails"
        }
      },
      resyncDetails: {
        serializedName: "resyncDetails",
        type: {
          name: "Composite",
          className: "InMageRcmFailbackSyncDetails"
        }
      },
      lastSyncTime: {
        serializedName: "lastSyncTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const InMageRcmFailbackSyncDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmFailbackSyncDetails",
    modelProperties: {
      progressHealth: {
        serializedName: "progressHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      transferredBytes: {
        serializedName: "transferredBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      last15MinutesTransferredBytes: {
        serializedName: "last15MinutesTransferredBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastDataTransferTimeUtc: {
        serializedName: "lastDataTransferTimeUtc",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      processedBytes: {
        serializedName: "processedBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastRefreshTime: {
        serializedName: "lastRefreshTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      progressPercentage: {
        serializedName: "progressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InMageRcmLastAgentUpgradeErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmLastAgentUpgradeErrorDetails",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessageParameters: {
        serializedName: "errorMessageParameters",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      errorTags: {
        serializedName: "errorTags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const InMageRcmMobilityAgentDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmMobilityAgentDetails",
    modelProperties: {
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestVersion: {
        serializedName: "latestVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestAgentReleaseDate: {
        serializedName: "latestAgentReleaseDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      driverVersion: {
        serializedName: "driverVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestUpgradableVersionWithoutReboot: {
        serializedName: "latestUpgradableVersionWithoutReboot",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentVersionExpiryDate: {
        serializedName: "agentVersionExpiryDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      driverVersionExpiryDate: {
        serializedName: "driverVersionExpiryDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastHeartbeatUtc: {
        serializedName: "lastHeartbeatUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      reasonsBlockingUpgrade: {
        serializedName: "reasonsBlockingUpgrade",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isUpgradeable: {
        serializedName: "isUpgradeable",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmNicDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmNicDetails",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPrimaryNic: {
        serializedName: "isPrimaryNic",
        type: {
          name: "String"
        }
      },
      isSelectedForFailover: {
        serializedName: "isSelectedForFailover",
        type: {
          name: "String"
        }
      },
      sourceIPAddress: {
        serializedName: "sourceIPAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceIPAddressType: {
        serializedName: "sourceIPAddressType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceNetworkId: {
        serializedName: "sourceNetworkId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceSubnetName: {
        serializedName: "sourceSubnetName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetIPAddress: {
        serializedName: "targetIPAddress",
        type: {
          name: "String"
        }
      },
      targetIPAddressType: {
        serializedName: "targetIPAddressType",
        type: {
          name: "String"
        }
      },
      targetSubnetName: {
        serializedName: "targetSubnetName",
        type: {
          name: "String"
        }
      },
      testSubnetName: {
        serializedName: "testSubnetName",
        type: {
          name: "String"
        }
      },
      testIPAddress: {
        serializedName: "testIPAddress",
        type: {
          name: "String"
        }
      },
      testIPAddressType: {
        serializedName: "testIPAddressType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmNicInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmNicInput",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        required: true,
        type: {
          name: "String"
        }
      },
      isPrimaryNic: {
        serializedName: "isPrimaryNic",
        required: true,
        type: {
          name: "String"
        }
      },
      isSelectedForFailover: {
        serializedName: "isSelectedForFailover",
        type: {
          name: "String"
        }
      },
      targetSubnetName: {
        serializedName: "targetSubnetName",
        type: {
          name: "String"
        }
      },
      targetStaticIPAddress: {
        serializedName: "targetStaticIPAddress",
        type: {
          name: "String"
        }
      },
      testSubnetName: {
        serializedName: "testSubnetName",
        type: {
          name: "String"
        }
      },
      testStaticIPAddress: {
        serializedName: "testStaticIPAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmProtectedDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmProtectedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isOSDisk: {
        serializedName: "isOSDisk",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capacityInBytes: {
        serializedName: "capacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      seedManagedDiskId: {
        serializedName: "seedManagedDiskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      seedBlobUri: {
        serializedName: "seedBlobUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetManagedDiskId: {
        serializedName: "targetManagedDiskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      dataPendingInLogDataStoreInMB: {
        serializedName: "dataPendingInLogDataStoreInMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      dataPendingAtSourceAgentInMB: {
        serializedName: "dataPendingAtSourceAgentInMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isInitialReplicationComplete: {
        serializedName: "isInitialReplicationComplete",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      irDetails: {
        serializedName: "irDetails",
        type: {
          name: "Composite",
          className: "InMageRcmSyncDetails"
        }
      },
      resyncDetails: {
        serializedName: "resyncDetails",
        type: {
          name: "Composite",
          className: "InMageRcmSyncDetails"
        }
      }
    }
  }
};

export const InMageRcmSyncDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InMageRcmSyncDetails",
    modelProperties: {
      progressHealth: {
        serializedName: "progressHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      transferredBytes: {
        serializedName: "transferredBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      last15MinutesTransferredBytes: {
        serializedName: "last15MinutesTransferredBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastDataTransferTimeUtc: {
        serializedName: "lastDataTransferTimeUtc",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      processedBytes: {
        serializedName: "processedBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastRefreshTime: {
        serializedName: "lastRefreshTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      progressPercentage: {
        serializedName: "progressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OSDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSDiskDetails",
    modelProperties: {
      osVhdId: {
        serializedName: "osVhdId",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vhdName: {
        serializedName: "vhdName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MasterTargetServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MasterTargetServer",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      versionStatus: {
        serializedName: "versionStatus",
        type: {
          name: "String"
        }
      },
      retentionVolumes: {
        serializedName: "retentionVolumes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RetentionVolume"
            }
          }
        }
      },
      dataStores: {
        serializedName: "dataStores",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataStore"
            }
          }
        }
      },
      validationErrors: {
        serializedName: "validationErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      diskCount: {
        serializedName: "diskCount",
        type: {
          name: "Number"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      marsAgentVersion: {
        serializedName: "marsAgentVersion",
        type: {
          name: "String"
        }
      },
      marsAgentExpiryDate: {
        serializedName: "marsAgentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      agentVersionDetails: {
        serializedName: "agentVersionDetails",
        type: {
          name: "Composite",
          className: "VersionDetails"
        }
      },
      marsAgentVersionDetails: {
        serializedName: "marsAgentVersionDetails",
        type: {
          name: "Composite",
          className: "VersionDetails"
        }
      }
    }
  }
};

export const RetentionVolume: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionVolume",
    modelProperties: {
      volumeName: {
        serializedName: "volumeName",
        type: {
          name: "String"
        }
      },
      capacityInBytes: {
        serializedName: "capacityInBytes",
        type: {
          name: "Number"
        }
      },
      freeSpaceInBytes: {
        serializedName: "freeSpaceInBytes",
        type: {
          name: "Number"
        }
      },
      thresholdPercentage: {
        serializedName: "thresholdPercentage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MigrationItemsQueryParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationItemsQueryParameter",
    modelProperties: {
      sourceFabricName: {
        serializedName: "sourceFabricName",
        type: {
          name: "String"
        }
      },
      sourceContainerName: {
        serializedName: "sourceContainerName",
        type: {
          name: "String"
        }
      },
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MobilityServiceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MobilityServiceUpdate",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      rebootStatus: {
        serializedName: "rebootStatus",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProcessServer",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      versionStatus: {
        serializedName: "versionStatus",
        type: {
          name: "String"
        }
      },
      mobilityServiceUpdates: {
        serializedName: "mobilityServiceUpdates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MobilityServiceUpdate"
            }
          }
        }
      },
      hostId: {
        serializedName: "hostId",
        type: {
          name: "String"
        }
      },
      machineCount: {
        serializedName: "machineCount",
        type: {
          name: "String"
        }
      },
      replicationPairCount: {
        serializedName: "replicationPairCount",
        type: {
          name: "String"
        }
      },
      systemLoad: {
        serializedName: "systemLoad",
        type: {
          name: "String"
        }
      },
      systemLoadStatus: {
        serializedName: "systemLoadStatus",
        type: {
          name: "String"
        }
      },
      cpuLoad: {
        serializedName: "cpuLoad",
        type: {
          name: "String"
        }
      },
      cpuLoadStatus: {
        serializedName: "cpuLoadStatus",
        type: {
          name: "String"
        }
      },
      totalMemoryInBytes: {
        serializedName: "totalMemoryInBytes",
        type: {
          name: "Number"
        }
      },
      availableMemoryInBytes: {
        serializedName: "availableMemoryInBytes",
        type: {
          name: "Number"
        }
      },
      memoryUsageStatus: {
        serializedName: "memoryUsageStatus",
        type: {
          name: "String"
        }
      },
      totalSpaceInBytes: {
        serializedName: "totalSpaceInBytes",
        type: {
          name: "Number"
        }
      },
      availableSpaceInBytes: {
        serializedName: "availableSpaceInBytes",
        type: {
          name: "Number"
        }
      },
      spaceUsageStatus: {
        serializedName: "spaceUsageStatus",
        type: {
          name: "String"
        }
      },
      psServiceStatus: {
        serializedName: "psServiceStatus",
        type: {
          name: "String"
        }
      },
      sslCertExpiryDate: {
        serializedName: "sslCertExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      sslCertExpiryRemainingDays: {
        serializedName: "sslCertExpiryRemainingDays",
        type: {
          name: "Number"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      agentVersionDetails: {
        serializedName: "agentVersionDetails",
        type: {
          name: "Composite",
          className: "VersionDetails"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      psStatsRefreshTime: {
        serializedName: "psStatsRefreshTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      throughputUploadPendingDataInBytes: {
        serializedName: "throughputUploadPendingDataInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      throughputInMBps: {
        serializedName: "throughputInMBps",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      throughputInBytes: {
        serializedName: "throughputInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      throughputStatus: {
        serializedName: "throughputStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      marsCommunicationStatus: {
        serializedName: "marsCommunicationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      marsRegistrationStatus: {
        serializedName: "marsRegistrationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectableItemQueryParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectableItemQueryParameter",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectedItemsQueryParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemsQueryParameter",
    modelProperties: {
      sourceFabricName: {
        serializedName: "sourceFabricName",
        type: {
          name: "String"
        }
      },
      recoveryPlanName: {
        serializedName: "recoveryPlanName",
        type: {
          name: "String"
        }
      },
      sourceFabricLocation: {
        serializedName: "sourceFabricLocation",
        type: {
          name: "String"
        }
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        type: {
          name: "String"
        }
      },
      vCenterName: {
        serializedName: "vCenterName",
        type: {
          name: "String"
        }
      },
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      },
      multiVmGroupCreateOption: {
        serializedName: "multiVmGroupCreateOption",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoleAssignment",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      roleDefinitionId: {
        serializedName: "roleDefinitionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunAsAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunAsAccount",
    modelProperties: {
      accountId: {
        serializedName: "accountId",
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtDiskInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareCbtDiskInput",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        required: true,
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      isOSDisk: {
        serializedName: "isOSDisk",
        required: true,
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      logStorageAccountSasSecretName: {
        serializedName: "logStorageAccountSasSecretName",
        required: true,
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtProtectedDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareCbtProtectedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      diskPath: {
        serializedName: "diskPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isOSDisk: {
        serializedName: "isOSDisk",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capacityInBytes: {
        serializedName: "capacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      logStorageAccountSasSecretName: {
        serializedName: "logStorageAccountSasSecretName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      seedManagedDiskId: {
        serializedName: "seedManagedDiskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      seedBlobUri: {
        serializedName: "seedBlobUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetManagedDiskId: {
        serializedName: "targetManagedDiskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetBlobUri: {
        serializedName: "targetBlobUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetDiskName: {
        serializedName: "targetDiskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtNicDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareCbtNicDetails",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPrimaryNic: {
        serializedName: "isPrimaryNic",
        type: {
          name: "String"
        }
      },
      sourceIPAddress: {
        serializedName: "sourceIPAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceIPAddressType: {
        serializedName: "sourceIPAddressType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceNetworkId: {
        serializedName: "sourceNetworkId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetIPAddress: {
        serializedName: "targetIPAddress",
        type: {
          name: "String"
        }
      },
      targetIPAddressType: {
        serializedName: "targetIPAddressType",
        type: {
          name: "String"
        }
      },
      targetSubnetName: {
        serializedName: "targetSubnetName",
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String"
        }
      },
      testSubnetName: {
        serializedName: "testSubnetName",
        type: {
          name: "String"
        }
      },
      testIPAddress: {
        serializedName: "testIPAddress",
        type: {
          name: "String"
        }
      },
      testIPAddressType: {
        serializedName: "testIPAddressType",
        type: {
          name: "String"
        }
      },
      targetNicName: {
        serializedName: "targetNicName",
        type: {
          name: "String"
        }
      },
      isSelectedForMigration: {
        serializedName: "isSelectedForMigration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtNicInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareCbtNicInput",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        required: true,
        type: {
          name: "String"
        }
      },
      isPrimaryNic: {
        serializedName: "isPrimaryNic",
        required: true,
        type: {
          name: "String"
        }
      },
      targetSubnetName: {
        serializedName: "targetSubnetName",
        type: {
          name: "String"
        }
      },
      targetStaticIPAddress: {
        serializedName: "targetStaticIPAddress",
        type: {
          name: "String"
        }
      },
      isSelectedForMigration: {
        serializedName: "isSelectedForMigration",
        type: {
          name: "String"
        }
      },
      targetNicName: {
        serializedName: "targetNicName",
        type: {
          name: "String"
        }
      },
      testSubnetName: {
        serializedName: "testSubnetName",
        type: {
          name: "String"
        }
      },
      testStaticIPAddress: {
        serializedName: "testStaticIPAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtUpdateDiskInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareCbtUpdateDiskInput",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetDiskName: {
        serializedName: "targetDiskName",
        type: {
          name: "String"
        }
      },
      isOSDisk: {
        serializedName: "isOSDisk",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Alert: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Alert",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AlertProperties"
        }
      }
    }
  }
};

export const Event: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Event",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EventProperties"
        }
      }
    }
  }
};

export const Fabric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Fabric",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FabricProperties"
        }
      }
    }
  }
};

export const LogicalNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogicalNetwork",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LogicalNetworkProperties"
        }
      }
    }
  }
};

export const Network: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Network",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkProperties"
        }
      }
    }
  }
};

export const NetworkMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkMapping",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkMappingProperties"
        }
      }
    }
  }
};

export const ProtectionContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainer",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectionContainerProperties"
        }
      }
    }
  }
};

export const MigrationItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationItem",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MigrationItemProperties"
        }
      }
    }
  }
};

export const MigrationRecoveryPoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationRecoveryPoint",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MigrationRecoveryPointProperties"
        }
      }
    }
  }
};

export const ProtectableItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectableItem",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectableItemProperties"
        }
      }
    }
  }
};

export const ReplicationProtectedItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProtectedItem",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReplicationProtectedItemProperties"
        }
      }
    }
  }
};

export const RecoveryPoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPoint",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPointProperties"
        }
      }
    }
  }
};

export const ProtectionContainerMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionContainerMapping",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectionContainerMappingProperties"
        }
      }
    }
  }
};

export const RecoveryServicesProvider: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryServicesProvider",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryServicesProviderProperties"
        }
      }
    }
  }
};

export const StorageClassification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassification",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageClassificationProperties"
        }
      }
    }
  }
};

export const StorageClassificationMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassificationMapping",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageClassificationMappingProperties"
        }
      }
    }
  }
};

export const VCenter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VCenter",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VCenterProperties"
        }
      }
    }
  }
};

export const Job: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Job",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobProperties"
        }
      }
    }
  }
};

export const Policy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Policy",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PolicyProperties"
        }
      }
    }
  }
};

export const ReplicationProtectionIntent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProtectionIntent",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReplicationProtectionIntentProperties"
        }
      }
    }
  }
};

export const RecoveryPlan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPlan",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPlanProperties"
        }
      }
    }
  }
};

export const SupportedOperatingSystems: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedOperatingSystems",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SupportedOSProperties"
        }
      }
    }
  }
};

export const VaultHealthDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultHealthDetails",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultHealthProperties"
        }
      }
    }
  }
};

export const VaultSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultSetting",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultSettingProperties"
        }
      }
    }
  }
};

export const InMageRcmApplianceSpecificDetails: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmApplianceSpecificDetails",
    uberParent: "ApplianceSpecificDetails",
    polymorphicDiscriminator:
      ApplianceSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ApplianceSpecificDetails.type.modelProperties,
      appliances: {
        serializedName: "appliances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageRcmApplianceDetails"
            }
          }
        }
      }
    }
  }
};

export const A2AEventDetails: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AEventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      protectedItemName: {
        serializedName: "protectedItemName",
        type: {
          name: "String"
        }
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      fabricLocation: {
        serializedName: "fabricLocation",
        type: {
          name: "String"
        }
      },
      remoteFabricName: {
        serializedName: "remoteFabricName",
        type: {
          name: "String"
        }
      },
      remoteFabricLocation: {
        serializedName: "remoteFabricLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplica2012EventDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplica2012",
  type: {
    name: "Composite",
    className: "HyperVReplica2012EventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      remoteContainerName: {
        serializedName: "remoteContainerName",
        type: {
          name: "String"
        }
      },
      remoteFabricName: {
        serializedName: "remoteFabricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplica2012R2EventDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplica2012R2",
  type: {
    name: "Composite",
    className: "HyperVReplica2012R2EventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      remoteContainerName: {
        serializedName: "remoteContainerName",
        type: {
          name: "String"
        }
      },
      remoteFabricName: {
        serializedName: "remoteFabricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureEventDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureEventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      remoteContainerName: {
        serializedName: "remoteContainerName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaBaseEventDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaBaseEventDetails",
  type: {
    name: "Composite",
    className: "HyperVReplicaBaseEventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      remoteContainerName: {
        serializedName: "remoteContainerName",
        type: {
          name: "String"
        }
      },
      remoteFabricName: {
        serializedName: "remoteFabricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2EventDetails: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2EventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      eventType: {
        serializedName: "eventType",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      component: {
        serializedName: "component",
        type: {
          name: "String"
        }
      },
      correctiveAction: {
        serializedName: "correctiveAction",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "String"
        }
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "String"
        }
      },
      siteName: {
        serializedName: "siteName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmEventDetails: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmEventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      protectedItemName: {
        serializedName: "protectedItemName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmName: {
        serializedName: "vmName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestAgentVersion: {
        serializedName: "latestAgentVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      applianceName: {
        serializedName: "applianceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverType: {
        serializedName: "serverType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentDisplayName: {
        serializedName: "componentDisplayName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmFailbackEventDetails: coreClient.CompositeMapper = {
  serializedName: "InMageRcmFailback",
  type: {
    name: "Composite",
    className: "InMageRcmFailbackEventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      protectedItemName: {
        serializedName: "protectedItemName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmName: {
        serializedName: "vmName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      applianceName: {
        serializedName: "applianceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverType: {
        serializedName: "serverType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentDisplayName: {
        serializedName: "componentDisplayName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtEventDetails: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtEventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      migrationItemName: {
        serializedName: "migrationItemName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStatusEventDetails: coreClient.CompositeMapper = {
  serializedName: "JobStatus",
  type: {
    name: "Composite",
    className: "JobStatusEventDetails",
    uberParent: "EventSpecificDetails",
    polymorphicDiscriminator:
      EventSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSpecificDetails.type.modelProperties,
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      jobFriendlyName: {
        serializedName: "jobFriendlyName",
        type: {
          name: "String"
        }
      },
      jobStatus: {
        serializedName: "jobStatus",
        type: {
          name: "String"
        }
      },
      affectedObjectType: {
        serializedName: "affectedObjectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFabricSpecificDetails: coreClient.CompositeMapper = {
  serializedName: "Azure",
  type: {
    name: "Composite",
    className: "AzureFabricSpecificDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      containerIds: {
        serializedName: "containerIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AZoneDetails"
            }
          }
        }
      },
      extendedLocations: {
        serializedName: "extendedLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AExtendedLocationDetails"
            }
          }
        }
      }
    }
  }
};

export const HyperVSiteDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVSite",
  type: {
    name: "Composite",
    className: "HyperVSiteDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties,
      hyperVHosts: {
        serializedName: "hyperVHosts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVHostDetails"
            }
          }
        }
      }
    }
  }
};

export const InMageRcmFabricSpecificDetails: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmFabricSpecificDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties,
      vmwareSiteId: {
        serializedName: "vmwareSiteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      physicalSiteId: {
        serializedName: "physicalSiteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceEndpoint: {
        serializedName: "serviceEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceResourceId: {
        serializedName: "serviceResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceContainerId: {
        serializedName: "serviceContainerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataPlaneUri: {
        serializedName: "dataPlaneUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlPlaneUri: {
        serializedName: "controlPlaneUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceAgentIdentityDetails: {
        serializedName: "sourceAgentIdentityDetails",
        type: {
          name: "Composite",
          className: "IdentityProviderDetails"
        }
      },
      processServers: {
        serializedName: "processServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessServerDetails"
            }
          }
        }
      },
      rcmProxies: {
        serializedName: "rcmProxies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RcmProxyDetails"
            }
          }
        }
      },
      pushInstallers: {
        serializedName: "pushInstallers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PushInstallerDetails"
            }
          }
        }
      },
      replicationAgents: {
        serializedName: "replicationAgents",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationAgentDetails"
            }
          }
        }
      },
      reprotectAgents: {
        serializedName: "reprotectAgents",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReprotectAgentDetails"
            }
          }
        }
      },
      marsAgents: {
        serializedName: "marsAgents",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MarsAgentDetails"
            }
          }
        }
      },
      dras: {
        serializedName: "dras",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DraDetails"
            }
          }
        }
      },
      agentDetails: {
        serializedName: "agentDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentDetails"
            }
          }
        }
      }
    }
  }
};

export const VmmDetails: coreClient.CompositeMapper = {
  serializedName: "VMM",
  type: {
    name: "Composite",
    className: "VmmDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties
    }
  }
};

export const VMwareDetails: coreClient.CompositeMapper = {
  serializedName: "VMware",
  type: {
    name: "Composite",
    className: "VMwareDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties,
      processServers: {
        serializedName: "processServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessServer"
            }
          }
        }
      },
      masterTargetServers: {
        serializedName: "masterTargetServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MasterTargetServer"
            }
          }
        }
      },
      runAsAccounts: {
        serializedName: "runAsAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RunAsAccount"
            }
          }
        }
      },
      replicationPairCount: {
        serializedName: "replicationPairCount",
        type: {
          name: "String"
        }
      },
      processServerCount: {
        serializedName: "processServerCount",
        type: {
          name: "String"
        }
      },
      agentCount: {
        serializedName: "agentCount",
        type: {
          name: "String"
        }
      },
      protectedServers: {
        serializedName: "protectedServers",
        type: {
          name: "String"
        }
      },
      systemLoad: {
        serializedName: "systemLoad",
        type: {
          name: "String"
        }
      },
      systemLoadStatus: {
        serializedName: "systemLoadStatus",
        type: {
          name: "String"
        }
      },
      cpuLoad: {
        serializedName: "cpuLoad",
        type: {
          name: "String"
        }
      },
      cpuLoadStatus: {
        serializedName: "cpuLoadStatus",
        type: {
          name: "String"
        }
      },
      totalMemoryInBytes: {
        serializedName: "totalMemoryInBytes",
        type: {
          name: "Number"
        }
      },
      availableMemoryInBytes: {
        serializedName: "availableMemoryInBytes",
        type: {
          name: "Number"
        }
      },
      memoryUsageStatus: {
        serializedName: "memoryUsageStatus",
        type: {
          name: "String"
        }
      },
      totalSpaceInBytes: {
        serializedName: "totalSpaceInBytes",
        type: {
          name: "Number"
        }
      },
      availableSpaceInBytes: {
        serializedName: "availableSpaceInBytes",
        type: {
          name: "Number"
        }
      },
      spaceUsageStatus: {
        serializedName: "spaceUsageStatus",
        type: {
          name: "String"
        }
      },
      webLoad: {
        serializedName: "webLoad",
        type: {
          name: "String"
        }
      },
      webLoadStatus: {
        serializedName: "webLoadStatus",
        type: {
          name: "String"
        }
      },
      databaseServerLoad: {
        serializedName: "databaseServerLoad",
        type: {
          name: "String"
        }
      },
      databaseServerLoadStatus: {
        serializedName: "databaseServerLoadStatus",
        type: {
          name: "String"
        }
      },
      csServiceStatus: {
        serializedName: "csServiceStatus",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      versionStatus: {
        serializedName: "versionStatus",
        type: {
          name: "String"
        }
      },
      sslCertExpiryDate: {
        serializedName: "sslCertExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      sslCertExpiryRemainingDays: {
        serializedName: "sslCertExpiryRemainingDays",
        type: {
          name: "Number"
        }
      },
      psTemplateVersion: {
        serializedName: "psTemplateVersion",
        type: {
          name: "String"
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      agentVersionDetails: {
        serializedName: "agentVersionDetails",
        type: {
          name: "Composite",
          className: "VersionDetails"
        }
      },
      switchProviderBlockingErrorDetails: {
        serializedName: "switchProviderBlockingErrorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageFabricSwitchProviderBlockingErrorDetails"
            }
          }
        }
      }
    }
  }
};

export const VMwareV2FabricSpecificDetails: coreClient.CompositeMapper = {
  serializedName: "VMwareV2",
  type: {
    name: "Composite",
    className: "VMwareV2FabricSpecificDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties,
      vmwareSiteId: {
        serializedName: "vmwareSiteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      physicalSiteId: {
        serializedName: "physicalSiteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrationSolutionId: {
        serializedName: "migrationSolutionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceEndpoint: {
        serializedName: "serviceEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceResourceId: {
        serializedName: "serviceResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceContainerId: {
        serializedName: "serviceContainerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      processServers: {
        serializedName: "processServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessServerDetails"
            }
          }
        }
      }
    }
  }
};

export const AzureFabricCreationInput: coreClient.CompositeMapper = {
  serializedName: "Azure",
  type: {
    name: "Composite",
    className: "AzureFabricCreationInput",
    uberParent: "FabricSpecificCreationInput",
    polymorphicDiscriminator:
      FabricSpecificCreationInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreationInput.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmFabricCreationInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmFabricCreationInput",
    uberParent: "FabricSpecificCreationInput",
    polymorphicDiscriminator:
      FabricSpecificCreationInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreationInput.type.modelProperties,
      vmwareSiteId: {
        serializedName: "vmwareSiteId",
        required: true,
        type: {
          name: "String"
        }
      },
      physicalSiteId: {
        serializedName: "physicalSiteId",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceAgentIdentity: {
        serializedName: "sourceAgentIdentity",
        type: {
          name: "Composite",
          className: "IdentityProviderInput"
        }
      }
    }
  }
};

export const VMwareV2FabricCreationInput: coreClient.CompositeMapper = {
  serializedName: "VMwareV2",
  type: {
    name: "Composite",
    className: "VMwareV2FabricCreationInput",
    uberParent: "FabricSpecificCreationInput",
    polymorphicDiscriminator:
      FabricSpecificCreationInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreationInput.type.modelProperties,
      vmwareSiteId: {
        serializedName: "vmwareSiteId",
        type: {
          name: "String"
        }
      },
      physicalSiteId: {
        serializedName: "physicalSiteId",
        type: {
          name: "String"
        }
      },
      migrationSolutionId: {
        serializedName: "migrationSolutionId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureToAzureNetworkMappingSettings: coreClient.CompositeMapper = {
  serializedName: "AzureToAzure",
  type: {
    name: "Composite",
    className: "AzureToAzureNetworkMappingSettings",
    uberParent: "NetworkMappingFabricSpecificSettings",
    polymorphicDiscriminator:
      NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...NetworkMappingFabricSpecificSettings.type.modelProperties,
      primaryFabricLocation: {
        serializedName: "primaryFabricLocation",
        type: {
          name: "String"
        }
      },
      recoveryFabricLocation: {
        serializedName: "recoveryFabricLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmmToAzureNetworkMappingSettings: coreClient.CompositeMapper = {
  serializedName: "VmmToAzure",
  type: {
    name: "Composite",
    className: "VmmToAzureNetworkMappingSettings",
    uberParent: "NetworkMappingFabricSpecificSettings",
    polymorphicDiscriminator:
      NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...NetworkMappingFabricSpecificSettings.type.modelProperties
    }
  }
};

export const VmmToVmmNetworkMappingSettings: coreClient.CompositeMapper = {
  serializedName: "VmmToVmm",
  type: {
    name: "Composite",
    className: "VmmToVmmNetworkMappingSettings",
    uberParent: "NetworkMappingFabricSpecificSettings",
    polymorphicDiscriminator:
      NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...NetworkMappingFabricSpecificSettings.type.modelProperties
    }
  }
};

export const AzureToAzureCreateNetworkMappingInput: coreClient.CompositeMapper = {
  serializedName: "AzureToAzure",
  type: {
    name: "Composite",
    className: "AzureToAzureCreateNetworkMappingInput",
    uberParent: "FabricSpecificCreateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreateNetworkMappingInput.type.modelProperties,
      primaryNetworkId: {
        serializedName: "primaryNetworkId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmmToAzureCreateNetworkMappingInput: coreClient.CompositeMapper = {
  serializedName: "VmmToAzure",
  type: {
    name: "Composite",
    className: "VmmToAzureCreateNetworkMappingInput",
    uberParent: "FabricSpecificCreateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreateNetworkMappingInput.type.modelProperties
    }
  }
};

export const VmmToVmmCreateNetworkMappingInput: coreClient.CompositeMapper = {
  serializedName: "VmmToVmm",
  type: {
    name: "Composite",
    className: "VmmToVmmCreateNetworkMappingInput",
    uberParent: "FabricSpecificCreateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreateNetworkMappingInput.type.modelProperties
    }
  }
};

export const AzureToAzureUpdateNetworkMappingInput: coreClient.CompositeMapper = {
  serializedName: "AzureToAzure",
  type: {
    name: "Composite",
    className: "AzureToAzureUpdateNetworkMappingInput",
    uberParent: "FabricSpecificUpdateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificUpdateNetworkMappingInput.type.modelProperties,
      primaryNetworkId: {
        serializedName: "primaryNetworkId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmmToAzureUpdateNetworkMappingInput: coreClient.CompositeMapper = {
  serializedName: "VmmToAzure",
  type: {
    name: "Composite",
    className: "VmmToAzureUpdateNetworkMappingInput",
    uberParent: "FabricSpecificUpdateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificUpdateNetworkMappingInput.type.modelProperties
    }
  }
};

export const VmmToVmmUpdateNetworkMappingInput: coreClient.CompositeMapper = {
  serializedName: "VmmToVmm",
  type: {
    name: "Composite",
    className: "VmmToVmmUpdateNetworkMappingInput",
    uberParent: "FabricSpecificUpdateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificUpdateNetworkMappingInput.type.modelProperties
    }
  }
};

export const A2AContainerCreationInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AContainerCreationInput",
    uberParent: "ReplicationProviderSpecificContainerCreationInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificContainerCreationInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificContainerCreationInput.type.modelProperties
    }
  }
};

export const A2ACrossClusterMigrationContainerCreationInput: coreClient.CompositeMapper = {
  serializedName: "A2ACrossClusterMigration",
  type: {
    name: "Composite",
    className: "A2ACrossClusterMigrationContainerCreationInput",
    uberParent: "ReplicationProviderSpecificContainerCreationInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificContainerCreationInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificContainerCreationInput.type.modelProperties
    }
  }
};

export const VMwareCbtContainerCreationInput: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtContainerCreationInput",
    uberParent: "ReplicationProviderSpecificContainerCreationInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificContainerCreationInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificContainerCreationInput.type.modelProperties
    }
  }
};

export const VMwareCbtMigrationDetails: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtMigrationDetails",
    uberParent: "MigrationProviderSpecificSettings",
    polymorphicDiscriminator:
      MigrationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...MigrationProviderSpecificSettings.type.modelProperties,
      vmwareMachineId: {
        serializedName: "vmwareMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firmwareType: {
        serializedName: "firmwareType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetGeneration: {
        serializedName: "targetGeneration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      sqlServerLicenseType: {
        serializedName: "sqlServerLicenseType",
        type: {
          name: "String"
        }
      },
      dataMoverRunAsAccountId: {
        serializedName: "dataMoverRunAsAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      snapshotRunAsAccountId: {
        serializedName: "snapshotRunAsAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      targetLocation: {
        serializedName: "targetLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        serializedName: "targetResourceGroupId",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      targetBootDiagnosticsStorageAccountId: {
        serializedName: "targetBootDiagnosticsStorageAccountId",
        type: {
          name: "String"
        }
      },
      targetVmTags: {
        serializedName: "targetVmTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareCbtProtectedDiskDetails"
            }
          }
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareCbtNicDetails"
            }
          }
        }
      },
      targetNicTags: {
        serializedName: "targetNicTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      migrationRecoveryPointId: {
        serializedName: "migrationRecoveryPointId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastRecoveryPointReceived: {
        serializedName: "lastRecoveryPointReceived",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastRecoveryPointId: {
        serializedName: "lastRecoveryPointId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      initialSeedingProgressPercentage: {
        serializedName: "initialSeedingProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      migrationProgressPercentage: {
        serializedName: "migrationProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resumeProgressPercentage: {
        serializedName: "resumeProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      initialSeedingRetryCount: {
        serializedName: "initialSeedingRetryCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncRetryCount: {
        serializedName: "resyncRetryCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resumeRetryCount: {
        serializedName: "resumeRetryCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resyncState: {
        serializedName: "resyncState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      performAutoResync: {
        serializedName: "performAutoResync",
        type: {
          name: "String"
        }
      },
      seedDiskTags: {
        serializedName: "seedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetDiskTags: {
        serializedName: "targetDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VMwareCbtEnableMigrationInput: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtEnableMigrationInput",
    uberParent: "EnableMigrationProviderSpecificInput",
    polymorphicDiscriminator:
      EnableMigrationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableMigrationProviderSpecificInput.type.modelProperties,
      vmwareMachineId: {
        serializedName: "vmwareMachineId",
        required: true,
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareCbtDiskInput"
            }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      sqlServerLicenseType: {
        serializedName: "sqlServerLicenseType",
        type: {
          name: "String"
        }
      },
      performSqlBulkRegistration: {
        serializedName: "performSqlBulkRegistration",
        type: {
          name: "String"
        }
      },
      dataMoverRunAsAccountId: {
        serializedName: "dataMoverRunAsAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      snapshotRunAsAccountId: {
        serializedName: "snapshotRunAsAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        serializedName: "targetResourceGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        required: true,
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String"
        }
      },
      targetSubnetName: {
        serializedName: "targetSubnetName",
        type: {
          name: "String"
        }
      },
      testSubnetName: {
        serializedName: "testSubnetName",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      targetBootDiagnosticsStorageAccountId: {
        serializedName: "targetBootDiagnosticsStorageAccountId",
        type: {
          name: "String"
        }
      },
      performAutoResync: {
        serializedName: "performAutoResync",
        type: {
          name: "String"
        }
      },
      targetVmTags: {
        serializedName: "targetVmTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      seedDiskTags: {
        serializedName: "seedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetDiskTags: {
        serializedName: "targetDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetNicTags: {
        serializedName: "targetNicTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VMwareCbtUpdateMigrationItemInput: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtUpdateMigrationItemInput",
    uberParent: "UpdateMigrationItemProviderSpecificInput",
    polymorphicDiscriminator:
      UpdateMigrationItemProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UpdateMigrationItemProviderSpecificInput.type.modelProperties,
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        serializedName: "targetResourceGroupId",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      targetBootDiagnosticsStorageAccountId: {
        serializedName: "targetBootDiagnosticsStorageAccountId",
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareCbtNicInput"
            }
          }
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareCbtUpdateDiskInput"
            }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      sqlServerLicenseType: {
        serializedName: "sqlServerLicenseType",
        type: {
          name: "String"
        }
      },
      performAutoResync: {
        serializedName: "performAutoResync",
        type: {
          name: "String"
        }
      },
      targetVmTags: {
        serializedName: "targetVmTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetDiskTags: {
        serializedName: "targetDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetNicTags: {
        serializedName: "targetNicTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VMwareCbtMigrateInput: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtMigrateInput",
    uberParent: "MigrateProviderSpecificInput",
    polymorphicDiscriminator:
      MigrateProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...MigrateProviderSpecificInput.type.modelProperties,
      performShutdown: {
        serializedName: "performShutdown",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtResumeReplicationInput: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtResumeReplicationInput",
    uberParent: "ResumeReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ResumeReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResumeReplicationProviderSpecificInput.type.modelProperties,
      deleteMigrationResources: {
        serializedName: "deleteMigrationResources",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtResyncInput: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtResyncInput",
    uberParent: "ResyncProviderSpecificInput",
    polymorphicDiscriminator:
      ResyncProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResyncProviderSpecificInput.type.modelProperties,
      skipCbtReset: {
        serializedName: "skipCbtReset",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtTestMigrateInput: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtTestMigrateInput",
    uberParent: "TestMigrateProviderSpecificInput",
    polymorphicDiscriminator:
      TestMigrateProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...TestMigrateProviderSpecificInput.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        required: true,
        type: {
          name: "String"
        }
      },
      networkId: {
        serializedName: "networkId",
        required: true,
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareCbtNicInput"
            }
          }
        }
      }
    }
  }
};

export const HyperVVirtualMachineDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVVirtualMachine",
  type: {
    name: "Composite",
    className: "HyperVVirtualMachineDetails",
    uberParent: "ConfigurationSettings",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      ...ConfigurationSettings.type.modelProperties,
      sourceItemId: {
        serializedName: "sourceItemId",
        type: {
          name: "String"
        }
      },
      generation: {
        serializedName: "generation",
        type: {
          name: "String"
        }
      },
      osDetails: {
        serializedName: "osDetails",
        type: {
          name: "Composite",
          className: "OSDetails"
        }
      },
      diskDetails: {
        serializedName: "diskDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskDetails"
            }
          }
        }
      },
      hasPhysicalDisk: {
        serializedName: "hasPhysicalDisk",
        type: {
          name: "String"
        }
      },
      hasFibreChannelAdapter: {
        serializedName: "hasFibreChannelAdapter",
        type: {
          name: "String"
        }
      },
      hasSharedVhd: {
        serializedName: "hasSharedVhd",
        type: {
          name: "String"
        }
      },
      hyperVHostId: {
        serializedName: "hyperVHostId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationGroupDetails: coreClient.CompositeMapper = {
  serializedName: "ReplicationGroupDetails",
  type: {
    name: "Composite",
    className: "ReplicationGroupDetails",
    uberParent: "ConfigurationSettings",
    polymorphicDiscriminator:
      ConfigurationSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ConfigurationSettings.type.modelProperties
    }
  }
};

export const VMwareVirtualMachineDetails: coreClient.CompositeMapper = {
  serializedName: "VMwareVirtualMachine",
  type: {
    name: "Composite",
    className: "VMwareVirtualMachineDetails",
    uberParent: "ConfigurationSettings",
    polymorphicDiscriminator:
      ConfigurationSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ConfigurationSettings.type.modelProperties,
      agentGeneratedId: {
        serializedName: "agentGeneratedId",
        type: {
          name: "String"
        }
      },
      agentInstalled: {
        serializedName: "agentInstalled",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      poweredOn: {
        serializedName: "poweredOn",
        type: {
          name: "String"
        }
      },
      vCenterInfrastructureId: {
        serializedName: "vCenterInfrastructureId",
        type: {
          name: "String"
        }
      },
      discoveryType: {
        serializedName: "discoveryType",
        type: {
          name: "String"
        }
      },
      diskDetails: {
        serializedName: "diskDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageDiskDetails"
            }
          }
        }
      },
      validationErrors: {
        serializedName: "validationErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      }
    }
  }
};

export const A2ACrossClusterMigrationReplicationDetails: coreClient.CompositeMapper = {
  serializedName: "A2ACrossClusterMigration",
  type: {
    name: "Composite",
    className: "A2ACrossClusterMigrationReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      fabricObjectId: {
        serializedName: "fabricObjectId",
        type: {
          name: "String"
        }
      },
      primaryFabricLocation: {
        serializedName: "primaryFabricLocation",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      lifecycleId: {
        serializedName: "lifecycleId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AReplicationDetails: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      fabricObjectId: {
        serializedName: "fabricObjectId",
        type: {
          name: "String"
        }
      },
      initialPrimaryZone: {
        serializedName: "initialPrimaryZone",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      initialPrimaryFabricLocation: {
        serializedName: "initialPrimaryFabricLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      initialRecoveryZone: {
        serializedName: "initialRecoveryZone",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      initialPrimaryExtendedLocation: {
        serializedName: "initialPrimaryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      initialRecoveryExtendedLocation: {
        serializedName: "initialRecoveryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      initialRecoveryFabricLocation: {
        serializedName: "initialRecoveryFabricLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      multiVmGroupCreateOption: {
        serializedName: "multiVmGroupCreateOption",
        type: {
          name: "String"
        }
      },
      managementId: {
        serializedName: "managementId",
        type: {
          name: "String"
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AProtectedDiskDetails"
            }
          }
        }
      },
      unprotectedDisks: {
        serializedName: "unprotectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AUnprotectedDiskDetails"
            }
          }
        }
      },
      protectedManagedDisks: {
        serializedName: "protectedManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AProtectedManagedDiskDetails"
            }
          }
        }
      },
      recoveryBootDiagStorageAccountId: {
        serializedName: "recoveryBootDiagStorageAccountId",
        type: {
          name: "String"
        }
      },
      primaryFabricLocation: {
        serializedName: "primaryFabricLocation",
        type: {
          name: "String"
        }
      },
      recoveryFabricLocation: {
        serializedName: "recoveryFabricLocation",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      recoveryAzureVMSize: {
        serializedName: "recoveryAzureVMSize",
        type: {
          name: "String"
        }
      },
      recoveryAzureVMName: {
        serializedName: "recoveryAzureVMName",
        type: {
          name: "String"
        }
      },
      recoveryAzureResourceGroupId: {
        serializedName: "recoveryAzureResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryCloudService: {
        serializedName: "recoveryCloudService",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySet: {
        serializedName: "recoveryAvailabilitySet",
        type: {
          name: "String"
        }
      },
      selectedRecoveryAzureNetworkId: {
        serializedName: "selectedRecoveryAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedTfoAzureNetworkId: {
        serializedName: "selectedTfoAzureNetworkId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMNicDetails"
            }
          }
        }
      },
      vmSyncedConfigDetails: {
        serializedName: "vmSyncedConfigDetails",
        type: {
          name: "Composite",
          className: "AzureToAzureVmSyncedConfigDetails"
        }
      },
      monitoringPercentageCompletion: {
        serializedName: "monitoringPercentageCompletion",
        type: {
          name: "Number"
        }
      },
      monitoringJobType: {
        serializedName: "monitoringJobType",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      isReplicationAgentUpdateRequired: {
        serializedName: "isReplicationAgentUpdateRequired",
        type: {
          name: "Boolean"
        }
      },
      agentCertificateExpiryDate: {
        serializedName: "agentCertificateExpiryDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      isReplicationAgentCertificateUpdateRequired: {
        serializedName: "isReplicationAgentCertificateUpdateRequired",
        type: {
          name: "Boolean"
        }
      },
      recoveryFabricObjectId: {
        serializedName: "recoveryFabricObjectId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      lifecycleId: {
        serializedName: "lifecycleId",
        type: {
          name: "String"
        }
      },
      testFailoverRecoveryFabricObjectId: {
        serializedName: "testFailoverRecoveryFabricObjectId",
        type: {
          name: "String"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      },
      primaryAvailabilityZone: {
        serializedName: "primaryAvailabilityZone",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilityZone: {
        serializedName: "recoveryAvailabilityZone",
        type: {
          name: "String"
        }
      },
      primaryExtendedLocation: {
        serializedName: "primaryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      recoveryExtendedLocation: {
        serializedName: "recoveryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      vmEncryptionType: {
        serializedName: "vmEncryptionType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tfoAzureVMName: {
        serializedName: "tfoAzureVMName",
        type: {
          name: "String"
        }
      },
      recoveryAzureGeneration: {
        serializedName: "recoveryAzureGeneration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recoveryProximityPlacementGroupId: {
        serializedName: "recoveryProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      autoProtectionOfDataDisk: {
        serializedName: "autoProtectionOfDataDisk",
        type: {
          name: "String"
        }
      },
      recoveryVirtualMachineScaleSetId: {
        serializedName: "recoveryVirtualMachineScaleSetId",
        type: {
          name: "String"
        }
      },
      recoveryCapacityReservationGroupId: {
        serializedName: "recoveryCapacityReservationGroupId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureReplicationDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      azureVmDiskDetails: {
        serializedName: "azureVmDiskDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureVmDiskDetails"
            }
          }
        }
      },
      recoveryAzureVmName: {
        serializedName: "recoveryAzureVmName",
        type: {
          name: "String"
        }
      },
      recoveryAzureVMSize: {
        serializedName: "recoveryAzureVMSize",
        type: {
          name: "String"
        }
      },
      recoveryAzureStorageAccount: {
        serializedName: "recoveryAzureStorageAccount",
        type: {
          name: "String"
        }
      },
      recoveryAzureLogStorageAccountId: {
        serializedName: "recoveryAzureLogStorageAccountId",
        type: {
          name: "String"
        }
      },
      lastReplicatedTime: {
        serializedName: "lastReplicatedTime",
        type: {
          name: "DateTime"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      initialReplicationDetails: {
        serializedName: "initialReplicationDetails",
        type: {
          name: "Composite",
          className: "InitialReplicationDetails"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMNicDetails"
            }
          }
        }
      },
      selectedRecoveryAzureNetworkId: {
        serializedName: "selectedRecoveryAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedSourceNicId: {
        serializedName: "selectedSourceNicId",
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "String"
        }
      },
      oSDetails: {
        serializedName: "oSDetails",
        type: {
          name: "Composite",
          className: "OSDetails"
        }
      },
      sourceVmRamSizeInMB: {
        serializedName: "sourceVmRamSizeInMB",
        type: {
          name: "Number"
        }
      },
      sourceVmCpuCount: {
        serializedName: "sourceVmCpuCount",
        type: {
          name: "Number"
        }
      },
      enableRdpOnTargetOption: {
        serializedName: "enableRdpOnTargetOption",
        type: {
          name: "String"
        }
      },
      recoveryAzureResourceGroupId: {
        serializedName: "recoveryAzureResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      useManagedDisks: {
        serializedName: "useManagedDisks",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      sqlServerLicenseType: {
        serializedName: "sqlServerLicenseType",
        type: {
          name: "String"
        }
      },
      lastRecoveryPointReceived: {
        serializedName: "lastRecoveryPointReceived",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      targetVmTags: {
        serializedName: "targetVmTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      seedManagedDiskTags: {
        serializedName: "seedManagedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetManagedDiskTags: {
        serializedName: "targetManagedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetNicTags: {
        serializedName: "targetNicTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      protectedManagedDisks: {
        serializedName: "protectedManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVReplicaAzureManagedDiskDetails"
            }
          }
        }
      }
    }
  }
};

export const HyperVReplicaBaseReplicationDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaBaseReplicationDetails",
  type: {
    name: "Composite",
    className: "HyperVReplicaBaseReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      lastReplicatedTime: {
        serializedName: "lastReplicatedTime",
        type: {
          name: "DateTime"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMNicDetails"
            }
          }
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      initialReplicationDetails: {
        serializedName: "initialReplicationDetails",
        type: {
          name: "Composite",
          className: "InitialReplicationDetails"
        }
      },
      vMDiskDetails: {
        serializedName: "vMDiskDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskDetails"
            }
          }
        }
      }
    }
  }
};

export const HyperVReplicaBlueReplicationDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplica2012R2",
  type: {
    name: "Composite",
    className: "HyperVReplicaBlueReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      lastReplicatedTime: {
        serializedName: "lastReplicatedTime",
        type: {
          name: "DateTime"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMNicDetails"
            }
          }
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      initialReplicationDetails: {
        serializedName: "initialReplicationDetails",
        type: {
          name: "Composite",
          className: "InitialReplicationDetails"
        }
      },
      vMDiskDetails: {
        serializedName: "vMDiskDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskDetails"
            }
          }
        }
      }
    }
  }
};

export const HyperVReplicaReplicationDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplica2012",
  type: {
    name: "Composite",
    className: "HyperVReplicaReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      lastReplicatedTime: {
        serializedName: "lastReplicatedTime",
        type: {
          name: "DateTime"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMNicDetails"
            }
          }
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      initialReplicationDetails: {
        serializedName: "initialReplicationDetails",
        type: {
          name: "Composite",
          className: "InitialReplicationDetails"
        }
      },
      vMDiskDetails: {
        serializedName: "vMDiskDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskDetails"
            }
          }
        }
      }
    }
  }
};

export const InMageAzureV2ReplicationDetails: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2ReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      infrastructureVmId: {
        serializedName: "infrastructureVmId",
        type: {
          name: "String"
        }
      },
      vCenterInfrastructureId: {
        serializedName: "vCenterInfrastructureId",
        type: {
          name: "String"
        }
      },
      protectionStage: {
        serializedName: "protectionStage",
        type: {
          name: "String"
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        type: {
          name: "Number"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      compressedDataRateInMB: {
        serializedName: "compressedDataRateInMB",
        type: {
          name: "Number"
        }
      },
      uncompressedDataRateInMB: {
        serializedName: "uncompressedDataRateInMB",
        type: {
          name: "Number"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      isAgentUpdateRequired: {
        serializedName: "isAgentUpdateRequired",
        type: {
          name: "String"
        }
      },
      isRebootAfterUpdateRequired: {
        serializedName: "isRebootAfterUpdateRequired",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      processServerName: {
        serializedName: "processServerName",
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageAzureV2ProtectedDiskDetails"
            }
          }
        }
      },
      diskResized: {
        serializedName: "diskResized",
        type: {
          name: "String"
        }
      },
      masterTargetId: {
        serializedName: "masterTargetId",
        type: {
          name: "String"
        }
      },
      sourceVmCpuCount: {
        serializedName: "sourceVmCpuCount",
        type: {
          name: "Number"
        }
      },
      sourceVmRamSizeInMB: {
        serializedName: "sourceVmRamSizeInMB",
        type: {
          name: "Number"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vhdName: {
        serializedName: "vhdName",
        type: {
          name: "String"
        }
      },
      osDiskId: {
        serializedName: "osDiskId",
        type: {
          name: "String"
        }
      },
      azureVMDiskDetails: {
        serializedName: "azureVMDiskDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureVmDiskDetails"
            }
          }
        }
      },
      recoveryAzureVMName: {
        serializedName: "recoveryAzureVMName",
        type: {
          name: "String"
        }
      },
      recoveryAzureVMSize: {
        serializedName: "recoveryAzureVMSize",
        type: {
          name: "String"
        }
      },
      recoveryAzureStorageAccount: {
        serializedName: "recoveryAzureStorageAccount",
        type: {
          name: "String"
        }
      },
      recoveryAzureLogStorageAccountId: {
        serializedName: "recoveryAzureLogStorageAccountId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMNicDetails"
            }
          }
        }
      },
      selectedRecoveryAzureNetworkId: {
        serializedName: "selectedRecoveryAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedTfoAzureNetworkId: {
        serializedName: "selectedTfoAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedSourceNicId: {
        serializedName: "selectedSourceNicId",
        type: {
          name: "String"
        }
      },
      discoveryType: {
        serializedName: "discoveryType",
        type: {
          name: "String"
        }
      },
      enableRdpOnTargetOption: {
        serializedName: "enableRdpOnTargetOption",
        type: {
          name: "String"
        }
      },
      datastores: {
        serializedName: "datastores",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      targetVmId: {
        serializedName: "targetVmId",
        type: {
          name: "String"
        }
      },
      recoveryAzureResourceGroupId: {
        serializedName: "recoveryAzureResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      useManagedDisks: {
        serializedName: "useManagedDisks",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      sqlServerLicenseType: {
        serializedName: "sqlServerLicenseType",
        type: {
          name: "String"
        }
      },
      validationErrors: {
        serializedName: "validationErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateReceivedTime: {
        serializedName: "lastUpdateReceivedTime",
        type: {
          name: "DateTime"
        }
      },
      replicaId: {
        serializedName: "replicaId",
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      },
      protectedManagedDisks: {
        serializedName: "protectedManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageAzureV2ManagedDiskDetails"
            }
          }
        }
      },
      lastRecoveryPointReceived: {
        serializedName: "lastRecoveryPointReceived",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      firmwareType: {
        serializedName: "firmwareType",
        type: {
          name: "String"
        }
      },
      azureVmGeneration: {
        serializedName: "azureVmGeneration",
        type: {
          name: "String"
        }
      },
      isAdditionalStatsAvailable: {
        serializedName: "isAdditionalStatsAvailable",
        type: {
          name: "Boolean"
        }
      },
      totalDataTransferred: {
        serializedName: "totalDataTransferred",
        type: {
          name: "Number"
        }
      },
      totalProgressHealth: {
        serializedName: "totalProgressHealth",
        type: {
          name: "String"
        }
      },
      targetVmTags: {
        serializedName: "targetVmTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      seedManagedDiskTags: {
        serializedName: "seedManagedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetManagedDiskTags: {
        serializedName: "targetManagedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetNicTags: {
        serializedName: "targetNicTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      switchProviderBlockingErrorDetails: {
        serializedName: "switchProviderBlockingErrorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageAzureV2SwitchProviderBlockingErrorDetails"
            }
          }
        }
      },
      switchProviderDetails: {
        serializedName: "switchProviderDetails",
        type: {
          name: "Composite",
          className: "InMageAzureV2SwitchProviderDetails"
        }
      }
    }
  }
};

export const InMageRcmFailbackReplicationDetails: coreClient.CompositeMapper = {
  serializedName: "InMageRcmFailback",
  type: {
    name: "Composite",
    className: "InMageRcmFailbackReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      internalIdentifier: {
        serializedName: "internalIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureVirtualMachineId: {
        serializedName: "azureVirtualMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reprotectAgentId: {
        serializedName: "reprotectAgentId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reprotectAgentName: {
        serializedName: "reprotectAgentName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetvCenterId: {
        serializedName: "targetvCenterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetDataStoreName: {
        serializedName: "targetDataStoreName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetVmName: {
        serializedName: "targetVmName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      initialReplicationProgressPercentage: {
        serializedName: "initialReplicationProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      initialReplicationProcessedBytes: {
        serializedName: "initialReplicationProcessedBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      initialReplicationTransferredBytes: {
        serializedName: "initialReplicationTransferredBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      initialReplicationProgressHealth: {
        serializedName: "initialReplicationProgressHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncProcessedBytes: {
        serializedName: "resyncProcessedBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncTransferredBytes: {
        serializedName: "resyncTransferredBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncProgressHealth: {
        serializedName: "resyncProgressHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resyncState: {
        serializedName: "resyncState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageRcmFailbackProtectedDiskDetails"
            }
          }
        }
      },
      mobilityAgentDetails: {
        serializedName: "mobilityAgentDetails",
        type: {
          name: "Composite",
          className: "InMageRcmFailbackMobilityAgentDetails"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageRcmFailbackNicDetails"
            }
          }
        }
      },
      lastPlannedFailoverStartTime: {
        serializedName: "lastPlannedFailoverStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastPlannedFailoverStatus: {
        serializedName: "lastPlannedFailoverStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      discoveredVmDetails: {
        serializedName: "discoveredVmDetails",
        type: {
          name: "Composite",
          className: "InMageRcmFailbackDiscoveredProtectedVmDetails"
        }
      },
      lastUsedPolicyId: {
        serializedName: "lastUsedPolicyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastUsedPolicyFriendlyName: {
        serializedName: "lastUsedPolicyFriendlyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isAgentRegistrationSuccessfulAfterFailover: {
        serializedName: "isAgentRegistrationSuccessfulAfterFailover",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const InMageRcmReplicationDetails: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      internalIdentifier: {
        serializedName: "internalIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricDiscoveryMachineId: {
        serializedName: "fabricDiscoveryMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      discoveryType: {
        serializedName: "discoveryType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      processorCoreCount: {
        serializedName: "processorCoreCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      allocatedMemoryInMB: {
        serializedName: "allocatedMemoryInMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      processServerName: {
        serializedName: "processServerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firmwareType: {
        serializedName: "firmwareType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      primaryNicIpAddress: {
        serializedName: "primaryNicIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetGeneration: {
        serializedName: "targetGeneration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        serializedName: "targetResourceGroupId",
        type: {
          name: "String"
        }
      },
      targetLocation: {
        serializedName: "targetLocation",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      targetBootDiagnosticsStorageAccountId: {
        serializedName: "targetBootDiagnosticsStorageAccountId",
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String"
        }
      },
      failoverRecoveryPointId: {
        serializedName: "failoverRecoveryPointId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastRecoveryPointReceived: {
        serializedName: "lastRecoveryPointReceived",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastRpoInSeconds: {
        serializedName: "lastRpoInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastRecoveryPointId: {
        serializedName: "lastRecoveryPointId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      initialReplicationProgressPercentage: {
        serializedName: "initialReplicationProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      initialReplicationProcessedBytes: {
        serializedName: "initialReplicationProcessedBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      initialReplicationTransferredBytes: {
        serializedName: "initialReplicationTransferredBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      initialReplicationProgressHealth: {
        serializedName: "initialReplicationProgressHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncProcessedBytes: {
        serializedName: "resyncProcessedBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncTransferredBytes: {
        serializedName: "resyncTransferredBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncProgressHealth: {
        serializedName: "resyncProgressHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resyncState: {
        serializedName: "resyncState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentUpgradeState: {
        serializedName: "agentUpgradeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastAgentUpgradeType: {
        serializedName: "lastAgentUpgradeType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentUpgradeJobId: {
        serializedName: "agentUpgradeJobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentUpgradeAttemptToVersion: {
        serializedName: "agentUpgradeAttemptToVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageRcmProtectedDiskDetails"
            }
          }
        }
      },
      isLastUpgradeSuccessful: {
        serializedName: "isLastUpgradeSuccessful",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isAgentRegistrationSuccessfulAfterFailover: {
        serializedName: "isAgentRegistrationSuccessfulAfterFailover",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      mobilityAgentDetails: {
        serializedName: "mobilityAgentDetails",
        type: {
          name: "Composite",
          className: "InMageRcmMobilityAgentDetails"
        }
      },
      lastAgentUpgradeErrorDetails: {
        serializedName: "lastAgentUpgradeErrorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageRcmLastAgentUpgradeErrorDetails"
            }
          }
        }
      },
      agentUpgradeBlockingErrorDetails: {
        serializedName: "agentUpgradeBlockingErrorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageRcmAgentUpgradeBlockingErrorDetails"
            }
          }
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageRcmNicDetails"
            }
          }
        }
      },
      discoveredVmDetails: {
        serializedName: "discoveredVmDetails",
        type: {
          name: "Composite",
          className: "InMageRcmDiscoveredProtectedVmDetails"
        }
      }
    }
  }
};

export const InMageReplicationDetails: coreClient.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      activeSiteType: {
        serializedName: "activeSiteType",
        type: {
          name: "String"
        }
      },
      sourceVmCpuCount: {
        serializedName: "sourceVmCpuCount",
        type: {
          name: "Number"
        }
      },
      sourceVmRamSizeInMB: {
        serializedName: "sourceVmRamSizeInMB",
        type: {
          name: "Number"
        }
      },
      osDetails: {
        serializedName: "osDetails",
        type: {
          name: "Composite",
          className: "OSDiskDetails"
        }
      },
      protectionStage: {
        serializedName: "protectionStage",
        type: {
          name: "String"
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      resyncDetails: {
        serializedName: "resyncDetails",
        type: {
          name: "Composite",
          className: "InitialReplicationDetails"
        }
      },
      retentionWindowStart: {
        serializedName: "retentionWindowStart",
        type: {
          name: "DateTime"
        }
      },
      retentionWindowEnd: {
        serializedName: "retentionWindowEnd",
        type: {
          name: "DateTime"
        }
      },
      compressedDataRateInMB: {
        serializedName: "compressedDataRateInMB",
        type: {
          name: "Number"
        }
      },
      uncompressedDataRateInMB: {
        serializedName: "uncompressedDataRateInMB",
        type: {
          name: "Number"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageProtectedDiskDetails"
            }
          }
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      masterTargetId: {
        serializedName: "masterTargetId",
        type: {
          name: "String"
        }
      },
      consistencyPoints: {
        serializedName: "consistencyPoints",
        type: {
          name: "Dictionary",
          value: { type: { name: "DateTime" } }
        }
      },
      diskResized: {
        serializedName: "diskResized",
        type: {
          name: "String"
        }
      },
      rebootAfterUpdateStatus: {
        serializedName: "rebootAfterUpdateStatus",
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      },
      agentDetails: {
        serializedName: "agentDetails",
        type: {
          name: "Composite",
          className: "InMageAgentDetails"
        }
      },
      vCenterInfrastructureId: {
        serializedName: "vCenterInfrastructureId",
        type: {
          name: "String"
        }
      },
      infrastructureVmId: {
        serializedName: "infrastructureVmId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMNicDetails"
            }
          }
        }
      },
      discoveryType: {
        serializedName: "discoveryType",
        type: {
          name: "String"
        }
      },
      azureStorageAccountId: {
        serializedName: "azureStorageAccountId",
        type: {
          name: "String"
        }
      },
      datastores: {
        serializedName: "datastores",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      validationErrors: {
        serializedName: "validationErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthError"
            }
          }
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateReceivedTime: {
        serializedName: "lastUpdateReceivedTime",
        type: {
          name: "DateTime"
        }
      },
      replicaId: {
        serializedName: "replicaId",
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      },
      isAdditionalStatsAvailable: {
        serializedName: "isAdditionalStatsAvailable",
        type: {
          name: "Boolean"
        }
      },
      totalDataTransferred: {
        serializedName: "totalDataTransferred",
        type: {
          name: "Number"
        }
      },
      totalProgressHealth: {
        serializedName: "totalProgressHealth",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2ACrossClusterMigrationEnableProtectionInput: coreClient.CompositeMapper = {
  serializedName: "A2ACrossClusterMigration",
  type: {
    name: "Composite",
    className: "A2ACrossClusterMigrationEnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties,
      fabricObjectId: {
        serializedName: "fabricObjectId",
        type: {
          name: "String"
        }
      },
      recoveryContainerId: {
        serializedName: "recoveryContainerId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AEnableProtectionInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AEnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties,
      fabricObjectId: {
        serializedName: "fabricObjectId",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryContainerId: {
        serializedName: "recoveryContainerId",
        type: {
          name: "String"
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryCloudServiceId: {
        serializedName: "recoveryCloudServiceId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      recoveryProximityPlacementGroupId: {
        serializedName: "recoveryProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmDiskInputDetails"
            }
          }
        }
      },
      vmManagedDisks: {
        serializedName: "vmManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmManagedDiskInputDetails"
            }
          }
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      recoveryBootDiagStorageAccountId: {
        serializedName: "recoveryBootDiagStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      },
      recoveryAvailabilityZone: {
        serializedName: "recoveryAvailabilityZone",
        type: {
          name: "String"
        }
      },
      recoveryExtendedLocation: {
        serializedName: "recoveryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      recoveryAzureNetworkId: {
        serializedName: "recoveryAzureNetworkId",
        type: {
          name: "String"
        }
      },
      recoverySubnetName: {
        serializedName: "recoverySubnetName",
        type: {
          name: "String"
        }
      },
      recoveryVirtualMachineScaleSetId: {
        serializedName: "recoveryVirtualMachineScaleSetId",
        type: {
          name: "String"
        }
      },
      recoveryCapacityReservationGroupId: {
        serializedName: "recoveryCapacityReservationGroupId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureEnableProtectionInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureEnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties,
      hvHostVmId: {
        serializedName: "hvHostVmId",
        type: {
          name: "String"
        }
      },
      vmName: {
        serializedName: "vmName",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vhdId: {
        serializedName: "vhdId",
        type: {
          name: "String"
        }
      },
      targetStorageAccountId: {
        serializedName: "targetStorageAccountId",
        type: {
          name: "String"
        }
      },
      targetAzureNetworkId: {
        serializedName: "targetAzureNetworkId",
        type: {
          name: "String"
        }
      },
      targetAzureSubnetId: {
        serializedName: "targetAzureSubnetId",
        type: {
          name: "String"
        }
      },
      enableRdpOnTargetOption: {
        serializedName: "enableRdpOnTargetOption",
        type: {
          name: "String"
        }
      },
      targetAzureVmName: {
        serializedName: "targetAzureVmName",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      targetAzureV1ResourceGroupId: {
        serializedName: "targetAzureV1ResourceGroupId",
        type: {
          name: "String"
        }
      },
      targetAzureV2ResourceGroupId: {
        serializedName: "targetAzureV2ResourceGroupId",
        type: {
          name: "String"
        }
      },
      useManagedDisks: {
        serializedName: "useManagedDisks",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      sqlServerLicenseType: {
        serializedName: "sqlServerLicenseType",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      useManagedDisksForReplication: {
        serializedName: "useManagedDisksForReplication",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      disksToIncludeForManagedDisks: {
        serializedName: "disksToIncludeForManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVReplicaAzureDiskInputDetails"
            }
          }
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      targetVmTags: {
        serializedName: "targetVmTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      seedManagedDiskTags: {
        serializedName: "seedManagedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetManagedDiskTags: {
        serializedName: "targetManagedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetNicTags: {
        serializedName: "targetNicTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const InMageAzureV2EnableProtectionInput: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2EnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties,
      masterTargetId: {
        serializedName: "masterTargetId",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageAzureV2DiskInputDetails"
            }
          }
        }
      },
      targetAzureNetworkId: {
        serializedName: "targetAzureNetworkId",
        type: {
          name: "String"
        }
      },
      targetAzureSubnetId: {
        serializedName: "targetAzureSubnetId",
        type: {
          name: "String"
        }
      },
      enableRdpOnTargetOption: {
        serializedName: "enableRdpOnTargetOption",
        type: {
          name: "String"
        }
      },
      targetAzureVmName: {
        serializedName: "targetAzureVmName",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      },
      targetAzureV1ResourceGroupId: {
        serializedName: "targetAzureV1ResourceGroupId",
        type: {
          name: "String"
        }
      },
      targetAzureV2ResourceGroupId: {
        serializedName: "targetAzureV2ResourceGroupId",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      sqlServerLicenseType: {
        serializedName: "sqlServerLicenseType",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      targetVmTags: {
        serializedName: "targetVmTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      seedManagedDiskTags: {
        serializedName: "seedManagedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetManagedDiskTags: {
        serializedName: "targetManagedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetNicTags: {
        serializedName: "targetNicTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const InMageEnableProtectionInput: coreClient.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageEnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties,
      vmFriendlyName: {
        serializedName: "vmFriendlyName",
        type: {
          name: "String"
        }
      },
      masterTargetId: {
        serializedName: "masterTargetId",
        required: true,
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        required: true,
        type: {
          name: "String"
        }
      },
      retentionDrive: {
        serializedName: "retentionDrive",
        required: true,
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      datastoreName: {
        serializedName: "datastoreName",
        type: {
          name: "String"
        }
      },
      diskExclusionInput: {
        serializedName: "diskExclusionInput",
        type: {
          name: "Composite",
          className: "InMageDiskExclusionInput"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const InMageRcmEnableProtectionInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmEnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties,
      fabricDiscoveryMachineId: {
        serializedName: "fabricDiscoveryMachineId",
        required: true,
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageRcmDiskInput"
            }
          }
        }
      },
      disksDefault: {
        serializedName: "disksDefault",
        type: {
          name: "Composite",
          className: "InMageRcmDisksDefaultInput"
        }
      },
      targetResourceGroupId: {
        serializedName: "targetResourceGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String"
        }
      },
      targetSubnetName: {
        serializedName: "targetSubnetName",
        type: {
          name: "String"
        }
      },
      testSubnetName: {
        serializedName: "testSubnetName",
        type: {
          name: "String"
        }
      },
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      targetBootDiagnosticsStorageAccountId: {
        serializedName: "targetBootDiagnosticsStorageAccountId",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        required: true,
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AUpdateReplicationProtectedItemInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AUpdateReplicationProtectedItemInput",
    uberParent: "UpdateReplicationProtectedItemProviderInput",
    polymorphicDiscriminator:
      UpdateReplicationProtectedItemProviderInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UpdateReplicationProtectedItemProviderInput.type.modelProperties,
      recoveryCloudServiceId: {
        serializedName: "recoveryCloudServiceId",
        type: {
          name: "String"
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      managedDiskUpdateDetails: {
        serializedName: "managedDiskUpdateDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmManagedDiskUpdateDetails"
            }
          }
        }
      },
      recoveryBootDiagStorageAccountId: {
        serializedName: "recoveryBootDiagStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      },
      tfoAzureVMName: {
        serializedName: "tfoAzureVMName",
        type: {
          name: "String"
        }
      },
      recoveryProximityPlacementGroupId: {
        serializedName: "recoveryProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      recoveryVirtualMachineScaleSetId: {
        serializedName: "recoveryVirtualMachineScaleSetId",
        type: {
          name: "String"
        }
      },
      recoveryCapacityReservationGroupId: {
        serializedName: "recoveryCapacityReservationGroupId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureUpdateReplicationProtectedItemInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureUpdateReplicationProtectedItemInput",
    uberParent: "UpdateReplicationProtectedItemProviderInput",
    polymorphicDiscriminator:
      UpdateReplicationProtectedItemProviderInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UpdateReplicationProtectedItemProviderInput.type.modelProperties,
      recoveryAzureV1ResourceGroupId: {
        serializedName: "recoveryAzureV1ResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryAzureV2ResourceGroupId: {
        serializedName: "recoveryAzureV2ResourceGroupId",
        type: {
          name: "String"
        }
      },
      useManagedDisks: {
        serializedName: "useManagedDisks",
        type: {
          name: "String"
        }
      },
      diskIdToDiskEncryptionMap: {
        serializedName: "diskIdToDiskEncryptionMap",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetVmTags: {
        serializedName: "targetVmTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetManagedDiskTags: {
        serializedName: "targetManagedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetNicTags: {
        serializedName: "targetNicTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sqlServerLicenseType: {
        serializedName: "sqlServerLicenseType",
        type: {
          name: "String"
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateDiskInput"
            }
          }
        }
      }
    }
  }
};

export const InMageAzureV2UpdateReplicationProtectedItemInput: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2UpdateReplicationProtectedItemInput",
    uberParent: "UpdateReplicationProtectedItemProviderInput",
    polymorphicDiscriminator:
      UpdateReplicationProtectedItemProviderInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UpdateReplicationProtectedItemProviderInput.type.modelProperties,
      recoveryAzureV1ResourceGroupId: {
        serializedName: "recoveryAzureV1ResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryAzureV2ResourceGroupId: {
        serializedName: "recoveryAzureV2ResourceGroupId",
        type: {
          name: "String"
        }
      },
      useManagedDisks: {
        serializedName: "useManagedDisks",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetVmTags: {
        serializedName: "targetVmTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetManagedDiskTags: {
        serializedName: "targetManagedDiskTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetNicTags: {
        serializedName: "targetNicTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sqlServerLicenseType: {
        serializedName: "sqlServerLicenseType",
        type: {
          name: "String"
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateDiskInput"
            }
          }
        }
      }
    }
  }
};

export const InMageRcmUpdateReplicationProtectedItemInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmUpdateReplicationProtectedItemInput",
    uberParent: "UpdateReplicationProtectedItemProviderInput",
    polymorphicDiscriminator:
      UpdateReplicationProtectedItemProviderInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UpdateReplicationProtectedItemProviderInput.type.modelProperties,
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        serializedName: "targetResourceGroupId",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetProximityPlacementGroupId: {
        serializedName: "targetProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      targetBootDiagnosticsStorageAccountId: {
        serializedName: "targetBootDiagnosticsStorageAccountId",
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageRcmNicInput"
            }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AAddDisksInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AAddDisksInput",
    uberParent: "AddDisksProviderSpecificInput",
    polymorphicDiscriminator:
      AddDisksProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AddDisksProviderSpecificInput.type.modelProperties,
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmDiskInputDetails"
            }
          }
        }
      },
      vmManagedDisks: {
        serializedName: "vmManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmManagedDiskInputDetails"
            }
          }
        }
      }
    }
  }
};

export const A2AApplyRecoveryPointInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AApplyRecoveryPointInput",
    uberParent: "ApplyRecoveryPointProviderSpecificInput",
    polymorphicDiscriminator:
      ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ApplyRecoveryPointProviderSpecificInput.type.modelProperties
    }
  }
};

export const A2ACrossClusterMigrationApplyRecoveryPointInput: coreClient.CompositeMapper = {
  serializedName: "A2ACrossClusterMigration",
  type: {
    name: "Composite",
    className: "A2ACrossClusterMigrationApplyRecoveryPointInput",
    uberParent: "ApplyRecoveryPointProviderSpecificInput",
    polymorphicDiscriminator:
      ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ApplyRecoveryPointProviderSpecificInput.type.modelProperties
    }
  }
};

export const HyperVReplicaAzureApplyRecoveryPointInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureApplyRecoveryPointInput",
    uberParent: "ApplyRecoveryPointProviderSpecificInput",
    polymorphicDiscriminator:
      ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ApplyRecoveryPointProviderSpecificInput.type.modelProperties,
      primaryKekCertificatePfx: {
        serializedName: "primaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      secondaryKekCertificatePfx: {
        serializedName: "secondaryKekCertificatePfx",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2ApplyRecoveryPointInput: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2ApplyRecoveryPointInput",
    uberParent: "ApplyRecoveryPointProviderSpecificInput",
    polymorphicDiscriminator:
      ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ApplyRecoveryPointProviderSpecificInput.type.modelProperties
    }
  }
};

export const InMageRcmApplyRecoveryPointInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmApplyRecoveryPointInput",
    uberParent: "ApplyRecoveryPointProviderSpecificInput",
    polymorphicDiscriminator:
      ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ApplyRecoveryPointProviderSpecificInput.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureFailbackProviderInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzureFailback",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureFailbackProviderInput",
    uberParent: "PlannedFailoverProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      PlannedFailoverProviderSpecificFailoverInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...PlannedFailoverProviderSpecificFailoverInput.type.modelProperties,
      dataSyncOption: {
        serializedName: "dataSyncOption",
        type: {
          name: "String"
        }
      },
      recoveryVmCreationOption: {
        serializedName: "recoveryVmCreationOption",
        type: {
          name: "String"
        }
      },
      providerIdForAlternateRecovery: {
        serializedName: "providerIdForAlternateRecovery",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzurePlannedFailoverProviderInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzurePlannedFailoverProviderInput",
    uberParent: "PlannedFailoverProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      PlannedFailoverProviderSpecificFailoverInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...PlannedFailoverProviderSpecificFailoverInput.type.modelProperties,
      primaryKekCertificatePfx: {
        serializedName: "primaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      secondaryKekCertificatePfx: {
        serializedName: "secondaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmFailbackPlannedFailoverProviderInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcmFailback",
  type: {
    name: "Composite",
    className: "InMageRcmFailbackPlannedFailoverProviderInput",
    uberParent: "PlannedFailoverProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      PlannedFailoverProviderSpecificFailoverInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...PlannedFailoverProviderSpecificFailoverInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2ARecoveryPointDetails: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2ARecoveryPointDetails",
    uberParent: "ProviderSpecificRecoveryPointDetails",
    polymorphicDiscriminator:
      ProviderSpecificRecoveryPointDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificRecoveryPointDetails.type.modelProperties,
      recoveryPointSyncType: {
        serializedName: "recoveryPointSyncType",
        type: {
          name: "String"
        }
      },
      disks: {
        serializedName: "disks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const InMageAzureV2RecoveryPointDetails: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2RecoveryPointDetails",
    uberParent: "ProviderSpecificRecoveryPointDetails",
    polymorphicDiscriminator:
      ProviderSpecificRecoveryPointDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificRecoveryPointDetails.type.modelProperties,
      isMultiVmSyncPoint: {
        serializedName: "isMultiVmSyncPoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmRecoveryPointDetails: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmRecoveryPointDetails",
    uberParent: "ProviderSpecificRecoveryPointDetails",
    polymorphicDiscriminator:
      ProviderSpecificRecoveryPointDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificRecoveryPointDetails.type.modelProperties,
      isMultiVmSyncPoint: {
        serializedName: "isMultiVmSyncPoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageDisableProtectionProviderSpecificInput: coreClient.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageDisableProtectionProviderSpecificInput",
    uberParent: "DisableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      DisableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...DisableProtectionProviderSpecificInput.type.modelProperties,
      replicaVmDeletionStatus: {
        serializedName: "replicaVmDeletionStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2ARemoveDisksInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2ARemoveDisksInput",
    uberParent: "RemoveDisksProviderSpecificInput",
    polymorphicDiscriminator:
      RemoveDisksProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RemoveDisksProviderSpecificInput.type.modelProperties,
      vmDisksUris: {
        serializedName: "vmDisksUris",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vmManagedDisksIds: {
        serializedName: "vmManagedDisksIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const A2AReprotectInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AReprotectInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReverseReplicationProviderSpecificInput.type.modelProperties,
      recoveryContainerId: {
        serializedName: "recoveryContainerId",
        type: {
          name: "String"
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmDiskInputDetails"
            }
          }
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryCloudServiceId: {
        serializedName: "recoveryCloudServiceId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureReprotectInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureReprotectInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReverseReplicationProviderSpecificInput.type.modelProperties,
      hvHostVmId: {
        serializedName: "hvHostVmId",
        type: {
          name: "String"
        }
      },
      vmName: {
        serializedName: "vmName",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vHDId: {
        serializedName: "vHDId",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2ReprotectInput: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2ReprotectInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReverseReplicationProviderSpecificInput.type.modelProperties,
      masterTargetId: {
        serializedName: "masterTargetId",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const InMageRcmFailbackReprotectInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcmFailback",
  type: {
    name: "Composite",
    className: "InMageRcmFailbackReprotectInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReverseReplicationProviderSpecificInput.type.modelProperties,
      processServerId: {
        serializedName: "processServerId",
        required: true,
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmReprotectInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmReprotectInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReverseReplicationProviderSpecificInput.type.modelProperties,
      reprotectAgentId: {
        serializedName: "reprotectAgentId",
        required: true,
        type: {
          name: "String"
        }
      },
      datastoreName: {
        serializedName: "datastoreName",
        required: true,
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageReprotectInput: coreClient.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageReprotectInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReverseReplicationProviderSpecificInput.type.modelProperties,
      masterTargetId: {
        serializedName: "masterTargetId",
        required: true,
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        required: true,
        type: {
          name: "String"
        }
      },
      retentionDrive: {
        serializedName: "retentionDrive",
        required: true,
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      datastoreName: {
        serializedName: "datastoreName",
        type: {
          name: "String"
        }
      },
      diskExclusionInput: {
        serializedName: "diskExclusionInput",
        type: {
          name: "Composite",
          className: "InMageDiskExclusionInput"
        }
      },
      profileId: {
        serializedName: "profileId",
        required: true,
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const InMageAzureV2SwitchProviderInput: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2SwitchProviderInput",
    uberParent: "SwitchProviderSpecificInput",
    polymorphicDiscriminator:
      SwitchProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...SwitchProviderSpecificInput.type.modelProperties,
      targetVaultID: {
        serializedName: "targetVaultID",
        required: true,
        type: {
          name: "String"
        }
      },
      targetFabricID: {
        serializedName: "targetFabricID",
        required: true,
        type: {
          name: "String"
        }
      },
      targetApplianceID: {
        serializedName: "targetApplianceID",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2ATestFailoverInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2ATestFailoverInput",
    uberParent: "TestFailoverProviderSpecificInput",
    polymorphicDiscriminator:
      TestFailoverProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...TestFailoverProviderSpecificInput.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      cloudServiceCreationOption: {
        serializedName: "cloudServiceCreationOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureTestFailoverInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureTestFailoverInput",
    uberParent: "TestFailoverProviderSpecificInput",
    polymorphicDiscriminator:
      TestFailoverProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...TestFailoverProviderSpecificInput.type.modelProperties,
      primaryKekCertificatePfx: {
        serializedName: "primaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      secondaryKekCertificatePfx: {
        serializedName: "secondaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2TestFailoverInput: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2TestFailoverInput",
    uberParent: "TestFailoverProviderSpecificInput",
    polymorphicDiscriminator:
      TestFailoverProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...TestFailoverProviderSpecificInput.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmTestFailoverInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmTestFailoverInput",
    uberParent: "TestFailoverProviderSpecificInput",
    polymorphicDiscriminator:
      TestFailoverProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...TestFailoverProviderSpecificInput.type.modelProperties,
      networkId: {
        serializedName: "networkId",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageTestFailoverInput: coreClient.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageTestFailoverInput",
    uberParent: "TestFailoverProviderSpecificInput",
    polymorphicDiscriminator:
      TestFailoverProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...TestFailoverProviderSpecificInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AUnplannedFailoverInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AUnplannedFailoverInput",
    uberParent: "UnplannedFailoverProviderSpecificInput",
    polymorphicDiscriminator:
      UnplannedFailoverProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UnplannedFailoverProviderSpecificInput.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      cloudServiceCreationOption: {
        serializedName: "cloudServiceCreationOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureUnplannedFailoverInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureUnplannedFailoverInput",
    uberParent: "UnplannedFailoverProviderSpecificInput",
    polymorphicDiscriminator:
      UnplannedFailoverProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UnplannedFailoverProviderSpecificInput.type.modelProperties,
      primaryKekCertificatePfx: {
        serializedName: "primaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      secondaryKekCertificatePfx: {
        serializedName: "secondaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2UnplannedFailoverInput: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2UnplannedFailoverInput",
    uberParent: "UnplannedFailoverProviderSpecificInput",
    polymorphicDiscriminator:
      UnplannedFailoverProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UnplannedFailoverProviderSpecificInput.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmUnplannedFailoverInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmUnplannedFailoverInput",
    uberParent: "UnplannedFailoverProviderSpecificInput",
    polymorphicDiscriminator:
      UnplannedFailoverProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UnplannedFailoverProviderSpecificInput.type.modelProperties,
      performShutdown: {
        serializedName: "performShutdown",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageUnplannedFailoverInput: coreClient.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageUnplannedFailoverInput",
    uberParent: "UnplannedFailoverProviderSpecificInput",
    polymorphicDiscriminator:
      UnplannedFailoverProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UnplannedFailoverProviderSpecificInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmUpdateApplianceForReplicationProtectedItemInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmUpdateApplianceForReplicationProtectedItemInput",
    uberParent:
      "UpdateApplianceForReplicationProtectedItemProviderSpecificInput",
    polymorphicDiscriminator:
      UpdateApplianceForReplicationProtectedItemProviderSpecificInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...UpdateApplianceForReplicationProtectedItemProviderSpecificInput.type
        .modelProperties,
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AProtectionContainerMappingDetails: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AProtectionContainerMappingDetails",
    uberParent: "ProtectionContainerMappingProviderSpecificDetails",
    polymorphicDiscriminator:
      ProtectionContainerMappingProviderSpecificDetails.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionContainerMappingProviderSpecificDetails.type.modelProperties,
      agentAutoUpdateStatus: {
        serializedName: "agentAutoUpdateStatus",
        type: {
          name: "String"
        }
      },
      automationAccountArmId: {
        serializedName: "automationAccountArmId",
        type: {
          name: "String"
        }
      },
      automationAccountAuthenticationType: {
        serializedName: "automationAccountAuthenticationType",
        type: {
          name: "String"
        }
      },
      scheduleName: {
        serializedName: "scheduleName",
        type: {
          name: "String"
        }
      },
      jobScheduleName: {
        serializedName: "jobScheduleName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmProtectionContainerMappingDetails: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmProtectionContainerMappingDetails",
    uberParent: "ProtectionContainerMappingProviderSpecificDetails",
    polymorphicDiscriminator:
      ProtectionContainerMappingProviderSpecificDetails.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionContainerMappingProviderSpecificDetails.type.modelProperties,
      enableAgentAutoUpgrade: {
        serializedName: "enableAgentAutoUpgrade",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtProtectionContainerMappingDetails: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtProtectionContainerMappingDetails",
    uberParent: "ProtectionContainerMappingProviderSpecificDetails",
    polymorphicDiscriminator:
      ProtectionContainerMappingProviderSpecificDetails.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionContainerMappingProviderSpecificDetails.type.modelProperties,
      keyVaultId: {
        serializedName: "keyVaultId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageAccountSasSecretName: {
        serializedName: "storageAccountSasSecretName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceBusConnectionStringSecretName: {
        serializedName: "serviceBusConnectionStringSecretName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetLocation: {
        serializedName: "targetLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      roleSizeToNicCountMap: {
        serializedName: "roleSizeToNicCountMap",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      }
    }
  }
};

export const A2AContainerMappingInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AContainerMappingInput",
    uberParent: "ReplicationProviderSpecificContainerMappingInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificContainerMappingInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificContainerMappingInput.type.modelProperties,
      agentAutoUpdateStatus: {
        serializedName: "agentAutoUpdateStatus",
        type: {
          name: "String"
        }
      },
      automationAccountArmId: {
        serializedName: "automationAccountArmId",
        type: {
          name: "String"
        }
      },
      automationAccountAuthenticationType: {
        serializedName: "automationAccountAuthenticationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtContainerMappingInput: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtContainerMappingInput",
    uberParent: "ReplicationProviderSpecificContainerMappingInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificContainerMappingInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificContainerMappingInput.type.modelProperties,
      keyVaultId: {
        serializedName: "keyVaultId",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      storageAccountSasSecretName: {
        serializedName: "storageAccountSasSecretName",
        type: {
          name: "String"
        }
      },
      serviceBusConnectionStringSecretName: {
        serializedName: "serviceBusConnectionStringSecretName",
        type: {
          name: "String"
        }
      },
      targetLocation: {
        serializedName: "targetLocation",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AUpdateContainerMappingInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AUpdateContainerMappingInput",
    uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificUpdateContainerMappingInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificUpdateContainerMappingInput.type
        .modelProperties,
      agentAutoUpdateStatus: {
        serializedName: "agentAutoUpdateStatus",
        type: {
          name: "String"
        }
      },
      automationAccountArmId: {
        serializedName: "automationAccountArmId",
        type: {
          name: "String"
        }
      },
      automationAccountAuthenticationType: {
        serializedName: "automationAccountAuthenticationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmUpdateContainerMappingInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmUpdateContainerMappingInput",
    uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificUpdateContainerMappingInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificUpdateContainerMappingInput.type
        .modelProperties,
      enableAgentAutoUpgrade: {
        serializedName: "enableAgentAutoUpgrade",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2ASwitchProtectionInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2ASwitchProtectionInput",
    uberParent: "SwitchProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      SwitchProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...SwitchProtectionProviderSpecificInput.type.modelProperties,
      recoveryContainerId: {
        serializedName: "recoveryContainerId",
        type: {
          name: "String"
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmDiskInputDetails"
            }
          }
        }
      },
      vmManagedDisks: {
        serializedName: "vmManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmManagedDiskInputDetails"
            }
          }
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryCloudServiceId: {
        serializedName: "recoveryCloudServiceId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      recoveryBootDiagStorageAccountId: {
        serializedName: "recoveryBootDiagStorageAccountId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilityZone: {
        serializedName: "recoveryAvailabilityZone",
        type: {
          name: "String"
        }
      },
      recoveryProximityPlacementGroupId: {
        serializedName: "recoveryProximityPlacementGroupId",
        type: {
          name: "String"
        }
      },
      recoveryVirtualMachineScaleSetId: {
        serializedName: "recoveryVirtualMachineScaleSetId",
        type: {
          name: "String"
        }
      },
      recoveryCapacityReservationGroupId: {
        serializedName: "recoveryCapacityReservationGroupId",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      }
    }
  }
};

export const AutomationRunbookTaskDetails: coreClient.CompositeMapper = {
  serializedName: "AutomationRunbookTaskDetails",
  type: {
    name: "Composite",
    className: "AutomationRunbookTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      cloudServiceName: {
        serializedName: "cloudServiceName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      runbookId: {
        serializedName: "runbookId",
        type: {
          name: "String"
        }
      },
      runbookName: {
        serializedName: "runbookName",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      jobOutput: {
        serializedName: "jobOutput",
        type: {
          name: "String"
        }
      },
      isPrimarySideScript: {
        serializedName: "isPrimarySideScript",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConsistencyCheckTaskDetails: coreClient.CompositeMapper = {
  serializedName: "ConsistencyCheckTaskDetails",
  type: {
    name: "Composite",
    className: "ConsistencyCheckTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      vmDetails: {
        serializedName: "vmDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InconsistentVmDetails"
            }
          }
        }
      }
    }
  }
};

export const JobTaskDetails: coreClient.CompositeMapper = {
  serializedName: "JobTaskDetails",
  type: {
    name: "Composite",
    className: "JobTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      jobTask: {
        serializedName: "jobTask",
        type: {
          name: "Composite",
          className: "JobEntity"
        }
      }
    }
  }
};

export const ManualActionTaskDetails: coreClient.CompositeMapper = {
  serializedName: "ManualActionTaskDetails",
  type: {
    name: "Composite",
    className: "ManualActionTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      instructions: {
        serializedName: "instructions",
        type: {
          name: "String"
        }
      },
      observation: {
        serializedName: "observation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScriptActionTaskDetails: coreClient.CompositeMapper = {
  serializedName: "ScriptActionTaskDetails",
  type: {
    name: "Composite",
    className: "ScriptActionTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      output: {
        serializedName: "output",
        type: {
          name: "String"
        }
      },
      isPrimarySideScript: {
        serializedName: "isPrimarySideScript",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VmNicUpdatesTaskDetails: coreClient.CompositeMapper = {
  serializedName: "VmNicUpdatesTaskDetails",
  type: {
    name: "Composite",
    className: "VmNicUpdatesTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      nicId: {
        serializedName: "nicId",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InlineWorkflowTaskDetails: coreClient.CompositeMapper = {
  serializedName: "InlineWorkflowTaskDetails",
  type: {
    name: "Composite",
    className: "InlineWorkflowTaskDetails",
    uberParent: "GroupTaskDetails",
    polymorphicDiscriminator: GroupTaskDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...GroupTaskDetails.type.modelProperties,
      workflowIds: {
        serializedName: "workflowIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanGroupTaskDetails: coreClient.CompositeMapper = {
  serializedName: "RecoveryPlanGroupTaskDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanGroupTaskDetails",
    uberParent: "GroupTaskDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      ...GroupTaskDetails.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      rpGroupType: {
        serializedName: "rpGroupType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AsrJobDetails: coreClient.CompositeMapper = {
  serializedName: "AsrJobDetails",
  type: {
    name: "Composite",
    className: "AsrJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties
    }
  }
};

export const ExportJobDetails: coreClient.CompositeMapper = {
  serializedName: "ExportJobDetails",
  type: {
    name: "Composite",
    className: "ExportJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      blobUri: {
        serializedName: "blobUri",
        type: {
          name: "String"
        }
      },
      sasToken: {
        serializedName: "sasToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverJobDetails: coreClient.CompositeMapper = {
  serializedName: "FailoverJobDetails",
  type: {
    name: "Composite",
    className: "FailoverJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      protectedItemDetails: {
        serializedName: "protectedItemDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverReplicationProtectedItemDetails"
            }
          }
        }
      }
    }
  }
};

export const SwitchProtectionJobDetails: coreClient.CompositeMapper = {
  serializedName: "SwitchProtectionJobDetails",
  type: {
    name: "Composite",
    className: "SwitchProtectionJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      newReplicationProtectedItemId: {
        serializedName: "newReplicationProtectedItemId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestFailoverJobDetails: coreClient.CompositeMapper = {
  serializedName: "TestFailoverJobDetails",
  type: {
    name: "Composite",
    className: "TestFailoverJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      testFailoverStatus: {
        serializedName: "testFailoverStatus",
        type: {
          name: "String"
        }
      },
      comments: {
        serializedName: "comments",
        type: {
          name: "String"
        }
      },
      networkName: {
        serializedName: "networkName",
        type: {
          name: "String"
        }
      },
      networkFriendlyName: {
        serializedName: "networkFriendlyName",
        type: {
          name: "String"
        }
      },
      networkType: {
        serializedName: "networkType",
        type: {
          name: "String"
        }
      },
      protectedItemDetails: {
        serializedName: "protectedItemDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverReplicationProtectedItemDetails"
            }
          }
        }
      }
    }
  }
};

export const A2APolicyDetails: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2APolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HyperVReplicaAzurePolicyDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzurePolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointHistoryDurationInHours: {
        serializedName: "recoveryPointHistoryDurationInHours",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      replicationInterval: {
        serializedName: "replicationInterval",
        type: {
          name: "Number"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "String"
        }
      },
      activeStorageAccountId: {
        serializedName: "activeStorageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaBasePolicyDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaBasePolicyDetails",
  type: {
    name: "Composite",
    className: "HyperVReplicaBasePolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPoints: {
        serializedName: "recoveryPoints",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      compression: {
        serializedName: "compression",
        type: {
          name: "String"
        }
      },
      initialReplicationMethod: {
        serializedName: "initialReplicationMethod",
        type: {
          name: "String"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      offlineReplicationImportPath: {
        serializedName: "offlineReplicationImportPath",
        type: {
          name: "String"
        }
      },
      offlineReplicationExportPath: {
        serializedName: "offlineReplicationExportPath",
        type: {
          name: "String"
        }
      },
      replicationPort: {
        serializedName: "replicationPort",
        type: {
          name: "Number"
        }
      },
      allowedAuthenticationType: {
        serializedName: "allowedAuthenticationType",
        type: {
          name: "Number"
        }
      },
      replicaDeletionOption: {
        serializedName: "replicaDeletionOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaBluePolicyDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplica2012R2",
  type: {
    name: "Composite",
    className: "HyperVReplicaBluePolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      replicationFrequencyInSeconds: {
        serializedName: "replicationFrequencyInSeconds",
        type: {
          name: "Number"
        }
      },
      recoveryPoints: {
        serializedName: "recoveryPoints",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      compression: {
        serializedName: "compression",
        type: {
          name: "String"
        }
      },
      initialReplicationMethod: {
        serializedName: "initialReplicationMethod",
        type: {
          name: "String"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      offlineReplicationImportPath: {
        serializedName: "offlineReplicationImportPath",
        type: {
          name: "String"
        }
      },
      offlineReplicationExportPath: {
        serializedName: "offlineReplicationExportPath",
        type: {
          name: "String"
        }
      },
      replicationPort: {
        serializedName: "replicationPort",
        type: {
          name: "Number"
        }
      },
      allowedAuthenticationType: {
        serializedName: "allowedAuthenticationType",
        type: {
          name: "Number"
        }
      },
      replicaDeletionOption: {
        serializedName: "replicaDeletionOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaPolicyDetails: coreClient.CompositeMapper = {
  serializedName: "HyperVReplica2012",
  type: {
    name: "Composite",
    className: "HyperVReplicaPolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPoints: {
        serializedName: "recoveryPoints",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      compression: {
        serializedName: "compression",
        type: {
          name: "String"
        }
      },
      initialReplicationMethod: {
        serializedName: "initialReplicationMethod",
        type: {
          name: "String"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      offlineReplicationImportPath: {
        serializedName: "offlineReplicationImportPath",
        type: {
          name: "String"
        }
      },
      offlineReplicationExportPath: {
        serializedName: "offlineReplicationExportPath",
        type: {
          name: "String"
        }
      },
      replicationPort: {
        serializedName: "replicationPort",
        type: {
          name: "Number"
        }
      },
      allowedAuthenticationType: {
        serializedName: "allowedAuthenticationType",
        type: {
          name: "Number"
        }
      },
      replicaDeletionOption: {
        serializedName: "replicaDeletionOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2PolicyDetails: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2PolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageBasePolicyDetails: coreClient.CompositeMapper = {
  serializedName: "InMageBasePolicyDetails",
  type: {
    name: "Composite",
    className: "InMageBasePolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMagePolicyDetails: coreClient.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMagePolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmFailbackPolicyDetails: coreClient.CompositeMapper = {
  serializedName: "InMageRcmFailback",
  type: {
    name: "Composite",
    className: "InMageRcmFailbackPolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InMageRcmPolicyDetails: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmPolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointHistoryInMinutes: {
        serializedName: "recoveryPointHistoryInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      enableMultiVmSync: {
        serializedName: "enableMultiVmSync",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmwareCbtPolicyDetails: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VmwareCbtPolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointHistoryInMinutes: {
        serializedName: "recoveryPointHistoryInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const A2ACrossClusterMigrationPolicyCreationInput: coreClient.CompositeMapper = {
  serializedName: "A2ACrossClusterMigration",
  type: {
    name: "Composite",
    className: "A2ACrossClusterMigrationPolicyCreationInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties
    }
  }
};

export const A2APolicyCreationInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2APolicyCreationInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzurePolicyInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzurePolicyInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointHistoryDuration: {
        serializedName: "recoveryPointHistoryDuration",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      replicationInterval: {
        serializedName: "replicationInterval",
        type: {
          name: "Number"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      storageAccounts: {
        serializedName: "storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const HyperVReplicaPolicyInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplica2012",
  type: {
    name: "Composite",
    className: "HyperVReplicaPolicyInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPoints: {
        serializedName: "recoveryPoints",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      compression: {
        serializedName: "compression",
        type: {
          name: "String"
        }
      },
      initialReplicationMethod: {
        serializedName: "initialReplicationMethod",
        type: {
          name: "String"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      offlineReplicationImportPath: {
        serializedName: "offlineReplicationImportPath",
        type: {
          name: "String"
        }
      },
      offlineReplicationExportPath: {
        serializedName: "offlineReplicationExportPath",
        type: {
          name: "String"
        }
      },
      replicationPort: {
        serializedName: "replicationPort",
        type: {
          name: "Number"
        }
      },
      allowedAuthenticationType: {
        serializedName: "allowedAuthenticationType",
        type: {
          name: "Number"
        }
      },
      replicaDeletion: {
        serializedName: "replicaDeletion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2PolicyInput: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2PolicyInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMagePolicyInput: coreClient.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMagePolicyInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageRcmFailbackPolicyCreationInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcmFailback",
  type: {
    name: "Composite",
    className: "InMageRcmFailbackPolicyCreationInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InMageRcmPolicyCreationInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "InMageRcmPolicyCreationInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointHistoryInMinutes: {
        serializedName: "recoveryPointHistoryInMinutes",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      enableMultiVmSync: {
        serializedName: "enableMultiVmSync",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtPolicyCreationInput: coreClient.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtPolicyCreationInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointHistoryInMinutes: {
        serializedName: "recoveryPointHistoryInMinutes",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const A2AReplicationIntentDetails: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AReplicationIntentDetails",
    uberParent: "ReplicationProtectionIntentProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProtectionIntentProviderSpecificSettings.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProtectionIntentProviderSpecificSettings.type
        .modelProperties,
      fabricObjectId: {
        serializedName: "fabricObjectId",
        type: {
          name: "String"
        }
      },
      primaryLocation: {
        serializedName: "primaryLocation",
        type: {
          name: "String"
        }
      },
      recoveryLocation: {
        serializedName: "recoveryLocation",
        type: {
          name: "String"
        }
      },
      recoverySubscriptionId: {
        serializedName: "recoverySubscriptionId",
        type: {
          name: "String"
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AProtectionIntentDiskInputDetails"
            }
          }
        }
      },
      vmManagedDisks: {
        serializedName: "vmManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AProtectionIntentManagedDiskInputDetails"
            }
          }
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      protectionProfile: {
        serializedName: "protectionProfile",
        type: {
          name: "Composite",
          className: "ProtectionProfileCustomDetails"
        }
      },
      primaryStagingStorageAccount: {
        serializedName: "primaryStagingStorageAccount",
        type: {
          name: "Composite",
          className: "StorageAccountCustomDetails"
        }
      },
      recoveryAvailabilitySet: {
        serializedName: "recoveryAvailabilitySet",
        type: {
          name: "Composite",
          className: "RecoveryAvailabilitySetCustomDetails"
        }
      },
      recoveryVirtualNetwork: {
        serializedName: "recoveryVirtualNetwork",
        type: {
          name: "Composite",
          className: "RecoveryVirtualNetworkCustomDetails"
        }
      },
      recoveryProximityPlacementGroup: {
        serializedName: "recoveryProximityPlacementGroup",
        type: {
          name: "Composite",
          className: "RecoveryProximityPlacementGroupCustomDetails"
        }
      },
      autoProtectionOfDataDisk: {
        serializedName: "autoProtectionOfDataDisk",
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      recoveryBootDiagStorageAccount: {
        serializedName: "recoveryBootDiagStorageAccount",
        type: {
          name: "Composite",
          className: "StorageAccountCustomDetails"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      },
      recoveryAvailabilityZone: {
        serializedName: "recoveryAvailabilityZone",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilityType: {
        serializedName: "recoveryAvailabilityType",
        required: true,
        type: {
          name: "String"
        }
      },
      agentAutoUpdateStatus: {
        serializedName: "agentAutoUpdateStatus",
        type: {
          name: "String"
        }
      },
      automationAccountArmId: {
        serializedName: "automationAccountArmId",
        type: {
          name: "String"
        }
      },
      automationAccountAuthenticationType: {
        serializedName: "automationAccountAuthenticationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2ACreateProtectionIntentInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2ACreateProtectionIntentInput",
    uberParent: "CreateProtectionIntentProviderSpecificDetails",
    polymorphicDiscriminator:
      CreateProtectionIntentProviderSpecificDetails.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...CreateProtectionIntentProviderSpecificDetails.type.modelProperties,
      fabricObjectId: {
        serializedName: "fabricObjectId",
        required: true,
        type: {
          name: "String"
        }
      },
      primaryLocation: {
        serializedName: "primaryLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryLocation: {
        serializedName: "recoveryLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      recoverySubscriptionId: {
        serializedName: "recoverySubscriptionId",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryAvailabilityType: {
        serializedName: "recoveryAvailabilityType",
        required: true,
        type: {
          name: "String"
        }
      },
      protectionProfileCustomInput: {
        serializedName: "protectionProfileCustomInput",
        type: {
          name: "Composite",
          className: "ProtectionProfileCustomDetails"
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      primaryStagingStorageAccountCustomInput: {
        serializedName: "primaryStagingStorageAccountCustomInput",
        type: {
          name: "Composite",
          className: "StorageAccountCustomDetails"
        }
      },
      recoveryAvailabilitySetCustomInput: {
        serializedName: "recoveryAvailabilitySetCustomInput",
        type: {
          name: "Composite",
          className: "RecoveryAvailabilitySetCustomDetails"
        }
      },
      recoveryVirtualNetworkCustomInput: {
        serializedName: "recoveryVirtualNetworkCustomInput",
        type: {
          name: "Composite",
          className: "RecoveryVirtualNetworkCustomDetails"
        }
      },
      recoveryProximityPlacementGroupCustomInput: {
        serializedName: "recoveryProximityPlacementGroupCustomInput",
        type: {
          name: "Composite",
          className: "RecoveryProximityPlacementGroupCustomDetails"
        }
      },
      autoProtectionOfDataDisk: {
        serializedName: "autoProtectionOfDataDisk",
        type: {
          name: "String"
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AProtectionIntentDiskInputDetails"
            }
          }
        }
      },
      vmManagedDisks: {
        serializedName: "vmManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AProtectionIntentManagedDiskInputDetails"
            }
          }
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      recoveryBootDiagStorageAccount: {
        serializedName: "recoveryBootDiagStorageAccount",
        type: {
          name: "Composite",
          className: "StorageAccountCustomDetails"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      },
      recoveryAvailabilityZone: {
        serializedName: "recoveryAvailabilityZone",
        type: {
          name: "String"
        }
      },
      agentAutoUpdateStatus: {
        serializedName: "agentAutoUpdateStatus",
        type: {
          name: "String"
        }
      },
      automationAccountAuthenticationType: {
        serializedName: "automationAccountAuthenticationType",
        type: {
          name: "String"
        }
      },
      automationAccountArmId: {
        serializedName: "automationAccountArmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanAutomationRunbookActionDetails: coreClient.CompositeMapper = {
  serializedName: "AutomationRunbookActionDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanAutomationRunbookActionDetails",
    uberParent: "RecoveryPlanActionDetails",
    polymorphicDiscriminator:
      RecoveryPlanActionDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanActionDetails.type.modelProperties,
      runbookId: {
        serializedName: "runbookId",
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "timeout",
        type: {
          name: "String"
        }
      },
      fabricLocation: {
        serializedName: "fabricLocation",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanManualActionDetails: coreClient.CompositeMapper = {
  serializedName: "ManualActionDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanManualActionDetails",
    uberParent: "RecoveryPlanActionDetails",
    polymorphicDiscriminator:
      RecoveryPlanActionDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanActionDetails.type.modelProperties,
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanScriptActionDetails: coreClient.CompositeMapper = {
  serializedName: "ScriptActionDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanScriptActionDetails",
    uberParent: "RecoveryPlanActionDetails",
    polymorphicDiscriminator:
      RecoveryPlanActionDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanActionDetails.type.modelProperties,
      path: {
        serializedName: "path",
        required: true,
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "timeout",
        type: {
          name: "String"
        }
      },
      fabricLocation: {
        serializedName: "fabricLocation",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanA2ADetails: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "RecoveryPlanA2ADetails",
    uberParent: "RecoveryPlanProviderSpecificDetails",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificDetails.type.modelProperties,
      primaryZone: {
        serializedName: "primaryZone",
        type: {
          name: "String"
        }
      },
      recoveryZone: {
        serializedName: "recoveryZone",
        type: {
          name: "String"
        }
      },
      primaryExtendedLocation: {
        serializedName: "primaryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      recoveryExtendedLocation: {
        serializedName: "recoveryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      }
    }
  }
};

export const RecoveryPlanA2AInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "RecoveryPlanA2AInput",
    uberParent: "RecoveryPlanProviderSpecificInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificInput.type.modelProperties,
      primaryZone: {
        serializedName: "primaryZone",
        type: {
          name: "String"
        }
      },
      recoveryZone: {
        serializedName: "recoveryZone",
        type: {
          name: "String"
        }
      },
      primaryExtendedLocation: {
        serializedName: "primaryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      recoveryExtendedLocation: {
        serializedName: "recoveryExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      }
    }
  }
};

export const RecoveryPlanA2AFailoverInput: coreClient.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "RecoveryPlanA2AFailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String"
        }
      },
      cloudServiceCreationOption: {
        serializedName: "cloudServiceCreationOption",
        type: {
          name: "String"
        }
      },
      multiVmSyncPointOption: {
        serializedName: "multiVmSyncPointOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanHyperVReplicaAzureFailbackInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzureFailback",
  type: {
    name: "Composite",
    className: "RecoveryPlanHyperVReplicaAzureFailbackInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      dataSyncOption: {
        serializedName: "dataSyncOption",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryVmCreationOption: {
        serializedName: "recoveryVmCreationOption",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanHyperVReplicaAzureFailoverInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "RecoveryPlanHyperVReplicaAzureFailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      primaryKekCertificatePfx: {
        serializedName: "primaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      secondaryKekCertificatePfx: {
        serializedName: "secondaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanInMageAzureV2FailoverInput: coreClient.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "RecoveryPlanInMageAzureV2FailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String"
        }
      },
      useMultiVmSyncPoint: {
        serializedName: "useMultiVmSyncPoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanInMageFailoverInput: coreClient.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "RecoveryPlanInMageFailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanInMageRcmFailbackFailoverInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcmFailback",
  type: {
    name: "Composite",
    className: "RecoveryPlanInMageRcmFailbackFailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String"
        }
      },
      useMultiVmSyncPoint: {
        serializedName: "useMultiVmSyncPoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanInMageRcmFailoverInput: coreClient.CompositeMapper = {
  serializedName: "InMageRcm",
  type: {
    name: "Composite",
    className: "RecoveryPlanInMageRcmFailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String"
        }
      },
      useMultiVmSyncPoint: {
        serializedName: "useMultiVmSyncPoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExistingProtectionProfile: coreClient.CompositeMapper = {
  serializedName: "Existing",
  type: {
    name: "Composite",
    className: "ExistingProtectionProfile",
    uberParent: "ProtectionProfileCustomDetails",
    polymorphicDiscriminator:
      ProtectionProfileCustomDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionProfileCustomDetails.type.modelProperties,
      protectionProfileId: {
        serializedName: "protectionProfileId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NewProtectionProfile: coreClient.CompositeMapper = {
  serializedName: "New",
  type: {
    name: "Composite",
    className: "NewProtectionProfile",
    uberParent: "ProtectionProfileCustomDetails",
    polymorphicDiscriminator:
      ProtectionProfileCustomDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionProfileCustomDetails.type.modelProperties,
      policyName: {
        serializedName: "policyName",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExistingStorageAccount: coreClient.CompositeMapper = {
  serializedName: "Existing",
  type: {
    name: "Composite",
    className: "ExistingStorageAccount",
    uberParent: "StorageAccountCustomDetails",
    polymorphicDiscriminator:
      StorageAccountCustomDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageAccountCustomDetails.type.modelProperties,
      azureStorageAccountId: {
        serializedName: "azureStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExistingRecoveryAvailabilitySet: coreClient.CompositeMapper = {
  serializedName: "Existing",
  type: {
    name: "Composite",
    className: "ExistingRecoveryAvailabilitySet",
    uberParent: "RecoveryAvailabilitySetCustomDetails",
    polymorphicDiscriminator:
      RecoveryAvailabilitySetCustomDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryAvailabilitySetCustomDetails.type.modelProperties,
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExistingRecoveryVirtualNetwork: coreClient.CompositeMapper = {
  serializedName: "Existing",
  type: {
    name: "Composite",
    className: "ExistingRecoveryVirtualNetwork",
    uberParent: "RecoveryVirtualNetworkCustomDetails",
    polymorphicDiscriminator:
      RecoveryVirtualNetworkCustomDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryVirtualNetworkCustomDetails.type.modelProperties,
      recoveryVirtualNetworkId: {
        serializedName: "recoveryVirtualNetworkId",
        required: true,
        type: {
          name: "String"
        }
      },
      recoverySubnetName: {
        serializedName: "recoverySubnetName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NewRecoveryVirtualNetwork: coreClient.CompositeMapper = {
  serializedName: "New",
  type: {
    name: "Composite",
    className: "NewRecoveryVirtualNetwork",
    uberParent: "RecoveryVirtualNetworkCustomDetails",
    polymorphicDiscriminator:
      RecoveryVirtualNetworkCustomDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryVirtualNetworkCustomDetails.type.modelProperties,
      recoveryVirtualNetworkResourceGroupName: {
        serializedName: "recoveryVirtualNetworkResourceGroupName",
        type: {
          name: "String"
        }
      },
      recoveryVirtualNetworkName: {
        serializedName: "recoveryVirtualNetworkName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExistingRecoveryProximityPlacementGroup: coreClient.CompositeMapper = {
  serializedName: "Existing",
  type: {
    name: "Composite",
    className: "ExistingRecoveryProximityPlacementGroup",
    uberParent: "RecoveryProximityPlacementGroupCustomDetails",
    polymorphicDiscriminator:
      RecoveryProximityPlacementGroupCustomDetails.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryProximityPlacementGroupCustomDetails.type.modelProperties,
      recoveryProximityPlacementGroupId: {
        serializedName: "recoveryProximityPlacementGroupId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExistingRecoveryResourceGroup: coreClient.CompositeMapper = {
  serializedName: "Existing",
  type: {
    name: "Composite",
    className: "ExistingRecoveryResourceGroup",
    uberParent: "RecoveryResourceGroupCustomDetails",
    polymorphicDiscriminator:
      RecoveryResourceGroupCustomDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryResourceGroupCustomDetails.type.modelProperties,
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmmVirtualMachineDetails: coreClient.CompositeMapper = {
  serializedName: "VmmVirtualMachine",
  type: {
    name: "Composite",
    className: "VmmVirtualMachineDetails",
    uberParent: "HyperVVirtualMachineDetails",
    polymorphicDiscriminator:
      HyperVVirtualMachineDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...HyperVVirtualMachineDetails.type.modelProperties
    }
  }
};

export const FabricReplicationGroupTaskDetails: coreClient.CompositeMapper = {
  serializedName: "FabricReplicationGroupTaskDetails",
  type: {
    name: "Composite",
    className: "FabricReplicationGroupTaskDetails",
    uberParent: "JobTaskDetails",
    polymorphicDiscriminator: JobTaskDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobTaskDetails.type.modelProperties,
      skippedReason: {
        serializedName: "skippedReason",
        type: {
          name: "String"
        }
      },
      skippedReasonString: {
        serializedName: "skippedReasonString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineTaskDetails: coreClient.CompositeMapper = {
  serializedName: "VirtualMachineTaskDetails",
  type: {
    name: "Composite",
    className: "VirtualMachineTaskDetails",
    uberParent: "JobTaskDetails",
    polymorphicDiscriminator: JobTaskDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobTaskDetails.type.modelProperties,
      skippedReason: {
        serializedName: "skippedReason",
        type: {
          name: "String"
        }
      },
      skippedReasonString: {
        serializedName: "skippedReasonString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanShutdownGroupTaskDetails: coreClient.CompositeMapper = {
  serializedName: "RecoveryPlanShutdownGroupTaskDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanShutdownGroupTaskDetails",
    uberParent: "RecoveryPlanGroupTaskDetails",
    polymorphicDiscriminator:
      RecoveryPlanGroupTaskDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanGroupTaskDetails.type.modelProperties
    }
  }
};

export const HyperVReplicaBluePolicyInput: coreClient.CompositeMapper = {
  serializedName: "HyperVReplica2012R2",
  type: {
    name: "Composite",
    className: "HyperVReplicaBluePolicyInput",
    uberParent: "HyperVReplicaPolicyInput",
    polymorphicDiscriminator:
      HyperVReplicaPolicyInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...HyperVReplicaPolicyInput.type.modelProperties,
      replicationFrequencyInSeconds: {
        serializedName: "replicationFrequencyInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ReplicationProtectedItemsUpdateMobilityServiceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationProtectedItemsUpdateMobilityServiceHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  ApplianceSpecificDetails: ApplianceSpecificDetails,
  EventProviderSpecificDetails: EventProviderSpecificDetails,
  EventSpecificDetails: EventSpecificDetails,
  FabricSpecificDetails: FabricSpecificDetails,
  FabricSpecificCreationInput: FabricSpecificCreationInput,
  NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
  FabricSpecificCreateNetworkMappingInput: FabricSpecificCreateNetworkMappingInput,
  FabricSpecificUpdateNetworkMappingInput: FabricSpecificUpdateNetworkMappingInput,
  ReplicationProviderSpecificContainerCreationInput: ReplicationProviderSpecificContainerCreationInput,
  MigrationProviderSpecificSettings: MigrationProviderSpecificSettings,
  EnableMigrationProviderSpecificInput: EnableMigrationProviderSpecificInput,
  UpdateMigrationItemProviderSpecificInput: UpdateMigrationItemProviderSpecificInput,
  MigrateProviderSpecificInput: MigrateProviderSpecificInput,
  ResumeReplicationProviderSpecificInput: ResumeReplicationProviderSpecificInput,
  ResyncProviderSpecificInput: ResyncProviderSpecificInput,
  TestMigrateProviderSpecificInput: TestMigrateProviderSpecificInput,
  ConfigurationSettings: ConfigurationSettings,
  ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
  EnableProtectionProviderSpecificInput: EnableProtectionProviderSpecificInput,
  UpdateReplicationProtectedItemProviderInput: UpdateReplicationProtectedItemProviderInput,
  AddDisksProviderSpecificInput: AddDisksProviderSpecificInput,
  ApplyRecoveryPointProviderSpecificInput: ApplyRecoveryPointProviderSpecificInput,
  PlannedFailoverProviderSpecificFailoverInput: PlannedFailoverProviderSpecificFailoverInput,
  ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
  DisableProtectionProviderSpecificInput: DisableProtectionProviderSpecificInput,
  RemoveDisksProviderSpecificInput: RemoveDisksProviderSpecificInput,
  ReverseReplicationProviderSpecificInput: ReverseReplicationProviderSpecificInput,
  SwitchProviderSpecificInput: SwitchProviderSpecificInput,
  TestFailoverProviderSpecificInput: TestFailoverProviderSpecificInput,
  UnplannedFailoverProviderSpecificInput: UnplannedFailoverProviderSpecificInput,
  UpdateApplianceForReplicationProtectedItemProviderSpecificInput: UpdateApplianceForReplicationProtectedItemProviderSpecificInput,
  ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
  ReplicationProviderSpecificContainerMappingInput: ReplicationProviderSpecificContainerMappingInput,
  ReplicationProviderSpecificUpdateContainerMappingInput: ReplicationProviderSpecificUpdateContainerMappingInput,
  SwitchProtectionProviderSpecificInput: SwitchProtectionProviderSpecificInput,
  TaskTypeDetails: TaskTypeDetails,
  GroupTaskDetails: GroupTaskDetails,
  JobDetails: JobDetails,
  PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
  PolicyProviderSpecificInput: PolicyProviderSpecificInput,
  ReplicationProtectionIntentProviderSpecificSettings: ReplicationProtectionIntentProviderSpecificSettings,
  CreateProtectionIntentProviderSpecificDetails: CreateProtectionIntentProviderSpecificDetails,
  RecoveryPlanActionDetails: RecoveryPlanActionDetails,
  RecoveryPlanProviderSpecificDetails: RecoveryPlanProviderSpecificDetails,
  RecoveryPlanProviderSpecificInput: RecoveryPlanProviderSpecificInput,
  RecoveryPlanProviderSpecificFailoverInput: RecoveryPlanProviderSpecificFailoverInput,
  ProtectionProfileCustomDetails: ProtectionProfileCustomDetails,
  StorageAccountCustomDetails: StorageAccountCustomDetails,
  RecoveryAvailabilitySetCustomDetails: RecoveryAvailabilitySetCustomDetails,
  RecoveryVirtualNetworkCustomDetails: RecoveryVirtualNetworkCustomDetails,
  RecoveryProximityPlacementGroupCustomDetails: RecoveryProximityPlacementGroupCustomDetails,
  RecoveryResourceGroupCustomDetails: RecoveryResourceGroupCustomDetails,
  "ApplianceSpecificDetails.InMageRcm": InMageRcmApplianceSpecificDetails,
  "EventProviderSpecificDetails.A2A": A2AEventDetails,
  "EventProviderSpecificDetails.HyperVReplica2012": HyperVReplica2012EventDetails,
  "EventProviderSpecificDetails.HyperVReplica2012R2": HyperVReplica2012R2EventDetails,
  "EventProviderSpecificDetails.HyperVReplicaAzure": HyperVReplicaAzureEventDetails,
  "EventProviderSpecificDetails.HyperVReplicaBaseEventDetails": HyperVReplicaBaseEventDetails,
  "EventProviderSpecificDetails.InMageAzureV2": InMageAzureV2EventDetails,
  "EventProviderSpecificDetails.InMageRcm": InMageRcmEventDetails,
  "EventProviderSpecificDetails.InMageRcmFailback": InMageRcmFailbackEventDetails,
  "EventProviderSpecificDetails.VMwareCbt": VMwareCbtEventDetails,
  "EventSpecificDetails.JobStatus": JobStatusEventDetails,
  "FabricSpecificDetails.Azure": AzureFabricSpecificDetails,
  "FabricSpecificDetails.HyperVSite": HyperVSiteDetails,
  "FabricSpecificDetails.InMageRcm": InMageRcmFabricSpecificDetails,
  "FabricSpecificDetails.VMM": VmmDetails,
  "FabricSpecificDetails.VMware": VMwareDetails,
  "FabricSpecificDetails.VMwareV2": VMwareV2FabricSpecificDetails,
  "FabricSpecificCreationInput.Azure": AzureFabricCreationInput,
  "FabricSpecificCreationInput.InMageRcm": InMageRcmFabricCreationInput,
  "FabricSpecificCreationInput.VMwareV2": VMwareV2FabricCreationInput,
  "NetworkMappingFabricSpecificSettings.AzureToAzure": AzureToAzureNetworkMappingSettings,
  "NetworkMappingFabricSpecificSettings.VmmToAzure": VmmToAzureNetworkMappingSettings,
  "NetworkMappingFabricSpecificSettings.VmmToVmm": VmmToVmmNetworkMappingSettings,
  "FabricSpecificCreateNetworkMappingInput.AzureToAzure": AzureToAzureCreateNetworkMappingInput,
  "FabricSpecificCreateNetworkMappingInput.VmmToAzure": VmmToAzureCreateNetworkMappingInput,
  "FabricSpecificCreateNetworkMappingInput.VmmToVmm": VmmToVmmCreateNetworkMappingInput,
  "FabricSpecificUpdateNetworkMappingInput.AzureToAzure": AzureToAzureUpdateNetworkMappingInput,
  "FabricSpecificUpdateNetworkMappingInput.VmmToAzure": VmmToAzureUpdateNetworkMappingInput,
  "FabricSpecificUpdateNetworkMappingInput.VmmToVmm": VmmToVmmUpdateNetworkMappingInput,
  "ReplicationProviderSpecificContainerCreationInput.A2A": A2AContainerCreationInput,
  "ReplicationProviderSpecificContainerCreationInput.A2ACrossClusterMigration": A2ACrossClusterMigrationContainerCreationInput,
  "ReplicationProviderSpecificContainerCreationInput.VMwareCbt": VMwareCbtContainerCreationInput,
  "MigrationProviderSpecificSettings.VMwareCbt": VMwareCbtMigrationDetails,
  "EnableMigrationProviderSpecificInput.VMwareCbt": VMwareCbtEnableMigrationInput,
  "UpdateMigrationItemProviderSpecificInput.VMwareCbt": VMwareCbtUpdateMigrationItemInput,
  "MigrateProviderSpecificInput.VMwareCbt": VMwareCbtMigrateInput,
  "ResumeReplicationProviderSpecificInput.VMwareCbt": VMwareCbtResumeReplicationInput,
  "ResyncProviderSpecificInput.VMwareCbt": VMwareCbtResyncInput,
  "TestMigrateProviderSpecificInput.VMwareCbt": VMwareCbtTestMigrateInput,
  "ConfigurationSettings.HyperVVirtualMachine": HyperVVirtualMachineDetails,
  "ConfigurationSettings.ReplicationGroupDetails": ReplicationGroupDetails,
  "ConfigurationSettings.VMwareVirtualMachine": VMwareVirtualMachineDetails,
  "ReplicationProviderSpecificSettings.A2ACrossClusterMigration": A2ACrossClusterMigrationReplicationDetails,
  "ReplicationProviderSpecificSettings.A2A": A2AReplicationDetails,
  "ReplicationProviderSpecificSettings.HyperVReplicaAzure": HyperVReplicaAzureReplicationDetails,
  "ReplicationProviderSpecificSettings.HyperVReplicaBaseReplicationDetails": HyperVReplicaBaseReplicationDetails,
  "ReplicationProviderSpecificSettings.HyperVReplica2012R2": HyperVReplicaBlueReplicationDetails,
  "ReplicationProviderSpecificSettings.HyperVReplica2012": HyperVReplicaReplicationDetails,
  "ReplicationProviderSpecificSettings.InMageAzureV2": InMageAzureV2ReplicationDetails,
  "ReplicationProviderSpecificSettings.InMageRcmFailback": InMageRcmFailbackReplicationDetails,
  "ReplicationProviderSpecificSettings.InMageRcm": InMageRcmReplicationDetails,
  "ReplicationProviderSpecificSettings.InMage": InMageReplicationDetails,
  "EnableProtectionProviderSpecificInput.A2ACrossClusterMigration": A2ACrossClusterMigrationEnableProtectionInput,
  "EnableProtectionProviderSpecificInput.A2A": A2AEnableProtectionInput,
  "EnableProtectionProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureEnableProtectionInput,
  "EnableProtectionProviderSpecificInput.InMageAzureV2": InMageAzureV2EnableProtectionInput,
  "EnableProtectionProviderSpecificInput.InMage": InMageEnableProtectionInput,
  "EnableProtectionProviderSpecificInput.InMageRcm": InMageRcmEnableProtectionInput,
  "UpdateReplicationProtectedItemProviderInput.A2A": A2AUpdateReplicationProtectedItemInput,
  "UpdateReplicationProtectedItemProviderInput.HyperVReplicaAzure": HyperVReplicaAzureUpdateReplicationProtectedItemInput,
  "UpdateReplicationProtectedItemProviderInput.InMageAzureV2": InMageAzureV2UpdateReplicationProtectedItemInput,
  "UpdateReplicationProtectedItemProviderInput.InMageRcm": InMageRcmUpdateReplicationProtectedItemInput,
  "AddDisksProviderSpecificInput.A2A": A2AAddDisksInput,
  "ApplyRecoveryPointProviderSpecificInput.A2A": A2AApplyRecoveryPointInput,
  "ApplyRecoveryPointProviderSpecificInput.A2ACrossClusterMigration": A2ACrossClusterMigrationApplyRecoveryPointInput,
  "ApplyRecoveryPointProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureApplyRecoveryPointInput,
  "ApplyRecoveryPointProviderSpecificInput.InMageAzureV2": InMageAzureV2ApplyRecoveryPointInput,
  "ApplyRecoveryPointProviderSpecificInput.InMageRcm": InMageRcmApplyRecoveryPointInput,
  "PlannedFailoverProviderSpecificFailoverInput.HyperVReplicaAzureFailback": HyperVReplicaAzureFailbackProviderInput,
  "PlannedFailoverProviderSpecificFailoverInput.HyperVReplicaAzure": HyperVReplicaAzurePlannedFailoverProviderInput,
  "PlannedFailoverProviderSpecificFailoverInput.InMageRcmFailback": InMageRcmFailbackPlannedFailoverProviderInput,
  "ProviderSpecificRecoveryPointDetails.A2A": A2ARecoveryPointDetails,
  "ProviderSpecificRecoveryPointDetails.InMageAzureV2": InMageAzureV2RecoveryPointDetails,
  "ProviderSpecificRecoveryPointDetails.InMageRcm": InMageRcmRecoveryPointDetails,
  "DisableProtectionProviderSpecificInput.InMage": InMageDisableProtectionProviderSpecificInput,
  "RemoveDisksProviderSpecificInput.A2A": A2ARemoveDisksInput,
  "ReverseReplicationProviderSpecificInput.A2A": A2AReprotectInput,
  "ReverseReplicationProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureReprotectInput,
  "ReverseReplicationProviderSpecificInput.InMageAzureV2": InMageAzureV2ReprotectInput,
  "ReverseReplicationProviderSpecificInput.InMageRcmFailback": InMageRcmFailbackReprotectInput,
  "ReverseReplicationProviderSpecificInput.InMageRcm": InMageRcmReprotectInput,
  "ReverseReplicationProviderSpecificInput.InMage": InMageReprotectInput,
  "SwitchProviderSpecificInput.InMageAzureV2": InMageAzureV2SwitchProviderInput,
  "TestFailoverProviderSpecificInput.A2A": A2ATestFailoverInput,
  "TestFailoverProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureTestFailoverInput,
  "TestFailoverProviderSpecificInput.InMageAzureV2": InMageAzureV2TestFailoverInput,
  "TestFailoverProviderSpecificInput.InMageRcm": InMageRcmTestFailoverInput,
  "TestFailoverProviderSpecificInput.InMage": InMageTestFailoverInput,
  "UnplannedFailoverProviderSpecificInput.A2A": A2AUnplannedFailoverInput,
  "UnplannedFailoverProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureUnplannedFailoverInput,
  "UnplannedFailoverProviderSpecificInput.InMageAzureV2": InMageAzureV2UnplannedFailoverInput,
  "UnplannedFailoverProviderSpecificInput.InMageRcm": InMageRcmUnplannedFailoverInput,
  "UnplannedFailoverProviderSpecificInput.InMage": InMageUnplannedFailoverInput,
  "UpdateApplianceForReplicationProtectedItemProviderSpecificInput.InMageRcm": InMageRcmUpdateApplianceForReplicationProtectedItemInput,
  "ProtectionContainerMappingProviderSpecificDetails.A2A": A2AProtectionContainerMappingDetails,
  "ProtectionContainerMappingProviderSpecificDetails.InMageRcm": InMageRcmProtectionContainerMappingDetails,
  "ProtectionContainerMappingProviderSpecificDetails.VMwareCbt": VMwareCbtProtectionContainerMappingDetails,
  "ReplicationProviderSpecificContainerMappingInput.A2A": A2AContainerMappingInput,
  "ReplicationProviderSpecificContainerMappingInput.VMwareCbt": VMwareCbtContainerMappingInput,
  "ReplicationProviderSpecificUpdateContainerMappingInput.A2A": A2AUpdateContainerMappingInput,
  "ReplicationProviderSpecificUpdateContainerMappingInput.InMageRcm": InMageRcmUpdateContainerMappingInput,
  "SwitchProtectionProviderSpecificInput.A2A": A2ASwitchProtectionInput,
  "TaskTypeDetails.AutomationRunbookTaskDetails": AutomationRunbookTaskDetails,
  "TaskTypeDetails.ConsistencyCheckTaskDetails": ConsistencyCheckTaskDetails,
  "TaskTypeDetails.JobTaskDetails": JobTaskDetails,
  "TaskTypeDetails.ManualActionTaskDetails": ManualActionTaskDetails,
  "TaskTypeDetails.ScriptActionTaskDetails": ScriptActionTaskDetails,
  "TaskTypeDetails.VmNicUpdatesTaskDetails": VmNicUpdatesTaskDetails,
  "GroupTaskDetails.InlineWorkflowTaskDetails": InlineWorkflowTaskDetails,
  "GroupTaskDetails.RecoveryPlanGroupTaskDetails": RecoveryPlanGroupTaskDetails,
  "JobDetails.AsrJobDetails": AsrJobDetails,
  "JobDetails.ExportJobDetails": ExportJobDetails,
  "JobDetails.FailoverJobDetails": FailoverJobDetails,
  "JobDetails.SwitchProtectionJobDetails": SwitchProtectionJobDetails,
  "JobDetails.TestFailoverJobDetails": TestFailoverJobDetails,
  "PolicyProviderSpecificDetails.A2A": A2APolicyDetails,
  "PolicyProviderSpecificDetails.HyperVReplicaAzure": HyperVReplicaAzurePolicyDetails,
  "PolicyProviderSpecificDetails.HyperVReplicaBasePolicyDetails": HyperVReplicaBasePolicyDetails,
  "PolicyProviderSpecificDetails.HyperVReplica2012R2": HyperVReplicaBluePolicyDetails,
  "PolicyProviderSpecificDetails.HyperVReplica2012": HyperVReplicaPolicyDetails,
  "PolicyProviderSpecificDetails.InMageAzureV2": InMageAzureV2PolicyDetails,
  "PolicyProviderSpecificDetails.InMageBasePolicyDetails": InMageBasePolicyDetails,
  "PolicyProviderSpecificDetails.InMage": InMagePolicyDetails,
  "PolicyProviderSpecificDetails.InMageRcmFailback": InMageRcmFailbackPolicyDetails,
  "PolicyProviderSpecificDetails.InMageRcm": InMageRcmPolicyDetails,
  "PolicyProviderSpecificDetails.VMwareCbt": VmwareCbtPolicyDetails,
  "PolicyProviderSpecificInput.A2ACrossClusterMigration": A2ACrossClusterMigrationPolicyCreationInput,
  "PolicyProviderSpecificInput.A2A": A2APolicyCreationInput,
  "PolicyProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzurePolicyInput,
  "PolicyProviderSpecificInput.HyperVReplica2012": HyperVReplicaPolicyInput,
  "PolicyProviderSpecificInput.InMageAzureV2": InMageAzureV2PolicyInput,
  "PolicyProviderSpecificInput.InMage": InMagePolicyInput,
  "PolicyProviderSpecificInput.InMageRcmFailback": InMageRcmFailbackPolicyCreationInput,
  "PolicyProviderSpecificInput.InMageRcm": InMageRcmPolicyCreationInput,
  "PolicyProviderSpecificInput.VMwareCbt": VMwareCbtPolicyCreationInput,
  "ReplicationProtectionIntentProviderSpecificSettings.A2A": A2AReplicationIntentDetails,
  "CreateProtectionIntentProviderSpecificDetails.A2A": A2ACreateProtectionIntentInput,
  "RecoveryPlanActionDetails.AutomationRunbookActionDetails": RecoveryPlanAutomationRunbookActionDetails,
  "RecoveryPlanActionDetails.ManualActionDetails": RecoveryPlanManualActionDetails,
  "RecoveryPlanActionDetails.ScriptActionDetails": RecoveryPlanScriptActionDetails,
  "RecoveryPlanProviderSpecificDetails.A2A": RecoveryPlanA2ADetails,
  "RecoveryPlanProviderSpecificInput.A2A": RecoveryPlanA2AInput,
  "RecoveryPlanProviderSpecificFailoverInput.A2A": RecoveryPlanA2AFailoverInput,
  "RecoveryPlanProviderSpecificFailoverInput.HyperVReplicaAzureFailback": RecoveryPlanHyperVReplicaAzureFailbackInput,
  "RecoveryPlanProviderSpecificFailoverInput.HyperVReplicaAzure": RecoveryPlanHyperVReplicaAzureFailoverInput,
  "RecoveryPlanProviderSpecificFailoverInput.InMageAzureV2": RecoveryPlanInMageAzureV2FailoverInput,
  "RecoveryPlanProviderSpecificFailoverInput.InMage": RecoveryPlanInMageFailoverInput,
  "RecoveryPlanProviderSpecificFailoverInput.InMageRcmFailback": RecoveryPlanInMageRcmFailbackFailoverInput,
  "RecoveryPlanProviderSpecificFailoverInput.InMageRcm": RecoveryPlanInMageRcmFailoverInput,
  "ProtectionProfileCustomDetails.Existing": ExistingProtectionProfile,
  "ProtectionProfileCustomDetails.New": NewProtectionProfile,
  "StorageAccountCustomDetails.Existing": ExistingStorageAccount,
  "RecoveryAvailabilitySetCustomDetails.Existing": ExistingRecoveryAvailabilitySet,
  "RecoveryVirtualNetworkCustomDetails.Existing": ExistingRecoveryVirtualNetwork,
  "RecoveryVirtualNetworkCustomDetails.New": NewRecoveryVirtualNetwork,
  "RecoveryProximityPlacementGroupCustomDetails.Existing": ExistingRecoveryProximityPlacementGroup,
  "RecoveryResourceGroupCustomDetails.Existing": ExistingRecoveryResourceGroup,
  "HyperVVirtualMachineDetails.VmmVirtualMachine": VmmVirtualMachineDetails,
  "JobTaskDetails.FabricReplicationGroupTaskDetails": FabricReplicationGroupTaskDetails,
  "JobTaskDetails.VirtualMachineTaskDetails": VirtualMachineTaskDetails,
  "RecoveryPlanGroupTaskDetails.RecoveryPlanShutdownGroupTaskDetails": RecoveryPlanShutdownGroupTaskDetails,
  "HyperVReplicaPolicyInput.HyperVReplica2012R2": HyperVReplicaBluePolicyInput
};
