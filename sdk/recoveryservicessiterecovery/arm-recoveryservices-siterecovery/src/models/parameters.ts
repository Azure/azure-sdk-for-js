/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";

export const acceptLanguage: msRest.OperationParameter = {
  parameterPath: "acceptLanguage",
  mapper: {
    serializedName: "accept-language",
    defaultValue: 'en-US',
    type: {
      name: "String"
    }
  }
};
export const alertSettingName: msRest.OperationURLParameter = {
  parameterPath: "alertSettingName",
  mapper: {
    required: true,
    serializedName: "alertSettingName",
    type: {
      name: "String"
    }
  }
};
export const apiVersion: msRest.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    required: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};
export const eventName: msRest.OperationURLParameter = {
  parameterPath: "eventName",
  mapper: {
    required: true,
    serializedName: "eventName",
    type: {
      name: "String"
    }
  }
};
export const fabricName: msRest.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    required: true,
    serializedName: "fabricName",
    type: {
      name: "String"
    }
  }
};
export const filter: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "filter"
  ],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};
export const jobName: msRest.OperationURLParameter = {
  parameterPath: "jobName",
  mapper: {
    required: true,
    serializedName: "jobName",
    type: {
      name: "String"
    }
  }
};
export const logicalNetworkName: msRest.OperationURLParameter = {
  parameterPath: "logicalNetworkName",
  mapper: {
    required: true,
    serializedName: "logicalNetworkName",
    type: {
      name: "String"
    }
  }
};
export const mappingName: msRest.OperationURLParameter = {
  parameterPath: "mappingName",
  mapper: {
    required: true,
    serializedName: "mappingName",
    type: {
      name: "String"
    }
  }
};
export const networkMappingName: msRest.OperationURLParameter = {
  parameterPath: "networkMappingName",
  mapper: {
    required: true,
    serializedName: "networkMappingName",
    type: {
      name: "String"
    }
  }
};
export const networkName: msRest.OperationURLParameter = {
  parameterPath: "networkName",
  mapper: {
    required: true,
    serializedName: "networkName",
    type: {
      name: "String"
    }
  }
};
export const nextPageLink: msRest.OperationURLParameter = {
  parameterPath: "nextPageLink",
  mapper: {
    required: true,
    serializedName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const policyName: msRest.OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    required: true,
    serializedName: "policyName",
    type: {
      name: "String"
    }
  }
};
export const protectableItemName: msRest.OperationURLParameter = {
  parameterPath: "protectableItemName",
  mapper: {
    required: true,
    serializedName: "protectableItemName",
    type: {
      name: "String"
    }
  }
};
export const protectionContainerName: msRest.OperationURLParameter = {
  parameterPath: "protectionContainerName",
  mapper: {
    required: true,
    serializedName: "protectionContainerName",
    type: {
      name: "String"
    }
  }
};
export const providerName: msRest.OperationURLParameter = {
  parameterPath: "providerName",
  mapper: {
    required: true,
    serializedName: "providerName",
    type: {
      name: "String"
    }
  }
};
export const recoveryPlanName: msRest.OperationURLParameter = {
  parameterPath: "recoveryPlanName",
  mapper: {
    required: true,
    serializedName: "recoveryPlanName",
    type: {
      name: "String"
    }
  }
};
export const recoveryPointName: msRest.OperationURLParameter = {
  parameterPath: "recoveryPointName",
  mapper: {
    required: true,
    serializedName: "recoveryPointName",
    type: {
      name: "String"
    }
  }
};
export const replicatedProtectedItemName: msRest.OperationURLParameter = {
  parameterPath: "replicatedProtectedItemName",
  mapper: {
    required: true,
    serializedName: "replicatedProtectedItemName",
    type: {
      name: "String"
    }
  }
};
export const replicationProtectedItemName: msRest.OperationURLParameter = {
  parameterPath: "replicationProtectedItemName",
  mapper: {
    required: true,
    serializedName: "replicationProtectedItemName",
    type: {
      name: "String"
    }
  }
};
export const resourceGroupName: msRest.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    required: true,
    serializedName: "resourceGroupName",
    type: {
      name: "String"
    }
  }
};
export const resourceName: msRest.OperationURLParameter = {
  parameterPath: "resourceName",
  mapper: {
    required: true,
    serializedName: "resourceName",
    type: {
      name: "String"
    }
  }
};
export const skipToken: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "skipToken"
  ],
  mapper: {
    serializedName: "skipToken",
    type: {
      name: "String"
    }
  }
};
export const storageClassificationMappingName: msRest.OperationURLParameter = {
  parameterPath: "storageClassificationMappingName",
  mapper: {
    required: true,
    serializedName: "storageClassificationMappingName",
    type: {
      name: "String"
    }
  }
};
export const storageClassificationName: msRest.OperationURLParameter = {
  parameterPath: "storageClassificationName",
  mapper: {
    required: true,
    serializedName: "storageClassificationName",
    type: {
      name: "String"
    }
  }
};
export const subscriptionId: msRest.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    required: true,
    serializedName: "subscriptionId",
    type: {
      name: "String"
    }
  }
};
export const vCenterName: msRest.OperationURLParameter = {
  parameterPath: "vCenterName",
  mapper: {
    required: true,
    serializedName: "vCenterName",
    type: {
      name: "String"
    }
  }
};
