/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  RecoveryPlan,
  ReplicationRecoveryPlansListOptionalParams,
  ReplicationRecoveryPlansGetOptionalParams,
  ReplicationRecoveryPlansGetResponse,
  CreateRecoveryPlanInput,
  ReplicationRecoveryPlansCreateOptionalParams,
  ReplicationRecoveryPlansCreateResponse,
  ReplicationRecoveryPlansDeleteOptionalParams,
  UpdateRecoveryPlanInput,
  ReplicationRecoveryPlansUpdateOptionalParams,
  ReplicationRecoveryPlansUpdateResponse,
  ReplicationRecoveryPlansFailoverCancelOptionalParams,
  ReplicationRecoveryPlansFailoverCancelResponse,
  ReplicationRecoveryPlansFailoverCommitOptionalParams,
  ReplicationRecoveryPlansFailoverCommitResponse,
  RecoveryPlanPlannedFailoverInput,
  ReplicationRecoveryPlansPlannedFailoverOptionalParams,
  ReplicationRecoveryPlansPlannedFailoverResponse,
  ReplicationRecoveryPlansReprotectOptionalParams,
  ReplicationRecoveryPlansReprotectResponse,
  RecoveryPlanTestFailoverInput,
  ReplicationRecoveryPlansTestFailoverOptionalParams,
  ReplicationRecoveryPlansTestFailoverResponse,
  RecoveryPlanTestFailoverCleanupInput,
  ReplicationRecoveryPlansTestFailoverCleanupOptionalParams,
  ReplicationRecoveryPlansTestFailoverCleanupResponse,
  RecoveryPlanUnplannedFailoverInput,
  ReplicationRecoveryPlansUnplannedFailoverOptionalParams,
  ReplicationRecoveryPlansUnplannedFailoverResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ReplicationRecoveryPlans. */
export interface ReplicationRecoveryPlans {
  /**
   * Lists the recovery plans in the vault.
   * @param options The options parameters.
   */
  list(
    options?: ReplicationRecoveryPlansListOptionalParams
  ): PagedAsyncIterableIterator<RecoveryPlan>;
  /**
   * Gets the details of the recovery plan.
   * @param recoveryPlanName Name of the recovery plan.
   * @param options The options parameters.
   */
  get(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansGetOptionalParams
  ): Promise<ReplicationRecoveryPlansGetResponse>;
  /**
   * The operation to create a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery Plan creation input.
   * @param options The options parameters.
   */
  beginCreate(
    recoveryPlanName: string,
    input: CreateRecoveryPlanInput,
    options?: ReplicationRecoveryPlansCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansCreateResponse>,
      ReplicationRecoveryPlansCreateResponse
    >
  >;
  /**
   * The operation to create a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery Plan creation input.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    recoveryPlanName: string,
    input: CreateRecoveryPlanInput,
    options?: ReplicationRecoveryPlansCreateOptionalParams
  ): Promise<ReplicationRecoveryPlansCreateResponse>;
  /**
   * Delete a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  beginDelete(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansDeleteOptionalParams
  ): Promise<void>;
  /**
   * The operation to update a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Update recovery plan input.
   * @param options The options parameters.
   */
  beginUpdate(
    recoveryPlanName: string,
    input: UpdateRecoveryPlanInput,
    options?: ReplicationRecoveryPlansUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansUpdateResponse>,
      ReplicationRecoveryPlansUpdateResponse
    >
  >;
  /**
   * The operation to update a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Update recovery plan input.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    recoveryPlanName: string,
    input: UpdateRecoveryPlanInput,
    options?: ReplicationRecoveryPlansUpdateOptionalParams
  ): Promise<ReplicationRecoveryPlansUpdateResponse>;
  /**
   * The operation to cancel the failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  beginFailoverCancel(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansFailoverCancelOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansFailoverCancelResponse>,
      ReplicationRecoveryPlansFailoverCancelResponse
    >
  >;
  /**
   * The operation to cancel the failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  beginFailoverCancelAndWait(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansFailoverCancelOptionalParams
  ): Promise<ReplicationRecoveryPlansFailoverCancelResponse>;
  /**
   * The operation to commit the failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  beginFailoverCommit(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansFailoverCommitOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansFailoverCommitResponse>,
      ReplicationRecoveryPlansFailoverCommitResponse
    >
  >;
  /**
   * The operation to commit the failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  beginFailoverCommitAndWait(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansFailoverCommitOptionalParams
  ): Promise<ReplicationRecoveryPlansFailoverCommitResponse>;
  /**
   * The operation to start the planned failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Failover input.
   * @param options The options parameters.
   */
  beginPlannedFailover(
    recoveryPlanName: string,
    input: RecoveryPlanPlannedFailoverInput,
    options?: ReplicationRecoveryPlansPlannedFailoverOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansPlannedFailoverResponse>,
      ReplicationRecoveryPlansPlannedFailoverResponse
    >
  >;
  /**
   * The operation to start the planned failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Failover input.
   * @param options The options parameters.
   */
  beginPlannedFailoverAndWait(
    recoveryPlanName: string,
    input: RecoveryPlanPlannedFailoverInput,
    options?: ReplicationRecoveryPlansPlannedFailoverOptionalParams
  ): Promise<ReplicationRecoveryPlansPlannedFailoverResponse>;
  /**
   * The operation to reprotect(reverse replicate) a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  beginReprotect(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansReprotectOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansReprotectResponse>,
      ReplicationRecoveryPlansReprotectResponse
    >
  >;
  /**
   * The operation to reprotect(reverse replicate) a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  beginReprotectAndWait(
    recoveryPlanName: string,
    options?: ReplicationRecoveryPlansReprotectOptionalParams
  ): Promise<ReplicationRecoveryPlansReprotectResponse>;
  /**
   * The operation to start the test failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan test failover input.
   * @param options The options parameters.
   */
  beginTestFailover(
    recoveryPlanName: string,
    input: RecoveryPlanTestFailoverInput,
    options?: ReplicationRecoveryPlansTestFailoverOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansTestFailoverResponse>,
      ReplicationRecoveryPlansTestFailoverResponse
    >
  >;
  /**
   * The operation to start the test failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan test failover input.
   * @param options The options parameters.
   */
  beginTestFailoverAndWait(
    recoveryPlanName: string,
    input: RecoveryPlanTestFailoverInput,
    options?: ReplicationRecoveryPlansTestFailoverOptionalParams
  ): Promise<ReplicationRecoveryPlansTestFailoverResponse>;
  /**
   * The operation to cleanup test failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan test failover cleanup input.
   * @param options The options parameters.
   */
  beginTestFailoverCleanup(
    recoveryPlanName: string,
    input: RecoveryPlanTestFailoverCleanupInput,
    options?: ReplicationRecoveryPlansTestFailoverCleanupOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansTestFailoverCleanupResponse>,
      ReplicationRecoveryPlansTestFailoverCleanupResponse
    >
  >;
  /**
   * The operation to cleanup test failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan test failover cleanup input.
   * @param options The options parameters.
   */
  beginTestFailoverCleanupAndWait(
    recoveryPlanName: string,
    input: RecoveryPlanTestFailoverCleanupInput,
    options?: ReplicationRecoveryPlansTestFailoverCleanupOptionalParams
  ): Promise<ReplicationRecoveryPlansTestFailoverCleanupResponse>;
  /**
   * The operation to start the unplanned failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan unplanned failover input.
   * @param options The options parameters.
   */
  beginUnplannedFailover(
    recoveryPlanName: string,
    input: RecoveryPlanUnplannedFailoverInput,
    options?: ReplicationRecoveryPlansUnplannedFailoverOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReplicationRecoveryPlansUnplannedFailoverResponse>,
      ReplicationRecoveryPlansUnplannedFailoverResponse
    >
  >;
  /**
   * The operation to start the unplanned failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Recovery plan unplanned failover input.
   * @param options The options parameters.
   */
  beginUnplannedFailoverAndWait(
    recoveryPlanName: string,
    input: RecoveryPlanUnplannedFailoverInput,
    options?: ReplicationRecoveryPlansUnplannedFailoverOptionalParams
  ): Promise<ReplicationRecoveryPlansUnplannedFailoverResponse>;
}
