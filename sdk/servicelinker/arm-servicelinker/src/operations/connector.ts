/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Connector } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceLinkerManagementClient } from "../serviceLinkerManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  DryrunResource,
  ConnectorListDryrunNextOptionalParams,
  ConnectorListDryrunOptionalParams,
  ConnectorListDryrunResponse,
  LinkerResource,
  ConnectorListNextOptionalParams,
  ConnectorListOptionalParams,
  ConnectorListResponse,
  ConnectorGetDryrunOptionalParams,
  ConnectorGetDryrunResponse,
  ConnectorCreateDryrunOptionalParams,
  ConnectorCreateDryrunResponse,
  DryrunPatch,
  ConnectorUpdateDryrunOptionalParams,
  ConnectorUpdateDryrunResponse,
  ConnectorDeleteDryrunOptionalParams,
  ConnectorGetOptionalParams,
  ConnectorGetResponse,
  ConnectorCreateOrUpdateOptionalParams,
  ConnectorCreateOrUpdateResponse,
  ConnectorDeleteOptionalParams,
  LinkerPatch,
  ConnectorUpdateOptionalParams,
  ConnectorUpdateResponse,
  ConnectorValidateOptionalParams,
  ConnectorValidateResponse,
  ConnectorGenerateConfigurationsOptionalParams,
  ConnectorGenerateConfigurationsResponse,
  ConnectorListDryrunNextResponse,
  ConnectorListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Connector operations. */
export class ConnectorImpl implements Connector {
  private readonly client: ServiceLinkerManagementClient;

  /**
   * Initialize a new instance of the class Connector class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceLinkerManagementClient) {
    this.client = client;
  }

  /**
   * list dryrun jobs
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  public listDryrun(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    options?: ConnectorListDryrunOptionalParams,
  ): PagedAsyncIterableIterator<DryrunResource> {
    const iter = this.listDryrunPagingAll(
      subscriptionId,
      resourceGroupName,
      location,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDryrunPagingPage(
          subscriptionId,
          resourceGroupName,
          location,
          options,
          settings,
        );
      },
    };
  }

  private async *listDryrunPagingPage(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    options?: ConnectorListDryrunOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DryrunResource[]> {
    let result: ConnectorListDryrunResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDryrun(
        subscriptionId,
        resourceGroupName,
        location,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDryrunNext(
        subscriptionId,
        resourceGroupName,
        location,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDryrunPagingAll(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    options?: ConnectorListDryrunOptionalParams,
  ): AsyncIterableIterator<DryrunResource> {
    for await (const page of this.listDryrunPagingPage(
      subscriptionId,
      resourceGroupName,
      location,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Returns list of connector which connects to the resource, which supports to config the target
   * service during the resource provision.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  public list(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    options?: ConnectorListOptionalParams,
  ): PagedAsyncIterableIterator<LinkerResource> {
    const iter = this.listPagingAll(
      subscriptionId,
      resourceGroupName,
      location,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          subscriptionId,
          resourceGroupName,
          location,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    options?: ConnectorListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<LinkerResource[]> {
    let result: ConnectorListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        subscriptionId,
        resourceGroupName,
        location,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        subscriptionId,
        resourceGroupName,
        location,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    options?: ConnectorListOptionalParams,
  ): AsyncIterableIterator<LinkerResource> {
    for await (const page of this.listPagingPage(
      subscriptionId,
      resourceGroupName,
      location,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * list dryrun jobs
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  private _listDryrun(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    options?: ConnectorListDryrunOptionalParams,
  ): Promise<ConnectorListDryrunResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, location, options },
      listDryrunOperationSpec,
    );
  }

  /**
   * get a dryrun job
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param dryrunName The name of dryrun.
   * @param options The options parameters.
   */
  getDryrun(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    dryrunName: string,
    options?: ConnectorGetDryrunOptionalParams,
  ): Promise<ConnectorGetDryrunResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, location, dryrunName, options },
      getDryrunOperationSpec,
    );
  }

  /**
   * create a dryrun job to do necessary check before actual creation
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  async beginCreateDryrun(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    dryrunName: string,
    parameters: DryrunResource,
    options?: ConnectorCreateDryrunOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorCreateDryrunResponse>,
      ConnectorCreateDryrunResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectorCreateDryrunResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        location,
        dryrunName,
        parameters,
        options,
      },
      spec: createDryrunOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectorCreateDryrunResponse,
      OperationState<ConnectorCreateDryrunResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * create a dryrun job to do necessary check before actual creation
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  async beginCreateDryrunAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    dryrunName: string,
    parameters: DryrunResource,
    options?: ConnectorCreateDryrunOptionalParams,
  ): Promise<ConnectorCreateDryrunResponse> {
    const poller = await this.beginCreateDryrun(
      subscriptionId,
      resourceGroupName,
      location,
      dryrunName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * update a dryrun job to do necessary check before actual creation
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  async beginUpdateDryrun(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    dryrunName: string,
    parameters: DryrunPatch,
    options?: ConnectorUpdateDryrunOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorUpdateDryrunResponse>,
      ConnectorUpdateDryrunResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectorUpdateDryrunResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        location,
        dryrunName,
        parameters,
        options,
      },
      spec: updateDryrunOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectorUpdateDryrunResponse,
      OperationState<ConnectorUpdateDryrunResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * update a dryrun job to do necessary check before actual creation
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  async beginUpdateDryrunAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    dryrunName: string,
    parameters: DryrunPatch,
    options?: ConnectorUpdateDryrunOptionalParams,
  ): Promise<ConnectorUpdateDryrunResponse> {
    const poller = await this.beginUpdateDryrun(
      subscriptionId,
      resourceGroupName,
      location,
      dryrunName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * delete a dryrun job
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param dryrunName The name of dryrun.
   * @param options The options parameters.
   */
  deleteDryrun(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    dryrunName: string,
    options?: ConnectorDeleteDryrunOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, location, dryrunName, options },
      deleteDryrunOperationSpec,
    );
  }

  /**
   * Returns list of connector which connects to the resource, which supports to config the target
   * service during the resource provision.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  private _list(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    options?: ConnectorListOptionalParams,
  ): Promise<ConnectorListResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, location, options },
      listOperationSpec,
    );
  }

  /**
   * Returns Connector resource for a given name.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param connectorName The name of resource.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    connectorName: string,
    options?: ConnectorGetOptionalParams,
  ): Promise<ConnectorGetResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, location, connectorName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update Connector resource.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param connectorName The name of resource.
   * @param parameters Connector details.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    connectorName: string,
    parameters: LinkerResource,
    options?: ConnectorCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorCreateOrUpdateResponse>,
      ConnectorCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectorCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        location,
        connectorName,
        parameters,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectorCreateOrUpdateResponse,
      OperationState<ConnectorCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update Connector resource.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param connectorName The name of resource.
   * @param parameters Connector details.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    connectorName: string,
    parameters: LinkerResource,
    options?: ConnectorCreateOrUpdateOptionalParams,
  ): Promise<ConnectorCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      subscriptionId,
      resourceGroupName,
      location,
      connectorName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a Connector.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param connectorName The name of resource.
   * @param options The options parameters.
   */
  async beginDelete(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    connectorName: string,
    options?: ConnectorDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        location,
        connectorName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a Connector.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param connectorName The name of resource.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    connectorName: string,
    options?: ConnectorDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      subscriptionId,
      resourceGroupName,
      location,
      connectorName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Operation to update an existing Connector.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param connectorName The name of resource.
   * @param parameters Connector details.
   * @param options The options parameters.
   */
  async beginUpdate(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    connectorName: string,
    parameters: LinkerPatch,
    options?: ConnectorUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorUpdateResponse>,
      ConnectorUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectorUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        location,
        connectorName,
        parameters,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectorUpdateResponse,
      OperationState<ConnectorUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Operation to update an existing Connector.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param connectorName The name of resource.
   * @param parameters Connector details.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    connectorName: string,
    parameters: LinkerPatch,
    options?: ConnectorUpdateOptionalParams,
  ): Promise<ConnectorUpdateResponse> {
    const poller = await this.beginUpdate(
      subscriptionId,
      resourceGroupName,
      location,
      connectorName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Validate a Connector.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param connectorName The name of resource.
   * @param options The options parameters.
   */
  async beginValidate(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    connectorName: string,
    options?: ConnectorValidateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorValidateResponse>,
      ConnectorValidateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectorValidateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        location,
        connectorName,
        options,
      },
      spec: validateOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectorValidateResponse,
      OperationState<ConnectorValidateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Validate a Connector.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param connectorName The name of resource.
   * @param options The options parameters.
   */
  async beginValidateAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    connectorName: string,
    options?: ConnectorValidateOptionalParams,
  ): Promise<ConnectorValidateResponse> {
    const poller = await this.beginValidate(
      subscriptionId,
      resourceGroupName,
      location,
      connectorName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Generate configurations for a Connector.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param connectorName The name of resource.
   * @param options The options parameters.
   */
  generateConfigurations(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    connectorName: string,
    options?: ConnectorGenerateConfigurationsOptionalParams,
  ): Promise<ConnectorGenerateConfigurationsResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, location, connectorName, options },
      generateConfigurationsOperationSpec,
    );
  }

  /**
   * ListDryrunNext
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param nextLink The nextLink from the previous successful call to the ListDryrun method.
   * @param options The options parameters.
   */
  private _listDryrunNext(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    nextLink: string,
    options?: ConnectorListDryrunNextOptionalParams,
  ): Promise<ConnectorListDryrunNextResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, location, nextLink, options },
      listDryrunNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    subscriptionId: string,
    resourceGroupName: string,
    location: string,
    nextLink: string,
    options?: ConnectorListNextOptionalParams,
  ): Promise<ConnectorListNextResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, location, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listDryrunOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DryrunList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getDryrunOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns/{dryrunName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DryrunResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.dryrunName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createDryrunOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns/{dryrunName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DryrunResource,
    },
    201: {
      bodyMapper: Mappers.DryrunResource,
    },
    202: {
      bodyMapper: Mappers.DryrunResource,
    },
    204: {
      bodyMapper: Mappers.DryrunResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.dryrunName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateDryrunOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns/{dryrunName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DryrunResource,
    },
    201: {
      bodyMapper: Mappers.DryrunResource,
    },
    202: {
      bodyMapper: Mappers.DryrunResource,
    },
    204: {
      bodyMapper: Mappers.DryrunResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.dryrunName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteDryrunOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns/{dryrunName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.dryrunName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkerResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.connectorName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.LinkerResource,
    },
    201: {
      bodyMapper: Mappers.LinkerResource,
    },
    202: {
      bodyMapper: Mappers.LinkerResource,
    },
    204: {
      bodyMapper: Mappers.LinkerResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.connectorName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.connectorName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.LinkerResource,
    },
    201: {
      bodyMapper: Mappers.LinkerResource,
    },
    202: {
      bodyMapper: Mappers.LinkerResource,
    },
    204: {
      bodyMapper: Mappers.LinkerResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.connectorName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const validateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidateOperationResult,
    },
    201: {
      bodyMapper: Mappers.ValidateOperationResult,
    },
    202: {
      bodyMapper: Mappers.ValidateOperationResult,
    },
    204: {
      bodyMapper: Mappers.ValidateOperationResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.connectorName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const generateConfigurationsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}/generateConfigurations",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.connectorName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listDryrunNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DryrunList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
