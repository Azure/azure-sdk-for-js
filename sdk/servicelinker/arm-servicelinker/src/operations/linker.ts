/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/linkerMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftServiceLinkerContext } from "../microsoftServiceLinkerContext";

/** Class representing a Linker. */
export class Linker {
  private readonly client: MicrosoftServiceLinkerContext;

  /**
   * Create a Linker.
   * @param {MicrosoftServiceLinkerContext} client Reference to the service client.
   */
  constructor(client: MicrosoftServiceLinkerContext) {
    this.client = client;
  }

  /**
   * Returns list of Linkers which connects to the resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkerListResponse>
   */
  list(resourceUri: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkerListResponse>;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param callback The callback
   */
  list(resourceUri: string, callback: msRest.ServiceCallback<Models.LinkerList>): void;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceUri: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkerList>): void;
  list(resourceUri: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkerList>, callback?: msRest.ServiceCallback<Models.LinkerList>): Promise<Models.LinkerListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.LinkerListResponse>;
  }

  /**
   * Returns Linker resource for a given name.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkerGetResponse>
   */
  get(resourceUri: string, linkerName: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkerGetResponse>;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param callback The callback
   */
  get(resourceUri: string, linkerName: string, callback: msRest.ServiceCallback<Models.LinkerResource>): void;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceUri: string, linkerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkerResource>): void;
  get(resourceUri: string, linkerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkerResource>, callback?: msRest.ServiceCallback<Models.LinkerResource>): Promise<Models.LinkerGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        linkerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LinkerGetResponse>;
  }

  /**
   * Create or update linker resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param parameters Linker details.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkerCreateOrUpdateResponse>
   */
  createOrUpdate(resourceUri: string, linkerName: string, parameters: Models.LinkerResource, options?: msRest.RequestOptionsBase): Promise<Models.LinkerCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceUri,linkerName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LinkerCreateOrUpdateResponse>;
  }

  /**
   * Delete a link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceUri: string, linkerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceUri,linkerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Operation to update an existing link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param parameters Linker details.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkerUpdateResponse>
   */
  update(resourceUri: string, linkerName: string, parameters: Models.LinkerPatch, options?: msRest.RequestOptionsBase): Promise<Models.LinkerUpdateResponse> {
    return this.beginUpdate(resourceUri,linkerName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LinkerUpdateResponse>;
  }

  /**
   * Validate a link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkerValidateResponse>
   */
  validate(resourceUri: string, linkerName: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkerValidateResponse> {
    return this.beginValidate(resourceUri,linkerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LinkerValidateResponse>;
  }

  /**
   * list source configurations for a linker.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkerListConfigurationsResponse>
   */
  listConfigurations(resourceUri: string, linkerName: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkerListConfigurationsResponse>;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param callback The callback
   */
  listConfigurations(resourceUri: string, linkerName: string, callback: msRest.ServiceCallback<Models.SourceConfigurationResult>): void;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConfigurations(resourceUri: string, linkerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceConfigurationResult>): void;
  listConfigurations(resourceUri: string, linkerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceConfigurationResult>, callback?: msRest.ServiceCallback<Models.SourceConfigurationResult>): Promise<Models.LinkerListConfigurationsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        linkerName,
        options
      },
      listConfigurationsOperationSpec,
      callback) as Promise<Models.LinkerListConfigurationsResponse>;
  }

  /**
   * Create or update linker resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param parameters Linker details.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceUri: string, linkerName: string, parameters: Models.LinkerResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceUri,
        linkerName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Delete a link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceUri: string, linkerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceUri,
        linkerName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Operation to update an existing link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param parameters Linker details.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceUri: string, linkerName: string, parameters: Models.LinkerPatch, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceUri,
        linkerName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Validate a link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param linkerName The name Linker resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginValidate(resourceUri: string, linkerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceUri,
        linkerName,
        options
      },
      beginValidateOperationSpec,
      options);
  }

  /**
   * Returns list of Linkers which connects to the resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkerListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkerListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LinkerList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkerList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkerList>, callback?: msRest.ServiceCallback<Models.LinkerList>): Promise<Models.LinkerListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.LinkerListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceUri}/providers/Microsoft.ServiceLinker/linkers",
  urlParameters: [
    Parameters.resourceUri
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkerList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.linkerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listConfigurationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}/listConfigurations",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.linkerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SourceConfigurationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.linkerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.LinkerResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LinkerResource
    },
    201: {
      bodyMapper: Mappers.LinkerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.linkerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.linkerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.LinkerPatch,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LinkerResource
    },
    201: {
      bodyMapper: Mappers.LinkerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginValidateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}/validateLinker",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.linkerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ValidateResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkerList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
