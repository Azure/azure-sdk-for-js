/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Linkers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceLinkerManagementClient } from "../serviceLinkerManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  DryrunResource,
  LinkersListDryrunNextOptionalParams,
  LinkersListDryrunOptionalParams,
  LinkersListDryrunResponse,
  DaprConfigurationResource,
  LinkersListDaprConfigurationsNextOptionalParams,
  LinkersListDaprConfigurationsOptionalParams,
  LinkersListDaprConfigurationsResponse,
  LinkersGetDryrunOptionalParams,
  LinkersGetDryrunResponse,
  LinkersCreateDryrunOptionalParams,
  LinkersCreateDryrunResponse,
  DryrunPatch,
  LinkersUpdateDryrunOptionalParams,
  LinkersUpdateDryrunResponse,
  LinkersDeleteDryrunOptionalParams,
  LinkersGenerateConfigurationsOptionalParams,
  LinkersGenerateConfigurationsResponse,
  LinkersListDryrunNextResponse,
  LinkersListDaprConfigurationsNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Linkers operations. */
export class LinkersImpl implements Linkers {
  private readonly client: ServiceLinkerManagementClient;

  /**
   * Initialize a new instance of the class Linkers class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceLinkerManagementClient) {
    this.client = client;
  }

  /**
   * list dryrun jobs
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param options The options parameters.
   */
  public listDryrun(
    resourceUri: string,
    options?: LinkersListDryrunOptionalParams,
  ): PagedAsyncIterableIterator<DryrunResource> {
    const iter = this.listDryrunPagingAll(resourceUri, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDryrunPagingPage(resourceUri, options, settings);
      },
    };
  }

  private async *listDryrunPagingPage(
    resourceUri: string,
    options?: LinkersListDryrunOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DryrunResource[]> {
    let result: LinkersListDryrunResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDryrun(resourceUri, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDryrunNext(
        resourceUri,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDryrunPagingAll(
    resourceUri: string,
    options?: LinkersListDryrunOptionalParams,
  ): AsyncIterableIterator<DryrunResource> {
    for await (const page of this.listDryrunPagingPage(resourceUri, options)) {
      yield* page;
    }
  }

  /**
   * List the dapr configuration supported by Service Connector.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param options The options parameters.
   */
  public listDaprConfigurations(
    resourceUri: string,
    options?: LinkersListDaprConfigurationsOptionalParams,
  ): PagedAsyncIterableIterator<DaprConfigurationResource> {
    const iter = this.listDaprConfigurationsPagingAll(resourceUri, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDaprConfigurationsPagingPage(
          resourceUri,
          options,
          settings,
        );
      },
    };
  }

  private async *listDaprConfigurationsPagingPage(
    resourceUri: string,
    options?: LinkersListDaprConfigurationsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DaprConfigurationResource[]> {
    let result: LinkersListDaprConfigurationsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDaprConfigurations(resourceUri, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDaprConfigurationsNext(
        resourceUri,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDaprConfigurationsPagingAll(
    resourceUri: string,
    options?: LinkersListDaprConfigurationsOptionalParams,
  ): AsyncIterableIterator<DaprConfigurationResource> {
    for await (const page of this.listDaprConfigurationsPagingPage(
      resourceUri,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * list dryrun jobs
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param options The options parameters.
   */
  private _listDryrun(
    resourceUri: string,
    options?: LinkersListDryrunOptionalParams,
  ): Promise<LinkersListDryrunResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listDryrunOperationSpec,
    );
  }

  /**
   * get a dryrun job
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param options The options parameters.
   */
  getDryrun(
    resourceUri: string,
    dryrunName: string,
    options?: LinkersGetDryrunOptionalParams,
  ): Promise<LinkersGetDryrunResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, dryrunName, options },
      getDryrunOperationSpec,
    );
  }

  /**
   * create a dryrun job to do necessary check before actual creation
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  async beginCreateDryrun(
    resourceUri: string,
    dryrunName: string,
    parameters: DryrunResource,
    options?: LinkersCreateDryrunOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LinkersCreateDryrunResponse>,
      LinkersCreateDryrunResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LinkersCreateDryrunResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, dryrunName, parameters, options },
      spec: createDryrunOperationSpec,
    });
    const poller = await createHttpPoller<
      LinkersCreateDryrunResponse,
      OperationState<LinkersCreateDryrunResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * create a dryrun job to do necessary check before actual creation
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  async beginCreateDryrunAndWait(
    resourceUri: string,
    dryrunName: string,
    parameters: DryrunResource,
    options?: LinkersCreateDryrunOptionalParams,
  ): Promise<LinkersCreateDryrunResponse> {
    const poller = await this.beginCreateDryrun(
      resourceUri,
      dryrunName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * add a dryrun job to do necessary check before actual creation
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  async beginUpdateDryrun(
    resourceUri: string,
    dryrunName: string,
    parameters: DryrunPatch,
    options?: LinkersUpdateDryrunOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LinkersUpdateDryrunResponse>,
      LinkersUpdateDryrunResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LinkersUpdateDryrunResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, dryrunName, parameters, options },
      spec: updateDryrunOperationSpec,
    });
    const poller = await createHttpPoller<
      LinkersUpdateDryrunResponse,
      OperationState<LinkersUpdateDryrunResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * add a dryrun job to do necessary check before actual creation
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  async beginUpdateDryrunAndWait(
    resourceUri: string,
    dryrunName: string,
    parameters: DryrunPatch,
    options?: LinkersUpdateDryrunOptionalParams,
  ): Promise<LinkersUpdateDryrunResponse> {
    const poller = await this.beginUpdateDryrun(
      resourceUri,
      dryrunName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * delete a dryrun job
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param options The options parameters.
   */
  deleteDryrun(
    resourceUri: string,
    dryrunName: string,
    options?: LinkersDeleteDryrunOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceUri, dryrunName, options },
      deleteDryrunOperationSpec,
    );
  }

  /**
   * Generate configurations for a Linker.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param options The options parameters.
   */
  generateConfigurations(
    resourceUri: string,
    linkerName: string,
    options?: LinkersGenerateConfigurationsOptionalParams,
  ): Promise<LinkersGenerateConfigurationsResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, linkerName, options },
      generateConfigurationsOperationSpec,
    );
  }

  /**
   * List the dapr configuration supported by Service Connector.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param options The options parameters.
   */
  private _listDaprConfigurations(
    resourceUri: string,
    options?: LinkersListDaprConfigurationsOptionalParams,
  ): Promise<LinkersListDaprConfigurationsResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listDaprConfigurationsOperationSpec,
    );
  }

  /**
   * ListDryrunNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param nextLink The nextLink from the previous successful call to the ListDryrun method.
   * @param options The options parameters.
   */
  private _listDryrunNext(
    resourceUri: string,
    nextLink: string,
    options?: LinkersListDryrunNextOptionalParams,
  ): Promise<LinkersListDryrunNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, nextLink, options },
      listDryrunNextOperationSpec,
    );
  }

  /**
   * ListDaprConfigurationsNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param nextLink The nextLink from the previous successful call to the ListDaprConfigurations method.
   * @param options The options parameters.
   */
  private _listDaprConfigurationsNext(
    resourceUri: string,
    nextLink: string,
    options?: LinkersListDaprConfigurationsNextOptionalParams,
  ): Promise<LinkersListDaprConfigurationsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, nextLink, options },
      listDaprConfigurationsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listDryrunOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DryrunList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer,
};
const getDryrunOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DryrunResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.dryrunName,
    Parameters.resourceUri,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createDryrunOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DryrunResource,
    },
    201: {
      bodyMapper: Mappers.DryrunResource,
    },
    202: {
      bodyMapper: Mappers.DryrunResource,
    },
    204: {
      bodyMapper: Mappers.DryrunResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.dryrunName,
    Parameters.resourceUri,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateDryrunOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DryrunResource,
    },
    201: {
      bodyMapper: Mappers.DryrunResource,
    },
    202: {
      bodyMapper: Mappers.DryrunResource,
    },
    204: {
      bodyMapper: Mappers.DryrunResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.dryrunName,
    Parameters.resourceUri,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteDryrunOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.dryrunName,
    Parameters.resourceUri,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const generateConfigurationsOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}/generateConfigurations",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.linkerName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listDaprConfigurationsOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.ServiceLinker/daprConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DaprConfigurationList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer,
};
const listDryrunNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DryrunList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceUri,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listDaprConfigurationsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DaprConfigurationList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceUri,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
