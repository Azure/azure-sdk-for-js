/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  LinkerResource,
  LinkerListOptionalParams,
  LinkerGetOptionalParams,
  LinkerGetResponse,
  LinkerCreateOrUpdateOptionalParams,
  LinkerCreateOrUpdateResponse,
  LinkerDeleteOptionalParams,
  LinkerPatch,
  LinkerUpdateOptionalParams,
  LinkerUpdateResponse,
  LinkerValidateOptionalParams,
  LinkerValidateResponse,
  LinkerListConfigurationsOptionalParams,
  LinkerListConfigurationsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Linker. */
export interface Linker {
  /**
   * Returns list of Linkers which connects to the resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param options The options parameters.
   */
  list(
    resourceUri: string,
    options?: LinkerListOptionalParams
  ): PagedAsyncIterableIterator<LinkerResource>;
  /**
   * Returns Linker resource for a given name.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    linkerName: string,
    options?: LinkerGetOptionalParams
  ): Promise<LinkerGetResponse>;
  /**
   * Create or update linker resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param parameters Linker details.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceUri: string,
    linkerName: string,
    parameters: LinkerResource,
    options?: LinkerCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LinkerCreateOrUpdateResponse>,
      LinkerCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update linker resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param parameters Linker details.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceUri: string,
    linkerName: string,
    parameters: LinkerResource,
    options?: LinkerCreateOrUpdateOptionalParams
  ): Promise<LinkerCreateOrUpdateResponse>;
  /**
   * Delete a link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param options The options parameters.
   */
  beginDelete(
    resourceUri: string,
    linkerName: string,
    options?: LinkerDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete a link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceUri: string,
    linkerName: string,
    options?: LinkerDeleteOptionalParams
  ): Promise<void>;
  /**
   * Operation to update an existing link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param parameters Linker details.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceUri: string,
    linkerName: string,
    parameters: LinkerPatch,
    options?: LinkerUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<LinkerUpdateResponse>, LinkerUpdateResponse>
  >;
  /**
   * Operation to update an existing link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param parameters Linker details.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceUri: string,
    linkerName: string,
    parameters: LinkerPatch,
    options?: LinkerUpdateOptionalParams
  ): Promise<LinkerUpdateResponse>;
  /**
   * Validate a link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param options The options parameters.
   */
  beginValidate(
    resourceUri: string,
    linkerName: string,
    options?: LinkerValidateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LinkerValidateResponse>,
      LinkerValidateResponse
    >
  >;
  /**
   * Validate a link.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param options The options parameters.
   */
  beginValidateAndWait(
    resourceUri: string,
    linkerName: string,
    options?: LinkerValidateOptionalParams
  ): Promise<LinkerValidateResponse>;
  /**
   * list source configurations for a linker.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param options The options parameters.
   */
  listConfigurations(
    resourceUri: string,
    linkerName: string,
    options?: LinkerListConfigurationsOptionalParams
  ): Promise<LinkerListConfigurationsResponse>;
}
