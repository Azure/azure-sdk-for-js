/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type TargetServiceBaseUnion =
  | TargetServiceBase
  | AzureResource
  | ConfluentBootstrapServer
  | ConfluentSchemaRegistry;
export type AuthInfoBaseUnion =
  | AuthInfoBase
  | SecretAuthInfo
  | UserAssignedIdentityAuthInfo
  | SystemAssignedIdentityAuthInfo
  | ServicePrincipalSecretAuthInfo
  | ServicePrincipalCertificateAuthInfo;
export type AzureResourcePropertiesBaseUnion =
  | AzureResourcePropertiesBase
  | AzureKeyVaultProperties;
export type SecretInfoBaseUnion =
  | SecretInfoBase
  | ValueSecretInfo
  | KeyVaultSecretReferenceSecretInfo
  | KeyVaultSecretUriSecretInfo;

/** The list of Linker. */
export interface LinkerList {
  /** The link used to get the next page of Linker list. */
  nextLink?: string;
  /** The list of Linkers. */
  value?: LinkerResource[];
}

/** The target service properties */
export interface TargetServiceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "AzureResource"
    | "ConfluentBootstrapServer"
    | "ConfluentSchemaRegistry";
}

/** The authentication info */
export interface AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType:
    | "secret"
    | "userAssignedIdentity"
    | "systemAssignedIdentity"
    | "servicePrincipalSecret"
    | "servicePrincipalCertificate";
}

/** The VNet solution for linker */
export interface VNetSolution {
  /** Type of VNet solution. */
  type?: VNetSolutionType;
}

/** An option to store secret value in secure place */
export interface SecretStore {
  /** The key vault id to store secret */
  keyVaultId?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** A linker to be updated. */
export interface LinkerPatch {
  /** The target service properties */
  targetService?: TargetServiceBaseUnion;
  /** The authentication type. */
  authInfo?: AuthInfoBaseUnion;
  /** The application client type */
  clientType?: ClientType;
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The VNet solution. */
  vNetSolution?: VNetSolution;
  /** An option to store secret value in secure place */
  secretStore?: SecretStore;
  /** connection scope in source service. */
  scope?: string;
}

/** The validation operation result for a linker. */
export interface ValidateOperationResult {
  /** Validated linker id. */
  resourceId?: string;
  /** Validation operation status. */
  status?: string;
  /** The linker name. */
  linkerName?: string;
  /** A boolean value indicating whether the connection is available or not */
  isConnectionAvailable?: boolean;
  /** The start time of the validation report. */
  reportStartTimeUtc?: Date;
  /** The end time of the validation report. */
  reportEndTimeUtc?: Date;
  /** The resource id of the linker source application. */
  sourceId?: string;
  /** The resource Id of target service. */
  targetId?: string;
  /** The authentication type. */
  authType?: AuthType;
  /** The detail of validation result */
  validationDetail?: ValidationResultItem[];
}

/** The validation item for a linker. */
export interface ValidationResultItem {
  /** The validation item name. */
  name?: string;
  /** The display name of validation item */
  description?: string;
  /** The result of validation */
  result?: ValidationResultStatus;
  /** The error message of validation result */
  errorMessage?: string;
  /** The error code of validation result */
  errorCode?: string;
}

/** Configurations for source resource, include appSettings, connectionString and serviceBindings */
export interface SourceConfigurationResult {
  /** The configuration properties for source resource. */
  configurations?: SourceConfiguration[];
}

/** A configuration item for source resource */
export interface SourceConfiguration {
  /** The name of setting. */
  name?: string;
  /** The value of setting */
  value?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The azure resource properties */
export interface AzureResourcePropertiesBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "KeyVault";
}

/** The secret info */
export interface SecretInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  secretType: "rawValue" | "keyVaultSecretReference" | "keyVaultSecretUri";
}

/** The azure resource info when target service type is AzureResource */
export interface AzureResource extends TargetServiceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "AzureResource";
  /** The Id of azure resource. */
  id?: string;
  /** The azure resource connection related properties. */
  resourceProperties?: AzureResourcePropertiesBaseUnion;
}

/** The service properties when target service type is ConfluentBootstrapServer */
export interface ConfluentBootstrapServer extends TargetServiceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "ConfluentBootstrapServer";
  /** The endpoint of service. */
  endpoint?: string;
}

/** The service properties when target service type is ConfluentSchemaRegistry */
export interface ConfluentSchemaRegistry extends TargetServiceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "ConfluentSchemaRegistry";
  /** The endpoint of service. */
  endpoint?: string;
}

/** The authentication info when authType is secret */
export interface SecretAuthInfo extends AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "secret";
  /** Username or account name for secret auth. */
  name?: string;
  /** Password or key vault secret for secret auth. */
  secretInfo?: SecretInfoBaseUnion;
}

/** The authentication info when authType is userAssignedIdentity */
export interface UserAssignedIdentityAuthInfo extends AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "userAssignedIdentity";
  /** Client Id for userAssignedIdentity. */
  clientId?: string;
  /** Subscription id for userAssignedIdentity. */
  subscriptionId?: string;
}

/** The authentication info when authType is systemAssignedIdentity */
export interface SystemAssignedIdentityAuthInfo extends AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "systemAssignedIdentity";
}

/** The authentication info when authType is servicePrincipal secret */
export interface ServicePrincipalSecretAuthInfo extends AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "servicePrincipalSecret";
  /** ServicePrincipal application clientId for servicePrincipal auth. */
  clientId: string;
  /** Principal Id for servicePrincipal auth. */
  principalId: string;
  /** Secret for servicePrincipal auth. */
  secret: string;
}

/** The authentication info when authType is servicePrincipal certificate */
export interface ServicePrincipalCertificateAuthInfo extends AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "servicePrincipalCertificate";
  /** Application clientId for servicePrincipal auth. */
  clientId: string;
  /** Principal Id for servicePrincipal auth. */
  principalId: string;
  /** ServicePrincipal certificate for servicePrincipal auth. */
  certificate: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource properties when type is Azure Key Vault */
export interface AzureKeyVaultProperties extends AzureResourcePropertiesBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "KeyVault";
  /** True if connect via Kubernetes CSI Driver. */
  connectAsKubernetesCsiDriver?: boolean;
}

/** The secret info when type is rawValue. It's for scenarios that user input the secret. */
export interface ValueSecretInfo extends SecretInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  secretType: "rawValue";
  /** The actual value of the secret. */
  value?: string;
}

/** The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId. */
export interface KeyVaultSecretReferenceSecretInfo extends SecretInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  secretType: "keyVaultSecretReference";
  /** Name of the Key Vault secret. */
  name?: string;
  /** Version of the Key Vault secret. */
  version?: string;
}

/** The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App. */
export interface KeyVaultSecretUriSecretInfo extends SecretInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  secretType: "keyVaultSecretUri";
  /** URI to the keyvault secret */
  value?: string;
}

/** Linker of source and target resource */
export interface LinkerResource extends ProxyResource {
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The target service properties */
  targetService?: TargetServiceBaseUnion;
  /** The authentication type. */
  authInfo?: AuthInfoBaseUnion;
  /** The application client type */
  clientType?: ClientType;
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The VNet solution. */
  vNetSolution?: VNetSolution;
  /** An option to store secret value in secure place */
  secretStore?: SecretStore;
  /** connection scope in source service. */
  scope?: string;
}

/** Known values of {@link TargetServiceType} that the service accepts. */
export enum KnownTargetServiceType {
  /** AzureResource */
  AzureResource = "AzureResource",
  /** ConfluentBootstrapServer */
  ConfluentBootstrapServer = "ConfluentBootstrapServer",
  /** ConfluentSchemaRegistry */
  ConfluentSchemaRegistry = "ConfluentSchemaRegistry"
}

/**
 * Defines values for TargetServiceType. \
 * {@link KnownTargetServiceType} can be used interchangeably with TargetServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureResource** \
 * **ConfluentBootstrapServer** \
 * **ConfluentSchemaRegistry**
 */
export type TargetServiceType = string;

/** Known values of {@link AuthType} that the service accepts. */
export enum KnownAuthType {
  /** SystemAssignedIdentity */
  SystemAssignedIdentity = "systemAssignedIdentity",
  /** UserAssignedIdentity */
  UserAssignedIdentity = "userAssignedIdentity",
  /** ServicePrincipalSecret */
  ServicePrincipalSecret = "servicePrincipalSecret",
  /** ServicePrincipalCertificate */
  ServicePrincipalCertificate = "servicePrincipalCertificate",
  /** Secret */
  Secret = "secret"
}

/**
 * Defines values for AuthType. \
 * {@link KnownAuthType} can be used interchangeably with AuthType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **systemAssignedIdentity** \
 * **userAssignedIdentity** \
 * **servicePrincipalSecret** \
 * **servicePrincipalCertificate** \
 * **secret**
 */
export type AuthType = string;

/** Known values of {@link ClientType} that the service accepts. */
export enum KnownClientType {
  /** None */
  None = "none",
  /** Dotnet */
  Dotnet = "dotnet",
  /** Java */
  Java = "java",
  /** Python */
  Python = "python",
  /** Go */
  Go = "go",
  /** Php */
  Php = "php",
  /** Ruby */
  Ruby = "ruby",
  /** Django */
  Django = "django",
  /** Nodejs */
  Nodejs = "nodejs",
  /** SpringBoot */
  SpringBoot = "springBoot"
}

/**
 * Defines values for ClientType. \
 * {@link KnownClientType} can be used interchangeably with ClientType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **dotnet** \
 * **java** \
 * **python** \
 * **go** \
 * **php** \
 * **ruby** \
 * **django** \
 * **nodejs** \
 * **springBoot**
 */
export type ClientType = string;

/** Known values of {@link VNetSolutionType} that the service accepts. */
export enum KnownVNetSolutionType {
  /** ServiceEndpoint */
  ServiceEndpoint = "serviceEndpoint",
  /** PrivateLink */
  PrivateLink = "privateLink"
}

/**
 * Defines values for VNetSolutionType. \
 * {@link KnownVNetSolutionType} can be used interchangeably with VNetSolutionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **serviceEndpoint** \
 * **privateLink**
 */
export type VNetSolutionType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ValidationResultStatus} that the service accepts. */
export enum KnownValidationResultStatus {
  /** Success */
  Success = "success",
  /** Failure */
  Failure = "failure",
  /** Warning */
  Warning = "warning"
}

/**
 * Defines values for ValidationResultStatus. \
 * {@link KnownValidationResultStatus} can be used interchangeably with ValidationResultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **success** \
 * **failure** \
 * **warning**
 */
export type ValidationResultStatus = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link AzureResourceType} that the service accepts. */
export enum KnownAzureResourceType {
  /** KeyVault */
  KeyVault = "KeyVault"
}

/**
 * Defines values for AzureResourceType. \
 * {@link KnownAzureResourceType} can be used interchangeably with AzureResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **KeyVault**
 */
export type AzureResourceType = string;

/** Known values of {@link SecretType} that the service accepts. */
export enum KnownSecretType {
  /** RawValue */
  RawValue = "rawValue",
  /** KeyVaultSecretUri */
  KeyVaultSecretUri = "keyVaultSecretUri",
  /** KeyVaultSecretReference */
  KeyVaultSecretReference = "keyVaultSecretReference"
}

/**
 * Defines values for SecretType. \
 * {@link KnownSecretType} can be used interchangeably with SecretType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **rawValue** \
 * **keyVaultSecretUri** \
 * **keyVaultSecretReference**
 */
export type SecretType = string;

/** Optional parameters. */
export interface LinkerListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LinkerListResponse = LinkerList;

/** Optional parameters. */
export interface LinkerGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LinkerGetResponse = LinkerResource;

/** Optional parameters. */
export interface LinkerCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LinkerCreateOrUpdateResponse = LinkerResource;

/** Optional parameters. */
export interface LinkerDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LinkerUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type LinkerUpdateResponse = LinkerResource;

/** Optional parameters. */
export interface LinkerValidateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export type LinkerValidateResponse = ValidateOperationResult;

/** Optional parameters. */
export interface LinkerListConfigurationsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listConfigurations operation. */
export type LinkerListConfigurationsResponse = SourceConfigurationResult;

/** Optional parameters. */
export interface LinkerListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LinkerListNextResponse = LinkerList;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface ServiceLinkerManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
