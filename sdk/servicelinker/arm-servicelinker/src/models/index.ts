/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type DryrunParametersUnion =
  | DryrunParameters
  | CreateOrUpdateDryrunParameters;
export type DryrunPrerequisiteResultUnion =
  | DryrunPrerequisiteResult
  | BasicErrorDryrunPrerequisiteResult
  | PermissionsMissingDryrunPrerequisiteResult;
export type TargetServiceBaseUnion =
  | TargetServiceBase
  | AzureResource
  | ConfluentBootstrapServer
  | FabricPlatform
  | SelfHostedServer
  | ConfluentSchemaRegistry;
export type AuthInfoBaseUnion =
  | AuthInfoBase
  | AccessKeyInfoBase
  | SecretAuthInfo
  | UserAssignedIdentityAuthInfo
  | SystemAssignedIdentityAuthInfo
  | ServicePrincipalSecretAuthInfo
  | ServicePrincipalCertificateAuthInfo
  | UserAccountAuthInfo
  | EasyAuthMicrosoftEntraIDAuthInfo;
export type AzureResourcePropertiesBaseUnion =
  | AzureResourcePropertiesBase
  | AzureKeyVaultProperties
  | AzureAppConfigProperties;
export type SecretInfoBaseUnion =
  | SecretInfoBase
  | ValueSecretInfo
  | KeyVaultSecretReferenceSecretInfo
  | KeyVaultSecretUriSecretInfo;

/** The list of dryrun. */
export interface DryrunList {
  /** The link used to get the next page of dryrun list. */
  nextLink?: string;
  /** The list of dryrun. */
  value?: DryrunResource[];
}

/** The parameters of the dryrun */
export interface DryrunParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  actionName: "createOrUpdate";
}

/** A result of dryrun */
export interface DryrunPrerequisiteResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "basicError" | "permissionsMissing";
}

/** The preview of the operations for creation */
export interface DryrunOperationPreview {
  /** The operation name */
  name?: string;
  /** The operation type */
  operationType?: DryrunPreviewOperationType;
  /** The description of the operation */
  description?: string;
  /** The action defined by RBAC, refer https://docs.microsoft.com/azure/role-based-access-control/role-definitions#actions-format */
  action?: string;
  /** The scope of the operation, refer https://docs.microsoft.com/azure/role-based-access-control/scope-overview */
  scope?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** a dryrun job to be updated. */
export interface DryrunPatch {
  /** The parameters of the dryrun */
  parameters?: DryrunParametersUnion;
  /**
   * the result of the dryrun
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly prerequisiteResults?: DryrunPrerequisiteResultUnion[];
  /**
   * the preview of the operations for creation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationPreviews?: DryrunOperationPreview[];
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** The list of Linker. */
export interface ResourceList {
  /** The Linker used to get the next page of Linker list. */
  nextLink?: string;
  /** The list of Linkers. */
  value?: LinkerResource[];
}

/** The properties of the Linker. */
export interface LinkerProperties {
  /** The target service properties */
  targetService?: TargetServiceBaseUnion;
  /** The authentication type. */
  authInfo?: AuthInfoBaseUnion;
  /** The application client type */
  clientType?: ClientType;
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The VNet solution. */
  vNetSolution?: VNetSolution;
  /** An option to store secret value in secure place */
  secretStore?: SecretStore;
  /** connection scope in source service. */
  scope?: string;
  /** The network solution. */
  publicNetworkSolution?: PublicNetworkSolution;
  /** The connection information consumed by applications, including secrets, connection strings. */
  configurationInfo?: ConfigurationInfo;
}

/** The target service properties */
export interface TargetServiceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "AzureResource"
    | "ConfluentBootstrapServer"
    | "FabricPlatform"
    | "SelfHostedServer"
    | "ConfluentSchemaRegistry";
}

/** The authentication info */
export interface AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType:
    | "accessKey"
    | "secret"
    | "userAssignedIdentity"
    | "systemAssignedIdentity"
    | "servicePrincipalSecret"
    | "servicePrincipalCertificate"
    | "userAccount"
    | "easyAuthMicrosoftEntraID";
  /** Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth. */
  authMode?: AuthMode;
}

/** The VNet solution for linker */
export interface VNetSolution {
  /** Type of VNet solution. */
  type?: VNetSolutionType;
  /** Indicates whether to clean up previous operation when Linker is updating or deleting */
  deleteOrUpdateBehavior?: DeleteOrUpdateBehavior;
}

/** An option to store secret value in secure place */
export interface SecretStore {
  /** The key vault id to store secret */
  keyVaultId?: string;
  /** The key vault secret name to store secret, only valid when storing one secret */
  keyVaultSecretName?: string;
}

/** Indicates public network solution, include firewall rules */
export interface PublicNetworkSolution {
  /** Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting */
  deleteOrUpdateBehavior?: DeleteOrUpdateBehavior;
  /** Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration. */
  action?: ActionType;
  /** Describe firewall rules of target service to make sure source application could connect to the target. */
  firewallRules?: FirewallRules;
}

/** Target service's firewall rules. to allow connections from source service. */
export interface FirewallRules {
  /** This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. */
  ipRanges?: string[];
  /** Allow Azure services to access the target service if true. */
  azureServices?: AllowType;
  /** Allow caller client IP to access the target service if true. the property is used when connecting local application to target service. */
  callerClientIP?: AllowType;
}

/** The configuration information, used to generate configurations or save to applications */
export interface ConfigurationInfo {
  /** Indicates whether to clean up previous operation when Linker is updating or deleting */
  deleteOrUpdateBehavior?: DeleteOrUpdateBehavior;
  /** Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source. */
  action?: ActionType;
  /** Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations */
  customizedKeys?: { [propertyName: string]: string };
  /** Indicates some additional properties for dapr client type */
  daprProperties?: DaprProperties;
  /** A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations */
  additionalConfigurations?: { [propertyName: string]: string };
  /** A dictionary of additional properties to be added in the end of connection string. */
  additionalConnectionStringProperties?: { [propertyName: string]: string };
  /** An option to store configuration into different place */
  configurationStore?: ConfigurationStore;
}

/** Indicates some additional properties for dapr client type */
export interface DaprProperties {
  /** The dapr component version */
  version?: string;
  /** The dapr component type */
  componentType?: string;
  /** The name of a secret store dapr to retrieve secret */
  secretStoreComponent?: string;
  /** Additional dapr metadata */
  metadata?: DaprMetadata[];
  /** The dapr component scopes */
  scopes?: string[];
  /**
   * The runtime version supported by the properties
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly runtimeVersion?: string;
  /**
   * The direction supported by the dapr binding component
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bindingComponentDirection?: DaprBindingComponentDirection;
}

/** The dapr component metadata. */
export interface DaprMetadata {
  /** Metadata property name. */
  name?: string;
  /** Metadata property value. */
  value?: string;
  /** The secret name where dapr could get value */
  secretRef?: string;
  /** The description of the metadata, returned from configuration api */
  description?: string;
  /** The value indicating whether the metadata is required or not */
  required?: DaprMetadataRequired;
}

/** An option to store configuration into different place */
export interface ConfigurationStore {
  /** The app configuration id to store configuration */
  appConfigurationId?: string;
}

/** A Linker to be updated. */
export interface LinkerPatch {
  /** The target service properties */
  targetService?: TargetServiceBaseUnion;
  /** The authentication type. */
  authInfo?: AuthInfoBaseUnion;
  /** The application client type */
  clientType?: ClientType;
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The VNet solution. */
  vNetSolution?: VNetSolution;
  /** An option to store secret value in secure place */
  secretStore?: SecretStore;
  /** connection scope in source service. */
  scope?: string;
  /** The network solution. */
  publicNetworkSolution?: PublicNetworkSolution;
  /** The connection information consumed by applications, including secrets, connection strings. */
  configurationInfo?: ConfigurationInfo;
}

/** The validation operation result for a Linker. */
export interface ValidateOperationResult {
  /** Validated Linker id. */
  resourceId?: string;
  /** Validation operation status. */
  status?: string;
  /** The linker name. */
  linkerName?: string;
  /** A boolean value indicating whether the connection is available or not */
  isConnectionAvailable?: boolean;
  /** The start time of the validation report. */
  reportStartTimeUtc?: Date;
  /** The end time of the validation report. */
  reportEndTimeUtc?: Date;
  /** The resource id of the Linker source application. */
  sourceId?: string;
  /** The resource Id of target service. */
  targetId?: string;
  /** The authentication type. */
  authType?: AuthType;
  /** The detail of validation result */
  validationDetail?: ValidationResultItem[];
}

/** The validation item for a Linker. */
export interface ValidationResultItem {
  /** The validation item name. */
  name?: string;
  /** The display name of validation item */
  description?: string;
  /** The result of validation */
  result?: ValidationResultStatus;
  /** The error message of validation result */
  errorMessage?: string;
  /** The error code of validation result */
  errorCode?: string;
}

/** Configurations for source resource, include appSettings, connectionString and serviceBindings */
export interface ConfigurationResult {
  /** The configuration properties for source resource. */
  configurations?: SourceConfiguration[];
}

/** A configuration item for source resource */
export interface SourceConfiguration {
  /** The name of setting. */
  name?: string;
  /** The value of setting */
  value?: string;
  /**
   * The type of setting
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configType?: LinkerConfigurationType;
  /** The identity for key vault reference, system or user-assigned managed identity ID */
  keyVaultReferenceIdentity?: string;
  /** Descriptive information for the configuration */
  description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Configuration Name list which will be set based on different target resource, client type, auth type. */
export interface ConfigurationNameResult {
  /** Expected configuration names for each target service. */
  value?: ConfigurationNameItem[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

export interface ConfigurationNameItem {
  /** The target service provider name and resource name. */
  targetService?: string;
  /** The client type for configuration names. */
  clientType?: ClientType;
  /** The auth type. */
  authType?: AuthType;
  /** Indicates where the secrets in configuration from. Used when secrets are from Keyvault. */
  secretType?: SecretSourceType;
  /** Deprecated, please use #/definitions/DaprConfigurationList instead */
  daprProperties?: DaprProperties;
  /** The configuration names to be set in compute service environment. */
  names?: ConfigurationName[];
}

/** The configuration names. */
export interface ConfigurationName {
  value?: string;
  /** Description for the configuration name. */
  description?: string;
  /** Represent the configuration is required or not */
  required?: boolean;
}

/** Dapr configuration list supported by Service Connector */
export interface DaprConfigurationList {
  /** The list of dapr configurations */
  value?: DaprConfigurationResource[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Represent one resource of the dapr configuration list */
export interface DaprConfigurationResource {
  /** Supported target resource type, extract from resource id, uppercase */
  targetType?: string;
  /** The authentication type. */
  authType?: AuthType;
  /** Indicates some additional properties for dapr client type */
  daprProperties?: DaprProperties;
}

/** The azure resource properties */
export interface AzureResourcePropertiesBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "KeyVault" | "AppConfig";
}

/** The secret info */
export interface SecretInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  secretType: "rawValue" | "keyVaultSecretReference" | "keyVaultSecretUri";
}

/** The extra auth info required by Database AAD authentication. */
export interface DatabaseAadAuthInfo {
  /** Username created in the database which is mapped to a user in AAD. */
  userName?: string;
}

/** The dryrun parameters for creation or update a linker */
export interface CreateOrUpdateDryrunParameters
  extends DryrunParameters,
    LinkerProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  actionName: "createOrUpdate";
}

/** The represent of basic error */
export interface BasicErrorDryrunPrerequisiteResult
  extends DryrunPrerequisiteResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "basicError";
  /** The error code. */
  code?: string;
  /** The error message. */
  message?: string;
}

/** The represent of missing permissions */
export interface PermissionsMissingDryrunPrerequisiteResult
  extends DryrunPrerequisiteResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "permissionsMissing";
  /** The permission scope */
  scope?: string;
  /** The permission list */
  permissions?: string[];
  /** The recommended role to resolve permissions missing */
  recommendedRole?: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The azure resource info when target service type is AzureResource */
export interface AzureResource extends TargetServiceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "AzureResource";
  /** The Id of azure resource. */
  id?: string;
  /** The azure resource connection related properties. */
  resourceProperties?: AzureResourcePropertiesBaseUnion;
}

/** The service properties when target service type is ConfluentBootstrapServer */
export interface ConfluentBootstrapServer extends TargetServiceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "ConfluentBootstrapServer";
  /** The endpoint of service. */
  endpoint?: string;
}

/** The service properties when target service type is FabricPlatform */
export interface FabricPlatform extends TargetServiceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "FabricPlatform";
  /** The endpoint of service. */
  endpoint?: string;
}

/** The service properties when target service type is SelfHostedServer */
export interface SelfHostedServer extends TargetServiceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "SelfHostedServer";
  /** The endpoint of service. */
  endpoint?: string;
}

/** The service properties when target service type is ConfluentSchemaRegistry */
export interface ConfluentSchemaRegistry extends TargetServiceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "ConfluentSchemaRegistry";
  /** The endpoint of service. */
  endpoint?: string;
}

/** The access key directly from target resource properties, which target service is Azure Resource, such as Microsoft.Storage */
export interface AccessKeyInfoBase extends AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "accessKey";
  /** Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus. */
  permissions?: AccessKeyPermissions[];
}

/** The authentication info when authType is secret */
export interface SecretAuthInfo extends AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "secret";
  /** Username or account name for secret auth. */
  name?: string;
  /** Password or key vault secret for secret auth. */
  secretInfo?: SecretInfoBaseUnion;
}

/** The authentication info when authType is userAssignedIdentity */
export interface UserAssignedIdentityAuthInfo
  extends AuthInfoBase,
    DatabaseAadAuthInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "userAssignedIdentity";
  /** Client Id for userAssignedIdentity. */
  clientId?: string;
  /** Subscription id for userAssignedIdentity. */
  subscriptionId?: string;
  /** Indicates whether to clean up previous operation when Linker is updating or deleting */
  deleteOrUpdateBehavior?: DeleteOrUpdateBehavior;
  /** Optional, this value specifies the Azure role to be assigned */
  roles?: string[];
}

/** The authentication info when authType is systemAssignedIdentity */
export interface SystemAssignedIdentityAuthInfo
  extends AuthInfoBase,
    DatabaseAadAuthInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "systemAssignedIdentity";
  /** Indicates whether to clean up previous operation when Linker is updating or deleting */
  deleteOrUpdateBehavior?: DeleteOrUpdateBehavior;
  /** Optional, this value specifies the Azure role to be assigned */
  roles?: string[];
}

/** The authentication info when authType is servicePrincipal secret */
export interface ServicePrincipalSecretAuthInfo
  extends AuthInfoBase,
    DatabaseAadAuthInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "servicePrincipalSecret";
  /** ServicePrincipal application clientId for servicePrincipal auth. */
  clientId: string;
  /** Principal Id for servicePrincipal auth. */
  principalId: string;
  /** Secret for servicePrincipal auth. */
  secret: string;
  /** Indicates whether to clean up previous operation when Linker is updating or deleting */
  deleteOrUpdateBehavior?: DeleteOrUpdateBehavior;
  /** Optional, this value specifies the Azure roles to be assigned. Automatically */
  roles?: string[];
}

/** The authentication info when authType is servicePrincipal certificate */
export interface ServicePrincipalCertificateAuthInfo extends AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "servicePrincipalCertificate";
  /** Application clientId for servicePrincipal auth. */
  clientId: string;
  /** Principal Id for servicePrincipal auth. */
  principalId: string;
  /** ServicePrincipal certificate for servicePrincipal auth. */
  certificate: string;
  /** Indicates whether to clean up previous operation when Linker is updating or deleting */
  deleteOrUpdateBehavior?: DeleteOrUpdateBehavior;
  /** Optional, this value specifies the Azure roles to be assigned. Automatically */
  roles?: string[];
}

/** The authentication info when authType is user account */
export interface UserAccountAuthInfo extends AuthInfoBase, DatabaseAadAuthInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "userAccount";
  /** Principal Id for user account. */
  principalId?: string;
  /** Indicates whether to clean up previous operation when Linker is updating or deleting */
  deleteOrUpdateBehavior?: DeleteOrUpdateBehavior;
  /** Optional, this value specifies the Azure roles to be assigned. Automatically */
  roles?: string[];
}

/** The authentication info when authType is EasyAuth Microsoft Entra ID */
export interface EasyAuthMicrosoftEntraIDAuthInfo extends AuthInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "easyAuthMicrosoftEntraID";
  /** Application clientId for EasyAuth Microsoft Entra ID. */
  clientId?: string;
  /** Application Secret for EasyAuth Microsoft Entra ID. */
  secret?: string;
  /** Indicates whether to clean up previous operation when Linker is updating or deleting */
  deleteOrUpdateBehavior?: DeleteOrUpdateBehavior;
}

/** The resource properties when type is Azure Key Vault */
export interface AzureKeyVaultProperties extends AzureResourcePropertiesBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "KeyVault";
  /** True if connect via Kubernetes CSI Driver. */
  connectAsKubernetesCsiDriver?: boolean;
}

/** The resource properties when type is Azure App Configuration */
export interface AzureAppConfigProperties extends AzureResourcePropertiesBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "AppConfig";
  /** True if connection enables app configuration kubernetes extension. */
  connectWithKubernetesExtension?: boolean;
}

/** The secret info when type is rawValue. It's for scenarios that user input the secret. */
export interface ValueSecretInfo extends SecretInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  secretType: "rawValue";
  /** The actual value of the secret. */
  value?: string;
}

/** The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId. */
export interface KeyVaultSecretReferenceSecretInfo extends SecretInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  secretType: "keyVaultSecretReference";
  /** Name of the Key Vault secret. */
  name?: string;
  /** Version of the Key Vault secret. */
  version?: string;
}

/** The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App. */
export interface KeyVaultSecretUriSecretInfo extends SecretInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  secretType: "keyVaultSecretUri";
  /** URI to the keyvault secret */
  value?: string;
}

/** a dryrun job resource */
export interface DryrunResource extends ProxyResource {
  /** The parameters of the dryrun */
  parameters?: DryrunParametersUnion;
  /**
   * the result of the dryrun
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly prerequisiteResults?: DryrunPrerequisiteResultUnion[];
  /**
   * the preview of the operations for creation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationPreviews?: DryrunOperationPreview[];
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Linker of source and target resource */
export interface LinkerResource extends ProxyResource {
  /** The target service properties */
  targetService?: TargetServiceBaseUnion;
  /** The authentication type. */
  authInfo?: AuthInfoBaseUnion;
  /** The application client type */
  clientType?: ClientType;
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The VNet solution. */
  vNetSolution?: VNetSolution;
  /** An option to store secret value in secure place */
  secretStore?: SecretStore;
  /** connection scope in source service. */
  scope?: string;
  /** The network solution. */
  publicNetworkSolution?: PublicNetworkSolution;
  /** The connection information consumed by applications, including secrets, connection strings. */
  configurationInfo?: ConfigurationInfo;
}

/** Known values of {@link DryrunActionName} that the service accepts. */
export enum KnownDryrunActionName {
  /** CreateOrUpdate */
  CreateOrUpdate = "createOrUpdate",
}

/**
 * Defines values for DryrunActionName. \
 * {@link KnownDryrunActionName} can be used interchangeably with DryrunActionName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **createOrUpdate**
 */
export type DryrunActionName = string;

/** Known values of {@link DryrunPrerequisiteResultType} that the service accepts. */
export enum KnownDryrunPrerequisiteResultType {
  /** BasicError */
  BasicError = "basicError",
  /** PermissionsMissing */
  PermissionsMissing = "permissionsMissing",
}

/**
 * Defines values for DryrunPrerequisiteResultType. \
 * {@link KnownDryrunPrerequisiteResultType} can be used interchangeably with DryrunPrerequisiteResultType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **basicError** \
 * **permissionsMissing**
 */
export type DryrunPrerequisiteResultType = string;

/** Known values of {@link DryrunPreviewOperationType} that the service accepts. */
export enum KnownDryrunPreviewOperationType {
  /** ConfigConnection */
  ConfigConnection = "configConnection",
  /** ConfigNetwork */
  ConfigNetwork = "configNetwork",
  /** ConfigAuth */
  ConfigAuth = "configAuth",
}

/**
 * Defines values for DryrunPreviewOperationType. \
 * {@link KnownDryrunPreviewOperationType} can be used interchangeably with DryrunPreviewOperationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **configConnection** \
 * **configNetwork** \
 * **configAuth**
 */
export type DryrunPreviewOperationType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link TargetServiceType} that the service accepts. */
export enum KnownTargetServiceType {
  /** AzureResource */
  AzureResource = "AzureResource",
  /** ConfluentBootstrapServer */
  ConfluentBootstrapServer = "ConfluentBootstrapServer",
  /** ConfluentSchemaRegistry */
  ConfluentSchemaRegistry = "ConfluentSchemaRegistry",
  /** SelfHostedServer */
  SelfHostedServer = "SelfHostedServer",
  /** FabricPlatform */
  FabricPlatform = "FabricPlatform",
}

/**
 * Defines values for TargetServiceType. \
 * {@link KnownTargetServiceType} can be used interchangeably with TargetServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureResource** \
 * **ConfluentBootstrapServer** \
 * **ConfluentSchemaRegistry** \
 * **SelfHostedServer** \
 * **FabricPlatform**
 */
export type TargetServiceType = string;

/** Known values of {@link AuthType} that the service accepts. */
export enum KnownAuthType {
  /** SystemAssignedIdentity */
  SystemAssignedIdentity = "systemAssignedIdentity",
  /** UserAssignedIdentity */
  UserAssignedIdentity = "userAssignedIdentity",
  /** ServicePrincipalSecret */
  ServicePrincipalSecret = "servicePrincipalSecret",
  /** ServicePrincipalCertificate */
  ServicePrincipalCertificate = "servicePrincipalCertificate",
  /** Secret */
  Secret = "secret",
  /** AccessKey */
  AccessKey = "accessKey",
  /** UserAccount */
  UserAccount = "userAccount",
  /** EasyAuthMicrosoftEntraID */
  EasyAuthMicrosoftEntraID = "easyAuthMicrosoftEntraID",
}

/**
 * Defines values for AuthType. \
 * {@link KnownAuthType} can be used interchangeably with AuthType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **systemAssignedIdentity** \
 * **userAssignedIdentity** \
 * **servicePrincipalSecret** \
 * **servicePrincipalCertificate** \
 * **secret** \
 * **accessKey** \
 * **userAccount** \
 * **easyAuthMicrosoftEntraID**
 */
export type AuthType = string;

/** Known values of {@link AuthMode} that the service accepts. */
export enum KnownAuthMode {
  /** Default authentication configuration according to the authentication type. */
  OptInAllAuth = "optInAllAuth",
  /** Skip all authentication configuration such as enabling managed identity and granting RBAC roles */
  OptOutAllAuth = "optOutAllAuth",
}

/**
 * Defines values for AuthMode. \
 * {@link KnownAuthMode} can be used interchangeably with AuthMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **optInAllAuth**: Default authentication configuration according to the authentication type. \
 * **optOutAllAuth**: Skip all authentication configuration such as enabling managed identity and granting RBAC roles
 */
export type AuthMode = string;

/** Known values of {@link ClientType} that the service accepts. */
export enum KnownClientType {
  /** None */
  None = "none",
  /** Dotnet */
  Dotnet = "dotnet",
  /** Java */
  Java = "java",
  /** Python */
  Python = "python",
  /** Go */
  Go = "go",
  /** Php */
  Php = "php",
  /** Ruby */
  Ruby = "ruby",
  /** Django */
  Django = "django",
  /** Nodejs */
  Nodejs = "nodejs",
  /** SpringBoot */
  SpringBoot = "springBoot",
  /** KafkaSpringBoot */
  KafkaSpringBoot = "kafka-springBoot",
  /** JmsSpringBoot */
  JmsSpringBoot = "jms-springBoot",
  /** Dapr */
  Dapr = "dapr",
}

/**
 * Defines values for ClientType. \
 * {@link KnownClientType} can be used interchangeably with ClientType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **dotnet** \
 * **java** \
 * **python** \
 * **go** \
 * **php** \
 * **ruby** \
 * **django** \
 * **nodejs** \
 * **springBoot** \
 * **kafka-springBoot** \
 * **jms-springBoot** \
 * **dapr**
 */
export type ClientType = string;

/** Known values of {@link VNetSolutionType} that the service accepts. */
export enum KnownVNetSolutionType {
  /** ServiceEndpoint */
  ServiceEndpoint = "serviceEndpoint",
  /** PrivateLink */
  PrivateLink = "privateLink",
}

/**
 * Defines values for VNetSolutionType. \
 * {@link KnownVNetSolutionType} can be used interchangeably with VNetSolutionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **serviceEndpoint** \
 * **privateLink**
 */
export type VNetSolutionType = string;

/** Known values of {@link DeleteOrUpdateBehavior} that the service accepts. */
export enum KnownDeleteOrUpdateBehavior {
  /** Default */
  Default = "Default",
  /** ForcedCleanup */
  ForcedCleanup = "ForcedCleanup",
}

/**
 * Defines values for DeleteOrUpdateBehavior. \
 * {@link KnownDeleteOrUpdateBehavior} can be used interchangeably with DeleteOrUpdateBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **ForcedCleanup**
 */
export type DeleteOrUpdateBehavior = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
  /** Enable */
  Enable = "enable",
  /** OptOut */
  OptOut = "optOut",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal** \
 * **enable** \
 * **optOut**
 */
export type ActionType = string;

/** Known values of {@link AllowType} that the service accepts. */
export enum KnownAllowType {
  /** True */
  True = "true",
  /** False */
  False = "false",
}

/**
 * Defines values for AllowType. \
 * {@link KnownAllowType} can be used interchangeably with AllowType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true** \
 * **false**
 */
export type AllowType = string;

/** Known values of {@link DaprMetadataRequired} that the service accepts. */
export enum KnownDaprMetadataRequired {
  /** True */
  True = "true",
  /** False */
  False = "false",
}

/**
 * Defines values for DaprMetadataRequired. \
 * {@link KnownDaprMetadataRequired} can be used interchangeably with DaprMetadataRequired,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true** \
 * **false**
 */
export type DaprMetadataRequired = string;

/** Known values of {@link DaprBindingComponentDirection} that the service accepts. */
export enum KnownDaprBindingComponentDirection {
  /** Input */
  Input = "input",
  /** Output */
  Output = "output",
}

/**
 * Defines values for DaprBindingComponentDirection. \
 * {@link KnownDaprBindingComponentDirection} can be used interchangeably with DaprBindingComponentDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **input** \
 * **output**
 */
export type DaprBindingComponentDirection = string;

/** Known values of {@link ValidationResultStatus} that the service accepts. */
export enum KnownValidationResultStatus {
  /** Success */
  Success = "success",
  /** Failure */
  Failure = "failure",
  /** Warning */
  Warning = "warning",
}

/**
 * Defines values for ValidationResultStatus. \
 * {@link KnownValidationResultStatus} can be used interchangeably with ValidationResultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **success** \
 * **failure** \
 * **warning**
 */
export type ValidationResultStatus = string;

/** Known values of {@link LinkerConfigurationType} that the service accepts. */
export enum KnownLinkerConfigurationType {
  /** Default */
  Default = "Default",
  /** KeyVaultSecret */
  KeyVaultSecret = "KeyVaultSecret",
}

/**
 * Defines values for LinkerConfigurationType. \
 * {@link KnownLinkerConfigurationType} can be used interchangeably with LinkerConfigurationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **KeyVaultSecret**
 */
export type LinkerConfigurationType = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link SecretSourceType} that the service accepts. */
export enum KnownSecretSourceType {
  /** RawValue */
  RawValue = "rawValue",
  /** KeyVaultSecret */
  KeyVaultSecret = "keyVaultSecret",
}

/**
 * Defines values for SecretSourceType. \
 * {@link KnownSecretSourceType} can be used interchangeably with SecretSourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **rawValue** \
 * **keyVaultSecret**
 */
export type SecretSourceType = string;

/** Known values of {@link AzureResourceType} that the service accepts. */
export enum KnownAzureResourceType {
  /** KeyVault */
  KeyVault = "KeyVault",
  /** AppConfig */
  AppConfig = "AppConfig",
}

/**
 * Defines values for AzureResourceType. \
 * {@link KnownAzureResourceType} can be used interchangeably with AzureResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **KeyVault** \
 * **AppConfig**
 */
export type AzureResourceType = string;

/** Known values of {@link SecretType} that the service accepts. */
export enum KnownSecretType {
  /** RawValue */
  RawValue = "rawValue",
  /** KeyVaultSecretUri */
  KeyVaultSecretUri = "keyVaultSecretUri",
  /** KeyVaultSecretReference */
  KeyVaultSecretReference = "keyVaultSecretReference",
}

/**
 * Defines values for SecretType. \
 * {@link KnownSecretType} can be used interchangeably with SecretType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **rawValue** \
 * **keyVaultSecretUri** \
 * **keyVaultSecretReference**
 */
export type SecretType = string;

/** Known values of {@link AccessKeyPermissions} that the service accepts. */
export enum KnownAccessKeyPermissions {
  /** Read */
  Read = "Read",
  /** Write */
  Write = "Write",
  /** Listen */
  Listen = "Listen",
  /** Send */
  Send = "Send",
  /** Manage */
  Manage = "Manage",
}

/**
 * Defines values for AccessKeyPermissions. \
 * {@link KnownAccessKeyPermissions} can be used interchangeably with AccessKeyPermissions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Read** \
 * **Write** \
 * **Listen** \
 * **Send** \
 * **Manage**
 */
export type AccessKeyPermissions = string;

/** Optional parameters. */
export interface ConnectorListDryrunOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDryrun operation. */
export type ConnectorListDryrunResponse = DryrunList;

/** Optional parameters. */
export interface ConnectorGetDryrunOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDryrun operation. */
export type ConnectorGetDryrunResponse = DryrunResource;

/** Optional parameters. */
export interface ConnectorCreateDryrunOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createDryrun operation. */
export type ConnectorCreateDryrunResponse = DryrunResource;

/** Optional parameters. */
export interface ConnectorUpdateDryrunOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateDryrun operation. */
export type ConnectorUpdateDryrunResponse = DryrunResource;

/** Optional parameters. */
export interface ConnectorDeleteDryrunOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ConnectorListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ConnectorListResponse = ResourceList;

/** Optional parameters. */
export interface ConnectorGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConnectorGetResponse = LinkerResource;

/** Optional parameters. */
export interface ConnectorCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ConnectorCreateOrUpdateResponse = LinkerResource;

/** Optional parameters. */
export interface ConnectorDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ConnectorUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ConnectorUpdateResponse = LinkerResource;

/** Optional parameters. */
export interface ConnectorValidateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export type ConnectorValidateResponse = ValidateOperationResult;

/** Optional parameters. */
export interface ConnectorGenerateConfigurationsOptionalParams
  extends coreClient.OperationOptions {
  /** Connection Info, including format, secret store, etc */
  parameters?: ConfigurationInfo;
}

/** Contains response data for the generateConfigurations operation. */
export type ConnectorGenerateConfigurationsResponse = ConfigurationResult;

/** Optional parameters. */
export interface ConnectorListDryrunNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDryrunNext operation. */
export type ConnectorListDryrunNextResponse = DryrunList;

/** Optional parameters. */
export interface ConnectorListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ConnectorListNextResponse = ResourceList;

/** Optional parameters. */
export interface LinkerListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LinkerListResponse = ResourceList;

/** Optional parameters. */
export interface LinkerGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LinkerGetResponse = LinkerResource;

/** Optional parameters. */
export interface LinkerCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LinkerCreateOrUpdateResponse = LinkerResource;

/** Optional parameters. */
export interface LinkerDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LinkerUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type LinkerUpdateResponse = LinkerResource;

/** Optional parameters. */
export interface LinkerValidateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export type LinkerValidateResponse = ValidateOperationResult;

/** Optional parameters. */
export interface LinkerListConfigurationsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listConfigurations operation. */
export type LinkerListConfigurationsResponse = ConfigurationResult;

/** Optional parameters. */
export interface LinkerListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LinkerListNextResponse = ResourceList;

/** Optional parameters. */
export interface LinkersListDryrunOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDryrun operation. */
export type LinkersListDryrunResponse = DryrunList;

/** Optional parameters. */
export interface LinkersGetDryrunOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDryrun operation. */
export type LinkersGetDryrunResponse = DryrunResource;

/** Optional parameters. */
export interface LinkersCreateDryrunOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createDryrun operation. */
export type LinkersCreateDryrunResponse = DryrunResource;

/** Optional parameters. */
export interface LinkersUpdateDryrunOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateDryrun operation. */
export type LinkersUpdateDryrunResponse = DryrunResource;

/** Optional parameters. */
export interface LinkersDeleteDryrunOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface LinkersGenerateConfigurationsOptionalParams
  extends coreClient.OperationOptions {
  /** Connection Info, including format, secret store, etc */
  parameters?: ConfigurationInfo;
}

/** Contains response data for the generateConfigurations operation. */
export type LinkersGenerateConfigurationsResponse = ConfigurationResult;

/** Optional parameters. */
export interface LinkersListDaprConfigurationsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDaprConfigurations operation. */
export type LinkersListDaprConfigurationsResponse = DaprConfigurationList;

/** Optional parameters. */
export interface LinkersListDryrunNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDryrunNext operation. */
export type LinkersListDryrunNextResponse = DryrunList;

/** Optional parameters. */
export interface LinkersListDaprConfigurationsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDaprConfigurationsNext operation. */
export type LinkersListDaprConfigurationsNextResponse = DaprConfigurationList;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface ConfigurationNamesListOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter options. */
  filter?: string;
  /** OData skipToken option for pagination. */
  skipToken?: string;
}

/** Contains response data for the list operation. */
export type ConfigurationNamesListResponse = ConfigurationNameResult;

/** Optional parameters. */
export interface ConfigurationNamesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ConfigurationNamesListNextResponse = ConfigurationNameResult;

/** Optional parameters. */
export interface ServiceLinkerManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
