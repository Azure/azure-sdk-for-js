/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { InventoryItems } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ScVmm } from "../scVmm";
import {
  InventoryItem,
  InventoryItemsListByVmmServerNextOptionalParams,
  InventoryItemsListByVmmServerOptionalParams,
  InventoryItemsListByVmmServerResponse,
  InventoryItemsGetOptionalParams,
  InventoryItemsGetResponse,
  InventoryItemsCreateOptionalParams,
  InventoryItemsCreateResponse,
  InventoryItemsDeleteOptionalParams,
  InventoryItemsListByVmmServerNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing InventoryItems operations. */
export class InventoryItemsImpl implements InventoryItems {
  private readonly client: ScVmm;

  /**
   * Initialize a new instance of the class InventoryItems class.
   * @param client Reference to the service client
   */
  constructor(client: ScVmm) {
    this.client = client;
  }

  /**
   * Returns the list of inventoryItems in the given VmmServer.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vmmServerName Name of the VmmServer.
   * @param options The options parameters.
   */
  public listByVmmServer(
    resourceGroupName: string,
    vmmServerName: string,
    options?: InventoryItemsListByVmmServerOptionalParams,
  ): PagedAsyncIterableIterator<InventoryItem> {
    const iter = this.listByVmmServerPagingAll(
      resourceGroupName,
      vmmServerName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByVmmServerPagingPage(
          resourceGroupName,
          vmmServerName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByVmmServerPagingPage(
    resourceGroupName: string,
    vmmServerName: string,
    options?: InventoryItemsListByVmmServerOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<InventoryItem[]> {
    let result: InventoryItemsListByVmmServerResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByVmmServer(
        resourceGroupName,
        vmmServerName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByVmmServerNext(
        resourceGroupName,
        vmmServerName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByVmmServerPagingAll(
    resourceGroupName: string,
    vmmServerName: string,
    options?: InventoryItemsListByVmmServerOptionalParams,
  ): AsyncIterableIterator<InventoryItem> {
    for await (const page of this.listByVmmServerPagingPage(
      resourceGroupName,
      vmmServerName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Returns the list of inventoryItems in the given VmmServer.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vmmServerName Name of the VmmServer.
   * @param options The options parameters.
   */
  private _listByVmmServer(
    resourceGroupName: string,
    vmmServerName: string,
    options?: InventoryItemsListByVmmServerOptionalParams,
  ): Promise<InventoryItemsListByVmmServerResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmmServerName, options },
      listByVmmServerOperationSpec,
    );
  }

  /**
   * Shows an inventory item.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vmmServerName Name of the VmmServer.
   * @param inventoryItemResourceName Name of the inventoryItem.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vmmServerName: string,
    inventoryItemResourceName: string,
    options?: InventoryItemsGetOptionalParams,
  ): Promise<InventoryItemsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmmServerName, inventoryItemResourceName, options },
      getOperationSpec,
    );
  }

  /**
   * Create Or Update InventoryItem.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vmmServerName Name of the VmmServer.
   * @param inventoryItemResourceName Name of the inventoryItem.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    vmmServerName: string,
    inventoryItemResourceName: string,
    resource: InventoryItem,
    options?: InventoryItemsCreateOptionalParams,
  ): Promise<InventoryItemsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmmServerName,
        inventoryItemResourceName,
        resource,
        options,
      },
      createOperationSpec,
    );
  }

  /**
   * Deletes an inventoryItem.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vmmServerName Name of the VmmServer.
   * @param inventoryItemResourceName Name of the inventoryItem.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    vmmServerName: string,
    inventoryItemResourceName: string,
    options?: InventoryItemsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmmServerName, inventoryItemResourceName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListByVmmServerNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vmmServerName Name of the VmmServer.
   * @param nextLink The nextLink from the previous successful call to the ListByVmmServer method.
   * @param options The options parameters.
   */
  private _listByVmmServerNext(
    resourceGroupName: string,
    vmmServerName: string,
    nextLink: string,
    options?: InventoryItemsListByVmmServerNextOptionalParams,
  ): Promise<InventoryItemsListByVmmServerNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmmServerName, nextLink, options },
      listByVmmServerNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByVmmServerOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ScVmm/vmmServers/{vmmServerName}/inventoryItems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InventoryItemListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmmServerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ScVmm/vmmServers/{vmmServerName}/inventoryItems/{inventoryItemResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InventoryItem,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmmServerName,
    Parameters.inventoryItemResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ScVmm/vmmServers/{vmmServerName}/inventoryItems/{inventoryItemResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.InventoryItem,
    },
    201: {
      bodyMapper: Mappers.InventoryItem,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmmServerName,
    Parameters.inventoryItemResourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ScVmm/vmmServers/{vmmServerName}/inventoryItems/{inventoryItemResourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmmServerName,
    Parameters.inventoryItemResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByVmmServerNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InventoryItemListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmmServerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
