/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  VirtualMachineInstance as VirtualMachineInstanceMapper,
  VirtualMachineInstanceUpdate as VirtualMachineInstanceUpdateMapper,
  VirtualMachineCreateCheckpoint as VirtualMachineCreateCheckpointMapper,
  VirtualMachineDeleteCheckpoint as VirtualMachineDeleteCheckpointMapper,
  VirtualMachineRestoreCheckpoint as VirtualMachineRestoreCheckpointMapper,
  StopVirtualMachineOptions as StopVirtualMachineOptionsMapper,
  GuestAgent as GuestAgentMapper,
  AvailabilitySet as AvailabilitySetMapper,
  AvailabilitySetTagsUpdate as AvailabilitySetTagsUpdateMapper,
  Cloud as CloudMapper,
  CloudTagsUpdate as CloudTagsUpdateMapper,
  VirtualMachineTemplate as VirtualMachineTemplateMapper,
  VirtualMachineTemplateTagsUpdate as VirtualMachineTemplateTagsUpdateMapper,
  VirtualNetwork as VirtualNetworkMapper,
  VirtualNetworkTagsUpdate as VirtualNetworkTagsUpdateMapper,
  VmmServer as VmmServerMapper,
  VmmServerTagsUpdate as VmmServerTagsUpdateMapper,
  InventoryItem as InventoryItemMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-10-07",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const resourceUri: OperationURLParameter = {
  parameterPath: "resourceUri",
  mapper: {
    serializedName: "resourceUri",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: VirtualMachineInstanceMapper,
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: VirtualMachineInstanceUpdateMapper,
};

export const force: OperationQueryParameter = {
  parameterPath: ["options", "force"],
  mapper: {
    serializedName: "force",
    type: {
      name: "String",
    },
  },
};

export const deleteFromHost: OperationQueryParameter = {
  parameterPath: ["options", "deleteFromHost"],
  mapper: {
    serializedName: "deleteFromHost",
    type: {
      name: "String",
    },
  },
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: VirtualMachineCreateCheckpointMapper,
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: VirtualMachineDeleteCheckpointMapper,
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: VirtualMachineRestoreCheckpointMapper,
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: StopVirtualMachineOptionsMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: GuestAgentMapper,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const availabilitySetResourceName: OperationURLParameter = {
  parameterPath: "availabilitySetResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("[a-zA-Z0-9-_\\.]"),
      MaxLength: 54,
      MinLength: 1,
    },
    serializedName: "availabilitySetResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: AvailabilitySetMapper,
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: AvailabilitySetTagsUpdateMapper,
};

export const cloudResourceName: OperationURLParameter = {
  parameterPath: "cloudResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("[a-zA-Z0-9-_\\.]"),
      MaxLength: 54,
      MinLength: 1,
    },
    serializedName: "cloudResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource3: OperationParameter = {
  parameterPath: "resource",
  mapper: CloudMapper,
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: CloudTagsUpdateMapper,
};

export const virtualMachineTemplateName: OperationURLParameter = {
  parameterPath: "virtualMachineTemplateName",
  mapper: {
    constraints: {
      Pattern: new RegExp("[a-zA-Z0-9-_\\.]"),
      MaxLength: 54,
      MinLength: 1,
    },
    serializedName: "virtualMachineTemplateName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource4: OperationParameter = {
  parameterPath: "resource",
  mapper: VirtualMachineTemplateMapper,
};

export const properties3: OperationParameter = {
  parameterPath: "properties",
  mapper: VirtualMachineTemplateTagsUpdateMapper,
};

export const virtualNetworkName: OperationURLParameter = {
  parameterPath: "virtualNetworkName",
  mapper: {
    constraints: {
      Pattern: new RegExp("[a-zA-Z0-9-_\\.]"),
      MaxLength: 54,
      MinLength: 1,
    },
    serializedName: "virtualNetworkName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource5: OperationParameter = {
  parameterPath: "resource",
  mapper: VirtualNetworkMapper,
};

export const properties4: OperationParameter = {
  parameterPath: "properties",
  mapper: VirtualNetworkTagsUpdateMapper,
};

export const vmmServerName: OperationURLParameter = {
  parameterPath: "vmmServerName",
  mapper: {
    constraints: {
      Pattern: new RegExp("[a-zA-Z0-9-_\\.]"),
      MaxLength: 54,
      MinLength: 1,
    },
    serializedName: "vmmServerName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource6: OperationParameter = {
  parameterPath: "resource",
  mapper: VmmServerMapper,
};

export const properties5: OperationParameter = {
  parameterPath: "properties",
  mapper: VmmServerTagsUpdateMapper,
};

export const inventoryItemResourceName: OperationURLParameter = {
  parameterPath: "inventoryItemResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
      ),
    },
    serializedName: "inventoryItemResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource7: OperationParameter = {
  parameterPath: "resource",
  mapper: InventoryItemMapper,
};
