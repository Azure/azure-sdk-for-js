/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const VMMCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMMCredential",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ResourcePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VMMServerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMMServerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMMServer"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudCapacity",
    modelProperties: {
      cpuCount: {
        serializedName: "cpuCount",
        type: {
          name: "Number"
        }
      },
      memoryMB: {
        serializedName: "memoryMB",
        type: {
          name: "Number"
        }
      },
      vmCount: {
        serializedName: "vmCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StorageQoSPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageQoSPolicy",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      iopsMaximum: {
        serializedName: "iopsMaximum",
        type: {
          name: "Number"
        }
      },
      iopsMinimum: {
        serializedName: "iopsMinimum",
        type: {
          name: "Number"
        }
      },
      bandwidthLimit: {
        serializedName: "bandwidthLimit",
        type: {
          name: "Number"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cloud"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterface: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterface",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv4Addresses: {
        serializedName: "ipv4Addresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipv6Addresses: {
        serializedName: "ipv6Addresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      macAddress: {
        serializedName: "macAddress",
        type: {
          name: "String"
        }
      },
      virtualNetworkId: {
        serializedName: "virtualNetworkId",
        type: {
          name: "String"
        }
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv4AddressType: {
        serializedName: "ipv4AddressType",
        type: {
          name: "String"
        }
      },
      ipv6AddressType: {
        serializedName: "ipv6AddressType",
        type: {
          name: "String"
        }
      },
      macAddressType: {
        serializedName: "macAddressType",
        type: {
          name: "String"
        }
      },
      nicId: {
        serializedName: "nicId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualDisk",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        type: {
          name: "Number"
        }
      },
      maxDiskSizeGB: {
        serializedName: "maxDiskSizeGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bus: {
        serializedName: "bus",
        type: {
          name: "Number"
        }
      },
      lun: {
        serializedName: "lun",
        type: {
          name: "Number"
        }
      },
      busType: {
        serializedName: "busType",
        type: {
          name: "String"
        }
      },
      vhdType: {
        serializedName: "vhdType",
        type: {
          name: "String"
        }
      },
      volumeType: {
        serializedName: "volumeType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vhdFormatType: {
        serializedName: "vhdFormatType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      templateDiskId: {
        serializedName: "templateDiskId",
        type: {
          name: "String"
        }
      },
      storageQoSPolicy: {
        serializedName: "storageQoSPolicy",
        type: {
          name: "Composite",
          className: "StorageQoSPolicyDetails"
        }
      },
      createDiffDisk: {
        serializedName: "createDiffDisk",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageQoSPolicyDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageQoSPolicyDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineTemplateListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineTemplateListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineTemplate"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailabilitySetListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailabilitySetListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailabilitySet"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InventoryItemProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InventoryItemProperties",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator: {
      serializedName: "inventoryType",
      clientName: "inventoryType"
    },
    modelProperties: {
      inventoryType: {
        serializedName: "inventoryType",
        required: true,
        type: {
          name: "String"
        }
      },
      managedResourceId: {
        serializedName: "managedResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      inventoryItemName: {
        serializedName: "inventoryItemName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InventoryItemsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InventoryItemsList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InventoryItem"
            }
          }
        }
      }
    }
  }
};

export const AvailabilitySetListItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailabilitySetListItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OsProfileForVMInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsProfileForVMInstance",
    modelProperties: {
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String"
        }
      },
      computerName: {
        serializedName: "computerName",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osSku: {
        serializedName: "osSku",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HardwareProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HardwareProfile",
    modelProperties: {
      memoryMB: {
        serializedName: "memoryMB",
        type: {
          name: "Number"
        }
      },
      cpuCount: {
        serializedName: "cpuCount",
        type: {
          name: "Number"
        }
      },
      limitCpuForMigration: {
        serializedName: "limitCpuForMigration",
        type: {
          name: "String"
        }
      },
      dynamicMemoryEnabled: {
        serializedName: "dynamicMemoryEnabled",
        type: {
          name: "String"
        }
      },
      dynamicMemoryMaxMB: {
        serializedName: "dynamicMemoryMaxMB",
        type: {
          name: "Number"
        }
      },
      dynamicMemoryMinMB: {
        serializedName: "dynamicMemoryMinMB",
        type: {
          name: "Number"
        }
      },
      isHighlyAvailable: {
        serializedName: "isHighlyAvailable",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfile",
    modelProperties: {
      networkInterfaces: {
        serializedName: "networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface"
            }
          }
        }
      }
    }
  }
};

export const StorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageProfile",
    modelProperties: {
      disks: {
        serializedName: "disks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDisk"
            }
          }
        }
      }
    }
  }
};

export const InfrastructureProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InfrastructureProfile",
    modelProperties: {
      inventoryItemId: {
        serializedName: "inventoryItemId",
        type: {
          name: "String"
        }
      },
      vmmServerId: {
        serializedName: "vmmServerId",
        type: {
          name: "String"
        }
      },
      cloudId: {
        serializedName: "cloudId",
        type: {
          name: "String"
        }
      },
      templateId: {
        serializedName: "templateId",
        type: {
          name: "String"
        }
      },
      vmName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "vmName",
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "uuid",
        type: {
          name: "String"
        }
      },
      lastRestoredVMCheckpoint: {
        serializedName: "lastRestoredVMCheckpoint",
        type: {
          name: "Composite",
          className: "Checkpoint"
        }
      },
      checkpoints: {
        serializedName: "checkpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Checkpoint"
            }
          }
        }
      },
      checkpointType: {
        serializedName: "checkpointType",
        type: {
          name: "String"
        }
      },
      generation: {
        serializedName: "generation",
        type: {
          name: "Number"
        }
      },
      biosGuid: {
        serializedName: "biosGuid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Checkpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Checkpoint",
    modelProperties: {
      parentCheckpointID: {
        serializedName: "parentCheckpointID",
        type: {
          name: "String"
        }
      },
      checkpointID: {
        serializedName: "checkpointID",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstanceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstanceUpdate",
    modelProperties: {
      hardwareProfile: {
        serializedName: "properties.hardwareProfile",
        type: {
          name: "Composite",
          className: "HardwareProfileUpdate"
        }
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfileUpdate"
        }
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfileUpdate"
        }
      },
      availabilitySets: {
        serializedName: "properties.availabilitySets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailabilitySetListItem"
            }
          }
        }
      },
      infrastructureProfile: {
        serializedName: "properties.infrastructureProfile",
        type: {
          name: "Composite",
          className: "InfrastructureProfileUpdate"
        }
      }
    }
  }
};

export const HardwareProfileUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HardwareProfileUpdate",
    modelProperties: {
      memoryMB: {
        serializedName: "memoryMB",
        type: {
          name: "Number"
        }
      },
      cpuCount: {
        serializedName: "cpuCount",
        type: {
          name: "Number"
        }
      },
      limitCpuForMigration: {
        serializedName: "limitCpuForMigration",
        type: {
          name: "String"
        }
      },
      dynamicMemoryEnabled: {
        serializedName: "dynamicMemoryEnabled",
        type: {
          name: "String"
        }
      },
      dynamicMemoryMaxMB: {
        serializedName: "dynamicMemoryMaxMB",
        type: {
          name: "Number"
        }
      },
      dynamicMemoryMinMB: {
        serializedName: "dynamicMemoryMinMB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StorageProfileUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageProfileUpdate",
    modelProperties: {
      disks: {
        serializedName: "disks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDiskUpdate"
            }
          }
        }
      }
    }
  }
};

export const VirtualDiskUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualDiskUpdate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        type: {
          name: "Number"
        }
      },
      bus: {
        serializedName: "bus",
        type: {
          name: "Number"
        }
      },
      lun: {
        serializedName: "lun",
        type: {
          name: "Number"
        }
      },
      busType: {
        serializedName: "busType",
        type: {
          name: "String"
        }
      },
      vhdType: {
        serializedName: "vhdType",
        type: {
          name: "String"
        }
      },
      storageQoSPolicy: {
        serializedName: "storageQoSPolicy",
        type: {
          name: "Composite",
          className: "StorageQoSPolicyDetails"
        }
      }
    }
  }
};

export const NetworkProfileUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfileUpdate",
    modelProperties: {
      networkInterfaces: {
        serializedName: "networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceUpdate"
            }
          }
        }
      }
    }
  }
};

export const NetworkInterfaceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceUpdate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        type: {
          name: "String"
        }
      },
      virtualNetworkId: {
        serializedName: "virtualNetworkId",
        type: {
          name: "String"
        }
      },
      ipv4AddressType: {
        serializedName: "ipv4AddressType",
        type: {
          name: "String"
        }
      },
      ipv6AddressType: {
        serializedName: "ipv6AddressType",
        type: {
          name: "String"
        }
      },
      macAddressType: {
        serializedName: "macAddressType",
        type: {
          name: "String"
        }
      },
      nicId: {
        serializedName: "nicId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InfrastructureProfileUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InfrastructureProfileUpdate",
    modelProperties: {
      checkpointType: {
        serializedName: "checkpointType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstanceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstanceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StopVirtualMachineOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StopVirtualMachineOptions",
    modelProperties: {
      skipShutdown: {
        defaultValue: "false",
        serializedName: "skipShutdown",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmInstanceHybridIdentityMetadataList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmInstanceHybridIdentityMetadataList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VmInstanceHybridIdentityMetadata"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineCreateCheckpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineCreateCheckpoint",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineDeleteCheckpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineDeleteCheckpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineRestoreCheckpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineRestoreCheckpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuestCredential",
    modelProperties: {
      username: {
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpProxyConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpProxyConfiguration",
    modelProperties: {
      httpsProxy: {
        serializedName: "httpsProxy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestAgentList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuestAgentList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GuestAgent"
            }
          }
        }
      }
    }
  }
};

export const InventoryItemDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InventoryItemDetails",
    modelProperties: {
      inventoryItemId: {
        serializedName: "inventoryItemId",
        type: {
          name: "String"
        }
      },
      inventoryItemName: {
        serializedName: "inventoryItemName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const CloudInventoryItem: coreClient.CompositeMapper = {
  serializedName: "Cloud",
  type: {
    name: "Composite",
    className: "CloudInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties
    }
  }
};

export const VirtualNetworkInventoryItem: coreClient.CompositeMapper = {
  serializedName: "VirtualNetwork",
  type: {
    name: "Composite",
    className: "VirtualNetworkInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties
    }
  }
};

export const VirtualMachineTemplateInventoryItem: coreClient.CompositeMapper = {
  serializedName: "VirtualMachineTemplate",
  type: {
    name: "Composite",
    className: "VirtualMachineTemplateInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties,
      cpuCount: {
        serializedName: "cpuCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      memoryMB: {
        serializedName: "memoryMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInventoryItem: coreClient.CompositeMapper = {
  serializedName: "VirtualMachine",
  type: {
    name: "Composite",
    className: "VirtualMachineInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties,
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "powerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cloud: {
        serializedName: "cloud",
        type: {
          name: "Composite",
          className: "InventoryItemDetails"
        }
      },
      biosGuid: {
        serializedName: "biosGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedMachineResourceId: {
        serializedName: "managedMachineResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMMServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMMServer",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "VMMCredential"
        }
      },
      fqdn: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.fqdn",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      connectionStatus: {
        serializedName: "properties.connectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Cloud: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cloud",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      inventoryItemId: {
        serializedName: "properties.inventoryItemId",
        type: {
          name: "String"
        }
      },
      uuid: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.uuid",
        type: {
          name: "String"
        }
      },
      vmmServerId: {
        serializedName: "properties.vmmServerId",
        type: {
          name: "String"
        }
      },
      cloudName: {
        serializedName: "properties.cloudName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cloudCapacity: {
        serializedName: "properties.cloudCapacity",
        type: {
          name: "Composite",
          className: "CloudCapacity"
        }
      },
      storageQoSPolicies: {
        serializedName: "properties.storageQoSPolicies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageQoSPolicy"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetwork",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      inventoryItemId: {
        serializedName: "properties.inventoryItemId",
        type: {
          name: "String"
        }
      },
      uuid: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.uuid",
        type: {
          name: "String"
        }
      },
      vmmServerId: {
        serializedName: "properties.vmmServerId",
        type: {
          name: "String"
        }
      },
      networkName: {
        serializedName: "properties.networkName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineTemplate",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      inventoryItemId: {
        serializedName: "properties.inventoryItemId",
        type: {
          name: "String"
        }
      },
      uuid: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.uuid",
        type: {
          name: "String"
        }
      },
      vmmServerId: {
        serializedName: "properties.vmmServerId",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "properties.osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "properties.osName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      computerName: {
        serializedName: "properties.computerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memoryMB: {
        serializedName: "properties.memoryMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      cpuCount: {
        serializedName: "properties.cpuCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limitCpuForMigration: {
        serializedName: "properties.limitCpuForMigration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dynamicMemoryEnabled: {
        serializedName: "properties.dynamicMemoryEnabled",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isCustomizable: {
        serializedName: "properties.isCustomizable",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dynamicMemoryMaxMB: {
        serializedName: "properties.dynamicMemoryMaxMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      dynamicMemoryMinMB: {
        serializedName: "properties.dynamicMemoryMinMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isHighlyAvailable: {
        serializedName: "properties.isHighlyAvailable",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      generation: {
        serializedName: "properties.generation",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      networkInterfaces: {
        serializedName: "properties.networkInterfaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface"
            }
          }
        }
      },
      disks: {
        serializedName: "properties.disks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDisk"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailabilitySet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailabilitySet",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      availabilitySetName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.availabilitySetName",
        type: {
          name: "String"
        }
      },
      vmmServerId: {
        serializedName: "properties.vmmServerId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InventoryItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InventoryItem",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      inventoryType: {
        serializedName: "properties.inventoryType",
        required: true,
        type: {
          name: "String"
        }
      },
      managedResourceId: {
        serializedName: "properties.managedResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      inventoryItemName: {
        serializedName: "properties.inventoryItemName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstance",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      availabilitySets: {
        serializedName: "properties.availabilitySets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailabilitySetListItem"
            }
          }
        }
      },
      osProfile: {
        serializedName: "properties.osProfile",
        type: {
          name: "Composite",
          className: "OsProfileForVMInstance"
        }
      },
      hardwareProfile: {
        serializedName: "properties.hardwareProfile",
        type: {
          name: "Composite",
          className: "HardwareProfile"
        }
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfile"
        }
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfile"
        }
      },
      infrastructureProfile: {
        serializedName: "properties.infrastructureProfile",
        type: {
          name: "Composite",
          className: "InfrastructureProfile"
        }
      },
      powerState: {
        serializedName: "properties.powerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmInstanceHybridIdentityMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmInstanceHybridIdentityMetadata",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      resourceUid: {
        serializedName: "properties.resourceUid",
        type: {
          name: "String"
        }
      },
      publicKey: {
        serializedName: "properties.publicKey",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestAgent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuestAgent",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "GuestCredential"
        }
      },
      httpProxyConfig: {
        serializedName: "properties.httpProxyConfig",
        type: {
          name: "Composite",
          className: "HttpProxyConfiguration"
        }
      },
      provisioningAction: {
        serializedName: "properties.provisioningAction",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customResourceName: {
        serializedName: "properties.customResourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmmServersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmmServersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmmServersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmmServersUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineTemplatesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineTemplatesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineTemplatesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineTemplatesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailabilitySetsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailabilitySetsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailabilitySetsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailabilitySetsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailabilitySetsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailabilitySetsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstancesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstancesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstancesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstancesStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstancesStopHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstancesStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstancesStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstancesRestartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstancesRestartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstancesCreateCheckpointHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstancesCreateCheckpointHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstancesDeleteCheckpointHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstancesDeleteCheckpointHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstancesRestoreCheckpointHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstancesRestoreCheckpointHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  InventoryItemProperties: InventoryItemProperties,
  "InventoryItemProperties.Cloud": CloudInventoryItem,
  "InventoryItemProperties.VirtualNetwork": VirtualNetworkInventoryItem,
  "InventoryItemProperties.VirtualMachineTemplate": VirtualMachineTemplateInventoryItem,
  "InventoryItemProperties.VirtualMachine": VirtualMachineInventoryItem
};
