/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type InventoryItemPropertiesUnion =
  | InventoryItemProperties
  | CloudInventoryItem
  | VirtualMachineInventoryItem
  | VirtualMachineTemplateInventoryItem
  | VirtualNetworkInventoryItem;

/** The response of a VirtualMachineInstance list operation. */
export interface VirtualMachineInstanceListResult {
  /** The VirtualMachineInstance items on this page */
  value: VirtualMachineInstance[];
  /**
   * The link to the next page of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Defines the resource properties. */
export interface VirtualMachineInstanceProperties {
  /** Availability Sets in vm. */
  availabilitySets?: AvailabilitySetListItem[];
  /** OS properties. */
  osProfile?: OsProfileForVmInstance;
  /** Hardware properties. */
  hardwareProfile?: HardwareProfile;
  /** Network properties. */
  networkProfile?: NetworkProfile;
  /** Storage properties. */
  storageProfile?: StorageProfile;
  /** Gets the infrastructure profile. */
  infrastructureProfile?: InfrastructureProfile;
  /**
   * Gets the power state of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerState?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Availability Set model */
export interface AvailabilitySetListItem {
  /** Gets the ARM Id of the microsoft.scvmm/availabilitySets resource. */
  id?: string;
  /** Gets or sets the name of the availability set. */
  name?: string;
}

/** Defines the resource properties. */
export interface OsProfileForVmInstance {
  /**
   * Admin password of the virtual machine.
   * This value contains a credential. Consider obscuring before showing to users
   */
  adminPassword?: string;
  /** Gets or sets computer name. */
  computerName?: string;
  /**
   * Gets the type of the os.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /**
   * Gets os sku.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osSku?: string;
  /**
   * Gets os version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osVersion?: string;
}

/** Defines the resource properties. */
export interface HardwareProfile {
  /** MemoryMB is the size of a virtual machine's memory, in MB. */
  memoryMB?: number;
  /** Gets or sets the number of vCPUs for the vm. */
  cpuCount?: number;
  /** Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs. */
  limitCpuForMigration?: LimitCpuForMigration;
  /** Gets or sets a value indicating whether to enable dynamic memory or not. */
  dynamicMemoryEnabled?: DynamicMemoryEnabled;
  /** Gets or sets the max dynamic memory for the vm. */
  dynamicMemoryMaxMB?: number;
  /** Gets or sets the min dynamic memory for the vm. */
  dynamicMemoryMinMB?: number;
  /**
   * Gets highly available property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isHighlyAvailable?: IsHighlyAvailable;
}

/** Defines the resource properties. */
export interface NetworkProfile {
  /** Gets or sets the list of network interfaces associated with the virtual machine. */
  networkInterfaces?: NetworkInterface[];
}

/** Network Interface model */
export interface NetworkInterface {
  /** Gets or sets the name of the network interface. */
  name?: string;
  /**
   * Gets the display name of the network interface as shown in the vmmServer. This is the fallback label for a NIC when the name is not set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * Gets the nic ipv4 addresses.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv4Addresses?: string[];
  /**
   * Gets the nic ipv6 addresses.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv6Addresses?: string[];
  /** Gets or sets the nic MAC address. */
  macAddress?: string;
  /** Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic. */
  virtualNetworkId?: string;
  /**
   * Gets the name of the virtual network in vmmServer that the nic is connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkName?: string;
  /** Gets or sets the ipv4 address type. */
  ipv4AddressType?: AllocationMethod;
  /** Gets or sets the ipv6 address type. */
  ipv6AddressType?: AllocationMethod;
  /** Gets or sets the mac address type. */
  macAddressType?: AllocationMethod;
  /** Gets or sets the nic id. */
  nicId?: string;
}

/** Defines the resource properties. */
export interface StorageProfile {
  /** Gets or sets the list of virtual disks associated with the virtual machine. */
  disks?: VirtualDisk[];
}

/** Virtual disk model */
export interface VirtualDisk {
  /** Gets or sets the name of the disk. */
  name?: string;
  /**
   * Gets the display name of the virtual disk as shown in the vmmServer. This is the fallback label for a disk when the name is not set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /** Gets or sets the disk id. */
  diskId?: string;
  /** Gets or sets the disk total size. */
  diskSizeGB?: number;
  /**
   * Gets the max disk size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxDiskSizeGB?: number;
  /** Gets or sets the disk bus. */
  bus?: number;
  /** Gets or sets the disk lun. */
  lun?: number;
  /** Gets or sets the disk bus type. */
  busType?: string;
  /** Gets or sets the disk vhd type. */
  vhdType?: string;
  /**
   * Gets the disk volume type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeType?: string;
  /**
   * Gets the disk vhd format type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vhdFormatType?: string;
  /** Gets or sets the disk id in the template. */
  templateDiskId?: string;
  /** The QoS policy for the disk. */
  storageQosPolicy?: StorageQosPolicyDetails;
  /** Gets or sets a value indicating diff disk. */
  createDiffDisk?: CreateDiffDisk;
}

/** The StorageQoSPolicyDetails definition. */
export interface StorageQosPolicyDetails {
  /** The name of the policy. */
  name?: string;
  /** The ID of the QoS policy. */
  id?: string;
}

/** Specifies the vmmServer infrastructure specific settings for the virtual machine instance. */
export interface InfrastructureProfile {
  /** Gets or sets the inventory Item ID for the resource. */
  inventoryItemId?: string;
  /** ARM Id of the vmmServer resource in which this resource resides. */
  vmmServerId?: string;
  /** ARM Id of the cloud resource to use for deploying the vm. */
  cloudId?: string;
  /** ARM Id of the template resource to use for deploying the vm. */
  templateId?: string;
  /** VMName is the name of VM on the SCVmm server. */
  vmName?: string;
  /** Unique ID of the virtual machine. */
  uuid?: string;
  /**
   * Last restored checkpoint in the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastRestoredVmCheckpoint?: Checkpoint;
  /**
   * Checkpoints in the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly checkpoints?: Checkpoint[];
  /** Type of checkpoint supported for the vm. */
  checkpointType?: string;
  /** Gets or sets the generation for the vm. */
  generation?: number;
  /** Gets or sets the bios guid for the vm. */
  biosGuid?: string;
}

/** Defines the resource properties. */
export interface Checkpoint {
  /** Gets ID of parent of the checkpoint. */
  parentCheckpointId?: string;
  /** Gets ID of the checkpoint. */
  checkpointId?: string;
  /** Gets name of the checkpoint. */
  name?: string;
  /** Gets description of the checkpoint. */
  description?: string;
}

/** The extended location. */
export interface ExtendedLocation {
  /** The extended location type. */
  type?: string;
  /** The extended location name. */
  name?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The type used for update operations of the VirtualMachineInstance. */
export interface VirtualMachineInstanceUpdate {
  /** The update properties of the VirtualMachineInstance. */
  properties?: VirtualMachineInstanceUpdateProperties;
}

/** Virtual Machine Instance Properties Update model */
export interface VirtualMachineInstanceUpdateProperties {
  /** Availability Sets in vm. */
  availabilitySets?: AvailabilitySetListItem[];
  /** Hardware properties. */
  hardwareProfile?: HardwareProfileUpdate;
  /** Network properties. */
  networkProfile?: NetworkProfileUpdate;
  /** Storage properties. */
  storageProfile?: StorageProfileUpdate;
  /** Gets the infrastructure profile. */
  infrastructureProfile?: InfrastructureProfileUpdate;
}

/** Defines the resource update properties. */
export interface HardwareProfileUpdate {
  /** MemoryMB is the size of a virtual machine's memory, in MB. */
  memoryMB?: number;
  /** Gets or sets the number of vCPUs for the vm. */
  cpuCount?: number;
  /** Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs. */
  limitCpuForMigration?: LimitCpuForMigration;
  /** Gets or sets a value indicating whether to enable dynamic memory or not. */
  dynamicMemoryEnabled?: DynamicMemoryEnabled;
  /** Gets or sets the max dynamic memory for the vm. */
  dynamicMemoryMaxMB?: number;
  /** Gets or sets the min dynamic memory for the vm. */
  dynamicMemoryMinMB?: number;
}

/** Defines the resource update properties. */
export interface NetworkProfileUpdate {
  /** Gets or sets the list of network interfaces associated with the virtual machine. */
  networkInterfaces?: NetworkInterfaceUpdate[];
}

/** Network Interface Update model */
export interface NetworkInterfaceUpdate {
  /** Gets or sets the name of the network interface. */
  name?: string;
  /** Gets or sets the nic MAC address. */
  macAddress?: string;
  /** Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic. */
  virtualNetworkId?: string;
  /** Gets or sets the ipv4 address type. */
  ipv4AddressType?: AllocationMethod;
  /** Gets or sets the ipv6 address type. */
  ipv6AddressType?: AllocationMethod;
  /** Gets or sets the mac address type. */
  macAddressType?: AllocationMethod;
  /** Gets or sets the nic id. */
  nicId?: string;
}

/** Defines the resource update properties. */
export interface StorageProfileUpdate {
  /** Gets or sets the list of virtual disks associated with the virtual machine. */
  disks?: VirtualDiskUpdate[];
}

/** Virtual Disk Update model */
export interface VirtualDiskUpdate {
  /** Gets or sets the name of the disk. */
  name?: string;
  /** Gets or sets the disk id. */
  diskId?: string;
  /** Gets or sets the disk total size. */
  diskSizeGB?: number;
  /** Gets or sets the disk bus. */
  bus?: number;
  /** Gets or sets the disk lun. */
  lun?: number;
  /** Gets or sets the disk bus type. */
  busType?: string;
  /** Gets or sets the disk vhd type. */
  vhdType?: string;
  /** The QoS policy for the disk. */
  storageQosPolicy?: StorageQosPolicyDetails;
}

/** Specifies the vmmServer infrastructure specific update settings for the virtual machine instance. */
export interface InfrastructureProfileUpdate {
  /** Type of checkpoint supported for the vm. */
  checkpointType?: string;
}

/** Defines the create checkpoint action properties. */
export interface VirtualMachineCreateCheckpoint {
  /** Name of the checkpoint. */
  name?: string;
  /** Description of the checkpoint. */
  description?: string;
}

/** Defines the delete checkpoint action properties. */
export interface VirtualMachineDeleteCheckpoint {
  /** ID of the checkpoint to be deleted. */
  id?: string;
}

/** The response of a GuestAgent list operation. */
export interface GuestAgentListResult {
  /** The GuestAgent items on this page */
  value: GuestAgent[];
  /**
   * The link to the next page of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Defines the resource properties. */
export interface GuestAgentProperties {
  /**
   * Gets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Username / Password Credentials to provision guest agent. */
  credentials?: GuestCredential;
  /** HTTP Proxy configuration for the VM. */
  httpProxyConfig?: HttpProxyConfiguration;
  /** Gets or sets the guest agent provisioning action. */
  provisioningAction?: ProvisioningAction;
  /**
   * Gets the guest agent status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Username / Password Credentials to connect to guest. */
export interface GuestCredential {
  /** Gets or sets username to connect with the guest. */
  username: string;
  /**
   * Gets or sets the password to connect with the guest.
   * This value contains a credential. Consider obscuring before showing to users
   */
  password: string;
}

/** HTTP Proxy configuration for the VM. */
export interface HttpProxyConfiguration {
  /** Gets or sets httpsProxy url. */
  httpsProxy?: string;
}

/** The response of a VmInstanceHybridIdentityMetadata list operation. */
export interface VmInstanceHybridIdentityMetadataListResult {
  /** The VmInstanceHybridIdentityMetadata items on this page */
  value: VmInstanceHybridIdentityMetadata[];
  /**
   * The link to the next page of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes the properties of Hybrid Identity Metadata for a Virtual Machine. */
export interface VmInstanceHybridIdentityMetadataProperties {
  /** The unique identifier for the resource. */
  resourceUid?: string;
  /** Gets or sets the Public Key. */
  publicKey?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Defines the restore checkpoint action properties. */
export interface VirtualMachineRestoreCheckpoint {
  /** ID of the checkpoint to be restored to. */
  id?: string;
}

/** Defines the stop action properties. */
export interface StopVirtualMachineOptions {
  /** Gets or sets a value indicating whether to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Defaults to false. */
  skipShutdown?: SkipShutdown;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The response of a AvailabilitySet list operation. */
export interface AvailabilitySetListResult {
  /** The AvailabilitySet items on this page */
  value: AvailabilitySet[];
  /**
   * The link to the next page of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Defines the resource properties. */
export interface AvailabilitySetProperties {
  /** Name of the availability set. */
  availabilitySetName?: string;
  /** ARM Id of the vmmServer resource in which this resource resides. */
  vmmServerId?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The response of a Cloud list operation. */
export interface CloudListResult {
  /** The Cloud items on this page */
  value: Cloud[];
  /**
   * The link to the next page of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Defines the resource properties. */
export interface CloudProperties {
  /** Gets or sets the inventory Item ID for the resource. */
  inventoryItemId?: string;
  /** Unique ID of the cloud. */
  uuid?: string;
  /** ARM Id of the vmmServer resource in which this resource resides. */
  vmmServerId?: string;
  /**
   * Name of the cloud in VmmServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloudName?: string;
  /**
   * Capacity of the cloud.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloudCapacity?: CloudCapacity;
  /**
   * List of QoS policies available for the cloud.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly storageQosPolicies?: StorageQosPolicy[];
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Cloud Capacity model */
export interface CloudCapacity {
  /**
   * CPUCount specifies the maximum number of CPUs that can be allocated in the cloud.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuCount?: number;
  /**
   * MemoryMB specifies a memory usage limit in megabytes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memoryMB?: number;
  /**
   * VMCount gives the max number of VMs that can be deployed in the cloud.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmCount?: number;
}

/** The StorageQoSPolicy definition. */
export interface StorageQosPolicy {
  /** The name of the policy. */
  name?: string;
  /** The ID of the QoS policy. */
  id?: string;
  /** The maximum IO operations per second. */
  iopsMaximum?: number;
  /** The minimum IO operations per second. */
  iopsMinimum?: number;
  /** The Bandwidth Limit for internet traffic. */
  bandwidthLimit?: number;
  /** The underlying policy. */
  policyId?: string;
}

/** The response of a VirtualMachineTemplate list operation. */
export interface VirtualMachineTemplateListResult {
  /** The VirtualMachineTemplate items on this page */
  value: VirtualMachineTemplate[];
  /**
   * The link to the next page of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Defines the resource properties. */
export interface VirtualMachineTemplateProperties {
  /** Gets or sets the inventory Item ID for the resource. */
  inventoryItemId?: string;
  /** Unique ID of the virtual machine template. */
  uuid?: string;
  /** ARM Id of the vmmServer resource in which this resource resides. */
  vmmServerId?: string;
  /**
   * Gets the type of the os.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /**
   * Gets os name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osName?: string;
  /**
   * Gets computer name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly computerName?: string;
  /**
   * MemoryMB is the desired size of a virtual machine's memory, in MB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memoryMB?: number;
  /**
   * Gets the desired number of vCPUs for the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuCount?: number;
  /**
   * Gets a value indicating whether to enable processor compatibility mode for live migration of VMs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly limitCpuForMigration?: LimitCpuForMigration;
  /**
   * Gets a value indicating whether to enable dynamic memory or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dynamicMemoryEnabled?: DynamicMemoryEnabled;
  /**
   * Gets a value indicating whether the vm template is customizable or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isCustomizable?: IsCustomizable;
  /**
   * Gets the max dynamic memory for the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dynamicMemoryMaxMB?: number;
  /**
   * Gets the min dynamic memory for the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dynamicMemoryMinMB?: number;
  /**
   * Gets highly available property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isHighlyAvailable?: IsHighlyAvailable;
  /**
   * Gets the generation for the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly generation?: number;
  /**
   * Gets the network interfaces of the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * Gets the disks of the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disks?: VirtualDisk[];
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The response of a VirtualNetwork list operation. */
export interface VirtualNetworkListResult {
  /** The VirtualNetwork items on this page */
  value: VirtualNetwork[];
  /**
   * The link to the next page of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Defines the resource properties. */
export interface VirtualNetworkProperties {
  /** Gets or sets the inventory Item ID for the resource. */
  inventoryItemId?: string;
  /** Unique ID of the virtual network. */
  uuid?: string;
  /** ARM Id of the vmmServer resource in which this resource resides. */
  vmmServerId?: string;
  /**
   * Name of the virtual network in vmmServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkName?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The response of a VmmServer list operation. */
export interface VmmServerListResult {
  /** The VmmServer items on this page */
  value: VmmServer[];
  /**
   * The link to the next page of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Defines the resource properties. */
export interface VmmServerProperties {
  /** Credentials to connect to VmmServer. */
  credentials?: VmmCredential;
  /** Fqdn is the hostname/ip of the vmmServer. */
  fqdn: string;
  /** Port is the port on which the vmmServer is listening. */
  port?: number;
  /**
   * Gets the connection status to the vmmServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionStatus?: string;
  /**
   * Gets any error message if connection to vmmServer is having any issue.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
  /**
   * Unique ID of vmmServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /**
   * Version is the version of the vmmSever.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Credentials to connect to VmmServer. */
export interface VmmCredential {
  /** Username to use to connect to VmmServer. */
  username?: string;
  /**
   * Password to use to connect to VmmServer.
   * This value contains a credential. Consider obscuring before showing to users
   */
  password?: string;
}

/** The type used for updating tags in AvailabilitySet resources. */
export interface AvailabilitySetTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The type used for updating tags in Cloud resources. */
export interface CloudTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The type used for updating tags in VirtualMachineTemplate resources. */
export interface VirtualMachineTemplateTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The type used for updating tags in VirtualNetwork resources. */
export interface VirtualNetworkTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The type used for updating tags in VmmServer resources. */
export interface VmmServerTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The response of a InventoryItem list operation. */
export interface InventoryItemListResult {
  /** The InventoryItem items on this page */
  value: InventoryItem[];
  /**
   * The link to the next page of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Defines the resource properties. */
export interface InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType:
    | "Cloud"
    | "VirtualMachine"
    | "VirtualMachineTemplate"
    | "VirtualNetwork";
  /**
   * Gets the tracked resource id corresponding to the inventory resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managedResourceId?: string;
  /**
   * Gets the UUID (which is assigned by Vmm) for the inventory item.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /**
   * Gets the Managed Object name in Vmm for the inventory item.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inventoryItemName?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Defines the resource properties. */
export interface InventoryItemDetails {
  /** Gets or sets the inventory Item ID for the resource. */
  inventoryItemId?: string;
  /** Gets or sets the Managed Object name in Vmm for the resource. */
  inventoryItemName?: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The Cloud inventory item. */
export interface CloudInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "Cloud";
}

/** The Virtual machine inventory item. */
export interface VirtualMachineInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "VirtualMachine";
  /**
   * Gets the type of the os.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /**
   * Gets os name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osName?: string;
  /**
   * Gets os version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osVersion?: string;
  /**
   * Gets the power state of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerState?: string;
  /** Gets or sets the nic ip addresses. */
  ipAddresses?: string[];
  /** Cloud inventory resource details where the VM is present. */
  cloud?: InventoryItemDetails;
  /**
   * Gets the bios guid.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly biosGuid?: string;
  /**
   * Gets the tracked resource id corresponding to the inventory resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managedMachineResourceId?: string;
}

/** The Virtual machine template inventory item. */
export interface VirtualMachineTemplateInventoryItem
  extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "VirtualMachineTemplate";
  /**
   * Gets the desired number of vCPUs for the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuCount?: number;
  /**
   * MemoryMB is the desired size of a virtual machine's memory, in MB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memoryMB?: number;
  /**
   * Gets the type of the os.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /**
   * Gets os name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osName?: string;
}

/** The Virtual network inventory item. */
export interface VirtualNetworkInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "VirtualNetwork";
}

/** Define the virtualMachineInstance. */
export interface VirtualMachineInstance extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: VirtualMachineInstanceProperties;
  /** Gets or sets the extended location. */
  extendedLocation: ExtendedLocation;
}

/** Defines the GuestAgent. */
export interface GuestAgent extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: GuestAgentProperties;
}

/** Defines the HybridIdentityMetadata. */
export interface VmInstanceHybridIdentityMetadata extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: VmInstanceHybridIdentityMetadataProperties;
}

/** Defines the inventory item. */
export interface InventoryItem extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: InventoryItemPropertiesUnion;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
}

/** The AvailabilitySets resource definition. */
export interface AvailabilitySet extends TrackedResource {
  /** The resource-specific properties for this resource. */
  properties?: AvailabilitySetProperties;
  /** The extended location. */
  extendedLocation: ExtendedLocation;
}

/** The Clouds resource definition. */
export interface Cloud extends TrackedResource {
  /** The resource-specific properties for this resource. */
  properties?: CloudProperties;
  /** The extended location. */
  extendedLocation: ExtendedLocation;
}

/** The VirtualMachineTemplates resource definition. */
export interface VirtualMachineTemplate extends TrackedResource {
  /** The resource-specific properties for this resource. */
  properties?: VirtualMachineTemplateProperties;
  /** The extended location. */
  extendedLocation: ExtendedLocation;
}

/** The VirtualNetworks resource definition. */
export interface VirtualNetwork extends TrackedResource {
  /** The resource-specific properties for this resource. */
  properties?: VirtualNetworkProperties;
  /** The extended location. */
  extendedLocation: ExtendedLocation;
}

/** The VmmServers resource definition. */
export interface VmmServer extends TrackedResource {
  /** The resource-specific properties for this resource. */
  properties?: VmmServerProperties;
  /** The extended location. */
  extendedLocation: ExtendedLocation;
}

/** Defines headers for VirtualMachineInstances_createOrUpdate operation. */
export interface VirtualMachineInstancesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineInstances_update operation. */
export interface VirtualMachineInstancesUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineInstances_delete operation. */
export interface VirtualMachineInstancesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineInstances_createCheckpoint operation. */
export interface VirtualMachineInstancesCreateCheckpointHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineInstances_deleteCheckpoint operation. */
export interface VirtualMachineInstancesDeleteCheckpointHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineInstances_restart operation. */
export interface VirtualMachineInstancesRestartHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineInstances_restoreCheckpoint operation. */
export interface VirtualMachineInstancesRestoreCheckpointHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineInstances_start operation. */
export interface VirtualMachineInstancesStartHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineInstances_stop operation. */
export interface VirtualMachineInstancesStopHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GuestAgents_create operation. */
export interface GuestAgentsCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for AvailabilitySets_createOrUpdate operation. */
export interface AvailabilitySetsCreateOrUpdateHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for AvailabilitySets_update operation. */
export interface AvailabilitySetsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for AvailabilitySets_delete operation. */
export interface AvailabilitySetsDeleteHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Clouds_createOrUpdate operation. */
export interface CloudsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Clouds_update operation. */
export interface CloudsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Clouds_delete operation. */
export interface CloudsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineTemplates_createOrUpdate operation. */
export interface VirtualMachineTemplatesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineTemplates_update operation. */
export interface VirtualMachineTemplatesUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualMachineTemplates_delete operation. */
export interface VirtualMachineTemplatesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualNetworks_createOrUpdate operation. */
export interface VirtualNetworksCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualNetworks_update operation. */
export interface VirtualNetworksUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualNetworks_delete operation. */
export interface VirtualNetworksDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VmmServers_createOrUpdate operation. */
export interface VmmServersCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VmmServers_update operation. */
export interface VmmServersUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VmmServers_delete operation. */
export interface VmmServersDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link OsType} that the service accepts. */
export enum KnownOsType {
  /** Windows operating system. */
  Windows = "Windows",
  /** Linux operating system. */
  Linux = "Linux",
  /** Other operating system. */
  Other = "Other",
}

/**
 * Defines values for OsType. \
 * {@link KnownOsType} can be used interchangeably with OsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows**: Windows operating system. \
 * **Linux**: Linux operating system. \
 * **Other**: Other operating system.
 */
export type OsType = string;

/** Known values of {@link LimitCpuForMigration} that the service accepts. */
export enum KnownLimitCpuForMigration {
  /** Enable limit CPU for migration. */
  True = "true",
  /** Disable limit CPU for migration. */
  False = "false",
}

/**
 * Defines values for LimitCpuForMigration. \
 * {@link KnownLimitCpuForMigration} can be used interchangeably with LimitCpuForMigration,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true**: Enable limit CPU for migration. \
 * **false**: Disable limit CPU for migration.
 */
export type LimitCpuForMigration = string;

/** Known values of {@link DynamicMemoryEnabled} that the service accepts. */
export enum KnownDynamicMemoryEnabled {
  /** Enable dynamic memory. */
  True = "true",
  /** Disable dynamic memory. */
  False = "false",
}

/**
 * Defines values for DynamicMemoryEnabled. \
 * {@link KnownDynamicMemoryEnabled} can be used interchangeably with DynamicMemoryEnabled,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true**: Enable dynamic memory. \
 * **false**: Disable dynamic memory.
 */
export type DynamicMemoryEnabled = string;

/** Known values of {@link IsHighlyAvailable} that the service accepts. */
export enum KnownIsHighlyAvailable {
  /** Enable highly available. */
  True = "true",
  /** Disable highly available. */
  False = "false",
}

/**
 * Defines values for IsHighlyAvailable. \
 * {@link KnownIsHighlyAvailable} can be used interchangeably with IsHighlyAvailable,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true**: Enable highly available. \
 * **false**: Disable highly available.
 */
export type IsHighlyAvailable = string;

/** Known values of {@link AllocationMethod} that the service accepts. */
export enum KnownAllocationMethod {
  /** Dynamically allocated address. */
  Dynamic = "Dynamic",
  /** Statically allocated address. */
  Static = "Static",
}

/**
 * Defines values for AllocationMethod. \
 * {@link KnownAllocationMethod} can be used interchangeably with AllocationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Dynamic**: Dynamically allocated address. \
 * **Static**: Statically allocated address.
 */
export type AllocationMethod = string;

/** Known values of {@link CreateDiffDisk} that the service accepts. */
export enum KnownCreateDiffDisk {
  /** Enable create diff disk. */
  True = "true",
  /** Disable create diff disk. */
  False = "false",
}

/**
 * Defines values for CreateDiffDisk. \
 * {@link KnownCreateDiffDisk} can be used interchangeably with CreateDiffDisk,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true**: Enable create diff disk. \
 * **false**: Disable create diff disk.
 */
export type CreateDiffDisk = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Resource has been created. */
  Succeeded = "Succeeded",
  /** Resource creation failed. */
  Failed = "Failed",
  /** Resource creation was canceled. */
  Canceled = "Canceled",
  /** The resource is provisioning. */
  Provisioning = "Provisioning",
  /** The resource is updating. */
  Updating = "Updating",
  /** The resource is being deleted. */
  Deleting = "Deleting",
  /** The resource has been accepted. */
  Accepted = "Accepted",
  /** The resource was created. */
  Created = "Created",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Resource has been created. \
 * **Failed**: Resource creation failed. \
 * **Canceled**: Resource creation was canceled. \
 * **Provisioning**: The resource is provisioning. \
 * **Updating**: The resource is updating. \
 * **Deleting**: The resource is being deleted. \
 * **Accepted**: The resource has been accepted. \
 * **Created**: The resource was created.
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ForceDelete} that the service accepts. */
export enum KnownForceDelete {
  /** Enable force delete. */
  True = "true",
  /** Disable force delete. */
  False = "false",
}

/**
 * Defines values for ForceDelete. \
 * {@link KnownForceDelete} can be used interchangeably with ForceDelete,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true**: Enable force delete. \
 * **false**: Disable force delete.
 */
export type ForceDelete = string;

/** Known values of {@link DeleteFromHost} that the service accepts. */
export enum KnownDeleteFromHost {
  /** Enable delete from host. */
  True = "true",
  /** Disable delete from host. */
  False = "false",
}

/**
 * Defines values for DeleteFromHost. \
 * {@link KnownDeleteFromHost} can be used interchangeably with DeleteFromHost,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true**: Enable delete from host. \
 * **false**: Disable delete from host.
 */
export type DeleteFromHost = string;

/** Known values of {@link ProvisioningAction} that the service accepts. */
export enum KnownProvisioningAction {
  /** Install guest agent. */
  Install = "install",
  /** Uninstall guest agent. */
  Uninstall = "uninstall",
  /** Repair guest agent. */
  Repair = "repair",
}

/**
 * Defines values for ProvisioningAction. \
 * {@link KnownProvisioningAction} can be used interchangeably with ProvisioningAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **install**: Install guest agent. \
 * **uninstall**: Uninstall guest agent. \
 * **repair**: Repair guest agent.
 */
export type ProvisioningAction = string;

/** Known values of {@link SkipShutdown} that the service accepts. */
export enum KnownSkipShutdown {
  /** Enable skip shutdown. */
  True = "true",
  /** Disable skip shutdown. */
  False = "false",
}

/**
 * Defines values for SkipShutdown. \
 * {@link KnownSkipShutdown} can be used interchangeably with SkipShutdown,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true**: Enable skip shutdown. \
 * **false**: Disable skip shutdown.
 */
export type SkipShutdown = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link IsCustomizable} that the service accepts. */
export enum KnownIsCustomizable {
  /** Enable customizable. */
  True = "true",
  /** Disable customizable. */
  False = "false",
}

/**
 * Defines values for IsCustomizable. \
 * {@link KnownIsCustomizable} can be used interchangeably with IsCustomizable,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true**: Enable customizable. \
 * **false**: Disable customizable.
 */
export type IsCustomizable = string;

/** Known values of {@link InventoryType} that the service accepts. */
export enum KnownInventoryType {
  /** Cloud inventory type */
  Cloud = "Cloud",
  /** VirtualNetwork inventory type */
  VirtualNetwork = "VirtualNetwork",
  /** VirtualMachine inventory type */
  VirtualMachine = "VirtualMachine",
  /** VirtualMachineTemplate inventory type */
  VirtualMachineTemplate = "VirtualMachineTemplate",
}

/**
 * Defines values for InventoryType. \
 * {@link KnownInventoryType} can be used interchangeably with InventoryType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cloud**: Cloud inventory type \
 * **VirtualNetwork**: VirtualNetwork inventory type \
 * **VirtualMachine**: VirtualMachine inventory type \
 * **VirtualMachineTemplate**: VirtualMachineTemplate inventory type
 */
export type InventoryType = string;

/** Optional parameters. */
export interface VirtualMachineInstancesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualMachineInstancesListResponse =
  VirtualMachineInstanceListResult;

/** Optional parameters. */
export interface VirtualMachineInstancesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualMachineInstancesGetResponse = VirtualMachineInstance;

/** Optional parameters. */
export interface VirtualMachineInstancesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachineInstancesCreateOrUpdateResponse =
  VirtualMachineInstance;

/** Optional parameters. */
export interface VirtualMachineInstancesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualMachineInstancesUpdateResponse = VirtualMachineInstance;

/** Optional parameters. */
export interface VirtualMachineInstancesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Forces the resource to be deleted. */
  force?: ForceDelete;
  /** Whether to disable the VM from azure and also delete it from Vmm. */
  deleteFromHost?: DeleteFromHost;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type VirtualMachineInstancesDeleteResponse =
  VirtualMachineInstancesDeleteHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesCreateCheckpointOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createCheckpoint operation. */
export type VirtualMachineInstancesCreateCheckpointResponse =
  VirtualMachineInstancesCreateCheckpointHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesDeleteCheckpointOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteCheckpoint operation. */
export type VirtualMachineInstancesDeleteCheckpointResponse =
  VirtualMachineInstancesDeleteCheckpointHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restart operation. */
export type VirtualMachineInstancesRestartResponse =
  VirtualMachineInstancesRestartHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesRestoreCheckpointOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restoreCheckpoint operation. */
export type VirtualMachineInstancesRestoreCheckpointResponse =
  VirtualMachineInstancesRestoreCheckpointHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the start operation. */
export type VirtualMachineInstancesStartResponse =
  VirtualMachineInstancesStartHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the stop operation. */
export type VirtualMachineInstancesStopResponse =
  VirtualMachineInstancesStopHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualMachineInstancesListNextResponse =
  VirtualMachineInstanceListResult;

/** Optional parameters. */
export interface GuestAgentsListByVirtualMachineInstanceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVirtualMachineInstance operation. */
export type GuestAgentsListByVirtualMachineInstanceResponse =
  GuestAgentListResult;

/** Optional parameters. */
export interface GuestAgentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GuestAgentsGetResponse = GuestAgent;

/** Optional parameters. */
export interface GuestAgentsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type GuestAgentsCreateResponse = GuestAgent;

/** Optional parameters. */
export interface GuestAgentsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface GuestAgentsListByVirtualMachineInstanceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVirtualMachineInstanceNext operation. */
export type GuestAgentsListByVirtualMachineInstanceNextResponse =
  GuestAgentListResult;

/** Optional parameters. */
export interface VmInstanceHybridIdentityMetadatasListByVirtualMachineInstanceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVirtualMachineInstance operation. */
export type VmInstanceHybridIdentityMetadatasListByVirtualMachineInstanceResponse =
  VmInstanceHybridIdentityMetadataListResult;

/** Optional parameters. */
export interface VmInstanceHybridIdentityMetadatasGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VmInstanceHybridIdentityMetadatasGetResponse =
  VmInstanceHybridIdentityMetadata;

/** Optional parameters. */
export interface VmInstanceHybridIdentityMetadatasListByVirtualMachineInstanceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVirtualMachineInstanceNext operation. */
export type VmInstanceHybridIdentityMetadatasListByVirtualMachineInstanceNextResponse =
  VmInstanceHybridIdentityMetadataListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface AvailabilitySetsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type AvailabilitySetsListBySubscriptionResponse =
  AvailabilitySetListResult;

/** Optional parameters. */
export interface AvailabilitySetsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type AvailabilitySetsListByResourceGroupResponse =
  AvailabilitySetListResult;

/** Optional parameters. */
export interface AvailabilitySetsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AvailabilitySetsGetResponse = AvailabilitySet;

/** Optional parameters. */
export interface AvailabilitySetsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AvailabilitySetsCreateOrUpdateResponse = AvailabilitySet;

/** Optional parameters. */
export interface AvailabilitySetsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AvailabilitySetsUpdateResponse = AvailabilitySet;

/** Optional parameters. */
export interface AvailabilitySetsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Forces the resource to be deleted. */
  force?: ForceDelete;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type AvailabilitySetsDeleteResponse = AvailabilitySetsDeleteHeaders;

/** Optional parameters. */
export interface AvailabilitySetsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type AvailabilitySetsListBySubscriptionNextResponse =
  AvailabilitySetListResult;

/** Optional parameters. */
export interface AvailabilitySetsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type AvailabilitySetsListByResourceGroupNextResponse =
  AvailabilitySetListResult;

/** Optional parameters. */
export interface CloudsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type CloudsListBySubscriptionResponse = CloudListResult;

/** Optional parameters. */
export interface CloudsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type CloudsListByResourceGroupResponse = CloudListResult;

/** Optional parameters. */
export interface CloudsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CloudsGetResponse = Cloud;

/** Optional parameters. */
export interface CloudsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CloudsCreateOrUpdateResponse = Cloud;

/** Optional parameters. */
export interface CloudsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type CloudsUpdateResponse = Cloud;

/** Optional parameters. */
export interface CloudsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Forces the resource to be deleted. */
  force?: ForceDelete;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type CloudsDeleteResponse = CloudsDeleteHeaders;

/** Optional parameters. */
export interface CloudsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type CloudsListBySubscriptionNextResponse = CloudListResult;

/** Optional parameters. */
export interface CloudsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type CloudsListByResourceGroupNextResponse = CloudListResult;

/** Optional parameters. */
export interface VirtualMachineTemplatesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type VirtualMachineTemplatesListBySubscriptionResponse =
  VirtualMachineTemplateListResult;

/** Optional parameters. */
export interface VirtualMachineTemplatesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VirtualMachineTemplatesListByResourceGroupResponse =
  VirtualMachineTemplateListResult;

/** Optional parameters. */
export interface VirtualMachineTemplatesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualMachineTemplatesGetResponse = VirtualMachineTemplate;

/** Optional parameters. */
export interface VirtualMachineTemplatesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachineTemplatesCreateOrUpdateResponse =
  VirtualMachineTemplate;

/** Optional parameters. */
export interface VirtualMachineTemplatesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualMachineTemplatesUpdateResponse = VirtualMachineTemplate;

/** Optional parameters. */
export interface VirtualMachineTemplatesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Forces the resource to be deleted. */
  force?: ForceDelete;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type VirtualMachineTemplatesDeleteResponse =
  VirtualMachineTemplatesDeleteHeaders;

/** Optional parameters. */
export interface VirtualMachineTemplatesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type VirtualMachineTemplatesListBySubscriptionNextResponse =
  VirtualMachineTemplateListResult;

/** Optional parameters. */
export interface VirtualMachineTemplatesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VirtualMachineTemplatesListByResourceGroupNextResponse =
  VirtualMachineTemplateListResult;

/** Optional parameters. */
export interface VirtualNetworksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type VirtualNetworksListBySubscriptionResponse =
  VirtualNetworkListResult;

/** Optional parameters. */
export interface VirtualNetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VirtualNetworksListByResourceGroupResponse =
  VirtualNetworkListResult;

/** Optional parameters. */
export interface VirtualNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualNetworksGetResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualNetworksUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Forces the resource to be deleted. */
  force?: ForceDelete;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type VirtualNetworksDeleteResponse = VirtualNetworksDeleteHeaders;

/** Optional parameters. */
export interface VirtualNetworksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type VirtualNetworksListBySubscriptionNextResponse =
  VirtualNetworkListResult;

/** Optional parameters. */
export interface VirtualNetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VirtualNetworksListByResourceGroupNextResponse =
  VirtualNetworkListResult;

/** Optional parameters. */
export interface VmmServersListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type VmmServersListBySubscriptionResponse = VmmServerListResult;

/** Optional parameters. */
export interface VmmServersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VmmServersListByResourceGroupResponse = VmmServerListResult;

/** Optional parameters. */
export interface VmmServersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VmmServersGetResponse = VmmServer;

/** Optional parameters. */
export interface VmmServersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VmmServersCreateOrUpdateResponse = VmmServer;

/** Optional parameters. */
export interface VmmServersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VmmServersUpdateResponse = VmmServer;

/** Optional parameters. */
export interface VmmServersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Forces the resource to be deleted. */
  force?: ForceDelete;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type VmmServersDeleteResponse = VmmServersDeleteHeaders;

/** Optional parameters. */
export interface VmmServersListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type VmmServersListBySubscriptionNextResponse = VmmServerListResult;

/** Optional parameters. */
export interface VmmServersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VmmServersListByResourceGroupNextResponse = VmmServerListResult;

/** Optional parameters. */
export interface InventoryItemsListByVmmServerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVmmServer operation. */
export type InventoryItemsListByVmmServerResponse = InventoryItemListResult;

/** Optional parameters. */
export interface InventoryItemsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type InventoryItemsGetResponse = InventoryItem;

/** Optional parameters. */
export interface InventoryItemsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type InventoryItemsCreateResponse = InventoryItem;

/** Optional parameters. */
export interface InventoryItemsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface InventoryItemsListByVmmServerNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVmmServerNext operation. */
export type InventoryItemsListByVmmServerNextResponse = InventoryItemListResult;

/** Optional parameters. */
export interface ScVmmOptionalParams extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
