/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  GroupQuotasEntity,
  GroupQuotasListOptionalParams,
  GroupQuotasCreateOrUpdateOptionalParams,
  GroupQuotasCreateOrUpdateResponse,
  GroupQuotasUpdateOptionalParams,
  GroupQuotasUpdateResponse,
  GroupQuotasGetOptionalParams,
  GroupQuotasGetResponse,
  GroupQuotasDeleteOptionalParams,
  GroupQuotasDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a GroupQuotas. */
export interface GroupQuotas {
  /**
   * Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties
   * only.The details on group quota can be access from the group quota APIs.
   * @param managementGroupId Management Group Id.
   * @param options The options parameters.
   */
  list(
    managementGroupId: string,
    options?: GroupQuotasListOptionalParams,
  ): PagedAsyncIterableIterator<GroupQuotasEntity>;
  /**
   * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The
   * status can be polled periodically. The status Async polling is using standards defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotasCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotasCreateOrUpdateResponse>,
      GroupQuotasCreateOrUpdateResponse
    >
  >;
  /**
   * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The
   * status can be polled periodically. The status Async polling is using standards defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotasCreateOrUpdateOptionalParams,
  ): Promise<GroupQuotasCreateOrUpdateResponse>;
  /**
   * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the
   * Service. The status can be polled periodically. The status Async polling is using standards defined
   * at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   *  Any change in the filters will be applicable to the future quota assignments, existing quota
   * allocated to subscriptions from the GroupQuotas remains unchanged.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  beginUpdate(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotasUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<GroupQuotasUpdateResponse>, GroupQuotasUpdateResponse>
  >;
  /**
   * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the
   * Service. The status can be polled periodically. The status Async polling is using standards defined
   * at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   *  Any change in the filters will be applicable to the future quota assignments, existing quota
   * allocated to subscriptions from the GroupQuotas remains unchanged.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotasUpdateOptionalParams,
  ): Promise<GroupQuotasUpdateResponse>;
  /**
   * Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The
   * details on group quota can be access from the group quota APIs.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  get(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotasGetOptionalParams,
  ): Promise<GroupQuotasGetResponse>;
  /**
   * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be
   * lost.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  beginDelete(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotasDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<GroupQuotasDeleteResponse>, GroupQuotasDeleteResponse>
  >;
  /**
   * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be
   * lost.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotasDeleteOptionalParams,
  ): Promise<GroupQuotasDeleteResponse>;
}
