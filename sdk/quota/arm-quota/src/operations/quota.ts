/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/quotaMappers";
import * as Parameters from "../models/parameters";
import { AzureQuotaExtensionAPIContext } from "../azureQuotaExtensionAPIContext";

/** Class representing a Quota. */
export class Quota {
  private readonly client: AzureQuotaExtensionAPIContext;

  /**
   * Create a Quota.
   * @param {AzureQuotaExtensionAPIContext} client Reference to the service client.
   */
  constructor(client: AzureQuotaExtensionAPIContext) {
    this.client = client;
  }

  /**
   * Get the quota limit of a resource. The response can be used to determine the remaining quota to
   * calculate a new quota limit that can be submitted with a PUT request.
   * @param resourceName Resource name for a given resource provider. For example:
   * - SKU name for Microsoft.Compute
   * - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
   * For Microsoft.Network PublicIPAddresses.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.QuotaGetResponse>
   */
  get(resourceName: string, scope: string, options?: msRest.RequestOptionsBase): Promise<Models.QuotaGetResponse>;
  /**
   * @param resourceName Resource name for a given resource provider. For example:
   * - SKU name for Microsoft.Compute
   * - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
   * For Microsoft.Network PublicIPAddresses.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param callback The callback
   */
  get(resourceName: string, scope: string, callback: msRest.ServiceCallback<Models.CurrentQuotaLimitBase>): void;
  /**
   * @param resourceName Resource name for a given resource provider. For example:
   * - SKU name for Microsoft.Compute
   * - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
   * For Microsoft.Network PublicIPAddresses.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceName: string, scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CurrentQuotaLimitBase>): void;
  get(resourceName: string, scope: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CurrentQuotaLimitBase>, callback?: msRest.ServiceCallback<Models.CurrentQuotaLimitBase>): Promise<Models.QuotaGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceName,
        scope,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.QuotaGetResponse>;
  }

  /**
   * Create or update the quota limit for the specified resource with the requested value. To update
   * the quota, follow these steps:
   * 1. Use the GET operation for quotas and usages to determine how much quota remains for the
   * specific resource and to calculate the new quota limit. These steps are detailed in [this
   * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
   * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for
   * the detailed status of the request.
   * @param resourceName Resource name for a given resource provider. For example:
   * - SKU name for Microsoft.Compute
   * - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
   * For Microsoft.Network PublicIPAddresses.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param createQuotaRequest Quota request payload.
   * @param [options] The optional parameters
   * @returns Promise<Models.QuotaCreateOrUpdateResponse>
   */
  createOrUpdate(resourceName: string, scope: string, createQuotaRequest: Models.CurrentQuotaLimitBase, options?: msRest.RequestOptionsBase): Promise<Models.QuotaCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceName,scope,createQuotaRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.QuotaCreateOrUpdateResponse>;
  }

  /**
   * Update the quota limit for a specific resource to the specified value:
   * 1. Use the Usages-GET and Quota-GET operations to determine the remaining quota for the specific
   * resource and to calculate the new quota limit. These steps are detailed in [this
   * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
   * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for
   * the detailed status of the request.
   * @param resourceName Resource name for a given resource provider. For example:
   * - SKU name for Microsoft.Compute
   * - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
   * For Microsoft.Network PublicIPAddresses.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param createQuotaRequest Quota requests payload.
   * @param [options] The optional parameters
   * @returns Promise<Models.QuotaUpdateResponse>
   */
  update(resourceName: string, scope: string, createQuotaRequest: Models.CurrentQuotaLimitBase, options?: msRest.RequestOptionsBase): Promise<Models.QuotaUpdateResponse> {
    return this.beginUpdate(resourceName,scope,createQuotaRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.QuotaUpdateResponse>;
  }

  /**
   * Get a list of current quota limits of all resources for the specified scope. The response from
   * this GET operation can be leveraged to submit requests to update a quota.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.QuotaListResponse>
   */
  list(scope: string, options?: msRest.RequestOptionsBase): Promise<Models.QuotaListResponse>;
  /**
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param callback The callback
   */
  list(scope: string, callback: msRest.ServiceCallback<Models.QuotaLimits>): void;
  /**
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QuotaLimits>): void;
  list(scope: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QuotaLimits>, callback?: msRest.ServiceCallback<Models.QuotaLimits>): Promise<Models.QuotaListResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.QuotaListResponse>;
  }

  /**
   * Create or update the quota limit for the specified resource with the requested value. To update
   * the quota, follow these steps:
   * 1. Use the GET operation for quotas and usages to determine how much quota remains for the
   * specific resource and to calculate the new quota limit. These steps are detailed in [this
   * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
   * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for
   * the detailed status of the request.
   * @param resourceName Resource name for a given resource provider. For example:
   * - SKU name for Microsoft.Compute
   * - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
   * For Microsoft.Network PublicIPAddresses.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param createQuotaRequest Quota request payload.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceName: string, scope: string, createQuotaRequest: Models.CurrentQuotaLimitBase, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceName,
        scope,
        createQuotaRequest,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Update the quota limit for a specific resource to the specified value:
   * 1. Use the Usages-GET and Quota-GET operations to determine the remaining quota for the specific
   * resource and to calculate the new quota limit. These steps are detailed in [this
   * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
   * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for
   * the detailed status of the request.
   * @param resourceName Resource name for a given resource provider. For example:
   * - SKU name for Microsoft.Compute
   * - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
   * For Microsoft.Network PublicIPAddresses.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param createQuotaRequest Quota requests payload.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceName: string, scope: string, createQuotaRequest: Models.CurrentQuotaLimitBase, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceName,
        scope,
        createQuotaRequest,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Get a list of current quota limits of all resources for the specified scope. The response from
   * this GET operation can be leveraged to submit requests to update a quota.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.QuotaListResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.QuotaListResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.QuotaLimits>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QuotaLimits>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QuotaLimits>, callback?: msRest.ServiceCallback<Models.QuotaLimits>): Promise<Models.QuotaListResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.QuotaListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Quota/quotas/{resourceName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CurrentQuotaLimitBase,
      headersMapper: Mappers.QuotaGetHeaders
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse,
      headersMapper: Mappers.QuotaGetHeaders
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Quota/quotas",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QuotaLimits,
      headersMapper: Mappers.QuotaListHeaders
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse,
      headersMapper: Mappers.QuotaListHeaders
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.Quota/quotas/{resourceName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createQuotaRequest",
    mapper: {
      ...Mappers.CurrentQuotaLimitBase,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CurrentQuotaLimitBase
    },
    202: {},
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{scope}/providers/Microsoft.Quota/quotas/{resourceName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createQuotaRequest",
    mapper: {
      ...Mappers.CurrentQuotaLimitBase,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CurrentQuotaLimitBase
    },
    202: {},
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QuotaLimits,
      headersMapper: Mappers.QuotaListHeaders
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse,
      headersMapper: Mappers.QuotaListHeaders
    }
  },
  serializer
};
