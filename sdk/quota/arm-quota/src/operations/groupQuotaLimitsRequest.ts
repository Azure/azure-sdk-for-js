/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { GroupQuotaLimitsRequest } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureQuotaExtensionAPI } from "../azureQuotaExtensionAPI";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SubmittedResourceRequestStatus,
  GroupQuotaLimitsRequestListNextOptionalParams,
  GroupQuotaLimitsRequestListOptionalParams,
  GroupQuotaLimitsRequestListResponse,
  GroupQuotaLimitsRequestCreateOrUpdateOptionalParams,
  GroupQuotaLimitsRequestCreateOrUpdateResponse,
  GroupQuotaLimitsRequestUpdateOptionalParams,
  GroupQuotaLimitsRequestUpdateResponse,
  GroupQuotaLimitsRequestGetOptionalParams,
  GroupQuotaLimitsRequestGetResponse,
  GroupQuotaLimitsRequestListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GroupQuotaLimitsRequest operations. */
export class GroupQuotaLimitsRequestImpl implements GroupQuotaLimitsRequest {
  private readonly client: AzureQuotaExtensionAPI;

  /**
   * Initialize a new instance of the class GroupQuotaLimitsRequest class.
   * @param client Reference to the service client
   */
  constructor(client: AzureQuotaExtensionAPI) {
    this.client = client;
  }

  /**
   * Get API to check the status of a GroupQuota request by requestId.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param filter | Field | Supported operators
   *               |---------------------|------------------------
   *
   *                location eq {location} and resource eq {resourceName}
   *                Example: $filter=location eq eastus and resourceName eq cores
   * @param options The options parameters.
   */
  public list(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    filter: string,
    options?: GroupQuotaLimitsRequestListOptionalParams,
  ): PagedAsyncIterableIterator<SubmittedResourceRequestStatus> {
    const iter = this.listPagingAll(
      managementGroupId,
      groupQuotaName,
      resourceProviderName,
      filter,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          managementGroupId,
          groupQuotaName,
          resourceProviderName,
          filter,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    filter: string,
    options?: GroupQuotaLimitsRequestListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SubmittedResourceRequestStatus[]> {
    let result: GroupQuotaLimitsRequestListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        filter,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    filter: string,
    options?: GroupQuotaLimitsRequestListOptionalParams,
  ): AsyncIterableIterator<SubmittedResourceRequestStatus> {
    for await (const page of this.listPagingPage(
      managementGroupId,
      groupQuotaName,
      resourceProviderName,
      filter,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and
   * resourceName ("name": {"value" : "resourceName") properties are specified in the request body. Only
   * 1 resource quota can be requested.
   * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with
   * retry-after duration in seconds to check the intermediate status. This API provides the finals
   * status with the request details and status.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    resourceName: string,
    options?: GroupQuotaLimitsRequestCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaLimitsRequestCreateOrUpdateResponse>,
      GroupQuotaLimitsRequestCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GroupQuotaLimitsRequestCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        resourceName,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      GroupQuotaLimitsRequestCreateOrUpdateResponse,
      OperationState<GroupQuotaLimitsRequestCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and
   * resourceName ("name": {"value" : "resourceName") properties are specified in the request body. Only
   * 1 resource quota can be requested.
   * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with
   * retry-after duration in seconds to check the intermediate status. This API provides the finals
   * status with the request details and status.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    resourceName: string,
    options?: GroupQuotaLimitsRequestCreateOrUpdateOptionalParams,
  ): Promise<GroupQuotaLimitsRequestCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      managementGroupId,
      groupQuotaName,
      resourceProviderName,
      resourceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and
   * resourceName properties are specified in the request body. Only 1 resource quota can be requested.
   * Please note that patch request creates a new groupQuota request.
   * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with
   * retry-after duration in seconds to check the intermediate status. This API provides the finals
   * status with the request details and status.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  async beginUpdate(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    resourceName: string,
    options?: GroupQuotaLimitsRequestUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaLimitsRequestUpdateResponse>,
      GroupQuotaLimitsRequestUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GroupQuotaLimitsRequestUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        resourceName,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      GroupQuotaLimitsRequestUpdateResponse,
      OperationState<GroupQuotaLimitsRequestUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and
   * resourceName properties are specified in the request body. Only 1 resource quota can be requested.
   * Please note that patch request creates a new groupQuota request.
   * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with
   * retry-after duration in seconds to check the intermediate status. This API provides the finals
   * status with the request details and status.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    resourceName: string,
    options?: GroupQuotaLimitsRequestUpdateOptionalParams,
  ): Promise<GroupQuotaLimitsRequestUpdateResponse> {
    const poller = await this.beginUpdate(
      managementGroupId,
      groupQuotaName,
      resourceProviderName,
      resourceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Get API to check the status of a GroupQuota request by requestId.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param requestId Request Id.
   * @param options The options parameters.
   */
  get(
    managementGroupId: string,
    groupQuotaName: string,
    requestId: string,
    options?: GroupQuotaLimitsRequestGetOptionalParams,
  ): Promise<GroupQuotaLimitsRequestGetResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, groupQuotaName, requestId, options },
      getOperationSpec,
    );
  }

  /**
   * Get API to check the status of a GroupQuota request by requestId.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param filter | Field | Supported operators
   *               |---------------------|------------------------
   *
   *                location eq {location} and resource eq {resourceName}
   *                Example: $filter=location eq eastus and resourceName eq cores
   * @param options The options parameters.
   */
  private _list(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    filter: string,
    options?: GroupQuotaLimitsRequestListOptionalParams,
  ): Promise<GroupQuotaLimitsRequestListResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        filter,
        options,
      },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    nextLink: string,
    options?: GroupQuotaLimitsRequestListNextOptionalParams,
  ): Promise<GroupQuotaLimitsRequestListNextResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        nextLink,
        options,
      },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaRequests/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SubmittedResourceRequestStatus,
    },
    201: {
      bodyMapper: Mappers.SubmittedResourceRequestStatus,
    },
    202: {
      bodyMapper: Mappers.SubmittedResourceRequestStatus,
    },
    204: {
      bodyMapper: Mappers.SubmittedResourceRequestStatus,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.groupQuotaRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.resourceProviderName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaRequests/{resourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SubmittedResourceRequestStatus,
    },
    201: {
      bodyMapper: Mappers.SubmittedResourceRequestStatus,
    },
    202: {
      bodyMapper: Mappers.SubmittedResourceRequestStatus,
    },
    204: {
      bodyMapper: Mappers.SubmittedResourceRequestStatus,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.groupQuotaRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.resourceProviderName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests/{requestId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubmittedResourceRequestStatus,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.requestId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaRequests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubmittedResourceRequestStatusList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.resourceProviderName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubmittedResourceRequestStatusList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.nextLink,
    Parameters.resourceProviderName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
