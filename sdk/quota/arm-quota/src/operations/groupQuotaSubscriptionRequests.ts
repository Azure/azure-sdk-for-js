/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { GroupQuotaSubscriptionRequests } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureQuotaExtensionAPI } from "../azureQuotaExtensionAPI";
import {
  GroupQuotaSubscriptionRequestStatus,
  GroupQuotaSubscriptionRequestsListNextOptionalParams,
  GroupQuotaSubscriptionRequestsListOptionalParams,
  GroupQuotaSubscriptionRequestsListResponse,
  GroupQuotaSubscriptionRequestsGetOptionalParams,
  GroupQuotaSubscriptionRequestsGetResponse,
  GroupQuotaSubscriptionRequestsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GroupQuotaSubscriptionRequests operations. */
export class GroupQuotaSubscriptionRequestsImpl
  implements GroupQuotaSubscriptionRequests
{
  private readonly client: AzureQuotaExtensionAPI;

  /**
   * Initialize a new instance of the class GroupQuotaSubscriptionRequests class.
   * @param client Reference to the service client
   */
  constructor(client: AzureQuotaExtensionAPI) {
    this.client = client;
  }

  /**
   * List API to check the status of a subscriptionId requests by requestId. Request history is
   * maintained for 1 year.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  public list(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionRequestsListOptionalParams,
  ): PagedAsyncIterableIterator<GroupQuotaSubscriptionRequestStatus> {
    const iter = this.listPagingAll(managementGroupId, groupQuotaName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          managementGroupId,
          groupQuotaName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionRequestsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GroupQuotaSubscriptionRequestStatus[]> {
    let result: GroupQuotaSubscriptionRequestsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(managementGroupId, groupQuotaName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        managementGroupId,
        groupQuotaName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionRequestsListOptionalParams,
  ): AsyncIterableIterator<GroupQuotaSubscriptionRequestStatus> {
    for await (const page of this.listPagingPage(
      managementGroupId,
      groupQuotaName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List API to check the status of a subscriptionId requests by requestId. Request history is
   * maintained for 1 year.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  private _list(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionRequestsListOptionalParams,
  ): Promise<GroupQuotaSubscriptionRequestsListResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, groupQuotaName, options },
      listOperationSpec,
    );
  }

  /**
   * Get API to check the status of a subscriptionIds request by requestId.  Use the polling API -
   * OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after duration in
   * seconds to check the intermediate status. This API provides the finals status with the request
   * details and status.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param requestId Request Id.
   * @param options The options parameters.
   */
  get(
    managementGroupId: string,
    groupQuotaName: string,
    requestId: string,
    options?: GroupQuotaSubscriptionRequestsGetOptionalParams,
  ): Promise<GroupQuotaSubscriptionRequestsGetResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, groupQuotaName, requestId, options },
      getOperationSpec,
    );
  }

  /**
   * ListNext
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    managementGroupId: string,
    groupQuotaName: string,
    nextLink: string,
    options?: GroupQuotaSubscriptionRequestsListNextOptionalParams,
  ): Promise<GroupQuotaSubscriptionRequestsListNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, groupQuotaName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionRequestStatusList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests/{requestId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionRequestStatus,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.requestId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionRequestStatusList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
