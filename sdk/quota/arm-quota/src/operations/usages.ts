/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/usagesMappers";
import * as Parameters from "../models/parameters";
import { AzureQuotaExtensionAPIContext } from "../azureQuotaExtensionAPIContext";

/** Class representing a Usages. */
export class Usages {
  private readonly client: AzureQuotaExtensionAPIContext;

  /**
   * Create a Usages.
   * @param {AzureQuotaExtensionAPIContext} client Reference to the service client.
   */
  constructor(client: AzureQuotaExtensionAPIContext) {
    this.client = client;
  }

  /**
   * Get the current usage of a resource.
   * @param resourceName Resource name for a given resource provider. For example:
   * - SKU name for Microsoft.Compute
   * - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
   * For Microsoft.Network PublicIPAddresses.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.UsagesGetResponse>
   */
  get(resourceName: string, scope: string, options?: msRest.RequestOptionsBase): Promise<Models.UsagesGetResponse>;
  /**
   * @param resourceName Resource name for a given resource provider. For example:
   * - SKU name for Microsoft.Compute
   * - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
   * For Microsoft.Network PublicIPAddresses.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param callback The callback
   */
  get(resourceName: string, scope: string, callback: msRest.ServiceCallback<Models.CurrentUsagesBase>): void;
  /**
   * @param resourceName Resource name for a given resource provider. For example:
   * - SKU name for Microsoft.Compute
   * - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
   * For Microsoft.Network PublicIPAddresses.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceName: string, scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CurrentUsagesBase>): void;
  get(resourceName: string, scope: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CurrentUsagesBase>, callback?: msRest.ServiceCallback<Models.CurrentUsagesBase>): Promise<Models.UsagesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceName,
        scope,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.UsagesGetResponse>;
  }

  /**
   * Get a list of current usage for all resources for the scope specified.
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.UsagesListResponse>
   */
  list(scope: string, options?: msRest.RequestOptionsBase): Promise<Models.UsagesListResponse>;
  /**
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param callback The callback
   */
  list(scope: string, callback: msRest.ServiceCallback<Models.UsagesLimits>): void;
  /**
   * @param scope The target Azure resource URI. For example,
   * `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
   * This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
   * after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
   * resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsagesLimits>): void;
  list(scope: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UsagesLimits>, callback?: msRest.ServiceCallback<Models.UsagesLimits>): Promise<Models.UsagesListResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.UsagesListResponse>;
  }

  /**
   * Get a list of current usage for all resources for the scope specified.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.UsagesListResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.UsagesListResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.UsagesLimits>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsagesLimits>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UsagesLimits>, callback?: msRest.ServiceCallback<Models.UsagesLimits>): Promise<Models.UsagesListResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.UsagesListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Quota/usages/{resourceName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CurrentUsagesBase,
      headersMapper: Mappers.UsagesGetHeaders
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse,
      headersMapper: Mappers.UsagesGetHeaders
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Quota/usages",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsagesLimits,
      headersMapper: Mappers.UsagesListHeaders
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse,
      headersMapper: Mappers.UsagesListHeaders
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsagesLimits,
      headersMapper: Mappers.UsagesListHeaders
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse,
      headersMapper: Mappers.UsagesListHeaders
    }
  },
  serializer
};
