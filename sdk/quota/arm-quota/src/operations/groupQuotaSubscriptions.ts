/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { GroupQuotaSubscriptions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureQuotaExtensionAPI } from "../azureQuotaExtensionAPI";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  GroupQuotaSubscriptionId,
  GroupQuotaSubscriptionsListNextOptionalParams,
  GroupQuotaSubscriptionsListOptionalParams,
  GroupQuotaSubscriptionsListResponse,
  GroupQuotaSubscriptionsCreateOrUpdateOptionalParams,
  GroupQuotaSubscriptionsCreateOrUpdateResponse,
  GroupQuotaSubscriptionsUpdateOptionalParams,
  GroupQuotaSubscriptionsUpdateResponse,
  GroupQuotaSubscriptionsDeleteOptionalParams,
  GroupQuotaSubscriptionsDeleteResponse,
  GroupQuotaSubscriptionsGetOptionalParams,
  GroupQuotaSubscriptionsGetResponse,
  GroupQuotaSubscriptionsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GroupQuotaSubscriptions operations. */
export class GroupQuotaSubscriptionsImpl implements GroupQuotaSubscriptions {
  private readonly client: AzureQuotaExtensionAPI;

  /**
   * Initialize a new instance of the class GroupQuotaSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: AzureQuotaExtensionAPI) {
    this.client = client;
  }

  /**
   * Returns a list of the subscriptionIds associated with the GroupQuotas.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  public list(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsListOptionalParams,
  ): PagedAsyncIterableIterator<GroupQuotaSubscriptionId> {
    const iter = this.listPagingAll(managementGroupId, groupQuotaName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          managementGroupId,
          groupQuotaName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GroupQuotaSubscriptionId[]> {
    let result: GroupQuotaSubscriptionsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(managementGroupId, groupQuotaName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        managementGroupId,
        groupQuotaName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsListOptionalParams,
  ): AsyncIterableIterator<GroupQuotaSubscriptionId> {
    for await (const page of this.listPagingPage(
      managementGroupId,
      groupQuotaName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the
   * additionalAttributes defined in the GroupQuota. The additionalAttributes works as filter for the
   * subscriptions, which can be included in the GroupQuotas. The request's TenantId is validated against
   * the subscription's TenantId.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaSubscriptionsCreateOrUpdateResponse>,
      GroupQuotaSubscriptionsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GroupQuotaSubscriptionsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { managementGroupId, groupQuotaName, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      GroupQuotaSubscriptionsCreateOrUpdateResponse,
      OperationState<GroupQuotaSubscriptionsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the
   * additionalAttributes defined in the GroupQuota. The additionalAttributes works as filter for the
   * subscriptions, which can be included in the GroupQuotas. The request's TenantId is validated against
   * the subscription's TenantId.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsCreateOrUpdateOptionalParams,
  ): Promise<GroupQuotaSubscriptionsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      managementGroupId,
      groupQuotaName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions
   * will be validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is
   * validated against the subscription's TenantId.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  async beginUpdate(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaSubscriptionsUpdateResponse>,
      GroupQuotaSubscriptionsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GroupQuotaSubscriptionsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { managementGroupId, groupQuotaName, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      GroupQuotaSubscriptionsUpdateResponse,
      OperationState<GroupQuotaSubscriptionsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions
   * will be validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is
   * validated against the subscription's TenantId.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsUpdateOptionalParams,
  ): Promise<GroupQuotaSubscriptionsUpdateResponse> {
    const poller = await this.beginUpdate(
      managementGroupId,
      groupQuotaName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Removes the subscription from GroupQuotas. The request's TenantId is validated against the
   * subscription's TenantId.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  async beginDelete(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaSubscriptionsDeleteResponse>,
      GroupQuotaSubscriptionsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GroupQuotaSubscriptionsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { managementGroupId, groupQuotaName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      GroupQuotaSubscriptionsDeleteResponse,
      OperationState<GroupQuotaSubscriptionsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Removes the subscription from GroupQuotas. The request's TenantId is validated against the
   * subscription's TenantId.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsDeleteOptionalParams,
  ): Promise<GroupQuotaSubscriptionsDeleteResponse> {
    const poller = await this.beginDelete(
      managementGroupId,
      groupQuotaName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns the subscriptionIds along with its provisioning state for being associated with the
   * GroupQuota. If the subscription is not a member of GroupQuota, it will return 404, else 200.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  get(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsGetOptionalParams,
  ): Promise<GroupQuotaSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, groupQuotaName, options },
      getOperationSpec,
    );
  }

  /**
   * Returns a list of the subscriptionIds associated with the GroupQuotas.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  private _list(
    managementGroupId: string,
    groupQuotaName: string,
    options?: GroupQuotaSubscriptionsListOptionalParams,
  ): Promise<GroupQuotaSubscriptionsListResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, groupQuotaName, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    managementGroupId: string,
    groupQuotaName: string,
    nextLink: string,
    options?: GroupQuotaSubscriptionsListNextOptionalParams,
  ): Promise<GroupQuotaSubscriptionsListNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, groupQuotaName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionId,
    },
    201: {
      bodyMapper: Mappers.GroupQuotaSubscriptionId,
    },
    202: {
      bodyMapper: Mappers.GroupQuotaSubscriptionId,
    },
    204: {
      bodyMapper: Mappers.GroupQuotaSubscriptionId,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionId,
    },
    201: {
      bodyMapper: Mappers.GroupQuotaSubscriptionId,
    },
    202: {
      bodyMapper: Mappers.GroupQuotaSubscriptionId,
    },
    204: {
      bodyMapper: Mappers.GroupQuotaSubscriptionId,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.GroupQuotaSubscriptionsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.GroupQuotaSubscriptionsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.GroupQuotaSubscriptionsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.GroupQuotaSubscriptionsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionId,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionIdList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionIdList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
