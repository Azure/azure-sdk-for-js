/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { GroupQuotaUsages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureQuotaExtensionAPI } from "../azureQuotaExtensionAPI";
import {
  ResourceUsages,
  GroupQuotaUsagesListNextOptionalParams,
  GroupQuotaUsagesListOptionalParams,
  GroupQuotaUsagesListResponse,
  GroupQuotaUsagesListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GroupQuotaUsages operations. */
export class GroupQuotaUsagesImpl implements GroupQuotaUsages {
  private readonly client: AzureQuotaExtensionAPI;

  /**
   * Initialize a new instance of the class GroupQuotaUsages class.
   * @param client Reference to the service client
   */
  constructor(client: AzureQuotaExtensionAPI) {
    this.client = client;
  }

  /**
   * Gets the GroupQuotas usages and limits(quota). Location is required paramter.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  public list(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    location: string,
    options?: GroupQuotaUsagesListOptionalParams,
  ): PagedAsyncIterableIterator<ResourceUsages> {
    const iter = this.listPagingAll(
      managementGroupId,
      groupQuotaName,
      resourceProviderName,
      location,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          managementGroupId,
          groupQuotaName,
          resourceProviderName,
          location,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    location: string,
    options?: GroupQuotaUsagesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ResourceUsages[]> {
    let result: GroupQuotaUsagesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        location,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        location,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    location: string,
    options?: GroupQuotaUsagesListOptionalParams,
  ): AsyncIterableIterator<ResourceUsages> {
    for await (const page of this.listPagingPage(
      managementGroupId,
      groupQuotaName,
      resourceProviderName,
      location,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the GroupQuotas usages and limits(quota). Location is required paramter.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  private _list(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    location: string,
    options?: GroupQuotaUsagesListOptionalParams,
  ): Promise<GroupQuotaUsagesListResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        location,
        options,
      },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param location The name of the Azure region.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    location: string,
    nextLink: string,
    options?: GroupQuotaUsagesListNextOptionalParams,
  ): Promise<GroupQuotaUsagesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        location,
        nextLink,
        options,
      },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/locationUsages/{location}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceUsageList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.resourceProviderName,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceUsageList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.nextLink,
    Parameters.resourceProviderName,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
