/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { GroupQuotaSubscriptionAllocation } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureQuotaExtensionAPI } from "../azureQuotaExtensionAPI.js";
import {
  GroupQuotaSubscriptionAllocationListOptionalParams,
  GroupQuotaSubscriptionAllocationListResponse,
} from "../models/index.js";

/** Class containing GroupQuotaSubscriptionAllocation operations. */
export class GroupQuotaSubscriptionAllocationImpl
  implements GroupQuotaSubscriptionAllocation
{
  private readonly client: AzureQuotaExtensionAPI;

  /**
   * Initialize a new instance of the class GroupQuotaSubscriptionAllocation class.
   * @param client Reference to the service client
   */
  constructor(client: AzureQuotaExtensionAPI) {
    this.client = client;
  }

  /**
   * Gets all the quota allocated to a subscription for the specified resource provider and location for
   * resource names passed in $filter=resourceName eq {SKU}. This will include the GroupQuota and total
   * quota allocated to the subscription. Only the Group quota allocated to the subscription can be
   * allocated back to the MG Group Quota.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
   *                             Microsoft.Compute resource provider supports this API.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  list(
    managementGroupId: string,
    groupQuotaName: string,
    resourceProviderName: string,
    location: string,
    options?: GroupQuotaSubscriptionAllocationListOptionalParams,
  ): Promise<GroupQuotaSubscriptionAllocationListResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        groupQuotaName,
        resourceProviderName,
        location,
        options,
      },
      listOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocations/{location}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionQuotaAllocationsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.groupQuotaName,
    Parameters.subscriptionId,
    Parameters.resourceProviderName,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
