/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const CurrentUsagesBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CurrentUsagesBase",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UsagesProperties"
        }
      }
    }
  }
};

export const UsagesProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsagesProperties",
    modelProperties: {
      usages: {
        serializedName: "usages",
        type: {
          name: "Composite",
          className: "UsagesObject"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "ResourceName"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      quotaPeriod: {
        serializedName: "quotaPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isQuotaApplicable: {
        serializedName: "isQuotaApplicable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const UsagesObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsagesObject",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      },
      usagesType: {
        serializedName: "usagesType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceName",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExceptionResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ServiceError"
        }
      }
    }
  }
};

export const ServiceError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceErrorDetail"
            }
          }
        }
      }
    }
  }
};

export const ServiceErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsagesLimits: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsagesLimits",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CurrentUsagesBase"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CurrentQuotaLimitBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CurrentQuotaLimitBase",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "QuotaProperties"
        }
      }
    }
  }
};

export const QuotaProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaProperties",
    modelProperties: {
      limit: {
        serializedName: "limit",
        type: {
          name: "Composite",
          className: "LimitJsonObject"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "ResourceName"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      quotaPeriod: {
        serializedName: "quotaPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isQuotaApplicable: {
        serializedName: "isQuotaApplicable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const LimitJsonObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LimitJsonObject",
    uberParent: "LimitJsonObject",
    polymorphicDiscriminator: {
      serializedName: "limitObjectType",
      clientName: "limitObjectType"
    },
    modelProperties: {
      limitObjectType: {
        serializedName: "limitObjectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaLimits: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaLimits",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CurrentQuotaLimitBase"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaRequestDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaRequestDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "properties.message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "Composite",
          className: "ServiceErrorDetail"
        }
      },
      requestSubmitTime: {
        serializedName: "properties.requestSubmitTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "properties.value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubRequest"
            }
          }
        }
      }
    }
  }
};

export const QuotaRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaRequestProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ServiceErrorDetail"
        }
      },
      requestSubmitTime: {
        serializedName: "requestSubmitTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubRequest"
            }
          }
        }
      }
    }
  }
};

export const SubRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "ResourceName"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subRequestId: {
        serializedName: "subRequestId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Composite",
          className: "LimitJsonObject"
        }
      }
    }
  }
};

export const QuotaRequestDetailsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaRequestDetailsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QuotaRequestDetails"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationResponse"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResponse",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommonResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommonResourceProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaLimitsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaLimitsResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CurrentQuotaLimitBase"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateGenericQuotaRequestParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateGenericQuotaRequestParameters",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CurrentQuotaLimitBase"
            }
          }
        }
      }
    }
  }
};

export const QuotaRequestOneResourceSubmitResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaRequestOneResourceSubmitResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "properties.message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requestSubmitTime: {
        serializedName: "properties.requestSubmitTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      limit: {
        serializedName: "properties.limit",
        type: {
          name: "Composite",
          className: "LimitObject"
        }
      },
      currentValue: {
        serializedName: "properties.currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      },
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "Composite",
          className: "ResourceName"
        }
      },
      resourceType: {
        serializedName: "properties.resourceType",
        type: {
          name: "String"
        }
      },
      quotaPeriod: {
        serializedName: "properties.quotaPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isQuotaApplicable: {
        serializedName: "properties.isQuotaApplicable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "Composite",
          className: "ServiceErrorDetail"
        }
      },
      properties: {
        serializedName: "properties.properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const QuotaRequestSubmitResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaRequestSubmitResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "QuotaRequestProperties"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaRequestSubmitResponse202: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaRequestSubmitResponse202",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "properties.message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "properties.limit",
        type: {
          name: "Composite",
          className: "LimitObject"
        }
      },
      unit: {
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      },
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "Composite",
          className: "ResourceName"
        }
      },
      resourceType: {
        serializedName: "properties.resourceType",
        type: {
          name: "String"
        }
      },
      quotaPeriod: {
        serializedName: "properties.quotaPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties.properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const LimitObject: coreClient.CompositeMapper = {
  serializedName: "LimitValue",
  type: {
    name: "Composite",
    className: "LimitObject",
    uberParent: "LimitJsonObject",
    polymorphicDiscriminator: LimitJsonObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...LimitJsonObject.type.modelProperties,
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      },
      limitType: {
        serializedName: "limitType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsagesGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsagesGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsagesListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsagesListHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsagesListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsagesListNextHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaListHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaListNextHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  LimitJsonObject: LimitJsonObject,
  "LimitJsonObject.LimitValue": LimitObject
};
