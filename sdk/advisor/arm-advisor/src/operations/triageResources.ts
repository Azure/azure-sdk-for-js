/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { TriageResources } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AdvisorManagementClient } from "../advisorManagementClient.js";
import {
  TriageResource,
  TriageResourcesListNextOptionalParams,
  TriageResourcesListOptionalParams,
  TriageResourcesListResponse,
  TriageResourcesGetOptionalParams,
  TriageResourcesGetResponse,
  TriageResourcesListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing TriageResources operations. */
export class TriageResourcesImpl implements TriageResources {
  private readonly client: AdvisorManagementClient;

  /**
   * Initialize a new instance of the class TriageResources class.
   * @param client Reference to the service client
   */
  constructor(client: AdvisorManagementClient) {
    this.client = client;
  }

  /**
   * List all triage resources that belong to a review and recommendation.
   * @param reviewId Existing review id. This is a GUID-formatted string (e.g.
   *                 00000000-0000-0000-0000-000000000000).
   * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
   *                         00000000-0000-0000-0000-000000000000).
   * @param options The options parameters.
   */
  public list(
    reviewId: string,
    recommendationId: string,
    options?: TriageResourcesListOptionalParams,
  ): PagedAsyncIterableIterator<TriageResource> {
    const iter = this.listPagingAll(reviewId, recommendationId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(reviewId, recommendationId, options, settings);
      },
    };
  }

  private async *listPagingPage(
    reviewId: string,
    recommendationId: string,
    options?: TriageResourcesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<TriageResource[]> {
    let result: TriageResourcesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(reviewId, recommendationId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(reviewId, recommendationId, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    reviewId: string,
    recommendationId: string,
    options?: TriageResourcesListOptionalParams,
  ): AsyncIterableIterator<TriageResource> {
    for await (const page of this.listPagingPage(reviewId, recommendationId, options)) {
      yield* page;
    }
  }

  /**
   * Get a triage resource for a given review and recommendation.
   * @param reviewId Existing review id. This is a GUID-formatted string (e.g.
   *                 00000000-0000-0000-0000-000000000000).
   * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
   *                         00000000-0000-0000-0000-000000000000).
   * @param recommendationResourceId Existing recommendation triage resource associated with a triage
   *                                 recommendation. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
   * @param options The options parameters.
   */
  get(
    reviewId: string,
    recommendationId: string,
    recommendationResourceId: string,
    options?: TriageResourcesGetOptionalParams,
  ): Promise<TriageResourcesGetResponse> {
    return this.client.sendOperationRequest(
      { reviewId, recommendationId, recommendationResourceId, options },
      getOperationSpec,
    );
  }

  /**
   * List all triage resources that belong to a review and recommendation.
   * @param reviewId Existing review id. This is a GUID-formatted string (e.g.
   *                 00000000-0000-0000-0000-000000000000).
   * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
   *                         00000000-0000-0000-0000-000000000000).
   * @param options The options parameters.
   */
  private _list(
    reviewId: string,
    recommendationId: string,
    options?: TriageResourcesListOptionalParams,
  ): Promise<TriageResourcesListResponse> {
    return this.client.sendOperationRequest(
      { reviewId, recommendationId, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param reviewId Existing review id. This is a GUID-formatted string (e.g.
   *                 00000000-0000-0000-0000-000000000000).
   * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
   *                         00000000-0000-0000-0000-000000000000).
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    reviewId: string,
    recommendationId: string,
    nextLink: string,
    options?: TriageResourcesListNextOptionalParams,
  ): Promise<TriageResourcesListNextResponse> {
    return this.client.sendOperationRequest(
      { reviewId, recommendationId, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/providers/Microsoft.Advisor/triageResources/{recommendationResourceId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriageResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.recommendationId,
    Parameters.reviewId,
    Parameters.recommendationResourceId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/providers/Microsoft.Advisor/triageResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriageResourceCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.recommendationId,
    Parameters.reviewId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriageResourceCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.recommendationId,
    Parameters.reviewId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
