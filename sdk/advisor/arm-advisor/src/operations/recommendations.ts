/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import type { Recommendations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import type { AdvisorManagementClient } from "../advisorManagementClient.js";
import type {
  ResourceRecommendationBase,
  RecommendationsListByTenantNextOptionalParams,
  RecommendationsListByTenantOptionalParams,
  RecommendationsListByTenantResponse,
  RecommendationsListNextOptionalParams,
  RecommendationsListOptionalParams,
  RecommendationsListResponse,
  RecommendationsGetOptionalParams,
  RecommendationsGetResponse,
  TrackedRecommendationPropertiesPayload,
  RecommendationsPatchOptionalParams,
  RecommendationsPatchResponse,
  RecommendationsGenerateOptionalParams,
  RecommendationsGenerateResponse,
  RecommendationsGetGenerateStatusOptionalParams,
  RecommendationsGetGenerateStatusResponse,
  RecommendationsListByTenantNextResponse,
  RecommendationsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Recommendations operations. */
export class RecommendationsImpl implements Recommendations {
  private readonly client: AdvisorManagementClient;

  /**
   * Initialize a new instance of the class Recommendations class.
   * @param client Reference to the service client
   */
  constructor(client: AdvisorManagementClient) {
    this.client = client;
  }

  /**
   * Obtains cached recommendations for a subscription. The recommendations are generated or computed by
   * invoking generateRecommendations.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  public listByTenant(
    resourceUri: string,
    options?: RecommendationsListByTenantOptionalParams,
  ): PagedAsyncIterableIterator<ResourceRecommendationBase> {
    const iter = this.listByTenantPagingAll(resourceUri, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTenantPagingPage(resourceUri, options, settings);
      },
    };
  }

  private async *listByTenantPagingPage(
    resourceUri: string,
    options?: RecommendationsListByTenantOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ResourceRecommendationBase[]> {
    let result: RecommendationsListByTenantResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTenant(resourceUri, options);
      const page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTenantNext(
        resourceUri,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      const page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTenantPagingAll(
    resourceUri: string,
    options?: RecommendationsListByTenantOptionalParams,
  ): AsyncIterableIterator<ResourceRecommendationBase> {
    for await (const page of this.listByTenantPagingPage(
      resourceUri,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Obtains cached recommendations for a subscription. The recommendations are generated or computed by
   * invoking generateRecommendations.
   * @param options The options parameters.
   */
  public list(
    options?: RecommendationsListOptionalParams,
  ): PagedAsyncIterableIterator<ResourceRecommendationBase> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: RecommendationsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ResourceRecommendationBase[]> {
    let result: RecommendationsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      const page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      const page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: RecommendationsListOptionalParams,
  ): AsyncIterableIterator<ResourceRecommendationBase> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Obtains cached recommendations for a subscription. The recommendations are generated or computed by
   * invoking generateRecommendations.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  private _listByTenant(
    resourceUri: string,
    options?: RecommendationsListByTenantOptionalParams,
  ): Promise<RecommendationsListByTenantResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listByTenantOperationSpec,
    );
  }

  /**
   * Obtains details of a cached recommendation.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param recommendationId The recommendation ID.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    recommendationId: string,
    options?: RecommendationsGetOptionalParams,
  ): Promise<RecommendationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, recommendationId, options },
      getOperationSpec,
    );
  }

  /**
   * Update the tracked properties of a Recommendation.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param recommendationId The recommendation ID.
   * @param trackedProperties The properties to update on the recommendation.
   * @param options The options parameters.
   */
  patch(
    resourceUri: string,
    recommendationId: string,
    trackedProperties: TrackedRecommendationPropertiesPayload,
    options?: RecommendationsPatchOptionalParams,
  ): Promise<RecommendationsPatchResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, recommendationId, trackedProperties, options },
      patchOperationSpec,
    );
  }

  /**
   * Initiates the recommendation generation or computation process for a subscription. This operation is
   * asynchronous. The generated recommendations are stored in a cache in the Advisor service.
   * @param options The options parameters.
   */
  generate(
    options?: RecommendationsGenerateOptionalParams,
  ): Promise<RecommendationsGenerateResponse> {
    return this.client.sendOperationRequest({ options }, generateOperationSpec);
  }

  /**
   * Retrieves the status of the recommendation computation or generation process. Invoke this API after
   * calling the generation recommendation. The URI of this API is returned in the Location field of the
   * response header.
   * @param operationId The operation ID, which can be found from the Location field in the generate
   *                    recommendation response header.
   * @param options The options parameters.
   */
  getGenerateStatus(
    operationId: string,
    options?: RecommendationsGetGenerateStatusOptionalParams,
  ): Promise<RecommendationsGetGenerateStatusResponse> {
    return this.client.sendOperationRequest(
      { operationId, options },
      getGenerateStatusOperationSpec,
    );
  }

  /**
   * Obtains cached recommendations for a subscription. The recommendations are generated or computed by
   * invoking generateRecommendations.
   * @param options The options parameters.
   */
  private _list(
    options?: RecommendationsListOptionalParams,
  ): Promise<RecommendationsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListByTenantNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListByTenant method.
   * @param options The options parameters.
   */
  private _listByTenantNext(
    resourceUri: string,
    nextLink: string,
    options?: RecommendationsListByTenantNextOptionalParams,
  ): Promise<RecommendationsListByTenantNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, nextLink, options },
      listByTenantNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: RecommendationsListNextOptionalParams,
  ): Promise<RecommendationsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTenantOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Advisor/recommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceRecommendationBaseListResult,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skipToken,
  ],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceRecommendationBase,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.recommendationId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const patchOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceRecommendationBase,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  requestBody: Parameters.trackedProperties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.recommendationId,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const generateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/generateRecommendations",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.RecommendationsGenerateHeaders,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getGenerateStatusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/generateRecommendations/{operationId}",
  httpMethod: "GET",
  responses: {
    202: {
      headersMapper: Mappers.RecommendationsGetGenerateStatusHeaders,
    },
    204: {},
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.operationId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/recommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceRecommendationBaseListResult,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skipToken,
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByTenantNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceRecommendationBaseListResult,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceRecommendationBaseListResult,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
