/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Configurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AdvisorManagementClient } from "../advisorManagementClient";
import {
  ConfigData,
  ConfigurationsListBySubscriptionNextOptionalParams,
  ConfigurationsListBySubscriptionOptionalParams,
  ConfigurationsListBySubscriptionResponse,
  ConfigurationsListByResourceGroupOptionalParams,
  ConfigurationsListByResourceGroupResponse,
  ConfigurationName,
  ConfigurationsCreateInSubscriptionOptionalParams,
  ConfigurationsCreateInSubscriptionResponse,
  ConfigurationsCreateInResourceGroupOptionalParams,
  ConfigurationsCreateInResourceGroupResponse,
  ConfigurationsListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Configurations operations. */
export class ConfigurationsImpl implements Configurations {
  private readonly client: AdvisorManagementClient;

  /**
   * Initialize a new instance of the class Configurations class.
   * @param client Reference to the service client
   */
  constructor(client: AdvisorManagementClient) {
    this.client = client;
  }

  /**
   * Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ConfigurationsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ConfigData> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ConfigurationsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ConfigData[]> {
    let result: ConfigurationsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: ConfigurationsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<ConfigData> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieve Azure Advisor configurations.
   * @param resourceGroup The name of the Azure resource group.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroup: string,
    options?: ConfigurationsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ConfigData> {
    const iter = this.listByResourceGroupPagingAll(resourceGroup, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroup,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroup: string,
    options?: ConfigurationsListByResourceGroupOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<ConfigData[]> {
    let result: ConfigurationsListByResourceGroupResponse;
    result = await this._listByResourceGroup(resourceGroup, options);
    yield result.value || [];
  }

  private async *listByResourceGroupPagingAll(
    resourceGroup: string,
    options?: ConfigurationsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ConfigData> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroup,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ConfigurationsListBySubscriptionOptionalParams
  ): Promise<ConfigurationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Create/Overwrite Azure Advisor configuration and also delete all configurations of contained
   * resource groups.
   * @param configurationName Advisor configuration name. Value must be 'default'
   * @param configContract The Azure Advisor configuration data structure.
   * @param options The options parameters.
   */
  createInSubscription(
    configurationName: ConfigurationName,
    configContract: ConfigData,
    options?: ConfigurationsCreateInSubscriptionOptionalParams
  ): Promise<ConfigurationsCreateInSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { configurationName, configContract, options },
      createInSubscriptionOperationSpec
    );
  }

  /**
   * Retrieve Azure Advisor configurations.
   * @param resourceGroup The name of the Azure resource group.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroup: string,
    options?: ConfigurationsListByResourceGroupOptionalParams
  ): Promise<ConfigurationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Create/Overwrite Azure Advisor configuration.
   * @param configurationName Advisor configuration name. Value must be 'default'
   * @param resourceGroup The name of the Azure resource group.
   * @param configContract The Azure Advisor configuration data structure.
   * @param options The options parameters.
   */
  createInResourceGroup(
    configurationName: ConfigurationName,
    resourceGroup: string,
    configContract: ConfigData,
    options?: ConfigurationsCreateInResourceGroupOptionalParams
  ): Promise<ConfigurationsCreateInResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { configurationName, resourceGroup, configContract, options },
      createInResourceGroupOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: ConfigurationsListBySubscriptionNextOptionalParams
  ): Promise<ConfigurationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const createInSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations/{configurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigData
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  requestBody: Parameters.configContract,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configurationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createInResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations/{configurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigData
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  requestBody: Parameters.configContract,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configurationName,
    Parameters.resourceGroup
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
