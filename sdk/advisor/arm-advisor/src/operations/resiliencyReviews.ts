/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ResiliencyReviews } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AdvisorManagementClient } from "../advisorManagementClient.js";
import {
  ResiliencyReview,
  ResiliencyReviewsListNextOptionalParams,
  ResiliencyReviewsListOptionalParams,
  ResiliencyReviewsListResponse,
  ResiliencyReviewsGetOptionalParams,
  ResiliencyReviewsGetResponse,
  ResiliencyReviewsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ResiliencyReviews operations. */
export class ResiliencyReviewsImpl implements ResiliencyReviews {
  private readonly client: AdvisorManagementClient;

  /**
   * Initialize a new instance of the class ResiliencyReviews class.
   * @param client Reference to the service client
   */
  constructor(client: AdvisorManagementClient) {
    this.client = client;
  }

  /**
   * Get list of Azure Advisor resiliency reviews.
   * @param options The options parameters.
   */
  public list(
    options?: ResiliencyReviewsListOptionalParams,
  ): PagedAsyncIterableIterator<ResiliencyReview> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: ResiliencyReviewsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ResiliencyReview[]> {
    let result: ResiliencyReviewsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: ResiliencyReviewsListOptionalParams,
  ): AsyncIterableIterator<ResiliencyReview> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get list of Azure Advisor resiliency reviews.
   * @param options The options parameters.
   */
  private _list(
    options?: ResiliencyReviewsListOptionalParams,
  ): Promise<ResiliencyReviewsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Get existing Azure Advisor resiliency review by id.
   * @param reviewId Existing review id. This is a GUID-formatted string (e.g.
   *                 00000000-0000-0000-0000-000000000000).
   * @param options The options parameters.
   */
  get(
    reviewId: string,
    options?: ResiliencyReviewsGetOptionalParams,
  ): Promise<ResiliencyReviewsGetResponse> {
    return this.client.sendOperationRequest(
      { reviewId, options },
      getOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ResiliencyReviewsListNextOptionalParams,
  ): Promise<ResiliencyReviewsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResiliencyReviewCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResiliencyReview,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.reviewId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResiliencyReviewCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
