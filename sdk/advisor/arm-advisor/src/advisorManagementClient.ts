/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import type {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import type * as coreAuth from "@azure/core-auth";
import {
  RecommendationsImpl,
  SuppressionsImpl,
  RecommendationMetadataImpl,
  OperationsImpl,
  AdvisorScoresImpl,
  AssessmentTypesImpl,
  AssessmentsImpl,
  ConfigurationsImpl,
  ResiliencyReviewsImpl,
  TriageRecommendationsImpl,
  TriageResourcesImpl,
  WorkloadsImpl,
} from "./operations/index.js";
import type {
  Recommendations,
  Suppressions,
  RecommendationMetadata,
  Operations,
  AdvisorScores,
  AssessmentTypes,
  Assessments,
  Configurations,
  ResiliencyReviews,
  TriageRecommendations,
  TriageResources,
  Workloads,
} from "./operationsInterfaces/index.js";
import * as Parameters from "./models/parameters.js";
import * as Mappers from "./models/mappers.js";
import type {
  AdvisorManagementClientOptionalParams,
  PredictionRequest,
  PredictOptionalParams,
  PredictResponse,
} from "./models/index.js";

export class AdvisorManagementClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId?: string;

  /**
   * Initializes a new instance of the AdvisorManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription. The value must be an UUID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: AdvisorManagementClientOptionalParams,
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    options?: AdvisorManagementClientOptionalParams,
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionIdOrOptions?: AdvisorManagementClientOptionalParams | string,
    options?: AdvisorManagementClientOptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }

    let subscriptionId: string | undefined;

    if (typeof subscriptionIdOrOptions === "string") {
      subscriptionId = subscriptionIdOrOptions;
    } else if (typeof subscriptionIdOrOptions === "object") {
      options = subscriptionIdOrOptions;
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: AdvisorManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-advisor/4.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2025-05-01-preview";
    this.recommendations = new RecommendationsImpl(this);
    this.suppressions = new SuppressionsImpl(this);
    this.recommendationMetadata = new RecommendationMetadataImpl(this);
    this.operations = new OperationsImpl(this);
    this.advisorScores = new AdvisorScoresImpl(this);
    this.assessmentTypes = new AssessmentTypesImpl(this);
    this.assessments = new AssessmentsImpl(this);
    this.configurations = new ConfigurationsImpl(this);
    this.resiliencyReviews = new ResiliencyReviewsImpl(this);
    this.triageRecommendations = new TriageRecommendationsImpl(this);
    this.triageResources = new TriageResourcesImpl(this);
    this.workloads = new WorkloadsImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * Predicts a recommendation.
   * @param predictionRequest The request body
   * @param options The options parameters.
   */
  predict(
    predictionRequest: PredictionRequest,
    options?: PredictOptionalParams,
  ): Promise<PredictResponse> {
    return this.sendOperationRequest(
      { predictionRequest, options },
      predictOperationSpec,
    );
  }

  recommendations: Recommendations;
  suppressions: Suppressions;
  recommendationMetadata: RecommendationMetadata;
  operations: Operations;
  advisorScores: AdvisorScores;
  assessmentTypes: AssessmentTypes;
  assessments: Assessments;
  configurations: Configurations;
  resiliencyReviews: ResiliencyReviews;
  triageRecommendations: TriageRecommendations;
  triageResources: TriageResources;
  workloads: Workloads;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const predictOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/predict",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PredictionResponse,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  requestBody: Parameters.predictionRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
