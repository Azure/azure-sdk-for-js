/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "./lroImpl";
import {
  ServersImpl,
  ReplicasImpl,
  FirewallRulesImpl,
  VirtualNetworkRulesImpl,
  DatabasesImpl,
  ConfigurationsImpl,
  ServerParametersImpl,
  LogFilesImpl,
  ServerAdministratorsImpl,
  RecoverableServersImpl,
  ServerBasedPerformanceTierImpl,
  LocationBasedPerformanceTierImpl,
  CheckNameAvailabilityImpl,
  OperationsImpl,
  ServerSecurityAlertPoliciesImpl,
  QueryTextsImpl,
  TopQueryStatisticsImpl,
  WaitStatisticsImpl,
  AdvisorsImpl,
  RecommendedActionsImpl,
  LocationBasedRecommendedActionSessionsOperationStatusImpl,
  LocationBasedRecommendedActionSessionsResultImpl,
  PrivateEndpointConnectionsImpl,
  PrivateLinkResourcesImpl,
  ServerKeysImpl
} from "./operations";
import {
  Servers,
  Replicas,
  FirewallRules,
  VirtualNetworkRules,
  Databases,
  Configurations,
  ServerParameters,
  LogFiles,
  ServerAdministrators,
  RecoverableServers,
  ServerBasedPerformanceTier,
  LocationBasedPerformanceTier,
  CheckNameAvailability,
  Operations,
  ServerSecurityAlertPolicies,
  QueryTexts,
  TopQueryStatistics,
  WaitStatistics,
  Advisors,
  RecommendedActions,
  LocationBasedRecommendedActionSessionsOperationStatus,
  LocationBasedRecommendedActionSessionsResult,
  PrivateEndpointConnections,
  PrivateLinkResources,
  ServerKeys
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  MySQLManagementClientOptionalParams,
  ResetQueryPerformanceInsightDataOptionalParams,
  ResetQueryPerformanceInsightDataResponse,
  CreateRecommendedActionSessionOptionalParams
} from "./models";

export class MySQLManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the MySQLManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: MySQLManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: MySQLManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-mysql/5.1.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.servers = new ServersImpl(this);
    this.replicas = new ReplicasImpl(this);
    this.firewallRules = new FirewallRulesImpl(this);
    this.virtualNetworkRules = new VirtualNetworkRulesImpl(this);
    this.databases = new DatabasesImpl(this);
    this.configurations = new ConfigurationsImpl(this);
    this.serverParameters = new ServerParametersImpl(this);
    this.logFiles = new LogFilesImpl(this);
    this.serverAdministrators = new ServerAdministratorsImpl(this);
    this.recoverableServers = new RecoverableServersImpl(this);
    this.serverBasedPerformanceTier = new ServerBasedPerformanceTierImpl(this);
    this.locationBasedPerformanceTier = new LocationBasedPerformanceTierImpl(
      this
    );
    this.checkNameAvailability = new CheckNameAvailabilityImpl(this);
    this.operations = new OperationsImpl(this);
    this.serverSecurityAlertPolicies = new ServerSecurityAlertPoliciesImpl(
      this
    );
    this.queryTexts = new QueryTextsImpl(this);
    this.topQueryStatistics = new TopQueryStatisticsImpl(this);
    this.waitStatistics = new WaitStatisticsImpl(this);
    this.advisors = new AdvisorsImpl(this);
    this.recommendedActions = new RecommendedActionsImpl(this);
    this.locationBasedRecommendedActionSessionsOperationStatus = new LocationBasedRecommendedActionSessionsOperationStatusImpl(
      this
    );
    this.locationBasedRecommendedActionSessionsResult = new LocationBasedRecommendedActionSessionsResultImpl(
      this
    );
    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
    this.privateLinkResources = new PrivateLinkResourcesImpl(this);
    this.serverKeys = new ServerKeysImpl(this);
  }

  /**
   * Reset data for Query Performance Insight.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param options The options parameters.
   */
  resetQueryPerformanceInsightData(
    resourceGroupName: string,
    serverName: string,
    options?: ResetQueryPerformanceInsightDataOptionalParams
  ): Promise<ResetQueryPerformanceInsightDataResponse> {
    return this.sendOperationRequest(
      { resourceGroupName, serverName, options },
      resetQueryPerformanceInsightDataOperationSpec
    );
  }

  /**
   * Create recommendation action session for the advisor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param advisorName The advisor name for recommendation action.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  async beginCreateRecommendedActionSession(
    resourceGroupName: string,
    serverName: string,
    advisorName: string,
    databaseName: string,
    options?: CreateRecommendedActionSessionOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, serverName, advisorName, databaseName, options },
      createRecommendedActionSessionOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create recommendation action session for the advisor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param advisorName The advisor name for recommendation action.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  async beginCreateRecommendedActionSessionAndWait(
    resourceGroupName: string,
    serverName: string,
    advisorName: string,
    databaseName: string,
    options?: CreateRecommendedActionSessionOptionalParams
  ): Promise<void> {
    const poller = await this.beginCreateRecommendedActionSession(
      resourceGroupName,
      serverName,
      advisorName,
      databaseName,
      options
    );
    return poller.pollUntilDone();
  }

  servers: Servers;
  replicas: Replicas;
  firewallRules: FirewallRules;
  virtualNetworkRules: VirtualNetworkRules;
  databases: Databases;
  configurations: Configurations;
  serverParameters: ServerParameters;
  logFiles: LogFiles;
  serverAdministrators: ServerAdministrators;
  recoverableServers: RecoverableServers;
  serverBasedPerformanceTier: ServerBasedPerformanceTier;
  locationBasedPerformanceTier: LocationBasedPerformanceTier;
  checkNameAvailability: CheckNameAvailability;
  operations: Operations;
  serverSecurityAlertPolicies: ServerSecurityAlertPolicies;
  queryTexts: QueryTexts;
  topQueryStatistics: TopQueryStatistics;
  waitStatistics: WaitStatistics;
  advisors: Advisors;
  recommendedActions: RecommendedActions;
  locationBasedRecommendedActionSessionsOperationStatus: LocationBasedRecommendedActionSessionsOperationStatus;
  locationBasedRecommendedActionSessionsResult: LocationBasedRecommendedActionSessionsResult;
  privateEndpointConnections: PrivateEndpointConnections;
  privateLinkResources: PrivateLinkResources;
  serverKeys: ServerKeys;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const resetQueryPerformanceInsightDataOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/resetQueryPerformanceInsightData",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.QueryPerformanceInsightResetDataResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createRecommendedActionSessionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}/createRecommendedActionSession",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion2, Parameters.databaseName1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.advisorName
  ],
  serializer
};
