/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/queryTextsMappers";
import * as Parameters from "../models/parameters";
import { MySQLManagementClientContext } from "../mySQLManagementClientContext";

/** Class representing a QueryTexts. */
export class QueryTexts {
  private readonly client: MySQLManagementClientContext;

  /**
   * Create a QueryTexts.
   * @param {MySQLManagementClientContext} client Reference to the service client.
   */
  constructor(client: MySQLManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieve the Query-Store query texts for the queryId.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param queryId The Query-Store query identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryTextsGetResponse>
   */
  get(resourceGroupName: string, serverName: string, queryId: string, options?: msRest.RequestOptionsBase): Promise<Models.QueryTextsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param queryId The Query-Store query identifier.
   * @param callback The callback
   */
  get(resourceGroupName: string, serverName: string, queryId: string, callback: msRest.ServiceCallback<Models.QueryText>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param queryId The Query-Store query identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serverName: string, queryId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QueryText>): void;
  get(resourceGroupName: string, serverName: string, queryId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QueryText>, callback?: msRest.ServiceCallback<Models.QueryText>): Promise<Models.QueryTextsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        queryId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.QueryTextsGetResponse>;
  }

  /**
   * Retrieve the Query-Store query texts for specified queryIds.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param queryIds The query identifiers
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryTextsListByServerResponse>
   */
  listByServer(resourceGroupName: string, serverName: string, queryIds: string[], options?: msRest.RequestOptionsBase): Promise<Models.QueryTextsListByServerResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param queryIds The query identifiers
   * @param callback The callback
   */
  listByServer(resourceGroupName: string, serverName: string, queryIds: string[], callback: msRest.ServiceCallback<Models.QueryTextsResultList>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param queryIds The query identifiers
   * @param options The optional parameters
   * @param callback The callback
   */
  listByServer(resourceGroupName: string, serverName: string, queryIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QueryTextsResultList>): void;
  listByServer(resourceGroupName: string, serverName: string, queryIds: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QueryTextsResultList>, callback?: msRest.ServiceCallback<Models.QueryTextsResultList>): Promise<Models.QueryTextsListByServerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        queryIds,
        options
      },
      listByServerOperationSpec,
      callback) as Promise<Models.QueryTextsListByServerResponse>;
  }

  /**
   * Retrieve the Query-Store query texts for specified queryIds.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryTextsListByServerNextResponse>
   */
  listByServerNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.QueryTextsListByServerNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByServerNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.QueryTextsResultList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByServerNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QueryTextsResultList>): void;
  listByServerNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QueryTextsResultList>, callback?: msRest.ServiceCallback<Models.QueryTextsResultList>): Promise<Models.QueryTextsListByServerNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByServerNextOperationSpec,
      callback) as Promise<Models.QueryTextsListByServerNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/queryTexts/{queryId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.queryId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QueryText
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByServerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/queryTexts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.queryIds
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QueryTextsResultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByServerNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QueryTextsResultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
