/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { RecommendedActions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MySQLManagementClient } from "../mySQLManagementClient";
import {
  RecommendationAction,
  RecommendedActionsListByServerNextOptionalParams,
  RecommendedActionsListByServerOptionalParams,
  RecommendedActionsListByServerResponse,
  RecommendedActionsGetOptionalParams,
  RecommendedActionsGetResponse,
  RecommendedActionsListByServerNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RecommendedActions operations. */
export class RecommendedActionsImpl implements RecommendedActions {
  private readonly client: MySQLManagementClient;

  /**
   * Initialize a new instance of the class RecommendedActions class.
   * @param client Reference to the service client
   */
  constructor(client: MySQLManagementClient) {
    this.client = client;
  }

  /**
   * Retrieve recommended actions from the advisor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param advisorName The advisor name for recommendation action.
   * @param options The options parameters.
   */
  public listByServer(
    resourceGroupName: string,
    serverName: string,
    advisorName: string,
    options?: RecommendedActionsListByServerOptionalParams
  ): PagedAsyncIterableIterator<RecommendationAction> {
    const iter = this.listByServerPagingAll(
      resourceGroupName,
      serverName,
      advisorName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByServerPagingPage(
          resourceGroupName,
          serverName,
          advisorName,
          options,
          settings
        );
      }
    };
  }

  private async *listByServerPagingPage(
    resourceGroupName: string,
    serverName: string,
    advisorName: string,
    options?: RecommendedActionsListByServerOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<RecommendationAction[]> {
    let result: RecommendedActionsListByServerResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByServer(
        resourceGroupName,
        serverName,
        advisorName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByServerNext(
        resourceGroupName,
        serverName,
        advisorName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByServerPagingAll(
    resourceGroupName: string,
    serverName: string,
    advisorName: string,
    options?: RecommendedActionsListByServerOptionalParams
  ): AsyncIterableIterator<RecommendationAction> {
    for await (const page of this.listByServerPagingPage(
      resourceGroupName,
      serverName,
      advisorName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieve recommended actions from the advisor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param advisorName The advisor name for recommendation action.
   * @param recommendedActionName The recommended action name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serverName: string,
    advisorName: string,
    recommendedActionName: string,
    options?: RecommendedActionsGetOptionalParams
  ): Promise<RecommendedActionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        advisorName,
        recommendedActionName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Retrieve recommended actions from the advisor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param advisorName The advisor name for recommendation action.
   * @param options The options parameters.
   */
  private _listByServer(
    resourceGroupName: string,
    serverName: string,
    advisorName: string,
    options?: RecommendedActionsListByServerOptionalParams
  ): Promise<RecommendedActionsListByServerResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, advisorName, options },
      listByServerOperationSpec
    );
  }

  /**
   * ListByServerNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param advisorName The advisor name for recommendation action.
   * @param nextLink The nextLink from the previous successful call to the ListByServer method.
   * @param options The options parameters.
   */
  private _listByServerNext(
    resourceGroupName: string,
    serverName: string,
    advisorName: string,
    nextLink: string,
    options?: RecommendedActionsListByServerNextOptionalParams
  ): Promise<RecommendedActionsListByServerNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, advisorName, nextLink, options },
      listByServerNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}/recommendedActions/{recommendedActionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationAction
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.advisorName,
    Parameters.recommendedActionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByServerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}/recommendedActions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationActionsResultList
    }
  },
  queryParameters: [Parameters.apiVersion2, Parameters.sessionId],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.advisorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByServerNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationActionsResultList
    }
  },
  queryParameters: [Parameters.apiVersion2, Parameters.sessionId],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.nextLink,
    Parameters.advisorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
