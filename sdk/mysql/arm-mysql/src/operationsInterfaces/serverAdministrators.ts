/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  ServerAdministratorResource,
  ServerAdministratorsListOptionalParams,
  ServerAdministratorsGetOptionalParams,
  ServerAdministratorsGetResponse,
  ServerAdministratorsCreateOrUpdateOptionalParams,
  ServerAdministratorsCreateOrUpdateResponse,
  ServerAdministratorsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ServerAdministrators. */
export interface ServerAdministrators {
  /**
   * Returns a list of server Administrators.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    serverName: string,
    options?: ServerAdministratorsListOptionalParams
  ): PagedAsyncIterableIterator<ServerAdministratorResource>;
  /**
   * Gets information about a AAD server administrator.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serverName: string,
    options?: ServerAdministratorsGetOptionalParams
  ): Promise<ServerAdministratorsGetResponse>;
  /**
   * Creates or update active directory administrator on an existing server. The update action will
   * overwrite the existing administrator.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param properties The required parameters for creating or updating an AAD server administrator.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    serverName: string,
    properties: ServerAdministratorResource,
    options?: ServerAdministratorsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ServerAdministratorsCreateOrUpdateResponse>,
      ServerAdministratorsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or update active directory administrator on an existing server. The update action will
   * overwrite the existing administrator.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param properties The required parameters for creating or updating an AAD server administrator.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    serverName: string,
    properties: ServerAdministratorResource,
    options?: ServerAdministratorsCreateOrUpdateOptionalParams
  ): Promise<ServerAdministratorsCreateOrUpdateResponse>;
  /**
   * Deletes server active directory administrator.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    serverName: string,
    options?: ServerAdministratorsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes server active directory administrator.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    serverName: string,
    options?: ServerAdministratorsDeleteOptionalParams
  ): Promise<void>;
}
