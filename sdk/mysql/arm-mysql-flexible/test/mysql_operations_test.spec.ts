/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { RecorderStartOptions } from "@azure-tools/test-recorder";
import { env, Recorder, isPlaybackMode } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { MySQLManagementFlexibleServerClient } from "../src/mySQLManagementFlexibleServerClient.js";
import { describe, it, assert, beforeEach, afterEach } from "vitest";

const replaceableVariables: Record<string, string> = {
  SUBSCRIPTION_ID: "88888888-8888-8888-8888-888888888888",
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("mysql test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: MySQLManagementFlexibleServerClient;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;

  beforeEach(async (ctx) => {
    recorder = new Recorder(ctx);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new MySQLManagementFlexibleServerClient(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
    location = "eastus";
    resourceGroup = "myjstest";
    resourcename = "resourcetest";
  });

  afterEach(async () => {
    await recorder.stop();
  });

  it("servers create test", async () => {
    const res = await client.servers.beginCreateAndWait(
      resourceGroup,
      resourcename,
      {
        administratorLogin: "cloudsa",
        administratorLoginPassword: "REDACTED", // use "your_password" when run the test and then use "REDACTED" to replace it here and in recordings
        availabilityZone: "1",
        backup: {
          backupIntervalHours: 24,
          backupRetentionDays: 7,
          geoRedundantBackup: "Disabled",
        },
        createMode: "Default",
        highAvailability: { mode: "ZoneRedundant", standbyAvailabilityZone: "3" },
        location,
        sku: { name: "Standard_D2ds_v4", tier: "GeneralPurpose" },
        storage: { autoGrow: "Enabled", iops: 600, storageSizeGB: 100 },
        tags: { num: "1" },
        version: "5.7",
      },
      testPollingOptions,
    );
    assert.equal(res.name, resourcename);
  });

  it("servers get test", async () => {
    const res = await client.servers.get(resourceGroup, resourcename);
    assert.equal(res.name, resourcename);
  });

  it("servers list test", async () => {
    const resArray = new Array();
    for await (const item of client.servers.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("servers delete test", async () => {
    const resArray = new Array();
    for await (const item of client.servers.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
});
