/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { OperationProgress } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MySQLManagementFlexibleServerClient } from "../mySQLManagementFlexibleServerClient";
import {
  OperationProgressGetOptionalParams,
  OperationProgressGetResponse,
} from "../models";

/** Class containing OperationProgress operations. */
export class OperationProgressImpl implements OperationProgress {
  private readonly client: MySQLManagementFlexibleServerClient;

  /**
   * Initialize a new instance of the class OperationProgress class.
   * @param client Reference to the service client
   */
  constructor(client: MySQLManagementFlexibleServerClient) {
    this.client = client;
  }

  /**
   * Get the operation result for a long running operation.
   * @param locationName The name of the location.
   * @param operationId The ID of an ongoing async operation.
   * @param options The options parameters.
   */
  get(
    locationName: string,
    operationId: string,
    options?: OperationProgressGetOptionalParams,
  ): Promise<OperationProgressGetResponse> {
    return this.client.sendOperationRequest(
      { locationName, operationId, options },
      getOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DBforMySQL/locations/{locationName}/operationProgress/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationProgressResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.operationId1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
