/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/agentRegistrationInformationMappers";
import * as Parameters from "../models/parameters";
import { AutomationClientContext } from "../automationClientContext";

/** Class representing a AgentRegistrationInformation. */
export class AgentRegistrationInformation {
  private readonly client: AutomationClientContext;

  /**
   * Create a AgentRegistrationInformation.
   * @param {AutomationClientContext} client Reference to the service client.
   */
  constructor(client: AutomationClientContext) {
    this.client = client;
  }

  /**
   * Retrieve the automation agent registration information.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param [options] The optional parameters
   * @returns Promise<Models.AgentRegistrationInformationGetResponse>
   */
  get(resourceGroupName: string, automationAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.AgentRegistrationInformationGetResponse>;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param callback The callback
   */
  get(resourceGroupName: string, automationAccountName: string, callback: msRest.ServiceCallback<Models.AgentRegistration>): void;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, automationAccountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AgentRegistration>): void;
  get(resourceGroupName: string, automationAccountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AgentRegistration>, callback?: msRest.ServiceCallback<Models.AgentRegistration>): Promise<Models.AgentRegistrationInformationGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AgentRegistrationInformationGetResponse>;
  }

  /**
   * Regenerate a primary or secondary agent registration key
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param parameters The name of the agent registration key to be regenerated
   * @param [options] The optional parameters
   * @returns Promise<Models.AgentRegistrationInformationRegenerateKeyResponse>
   */
  regenerateKey(resourceGroupName: string, automationAccountName: string, parameters: Models.AgentRegistrationRegenerateKeyParameter, options?: msRest.RequestOptionsBase): Promise<Models.AgentRegistrationInformationRegenerateKeyResponse>;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param parameters The name of the agent registration key to be regenerated
   * @param callback The callback
   */
  regenerateKey(resourceGroupName: string, automationAccountName: string, parameters: Models.AgentRegistrationRegenerateKeyParameter, callback: msRest.ServiceCallback<Models.AgentRegistration>): void;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param parameters The name of the agent registration key to be regenerated
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateKey(resourceGroupName: string, automationAccountName: string, parameters: Models.AgentRegistrationRegenerateKeyParameter, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AgentRegistration>): void;
  regenerateKey(resourceGroupName: string, automationAccountName: string, parameters: Models.AgentRegistrationRegenerateKeyParameter, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AgentRegistration>, callback?: msRest.ServiceCallback<Models.AgentRegistration>): Promise<Models.AgentRegistrationInformationRegenerateKeyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        parameters,
        options
      },
      regenerateKeyOperationSpec,
      callback) as Promise<Models.AgentRegistrationInformationRegenerateKeyResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/agentRegistrationInformation",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AgentRegistration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const regenerateKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/agentRegistrationInformation/regenerateKey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.AgentRegistrationRegenerateKeyParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AgentRegistration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
