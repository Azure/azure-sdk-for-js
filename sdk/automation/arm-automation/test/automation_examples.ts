/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { AutomationClient } from "../src/automationClient";
import { RunbookCreateOrUpdateParameters } from "../src";



const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("automation test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: AutomationClient;
  let location: string;
  let resourceGroup: string;
  let automationAccountName: string;
  let runbookName: string;
  let runbookContent: string;
  let runbookParameters: RunbookCreateOrUpdateParameters;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new AutomationClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus2";
    resourceGroup = "myjstest";
    automationAccountName = "myAutomationxxx";
    runbookName = "myRunbookxx";
    runbookContent = "testabc";

    runbookParameters = {
      "name": runbookName,
      location,
      "tags": {
        "tag01": "value01",
        "tag02": "value02"
      },
      "runbookType": "PowerShellWorkflow",
      "draft": {}
    }
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("Automation create test", async function () {
    const res = await client.automationAccountOperations.createOrUpdate(resourceGroup, automationAccountName,
      {
        sku: {
          name: "Free"
        },
        name: automationAccountName,
        location: "East US 2"
      }
    )
    assert.equal(res.name, automationAccountName);
  });

  it("Runbook create test", async function () {
    const res = await client.runbookOperations.createOrUpdate(resourceGroup, automationAccountName, runbookName, runbookParameters)
    assert.equal(res.name, runbookName);
  });

  it("RunbookDraft get test", async function () {
    const res = await client.runbookDraftOperations.getContent(resourceGroup, automationAccountName, runbookName)
    // console.log(res)

  });

  it.skip("RunbookDraft Replace test", async function () {
    const res = await client.runbookDraftOperations.beginReplaceContentAndWait(resourceGroup, automationAccountName, runbookName, runbookContent, testPollingOptions)

  });

  it("Runbook delete test", async function () {
    const res = await client.runbookOperations.delete(resourceGroup, automationAccountName, runbookName)
    const resArray = new Array();
    for await (let item of client.runbookOperations.listByAutomationAccount(resourceGroup, automationAccountName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("automation delete test", async function () {
    const res = await client.automationAccountOperations.delete(resourceGroup, automationAccountName)
    const resArray = new Array();
    for await (let item of client.automationAccountOperations.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
})
