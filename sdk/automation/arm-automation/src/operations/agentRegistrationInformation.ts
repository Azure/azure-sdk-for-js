/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { AgentRegistrationInformation } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomationClient } from "../automationClient";
import {
  AgentRegistrationInformationGetOptionalParams,
  AgentRegistrationInformationGetResponse,
  AgentRegistrationRegenerateKeyParameter,
  AgentRegistrationInformationRegenerateKeyOptionalParams,
  AgentRegistrationInformationRegenerateKeyResponse
} from "../models";

/** Class containing AgentRegistrationInformation operations. */
export class AgentRegistrationInformationImpl
  implements AgentRegistrationInformation {
  private readonly client: AutomationClient;

  /**
   * Initialize a new instance of the class AgentRegistrationInformation class.
   * @param client Reference to the service client
   */
  constructor(client: AutomationClient) {
    this.client = client;
  }

  /**
   * Retrieve the automation agent registration information.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    automationAccountName: string,
    options?: AgentRegistrationInformationGetOptionalParams
  ): Promise<AgentRegistrationInformationGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, options },
      getOperationSpec
    );
  }

  /**
   * Regenerate a primary or secondary agent registration key
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param parameters The name of the agent registration key to be regenerated
   * @param options The options parameters.
   */
  regenerateKey(
    resourceGroupName: string,
    automationAccountName: string,
    parameters: AgentRegistrationRegenerateKeyParameter,
    options?: AgentRegistrationInformationRegenerateKeyOptionalParams
  ): Promise<AgentRegistrationInformationRegenerateKeyResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, parameters, options },
      regenerateKeyOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/agentRegistrationInformation",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AgentRegistration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const regenerateKeyOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/agentRegistrationInformation/regenerateKey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AgentRegistration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
