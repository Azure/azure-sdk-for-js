/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SoftwareUpdateConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomationClient } from "../automationClient";
import {
  SoftwareUpdateConfiguration,
  SoftwareUpdateConfigurationsCreateOptionalParams,
  SoftwareUpdateConfigurationsCreateResponse,
  SoftwareUpdateConfigurationsGetByNameOptionalParams,
  SoftwareUpdateConfigurationsGetByNameResponse,
  SoftwareUpdateConfigurationsDeleteOptionalParams,
  SoftwareUpdateConfigurationsListOptionalParams,
  SoftwareUpdateConfigurationsListResponse
} from "../models";

/** Class containing SoftwareUpdateConfigurations operations. */
export class SoftwareUpdateConfigurationsImpl
  implements SoftwareUpdateConfigurations {
  private readonly client: AutomationClient;

  /**
   * Initialize a new instance of the class SoftwareUpdateConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: AutomationClient) {
    this.client = client;
  }

  /**
   * Create a new software update configuration with the name given in the URI.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param softwareUpdateConfigurationName The name of the software update configuration to be created.
   * @param parameters Request body.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    automationAccountName: string,
    softwareUpdateConfigurationName: string,
    parameters: SoftwareUpdateConfiguration,
    options?: SoftwareUpdateConfigurationsCreateOptionalParams
  ): Promise<SoftwareUpdateConfigurationsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        softwareUpdateConfigurationName,
        parameters,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Get a single software update configuration by name.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param softwareUpdateConfigurationName The name of the software update configuration to be created.
   * @param options The options parameters.
   */
  getByName(
    resourceGroupName: string,
    automationAccountName: string,
    softwareUpdateConfigurationName: string,
    options?: SoftwareUpdateConfigurationsGetByNameOptionalParams
  ): Promise<SoftwareUpdateConfigurationsGetByNameResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        softwareUpdateConfigurationName,
        options
      },
      getByNameOperationSpec
    );
  }

  /**
   * delete a specific software update configuration.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param softwareUpdateConfigurationName The name of the software update configuration to be created.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    automationAccountName: string,
    softwareUpdateConfigurationName: string,
    options?: SoftwareUpdateConfigurationsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        softwareUpdateConfigurationName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Get all software update configurations for the account.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    automationAccountName: string,
    options?: SoftwareUpdateConfigurationsListOptionalParams
  ): Promise<SoftwareUpdateConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, options },
      listOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SoftwareUpdateConfiguration
    },
    201: {
      bodyMapper: Mappers.SoftwareUpdateConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters33,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.softwareUpdateConfigurationName
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.clientRequestId
  ],
  mediaType: "json",
  serializer
};
const getByNameOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SoftwareUpdateConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.softwareUpdateConfigurationName
  ],
  headerParameters: [Parameters.accept, Parameters.clientRequestId],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.softwareUpdateConfigurationName
  ],
  headerParameters: [Parameters.accept, Parameters.clientRequestId],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SoftwareUpdateConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.filter, Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.clientRequestId],
  serializer
};
