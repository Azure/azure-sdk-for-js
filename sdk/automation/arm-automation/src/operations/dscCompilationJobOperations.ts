/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DscCompilationJobOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomationClient } from "../automationClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  DscCompilationJob,
  DscCompilationJobListByAutomationAccountNextOptionalParams,
  DscCompilationJobListByAutomationAccountOptionalParams,
  DscCompilationJobCreateParameters,
  DscCompilationJobCreateOptionalParams,
  DscCompilationJobCreateResponse,
  DscCompilationJobGetOptionalParams,
  DscCompilationJobGetResponse,
  DscCompilationJobListByAutomationAccountResponse,
  DscCompilationJobGetStreamOptionalParams,
  DscCompilationJobGetStreamResponse,
  DscCompilationJobListByAutomationAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DscCompilationJobOperations operations. */
export class DscCompilationJobOperationsImpl
  implements DscCompilationJobOperations {
  private readonly client: AutomationClient;

  /**
   * Initialize a new instance of the class DscCompilationJobOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AutomationClient) {
    this.client = client;
  }

  /**
   * Retrieve a list of dsc compilation jobs.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param options The options parameters.
   */
  public listByAutomationAccount(
    resourceGroupName: string,
    automationAccountName: string,
    options?: DscCompilationJobListByAutomationAccountOptionalParams
  ): PagedAsyncIterableIterator<DscCompilationJob> {
    const iter = this.listByAutomationAccountPagingAll(
      resourceGroupName,
      automationAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByAutomationAccountPagingPage(
          resourceGroupName,
          automationAccountName,
          options
        );
      }
    };
  }

  private async *listByAutomationAccountPagingPage(
    resourceGroupName: string,
    automationAccountName: string,
    options?: DscCompilationJobListByAutomationAccountOptionalParams
  ): AsyncIterableIterator<DscCompilationJob[]> {
    let result = await this._listByAutomationAccount(
      resourceGroupName,
      automationAccountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByAutomationAccountNext(
        resourceGroupName,
        automationAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByAutomationAccountPagingAll(
    resourceGroupName: string,
    automationAccountName: string,
    options?: DscCompilationJobListByAutomationAccountOptionalParams
  ): AsyncIterableIterator<DscCompilationJob> {
    for await (const page of this.listByAutomationAccountPagingPage(
      resourceGroupName,
      automationAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates the Dsc compilation job of the configuration.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param compilationJobName The DSC configuration Id.
   * @param parameters The parameters supplied to the create compilation job operation.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    automationAccountName: string,
    compilationJobName: string,
    parameters: DscCompilationJobCreateParameters,
    options?: DscCompilationJobCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DscCompilationJobCreateResponse>,
      DscCompilationJobCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DscCompilationJobCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        automationAccountName,
        compilationJobName,
        parameters,
        options
      },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates the Dsc compilation job of the configuration.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param compilationJobName The DSC configuration Id.
   * @param parameters The parameters supplied to the create compilation job operation.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    automationAccountName: string,
    compilationJobName: string,
    parameters: DscCompilationJobCreateParameters,
    options?: DscCompilationJobCreateOptionalParams
  ): Promise<DscCompilationJobCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      automationAccountName,
      compilationJobName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Retrieve the Dsc configuration compilation job identified by job id.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param compilationJobName The DSC configuration Id.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    automationAccountName: string,
    compilationJobName: string,
    options?: DscCompilationJobGetOptionalParams
  ): Promise<DscCompilationJobGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, compilationJobName, options },
      getOperationSpec
    );
  }

  /**
   * Retrieve a list of dsc compilation jobs.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param options The options parameters.
   */
  private _listByAutomationAccount(
    resourceGroupName: string,
    automationAccountName: string,
    options?: DscCompilationJobListByAutomationAccountOptionalParams
  ): Promise<DscCompilationJobListByAutomationAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, options },
      listByAutomationAccountOperationSpec
    );
  }

  /**
   * Retrieve the job stream identified by job stream id.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param jobId The job id.
   * @param jobStreamId The job stream id.
   * @param options The options parameters.
   */
  getStream(
    resourceGroupName: string,
    automationAccountName: string,
    jobId: string,
    jobStreamId: string,
    options?: DscCompilationJobGetStreamOptionalParams
  ): Promise<DscCompilationJobGetStreamResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, jobId, jobStreamId, options },
      getStreamOperationSpec
    );
  }

  /**
   * ListByAutomationAccountNext
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param nextLink The nextLink from the previous successful call to the ListByAutomationAccount
   *                 method.
   * @param options The options parameters.
   */
  private _listByAutomationAccountNext(
    resourceGroupName: string,
    automationAccountName: string,
    nextLink: string,
    options?: DscCompilationJobListByAutomationAccountNextOptionalParams
  ): Promise<DscCompilationJobListByAutomationAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, nextLink, options },
      listByAutomationAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{compilationJobName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DscCompilationJob
    },
    201: {
      bodyMapper: Mappers.DscCompilationJob
    },
    202: {
      bodyMapper: Mappers.DscCompilationJob
    },
    204: {
      bodyMapper: Mappers.DscCompilationJob
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.compilationJobName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{compilationJobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DscCompilationJob
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.compilationJobName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByAutomationAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DscCompilationJobListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStreamOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{jobId}/streams/{jobStreamId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobStream
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.jobId,
    Parameters.jobStreamId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByAutomationAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DscCompilationJobListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
