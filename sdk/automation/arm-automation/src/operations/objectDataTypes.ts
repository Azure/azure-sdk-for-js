/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { ObjectDataTypes } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomationClient } from "../automationClient";
import {
  TypeField,
  ObjectDataTypesListFieldsByModuleAndTypeOptionalParams,
  ObjectDataTypesListFieldsByModuleAndTypeResponse,
  ObjectDataTypesListFieldsByTypeOptionalParams,
  ObjectDataTypesListFieldsByTypeResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ObjectDataTypes operations. */
export class ObjectDataTypesImpl implements ObjectDataTypes {
  private readonly client: AutomationClient;

  /**
   * Initialize a new instance of the class ObjectDataTypes class.
   * @param client Reference to the service client
   */
  constructor(client: AutomationClient) {
    this.client = client;
  }

  /**
   * Retrieve a list of fields of a given type identified by module name.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param moduleName The name of module.
   * @param typeName The name of type.
   * @param options The options parameters.
   */
  public listFieldsByModuleAndType(
    resourceGroupName: string,
    automationAccountName: string,
    moduleName: string,
    typeName: string,
    options?: ObjectDataTypesListFieldsByModuleAndTypeOptionalParams
  ): PagedAsyncIterableIterator<TypeField> {
    const iter = this.listFieldsByModuleAndTypePagingAll(
      resourceGroupName,
      automationAccountName,
      moduleName,
      typeName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listFieldsByModuleAndTypePagingPage(
          resourceGroupName,
          automationAccountName,
          moduleName,
          typeName,
          options,
          settings
        );
      }
    };
  }

  private async *listFieldsByModuleAndTypePagingPage(
    resourceGroupName: string,
    automationAccountName: string,
    moduleName: string,
    typeName: string,
    options?: ObjectDataTypesListFieldsByModuleAndTypeOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<TypeField[]> {
    let result: ObjectDataTypesListFieldsByModuleAndTypeResponse;
    result = await this._listFieldsByModuleAndType(
      resourceGroupName,
      automationAccountName,
      moduleName,
      typeName,
      options
    );
    yield result.value || [];
  }

  private async *listFieldsByModuleAndTypePagingAll(
    resourceGroupName: string,
    automationAccountName: string,
    moduleName: string,
    typeName: string,
    options?: ObjectDataTypesListFieldsByModuleAndTypeOptionalParams
  ): AsyncIterableIterator<TypeField> {
    for await (const page of this.listFieldsByModuleAndTypePagingPage(
      resourceGroupName,
      automationAccountName,
      moduleName,
      typeName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieve a list of fields of a given type across all accessible modules.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param typeName The name of type.
   * @param options The options parameters.
   */
  public listFieldsByType(
    resourceGroupName: string,
    automationAccountName: string,
    typeName: string,
    options?: ObjectDataTypesListFieldsByTypeOptionalParams
  ): PagedAsyncIterableIterator<TypeField> {
    const iter = this.listFieldsByTypePagingAll(
      resourceGroupName,
      automationAccountName,
      typeName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listFieldsByTypePagingPage(
          resourceGroupName,
          automationAccountName,
          typeName,
          options,
          settings
        );
      }
    };
  }

  private async *listFieldsByTypePagingPage(
    resourceGroupName: string,
    automationAccountName: string,
    typeName: string,
    options?: ObjectDataTypesListFieldsByTypeOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<TypeField[]> {
    let result: ObjectDataTypesListFieldsByTypeResponse;
    result = await this._listFieldsByType(
      resourceGroupName,
      automationAccountName,
      typeName,
      options
    );
    yield result.value || [];
  }

  private async *listFieldsByTypePagingAll(
    resourceGroupName: string,
    automationAccountName: string,
    typeName: string,
    options?: ObjectDataTypesListFieldsByTypeOptionalParams
  ): AsyncIterableIterator<TypeField> {
    for await (const page of this.listFieldsByTypePagingPage(
      resourceGroupName,
      automationAccountName,
      typeName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieve a list of fields of a given type identified by module name.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param moduleName The name of module.
   * @param typeName The name of type.
   * @param options The options parameters.
   */
  private _listFieldsByModuleAndType(
    resourceGroupName: string,
    automationAccountName: string,
    moduleName: string,
    typeName: string,
    options?: ObjectDataTypesListFieldsByModuleAndTypeOptionalParams
  ): Promise<ObjectDataTypesListFieldsByModuleAndTypeResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        moduleName,
        typeName,
        options
      },
      listFieldsByModuleAndTypeOperationSpec
    );
  }

  /**
   * Retrieve a list of fields of a given type across all accessible modules.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param typeName The name of type.
   * @param options The options parameters.
   */
  private _listFieldsByType(
    resourceGroupName: string,
    automationAccountName: string,
    typeName: string,
    options?: ObjectDataTypesListFieldsByTypeOptionalParams
  ): Promise<ObjectDataTypesListFieldsByTypeResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, typeName, options },
      listFieldsByTypeOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listFieldsByModuleAndTypeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}/objectDataTypes/{typeName}/fields",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TypeFieldListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.moduleName,
    Parameters.typeName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listFieldsByTypeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/objectDataTypes/{typeName}/fields",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TypeFieldListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.typeName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
