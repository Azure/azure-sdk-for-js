/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  PrivateEndpointConnectionsImpl,
  PrivateLinkResourcesImpl,
  AgentRegistrationInformationImpl,
  DscNodeOperationsImpl,
  NodeReportsImpl,
  DscCompilationJobOperationsImpl,
  DscCompilationJobStreamImpl,
  NodeCountInformationImpl,
  WatcherOperationsImpl,
  SoftwareUpdateConfigurationsImpl,
  WebhookOperationsImpl,
  DeletedAutomationAccountsImpl,
  Python3PackageImpl,
  AutomationAccountOperationsImpl,
  StatisticsOperationsImpl,
  UsagesImpl,
  KeysImpl,
  CertificateOperationsImpl,
  ConnectionOperationsImpl,
  ConnectionTypeOperationsImpl,
  CredentialOperationsImpl,
  DscConfigurationOperationsImpl,
  DscNodeConfigurationOperationsImpl,
  HybridRunbookWorkersImpl,
  HybridRunbookWorkerGroupOperationsImpl,
  JobOperationsImpl,
  JobStreamOperationsImpl,
  JobScheduleOperationsImpl,
  LinkedWorkspaceOperationsImpl,
  ActivityOperationsImpl,
  ModuleOperationsImpl,
  ObjectDataTypesImpl,
  FieldsImpl,
  OperationsImpl,
  Python2PackageImpl,
  RunbookDraftOperationsImpl,
  RunbookOperationsImpl,
  TestJobStreamsImpl,
  TestJobOperationsImpl,
  ScheduleOperationsImpl,
  SoftwareUpdateConfigurationMachineRunsImpl,
  SoftwareUpdateConfigurationRunsImpl,
  SourceControlOperationsImpl,
  SourceControlSyncJobOperationsImpl,
  SourceControlSyncJobStreamsImpl,
  VariableOperationsImpl
} from "./operations";
import {
  PrivateEndpointConnections,
  PrivateLinkResources,
  AgentRegistrationInformation,
  DscNodeOperations,
  NodeReports,
  DscCompilationJobOperations,
  DscCompilationJobStream,
  NodeCountInformation,
  WatcherOperations,
  SoftwareUpdateConfigurations,
  WebhookOperations,
  DeletedAutomationAccounts,
  Python3Package,
  AutomationAccountOperations,
  StatisticsOperations,
  Usages,
  Keys,
  CertificateOperations,
  ConnectionOperations,
  ConnectionTypeOperations,
  CredentialOperations,
  DscConfigurationOperations,
  DscNodeConfigurationOperations,
  HybridRunbookWorkers,
  HybridRunbookWorkerGroupOperations,
  JobOperations,
  JobStreamOperations,
  JobScheduleOperations,
  LinkedWorkspaceOperations,
  ActivityOperations,
  ModuleOperations,
  ObjectDataTypes,
  Fields,
  Operations,
  Python2Package,
  RunbookDraftOperations,
  RunbookOperations,
  TestJobStreams,
  TestJobOperations,
  ScheduleOperations,
  SoftwareUpdateConfigurationMachineRuns,
  SoftwareUpdateConfigurationRuns,
  SourceControlOperations,
  SourceControlSyncJobOperations,
  SourceControlSyncJobStreams,
  VariableOperations
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  AutomationClientOptionalParams,
  GraphicalRunbookContent,
  ConvertGraphRunbookContentOptionalParams,
  ConvertGraphRunbookContentResponse
} from "./models";

export class AutomationClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the AutomationClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
   *                       subscription. The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: AutomationClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: AutomationClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-automation/11.0.0-beta.4`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes: `${optionsWithDefaults.credentialScopes}`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
    this.privateLinkResources = new PrivateLinkResourcesImpl(this);
    this.agentRegistrationInformation = new AgentRegistrationInformationImpl(
      this
    );
    this.dscNodeOperations = new DscNodeOperationsImpl(this);
    this.nodeReports = new NodeReportsImpl(this);
    this.dscCompilationJobOperations = new DscCompilationJobOperationsImpl(
      this
    );
    this.dscCompilationJobStream = new DscCompilationJobStreamImpl(this);
    this.nodeCountInformation = new NodeCountInformationImpl(this);
    this.watcherOperations = new WatcherOperationsImpl(this);
    this.softwareUpdateConfigurations = new SoftwareUpdateConfigurationsImpl(
      this
    );
    this.webhookOperations = new WebhookOperationsImpl(this);
    this.deletedAutomationAccounts = new DeletedAutomationAccountsImpl(this);
    this.python3Package = new Python3PackageImpl(this);
    this.automationAccountOperations = new AutomationAccountOperationsImpl(
      this
    );
    this.statisticsOperations = new StatisticsOperationsImpl(this);
    this.usages = new UsagesImpl(this);
    this.keys = new KeysImpl(this);
    this.certificateOperations = new CertificateOperationsImpl(this);
    this.connectionOperations = new ConnectionOperationsImpl(this);
    this.connectionTypeOperations = new ConnectionTypeOperationsImpl(this);
    this.credentialOperations = new CredentialOperationsImpl(this);
    this.dscConfigurationOperations = new DscConfigurationOperationsImpl(this);
    this.dscNodeConfigurationOperations = new DscNodeConfigurationOperationsImpl(
      this
    );
    this.hybridRunbookWorkers = new HybridRunbookWorkersImpl(this);
    this.hybridRunbookWorkerGroupOperations = new HybridRunbookWorkerGroupOperationsImpl(
      this
    );
    this.jobOperations = new JobOperationsImpl(this);
    this.jobStreamOperations = new JobStreamOperationsImpl(this);
    this.jobScheduleOperations = new JobScheduleOperationsImpl(this);
    this.linkedWorkspaceOperations = new LinkedWorkspaceOperationsImpl(this);
    this.activityOperations = new ActivityOperationsImpl(this);
    this.moduleOperations = new ModuleOperationsImpl(this);
    this.objectDataTypes = new ObjectDataTypesImpl(this);
    this.fields = new FieldsImpl(this);
    this.operations = new OperationsImpl(this);
    this.python2Package = new Python2PackageImpl(this);
    this.runbookDraftOperations = new RunbookDraftOperationsImpl(this);
    this.runbookOperations = new RunbookOperationsImpl(this);
    this.testJobStreams = new TestJobStreamsImpl(this);
    this.testJobOperations = new TestJobOperationsImpl(this);
    this.scheduleOperations = new ScheduleOperationsImpl(this);
    this.softwareUpdateConfigurationMachineRuns = new SoftwareUpdateConfigurationMachineRunsImpl(
      this
    );
    this.softwareUpdateConfigurationRuns = new SoftwareUpdateConfigurationRunsImpl(
      this
    );
    this.sourceControlOperations = new SourceControlOperationsImpl(this);
    this.sourceControlSyncJobOperations = new SourceControlSyncJobOperationsImpl(
      this
    );
    this.sourceControlSyncJobStreams = new SourceControlSyncJobStreamsImpl(
      this
    );
    this.variableOperations = new VariableOperationsImpl(this);
  }

  /**
   * Post operation to serialize or deserialize GraphRunbookContent
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param parameters Input data describing the graphical runbook.
   * @param options The options parameters.
   */
  convertGraphRunbookContent(
    resourceGroupName: string,
    automationAccountName: string,
    parameters: GraphicalRunbookContent,
    options?: ConvertGraphRunbookContentOptionalParams
  ): Promise<ConvertGraphRunbookContentResponse> {
    return this.sendOperationRequest(
      { resourceGroupName, automationAccountName, parameters, options },
      convertGraphRunbookContentOperationSpec
    );
  }

  privateEndpointConnections: PrivateEndpointConnections;
  privateLinkResources: PrivateLinkResources;
  agentRegistrationInformation: AgentRegistrationInformation;
  dscNodeOperations: DscNodeOperations;
  nodeReports: NodeReports;
  dscCompilationJobOperations: DscCompilationJobOperations;
  dscCompilationJobStream: DscCompilationJobStream;
  nodeCountInformation: NodeCountInformation;
  watcherOperations: WatcherOperations;
  softwareUpdateConfigurations: SoftwareUpdateConfigurations;
  webhookOperations: WebhookOperations;
  deletedAutomationAccounts: DeletedAutomationAccounts;
  python3Package: Python3Package;
  automationAccountOperations: AutomationAccountOperations;
  statisticsOperations: StatisticsOperations;
  usages: Usages;
  keys: Keys;
  certificateOperations: CertificateOperations;
  connectionOperations: ConnectionOperations;
  connectionTypeOperations: ConnectionTypeOperations;
  credentialOperations: CredentialOperations;
  dscConfigurationOperations: DscConfigurationOperations;
  dscNodeConfigurationOperations: DscNodeConfigurationOperations;
  hybridRunbookWorkers: HybridRunbookWorkers;
  hybridRunbookWorkerGroupOperations: HybridRunbookWorkerGroupOperations;
  jobOperations: JobOperations;
  jobStreamOperations: JobStreamOperations;
  jobScheduleOperations: JobScheduleOperations;
  linkedWorkspaceOperations: LinkedWorkspaceOperations;
  activityOperations: ActivityOperations;
  moduleOperations: ModuleOperations;
  objectDataTypes: ObjectDataTypes;
  fields: Fields;
  operations: Operations;
  python2Package: Python2Package;
  runbookDraftOperations: RunbookDraftOperations;
  runbookOperations: RunbookOperations;
  testJobStreams: TestJobStreams;
  testJobOperations: TestJobOperations;
  scheduleOperations: ScheduleOperations;
  softwareUpdateConfigurationMachineRuns: SoftwareUpdateConfigurationMachineRuns;
  softwareUpdateConfigurationRuns: SoftwareUpdateConfigurationRuns;
  sourceControlOperations: SourceControlOperations;
  sourceControlSyncJobOperations: SourceControlSyncJobOperations;
  sourceControlSyncJobStreams: SourceControlSyncJobStreams;
  variableOperations: VariableOperations;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const convertGraphRunbookContentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/convertGraphRunbookContent",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GraphicalRunbookContent
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters28,
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.automationAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
