/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/configurationMappers";
import * as Parameters from "../models/parameters";
import { EventHubManagementClientContext } from "../eventHubManagementClientContext";

/** Class representing a Configuration. */
export class Configuration {
  private readonly client: EventHubManagementClientContext;

  /**
   * Create a Configuration.
   * @param {EventHubManagementClientContext} client Reference to the service client.
   */
  constructor(client: EventHubManagementClientContext) {
    this.client = client;
  }

  /**
   * Replace all specified Event Hubs Cluster settings with those contained in the request body.
   * Leaves the settings not specified in the request body unmodified.
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param clusterName The name of the Event Hubs Cluster.
   * @param parameters Parameters for creating an Event Hubs Cluster resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConfigurationPatchResponse>
   */
  patch(resourceGroupName: string, clusterName: string, parameters: Models.ClusterQuotaConfigurationProperties, options?: msRest.RequestOptionsBase): Promise<Models.ConfigurationPatchResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param clusterName The name of the Event Hubs Cluster.
   * @param parameters Parameters for creating an Event Hubs Cluster resource.
   * @param callback The callback
   */
  patch(resourceGroupName: string, clusterName: string, parameters: Models.ClusterQuotaConfigurationProperties, callback: msRest.ServiceCallback<Models.ClusterQuotaConfigurationProperties>): void;
  /**
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param clusterName The name of the Event Hubs Cluster.
   * @param parameters Parameters for creating an Event Hubs Cluster resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(resourceGroupName: string, clusterName: string, parameters: Models.ClusterQuotaConfigurationProperties, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClusterQuotaConfigurationProperties>): void;
  patch(resourceGroupName: string, clusterName: string, parameters: Models.ClusterQuotaConfigurationProperties, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClusterQuotaConfigurationProperties>, callback?: msRest.ServiceCallback<Models.ClusterQuotaConfigurationProperties>): Promise<Models.ConfigurationPatchResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        parameters,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.ConfigurationPatchResponse>;
  }

  /**
   * Get all Event Hubs Cluster settings - a collection of key/value pairs which represent the quotas
   * and settings imposed on the cluster.
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param clusterName The name of the Event Hubs Cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConfigurationGetResponse>
   */
  get(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConfigurationGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param clusterName The name of the Event Hubs Cluster.
   * @param callback The callback
   */
  get(resourceGroupName: string, clusterName: string, callback: msRest.ServiceCallback<Models.ClusterQuotaConfigurationProperties>): void;
  /**
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param clusterName The name of the Event Hubs Cluster.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, clusterName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClusterQuotaConfigurationProperties>): void;
  get(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClusterQuotaConfigurationProperties>, callback?: msRest.ServiceCallback<Models.ClusterQuotaConfigurationProperties>): Promise<Models.ConfigurationGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ConfigurationGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/quotaConfiguration/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ClusterQuotaConfigurationProperties,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ClusterQuotaConfigurationProperties
    },
    201: {
      bodyMapper: Mappers.ClusterQuotaConfigurationProperties
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/quotaConfiguration/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterQuotaConfigurationProperties
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
