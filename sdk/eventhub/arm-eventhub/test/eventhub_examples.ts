/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { EventHubManagementClient } from "../src/eventHubManagementClient";
import { StorageManagementClient, StorageAccountCreateParameters } from "@azure/arm-storage";
import { NetworkManagementClient, VirtualNetwork } from "@azure/arm-network";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Eventhub test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: EventHubManagementClient;
  let location: string;
  let resourceGroupName: string;
  let storageAccountName: string;
  let subnetName: string;
  let eventhubName: string;
  let namespaceName: string;
  let virtualNetworkName: string;
  let storage_client: StorageManagementClient;
  let network_client: NetworkManagementClient;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new EventHubManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    storage_client = new StorageManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    network_client = new NetworkManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroupName = "myjstest";
    subnetName = "subnetxxx";
    eventhubName = "myeventhubxxx";
    namespaceName = "mynamespacexxx";
    virtualNetworkName = "myvirtualnetwork";
    storageAccountName = "mystorageaccountxxx11";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  // virtualNetworks.beginCreateOrUpdateAndWait
  // subnets.beginCreateOrUpdateAndWait
  async function createVirtualNetwork() {
    const parameter: VirtualNetwork = {
      location: location,
      addressSpace: {
        addressPrefixes: ["10.0.0.0/16"],
      },
    };
    const network_create = await network_client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, parameter, testPollingOptions);
    const subnet_info = await network_client.subnets.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, subnetName, { addressPrefix: "10.0.0.0/24" }, testPollingOptions);
  }

  //storageAccounts.beginCreateAndWait
  async function storageAccounts_beginCreateAndWait() {
    const parameter: StorageAccountCreateParameters = {
      sku: {
        name: "Standard_GRS",
      },
      kind: "StorageV2",
      location: location,
    };
    const storageaccount = await storage_client.storageAccounts.beginCreateAndWait(
      resourceGroupName,
      storageAccountName,
      parameter,
      testPollingOptions
    );
    console.log(storageaccount);
  }

  it("namespaces create test", async function () {
    await createVirtualNetwork();
    await storageAccounts_beginCreateAndWait();
    const res = await client.namespaces.beginCreateOrUpdateAndWait(resourceGroupName, namespaceName, {
      sku: {
        name: "Standard",
        tier: "Standard",
      },
      location: location,
      tags: {
        tag1: "value1",
        tag2: "value2",
      }
    }, testPollingOptions);
    assert.equal(res.name, "mynamespacexxx");
  });

  it("eventHubs create test", async function () {
    const res = await client.eventHubs.createOrUpdate(resourceGroupName, namespaceName, eventhubName, {
      messageRetentionInDays: 4,
      partitionCount: 4,
      status: "Active",
      captureDescription: {
        enabled: true,
        encoding: "Avro",
        intervalInSeconds: 120,
        sizeLimitInBytes: 10485763,
        destination: {
          name: "EventHubArchive.AzureBlockBlob",
          storageAccountResourceId:
            "/subscriptions/" +
            subscriptionId +
            "/resourceGroups/" +
            resourceGroupName +
            "/providers/Microsoft.Storage/storageAccounts/" +
            storageAccountName,
          blobContainer: "container",
          archiveNameFormat:
            "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}",
        }
      }
    });
    assert.equal(res.name, "myeventhubxxx");
  });

  it("eventHubs get test", async function () {
    const res = await client.eventHubs.get(resourceGroupName, namespaceName, eventhubName);
    console.log(res.type, "Microsoft.EventHub/Namespaces/EventHubs");
  });

  it("eventHubs listByNamespace test", async function () {
    const resArray = new Array();
    for await (const item of client.eventHubs.listByNamespace(resourceGroupName, namespaceName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("eventHubs delete test", async function () {
    const res = await client.eventHubs.delete(resourceGroupName, namespaceName, eventhubName);
    const resArray = new Array();
    for await (const item of client.eventHubs.listByNamespace(resourceGroupName, namespaceName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("namespaces delete test", async function () {
    const res = await client.namespaces.beginDeleteAndWait(resourceGroupName, namespaceName, testPollingOptions);
    const resArray = new Array();
    for await (const item of client.namespaces.listByResourceGroup(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
});
