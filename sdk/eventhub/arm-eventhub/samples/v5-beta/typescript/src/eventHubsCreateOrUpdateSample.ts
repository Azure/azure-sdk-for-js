/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { Eventhub, EventHubManagementClient } from "@azure/arm-eventhub";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";

dotenv.config();

/**
 * This sample demonstrates how to Creates or updates a new Event Hub as a nested resource within a Namespace.
 *
 * @summary Creates or updates a new Event Hub as a nested resource within a Namespace.
 * x-ms-original-file: specification/eventhub/resource-manager/Microsoft.EventHub/preview/2022-10-01-preview/examples/EventHubs/EHEventHubCreate.json
 */
async function eventHubCreate() {
  const subscriptionId =
    process.env["EVENTHUB_SUBSCRIPTION_ID"] ||
    "5f750a97-50d9-4e36-8081-c9ee4c0210d4";
  const resourceGroupName =
    process.env["EVENTHUB_RESOURCE_GROUP"] ||
    "Default-NotificationHubs-AustraliaEast";
  const namespaceName = "sdk-Namespace-5357";
  const eventHubName = "sdk-EventHub-6547";
  const parameters: Eventhub = {
    captureDescription: {
      destination: {
        name: "EventHubArchive.AzureBlockBlob",
        archiveNameFormat:
          "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}",
        blobContainer: "container",
        storageAccountResourceId:
          "/subscriptions/e2f361f0-3b27-4503-a9cc-21cfba380093/resourceGroups/Default-Storage-SouthCentralUS/providers/Microsoft.ClassicStorage/storageAccounts/arjunteststorage"
      },
      enabled: true,
      encoding: "Avro",
      intervalInSeconds: 120,
      sizeLimitInBytes: 10485763
    },
    messageRetentionInDays: 4,
    partitionCount: 4,
    retentionDescription: {
      cleanupPolicy: "Compaction",
      retentionTimeInHours: 96,
      tombstoneRetentionTimeInHours: 1
    },
    status: "Active"
  };
  const credential = new DefaultAzureCredential();
  const client = new EventHubManagementClient(credential, subscriptionId);
  const result = await client.eventHubs.createOrUpdate(
    resourceGroupName,
    namespaceName,
    eventHubName,
    parameters
  );
  console.log(result);
}

async function main() {
  eventHubCreate();
}

main().catch(console.error);
