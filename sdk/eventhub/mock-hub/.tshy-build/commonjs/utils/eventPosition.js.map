{"version":3,"file":"eventPosition.js","sourceRoot":"","sources":["../../../src/utils/eventPosition.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA+BlC,4CA6BC;AAhCD;;GAEG;AACH,SAAgB,gBAAgB,CAAC,MAAc;IAC7C,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACtD,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAEhD,IAAI,QAAQ,KAAK,GAAG,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;QAC1C,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC5C,CAAC;IAED,IAAI,QAAQ,KAAK,8BAA8B,EAAE,CAAC;QAChD,OAAO;YACL,IAAI,EAAE,QAAQ;YACd,QAAQ;YACR,KAAK,EAAE,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,EAAE,EAAE,CAAC;SACvF,CAAC;IACJ,CAAC;SAAM,IAAI,QAAQ,KAAK,uCAAuC,EAAE,CAAC;QAChE,OAAO;YACL,IAAI,EAAE,gBAAgB;YACtB,QAAQ;YACR,KAAK,EAAE,QAAQ,CAAC,eAAe,EAAE,EAAE,CAAC;SACrC,CAAC;IACJ,CAAC;SAAM,IAAI,QAAQ,KAAK,qCAAqC,EAAE,CAAC;QAC9D,OAAO;YACL,IAAI,EAAE,cAAc;YACpB,QAAQ;YACR,KAAK,EAAE,QAAQ,CAAC,eAAe,EAAE,EAAE,CAAC;SACrC,CAAC;IACJ,CAAC;IAED,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport type EventPosition =\n  | EnqueuedTimeEventPosition\n  | OffsetEventPosition\n  | SequenceNumberEventPosition;\n\nexport interface BaseEventPosition {\n  type: string;\n  operator: \">\" | \">=\";\n  value: string | number;\n}\n\nexport interface OffsetEventPosition extends BaseEventPosition {\n  type: \"offset\";\n  value: number | \"@latest\";\n}\n\nexport interface SequenceNumberEventPosition extends BaseEventPosition {\n  type: \"sequenceNumber\";\n  value: number;\n}\n\nexport interface EnqueuedTimeEventPosition extends BaseEventPosition {\n  type: \"enqueuedTime\";\n  value: number;\n}\n\n/**\n * Returns an `EventPosition` given an amqp source filter.\n */\nexport function getEventPosition(filter: string): EventPosition {\n  const [fullType, operator, value] = filter.split(\" \");\n  const normalizedValue = value.replace(/'/g, \"\");\n\n  if (operator !== \">\" && operator !== \">=\") {\n    throw new Error(`Invalid event position`);\n  }\n\n  if (fullType === \"amqp.annotation.x-opt-offset\") {\n    return {\n      type: \"offset\",\n      operator,\n      value: normalizedValue === \"@latest\" ? normalizedValue : parseInt(normalizedValue, 10),\n    };\n  } else if (fullType === \"amqp.annotation.x-opt-sequence-number\") {\n    return {\n      type: \"sequenceNumber\",\n      operator,\n      value: parseInt(normalizedValue, 10),\n    };\n  } else if (fullType === \"amqp.annotation.x-opt-enqueued-time\") {\n    return {\n      type: \"enqueuedTime\",\n      operator,\n      value: parseInt(normalizedValue, 10),\n    };\n  }\n\n  throw new Error(`Invalid event position`);\n}\n"]}