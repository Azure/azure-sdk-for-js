{"version":3,"file":"runtimeInfo.js","sourceRoot":"","sources":["../../../../src/messages/event-hubs/runtimeInfo.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAUlC,4CA0BC;AAaD,wEAmBC;;AAlED,wDAAwB;AAExB;;;;;GAKG;AACH,SAAgB,gBAAgB,CAAC,UAAkB,EAAE,OAAqB;IACxE,IAAI,UAAU,KAAK,aAAa,EAAE,CAAC;QACjC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,UAAU,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAClD,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,UAAU,CAAC,SAAS,KAAK,MAAM,IAAI,UAAU,CAAC,IAAI,KAAK,wBAAwB,EAAE,CAAC;QACpF,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACxC,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAAC,OAAO,GAAY,EAAE,CAAC;QACtB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAUD;;GAEG;AACH,SAAgB,8BAA8B,CAAC,EAC7C,aAAa,EACb,UAAU,EACV,cAAc,EACd,SAAS,EACT,YAAY,GAC0B;IACtC,OAAO;QACL,EAAE,EAAE,cAAc;QAClB,cAAc,EAAE,aAAa;QAC7B,sBAAsB,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,cAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACtF,IAAI,EAAE;YACJ,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,wBAAwB;YAC9B,UAAU,EAAE,SAAS;YACrB,eAAe,EAAE,UAAU,CAAC,MAAM;YAClC,aAAa,EAAE,cAAI,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,EAAE,SAAS,CAAC;SAClE;KACF,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport rhea from \"rhea\";\n\n/**\n * Checks whether the provided message is requesting the EventHub's runtime info.\n * @param entityPath - The path the client sent the request to.\n * Expected to be `$management` if the message is requesting runtime info.\n * @param message - The message sent by the client.\n */\nexport function isHubRuntimeInfo(entityPath: string, message: rhea.Message): boolean {\n  if (entityPath !== \"$management\") {\n    return false;\n  }\n\n  const properties = message.application_properties;\n  if (!properties) {\n    return false;\n  }\n\n  if (properties.operation !== \"READ\" || properties.type !== \"com.microsoft:eventhub\") {\n    return false;\n  }\n\n  if (!message.body) {\n    return true;\n  }\n  try {\n    const body = JSON.parse(message.body);\n    if (Array.isArray(body) && !body.length) {\n      return true;\n    }\n  } catch (err: unknown) {\n    return false;\n  }\n  return false;\n}\n\nexport interface GenerateHubRuntimeInfoResponseOptions {\n  correlationId?: string;\n  partitions: string[];\n  targetLinkName?: string;\n  createdOn: Date;\n  eventHubName: string;\n}\n\n/**\n * Generates a message containing the EventHub's runtime info.\n */\nexport function generateHubRuntimeInfoResponse({\n  correlationId,\n  partitions,\n  targetLinkName,\n  createdOn,\n  eventHubName,\n}: GenerateHubRuntimeInfoResponseOptions): rhea.Message {\n  return {\n    to: targetLinkName,\n    correlation_id: correlationId,\n    application_properties: { operation: \"READ\", \"status-code\": rhea.types.wrap_int(200) },\n    body: {\n      name: eventHubName,\n      type: \"com.microsoft:eventhub\",\n      created_at: createdOn,\n      partition_count: partitions.length,\n      partition_ids: rhea.types.wrap_array(partitions, 0xa1, undefined),\n    },\n  };\n}\n"]}