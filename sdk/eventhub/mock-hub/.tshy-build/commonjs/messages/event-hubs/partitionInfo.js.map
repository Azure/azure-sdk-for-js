{"version":3,"file":"partitionInfo.js","sourceRoot":"","sources":["../../../../src/messages/event-hubs/partitionInfo.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAUlC,0CA+BC;AAiBD,sEA0BC;AAOD,4EAgBC;;AAzGD,wDAAwB;AAExB;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,UAAkB,EAAE,OAAqB;IACvE,IAAI,UAAU,KAAK,aAAa,EAAE,CAAC;QACjC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,UAAU,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAClD,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IACE,UAAU,CAAC,SAAS,KAAK,MAAM;QAC/B,UAAU,CAAC,IAAI,KAAK,yBAAyB;QAC7C,OAAO,UAAU,CAAC,SAAS,KAAK,QAAQ,EACxC,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACxC,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAAC,OAAO,GAAY,EAAE,CAAC;QACtB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAcD;;GAEG;AACH,SAAgB,6BAA6B,CAAC,EAC5C,YAAY,EACZ,aAAa,EACb,cAAc,EACd,uBAAuB,EACvB,0BAA0B,EAC1B,kBAAkB,EAClB,mBAAmB,EACnB,gBAAgB,EAChB,WAAW,GAC0B;IACrC,OAAO;QACL,EAAE,EAAE,cAAc;QAClB,cAAc,EAAE,aAAa;QAC7B,sBAAsB,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,cAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACtF,IAAI,EAAE;YACJ,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,yBAAyB;YAC/B,qBAAqB,EAAE,cAAI,CAAC,KAAK,CAAC,SAAS,CAAC,uBAAuB,CAAC;YACpE,6BAA6B,EAAE,cAAI,CAAC,KAAK,CAAC,SAAS,CAAC,0BAA0B,CAAC;YAC/E,oBAAoB,EAAE,kBAAkB;YACxC,sBAAsB,EAAE,mBAAmB;YAC3C,kBAAkB,EAAE,gBAAgB;YACpC,SAAS,EAAE,WAAW;SACvB;KACF,CAAC;AACJ,CAAC;AAOD,SAAgB,gCAAgC,CAAC,EAC/C,aAAa,EACb,cAAc,GAC0B;IACxC,OAAO;QACL,EAAE,EAAE,cAAc;QAClB,cAAc,EAAE,aAAa;QAC7B,sBAAsB,EAAE;YACtB,SAAS,EAAE,MAAM;YACjB,aAAa,EAAE,GAAG;YAClB,iBAAiB,EAAE,qCAAqC;YACxD,oBAAoB,EAClB,kFAAkF;SACrF;QACD,IAAI,EAAE,SAAS;KAChB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport rhea from \"rhea\";\n\n/**\n * Checks whether the provided message is requesting the partition info from the Event Hub.\n * @param entityPath - The path the client sent the request to.\n * Expected to be `$management` if the message is requesting runtime info.\n * @param message - The message sent by the client.\n */\nexport function isPartitionInfo(entityPath: string, message: rhea.Message): boolean {\n  if (entityPath !== \"$management\") {\n    return false;\n  }\n\n  const properties = message.application_properties;\n  if (!properties) {\n    return false;\n  }\n\n  if (\n    properties.operation !== \"READ\" ||\n    properties.type !== \"com.microsoft:partition\" ||\n    typeof properties.partition !== \"string\"\n  ) {\n    return false;\n  }\n\n  if (!message.body) {\n    return true;\n  }\n\n  try {\n    const body = JSON.parse(message.body);\n    if (Array.isArray(body) && !body.length) {\n      return true;\n    }\n  } catch (err: unknown) {\n    return false;\n  }\n  return false;\n}\n\nexport interface GeneratePartitionInfoResponseOptions {\n  correlationId?: string;\n  eventHubName: string;\n  targetLinkName?: string;\n  beginningSequenceNumber: number;\n  lastEnqueuedSequenceNumber: number;\n  lastEnqueuedOffset: string;\n  lastEnqueuedTimeUtc: Date;\n  isPartitionEmpty: boolean;\n  partitionId: string;\n}\n\n/**\n * Generates a message containing the EventHub's specified partition info.\n */\nexport function generatePartitionInfoResponse({\n  eventHubName,\n  correlationId,\n  targetLinkName,\n  beginningSequenceNumber,\n  lastEnqueuedSequenceNumber,\n  lastEnqueuedOffset,\n  lastEnqueuedTimeUtc,\n  isPartitionEmpty,\n  partitionId,\n}: GeneratePartitionInfoResponseOptions): rhea.Message {\n  return {\n    to: targetLinkName,\n    correlation_id: correlationId,\n    application_properties: { operation: \"READ\", \"status-code\": rhea.types.wrap_int(200) },\n    body: {\n      name: eventHubName,\n      type: \"com.microsoft:partition\",\n      begin_sequence_number: rhea.types.wrap_long(beginningSequenceNumber),\n      last_enqueued_sequence_number: rhea.types.wrap_long(lastEnqueuedSequenceNumber),\n      last_enqueued_offset: lastEnqueuedOffset,\n      last_enqueued_time_utc: lastEnqueuedTimeUtc,\n      is_partition_empty: isPartitionEmpty,\n      partition: partitionId,\n    },\n  };\n}\n\nexport interface GenerateBadPartitionInfoResponseOptions {\n  correlationId?: string;\n  targetLinkName?: string;\n}\n\nexport function generateBadPartitionInfoResponse({\n  correlationId,\n  targetLinkName,\n}: GenerateBadPartitionInfoResponseOptions): rhea.Message {\n  return {\n    to: targetLinkName,\n    correlation_id: correlationId,\n    application_properties: {\n      operation: \"READ\",\n      \"status-code\": 400,\n      \"error-condition\": \"com.microsoft:argument-out-of-range\",\n      \"status-description\":\n        \"The specified partition is invalid for an EventHub partition sender or receiver.\",\n    },\n    body: undefined,\n  };\n}\n"]}