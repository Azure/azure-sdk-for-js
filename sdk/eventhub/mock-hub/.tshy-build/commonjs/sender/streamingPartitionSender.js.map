{"version":3,"file":"streamingPartitionSender.js","sourceRoot":"","sources":["../../../src/sender/streamingPartitionSender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport rhea from \"rhea\";\nimport type { MessageRecord, MessageStore } from \"../storage/messageStore.js\";\nimport type { EventPosition } from \"../utils/eventPosition.js\";\n\n/**\n * The StreamingPartitionSender is responsible for sending stored events to a client\n * listening for events on a partition.\n *\n */\nexport class StreamingPartitionSender {\n  private _messageStore: MessageStore;\n  private _messageIterator: ReturnType<MessageStore[\"getMessageIterator\"]>;\n  private _partitionId: string;\n  private _sender: rhea.Sender;\n  private _abortController = new AbortController();\n  private _enableRuntimeMetric: boolean;\n\n  /**\n   * Instantiates a `StreamingPartitionSender`.\n   * @param messageStore - The `MessageStore` that contains all of the messages sent to the service.\n   * @param sender - The sender link that should be used to send messages to.\n   * @param partitionId - Specifies which partition to send messages from.\n   * @param startPosition - Specifies which message to start iterating from.\n   * @param enableRuntimeMetric - Indicates whether partition info should be sent on each event.\n   */\n  constructor(\n    messageStore: MessageStore,\n    sender: rhea.Sender,\n    partitionId: string,\n    startPosition: EventPosition,\n    enableRuntimeMetric: boolean,\n  ) {\n    this._messageStore = messageStore;\n    this._messageIterator = messageStore.getMessageIterator(partitionId, startPosition);\n    this._sender = sender;\n    this._partitionId = partitionId;\n    this._enableRuntimeMetric = enableRuntimeMetric;\n  }\n\n  /**\n   * Starts sending messages.\n   */\n  start(): void {\n    this._sendMessages().catch((err) => {\n      console.error(`Unexpected error while sending messages`, err);\n    });\n  }\n\n  /**\n   * Stops sending messages.\n   */\n  stop(): void {\n    this._abortController.abort();\n  }\n\n  private async _sendMessages(): Promise<void> {\n    const abortSignal = this._abortController.signal;\n    const iterator = this._messageIterator;\n    const sender = this._sender;\n\n    let nextResult: IteratorResult<MessageRecord, void> | undefined;\n    do {\n      try {\n        nextResult = await iterator.next(/* shouldStop */ abortSignal.aborted);\n        // Check if the iterator is completed and we should exit the loop.\n        const value = nextResult.value;\n        if (!value || abortSignal.aborted) {\n          break;\n        }\n\n        // Set the message's message annotations.\n        const messageAnnotations = value.message.message_annotations ?? {};\n        messageAnnotations[\"x-opt-sequence-number\"] = rhea.types.wrap_long(value.sequenceNumber);\n        messageAnnotations[\"x-opt-offset\"] = `${value.offset}`;\n        messageAnnotations[\"x-opt-enqueued-time\"] = value.enqueuedTime;\n        if (value.partitionKey) {\n          messageAnnotations[\"x-opt-partition-key\"] = value.partitionKey;\n        }\n\n        // Set the `PartitionInfo` if `enableRuntimeMetric` is turned on.\n        const deliveryAnnotations: rhea.DeliveryAnnotations = {};\n        if (this._enableRuntimeMetric) {\n          const partitionInfo = this._messageStore.getPartitionInfo(this._partitionId);\n          deliveryAnnotations[\"last_enqueued_offset\"] = partitionInfo.lastEnqueuedOffset;\n          deliveryAnnotations[\"last_enqueued_sequence_number\"] = rhea.types.wrap_long(\n            partitionInfo.lastEnqueuedSequenceNumber,\n          );\n          deliveryAnnotations[\"last_enqueued_time_utc\"] = partitionInfo.lastEnqueuedTimeUtc;\n          deliveryAnnotations[\"runtime_info_retrieval_time_utc\"] = new Date();\n        }\n\n        // Wait for the sender link to have credit available before sending the message.\n        if (!sender.has_credit()) {\n          await this._waitForSendable(sender, abortSignal);\n        }\n\n        const outgoingMessage: rhea.Message = {\n          ...value.message,\n        };\n        if (Object.keys(messageAnnotations).length) {\n          outgoingMessage.message_annotations = messageAnnotations;\n        }\n        if (Object.keys(deliveryAnnotations).length) {\n          outgoingMessage.delivery_annotations = deliveryAnnotations;\n        }\n        // And away it goes!\n        sender.send(outgoingMessage);\n      } catch (err: unknown) {\n        if (err instanceof Error && err.name !== \"AbortError\") {\n          console.error(`Unexpected error while streaming events: `, err);\n        }\n      }\n    } while (!abortSignal.aborted && !nextResult?.done);\n  }\n\n  private _waitForSendable(sender: rhea.Sender, abortSignal: AbortSignal): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const onAbort = (): void => {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        sender.removeListener(rhea.SenderEvents.sendable, onSendable);\n        abortSignal.removeEventListener(\"abort\", onAbort);\n        reject(new AbortError(\"Cancelled operation.\"));\n      };\n\n      const onSendable = (): void => {\n        abortSignal.removeEventListener(\"abort\", onAbort);\n        resolve();\n      };\n\n      sender.once(rhea.SenderEvents.sendable, onSendable);\n\n      abortSignal.addEventListener(\"abort\", onAbort);\n    });\n  }\n}\n"]}