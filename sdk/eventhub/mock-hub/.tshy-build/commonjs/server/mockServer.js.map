{"version":3,"file":"mockServer.js","sourceRoot":"","sources":["../../../src/server/mockServer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport rhea from \"rhea\";\nimport { EventEmitter } from \"events\";\nimport type { ListenOptions } from \"net\";\nimport { convertBufferToMessages } from \"../utils/convertBufferToMessage.js\";\n\nexport interface MockServerOptions {\n  /**\n   * The port number the server should listen on.\n   * If not specified, an open port will be chosen at random.\n   */\n  port?: number;\n  /**\n   * The maximum message size to allow on `Sender` and `Receiver` links.\n   * Defaults to 1 MB.\n   */\n  maxMessageSize?: number;\n  /**\n   * Specifies the idle timeout in milliseconds.\n   * Defaults to 240000.\n   */\n  idleTimeOut?: number;\n\n  tlsOptions?: {\n    /**\n     * Optionally override the trusted CA certificates.\n     * Default is to trust the well-known CAs curated by Mozilla.\n     * Mozilla's CAs are completely replaced when CAs are explicitly specified using this option.\n     */\n    ca?: string | string[] | Buffer | Buffer[];\n\n    /**\n     * Cert chains in PEM format.\n     * One cert chain should be provided per private key.\n     *  Each cert chain should consist of the PEM formatted certificate for a provided private key,\n     *  followed by the PEM formatted intermediate certificates (if any), in order,\n     *  and not including the root CA (the root CA must be pre-known to the peer, see ca).\n     */\n    cert?: string | string[] | Buffer | Buffer[];\n\n    /**\n     * Private keys in PEM format.\n     * PEM allows the option of private keys being encrypted.\n     * Encrypted keys will be decrypted with options.passphrase.\n     */\n    key?: string | string[] | Buffer | Buffer[];\n\n    /**\n     * PFX or PKCS12 encoded private key and certificate chain.\n     * pfx is an alternative to providing key and cert individually.\n     */\n    pfx?: string | string[] | Buffer | Buffer[];\n\n    /**\n     * Shared passphrase used for a single private key and/or a PFX.\n     */\n    passphrase?: string;\n  };\n}\n\nexport interface ReceiverOpenEvent {\n  entityPath: string;\n  receiver: rhea.Receiver;\n  context: rhea.EventContext;\n}\n\nexport interface ReceiverCloseEvent {\n  entityPath: string;\n  receiver: rhea.Receiver;\n  context: rhea.EventContext;\n}\n\nexport interface SenderOpenEvent {\n  entityPath: string;\n  sender: rhea.Sender;\n  context: rhea.EventContext;\n}\n\nexport interface SenderCloseEvent {\n  entityPath: string;\n  sender: rhea.Sender;\n  context: rhea.EventContext;\n}\n\nexport interface ConnectionOpenEvent {\n  context: rhea.EventContext;\n}\n\nexport interface ConnectionCloseEvent {\n  error?: Error | rhea.ConnectionError;\n  context: rhea.EventContext;\n}\n\nexport interface OnMessagesEvent {\n  messages: Array<rhea.Message & { body?: Buffer }>;\n  entityPath: string;\n  sendMessage: (message: rhea.Message) => void;\n  context: rhea.EventContext;\n}\n\n/**\n * A Mock AMQP server.\n *\n * This class is meant to make it easier for a mock service\n * to interact with incoming messages and link notifications.\n */\nexport class MockServer extends EventEmitter {\n  private _container: rhea.Container;\n  private _listener?: ReturnType<rhea.Container[\"listen\"]>;\n  private _options: MockServerOptions;\n\n  constructor(options: MockServerOptions = {}) {\n    super();\n    this._options = options;\n    this._container = rhea.create_container();\n  }\n\n  /**\n   * The port number the server is listening on.\n   * Returns `-1` if the server is not currently listening.\n   */\n  public get port(): number {\n    const address = this._listener?.address();\n    if (!address || typeof address === \"string\") {\n      return -1;\n    }\n    return address.port;\n  }\n\n  /**\n   * Starts the server.\n   */\n  public start(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const options = this._options;\n      const ONE_MB = 1024 * 1024;\n\n      const listenOptions: ListenOptions & rhea.ConnectionOptions & any = {\n        port: options.port ?? 0,\n        max_frame_size: 65536,\n        channel_max: 4999,\n        idle_time_out: options.idleTimeOut ?? 240000,\n        receiver_options: {\n          max_message_size: options.maxMessageSize ?? ONE_MB,\n          autosettle: true,\n          autoaccept: false,\n        },\n        sender_options: {\n          max_message_size: options.maxMessageSize ?? ONE_MB,\n          autosettle: true,\n        },\n        transport: \"tls\",\n        rejectUnauthorized: true,\n        ...options.tlsOptions,\n      };\n\n      this._setupDefaultListeners();\n      this._listener = this._container.listen(listenOptions);\n      this._listener.once(\"error\", reject);\n      this._listener.on(\"listening\", () => {\n        resolve();\n      });\n    });\n  }\n\n  emit(type: \"receiverOpen\", event: ReceiverOpenEvent): boolean;\n  emit(type: \"senderOpen\", event: SenderOpenEvent): boolean;\n  emit(type: \"connectionOpen\", event: ConnectionOpenEvent): boolean;\n  emit(type: \"onMessages\", event: OnMessagesEvent): boolean;\n  emit(type: \"receiverClose\", event: ReceiverCloseEvent): boolean;\n  emit(type: \"senderClose\", event: SenderCloseEvent): boolean;\n  emit(type: \"connectionClose\", event: ConnectionCloseEvent): boolean;\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  emit(type: string, event: any): boolean {\n    return super.emit(type, event);\n  }\n\n  /**\n   * Add new \"receiverOpen\" event listener.\n   * This event indicates when the remote peer has created a `Sender`\n   * and the server creates a `Receiver` link in response.\n   * @param type - \"receiverOpen\"\n   * @param listener -\n   */\n  public on(type: \"receiverOpen\", listener: (event: ReceiverOpenEvent) => void): this;\n  /**\n   * Add new \"receiverClose\" event listener.\n   * This event indicates when the remote peer has closed a `Sender`\n   * and the server closes a `Receiver` link in response.\n   * @param type - \"receiverClose\"\n   * @param listener -\n   */\n  public on(type: \"receiverClose\", listener: (event: ReceiverCloseEvent) => void): this;\n  /**\n   * Add new \"connectionOpen\" event listener.\n   * This event indicates when the remote peer has created a connection to the server.\n   * @param type - \"connectionOpen\"\n   * @param listener -\n   */\n  public on(type: \"connectionOpen\", listener: (event: ConnectionOpenEvent) => void): this;\n  /**\n   * Add new \"senderOpen\" event listener.\n   * This event indicates when the remote peer has created a `Receiver`\n   * and the server creates a `Sender` link in response.\n   * @param type - \"senderOpen\"\n   * @param listener -\n   */\n  public on(type: \"senderOpen\", listener: (event: SenderOpenEvent) => void): this;\n  /**\n   * Add new \"senderClose\" event listener.\n   * This event indicates when the remote peer has closed a `Receiver`\n   * and the server closes a `Sender` link in response.\n   * @param type - \"senderClose\"\n   * @param listener -\n   */\n  public on(type: \"senderClose\", listener: (event: SenderCloseEvent) => void): this;\n  /**\n   * Add new \"connectionClose\" event listener.\n   * This event indicates when the remote peer has closed a connection to the server.\n   * @param type - \"connectionClose\"\n   * @param listener -\n   */\n  public on(type: \"connectionClose\", listener: (event: ConnectionCloseEvent) => void): this;\n  /**\n   * Add new \"onMessage\" event listener.\n   * This event indicates when the server has received a message from a remote peer.\n   * Messages are received over a `Receiver` link.\n   * @param type - \"connectionClose\"\n   * @param listener -\n   */\n  public on(type: \"onMessages\", listener: (event: OnMessagesEvent) => void): this;\n  public on(type: string, listener: (event: any) => void): this {\n    return super.on(type, listener);\n  }\n\n  /**\n   * Closes the server.\n   */\n  public stop(): Promise<void> {\n    const listener = this._listener;\n    this._listener = undefined;\n    if (!listener) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      listener.close((err) => {\n        setTimeout(() => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        }, 0);\n      });\n    });\n  }\n\n  private _setupDefaultListeners(): void {\n    this._container.sasl_server_mechanisms.enable_anonymous();\n    this._container.sasl.server_add_external(this._container.sasl_server_mechanisms);\n    this._container.sasl_server_mechanisms[\"MSSBCBS\"] =\n      this._container.sasl_server_mechanisms[\"EXTERNAL\"];\n    this._container.on(rhea.ConnectionEvents.connectionError, () => {\n      /* do nothing */\n    });\n    this._container.on(rhea.ConnectionEvents.protocolError, () => {\n      /* do nothing */\n    });\n    this._container.on(rhea.ConnectionEvents.connectionOpen, (context: rhea.EventContext) => {\n      context.connection.on(\"error\", function (this: typeof context.connection, err: Error) {\n        console.log(`Error occurred on connection:`, err?.message);\n      });\n      this.emit(\"connectionOpen\", {\n        context,\n      });\n    });\n    this._container.on(rhea.ConnectionEvents.connectionClose, (context: rhea.EventContext) => {\n      this.emit(\"connectionClose\", {\n        context,\n        error: context.error as rhea.ConnectionError,\n      });\n    });\n    this._container.on(rhea.ConnectionEvents.disconnected, (context: rhea.EventContext) => {\n      this.emit(\"connectionClose\", {\n        context,\n        error: context.error as Error,\n      });\n    });\n    this._container.on(rhea.SenderEvents.senderOpen, (context: rhea.EventContext) => {\n      if (context.sender) {\n        const entityPath = context.sender.source.address;\n        this.emit(\"senderOpen\", {\n          context,\n          entityPath,\n          sender: context.sender,\n        });\n      }\n    });\n    this._container.on(rhea.ReceiverEvents.receiverOpen, (context: rhea.EventContext) => {\n      if (context.receiver) {\n        const entityPath = context.receiver.target.address;\n        this.emit(\"receiverOpen\", {\n          context,\n          entityPath,\n          receiver: context.receiver,\n        });\n      }\n    });\n    this._container.on(rhea.ReceiverEvents.message, this._handleMessage);\n    this._container.on(rhea.SenderEvents.senderClose, (context: rhea.EventContext) => {\n      if (context.sender) {\n        const entityPath = context.sender.source.address;\n        this.emit(\"senderClose\", {\n          context,\n          entityPath,\n          sender: context.sender,\n        });\n      }\n    });\n    this._container.on(rhea.ReceiverEvents.receiverClose, (context: rhea.EventContext) => {\n      if (context.receiver) {\n        const entityPath = context.receiver.target.address;\n        this.emit(\"receiverClose\", {\n          context,\n          entityPath,\n          receiver: context.receiver,\n        });\n      }\n    });\n    this._container.on(\"error\", function (err) {\n      console.log(\"Unexpected error encountered:\", err);\n    });\n  }\n\n  private _normalizeIncomingMessage(\n    message: rhea.Message | Buffer,\n  ): Array<rhea.Message & { body?: Buffer }> {\n    const incomingMessages = Buffer.isBuffer(message)\n      ? convertBufferToMessages(message)\n      : [message];\n\n    for (const m of incomingMessages) {\n      // The multiple check detects if an AMQP message is actually a batch of messages.\n      // If it is, then content is an array of individual AMQP messages.\n      // Otherwise, it's the content of a single AMQP message (e.g. sequence body type).\n      if (m.body.multiple && m.body?.content) {\n        m.body = m.body.content;\n      }\n    }\n\n    return incomingMessages;\n  }\n\n  private _handleMessage = (context: rhea.EventContext): void => {\n    if (!context.message || !context.receiver) {\n      return;\n    }\n\n    const incomingMessages = this._normalizeIncomingMessage(context.message);\n    const entityPath = context.receiver.target.address ?? \"\";\n    this.emit(\"onMessages\", {\n      messages: incomingMessages,\n      entityPath,\n      sendMessage: (message: rhea.Message) => {\n        this._sendMessage(context, message, message.to);\n      },\n      context,\n    });\n  };\n\n  private _sendMessage = (\n    context: rhea.EventContext,\n    outgoingMessage: rhea.Message,\n    toLinkName?: string,\n  ): void => {\n    const sender = context.connection.find_sender(\n      (s: rhea.Sender) => s.name === toLinkName || s.target.address === toLinkName,\n    );\n    if (sender) {\n      sender.send(outgoingMessage);\n    } else {\n      context.connection.send(outgoingMessage);\n    }\n  };\n}\n"]}