{"version":3,"file":"eventHubs.js","sourceRoot":"","sources":["../../../src/services/eventHubs.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport rhea from \"rhea\";\nimport type {\n  ConnectionCloseEvent,\n  MockServerOptions,\n  OnMessagesEvent,\n  ReceiverOpenEvent,\n  SenderCloseEvent,\n  SenderOpenEvent,\n} from \"../server/mockServer.js\";\nimport { MockServer } from \"../server/mockServer.js\";\nimport {\n  generateBadPartitionInfoResponse,\n  generatePartitionInfoResponse,\n  isPartitionInfo,\n} from \"../messages/event-hubs/partitionInfo.js\";\nimport {\n  generateHubRuntimeInfoResponse,\n  isHubRuntimeInfo,\n} from \"../messages/event-hubs/runtimeInfo.js\";\nimport { MessageStore } from \"../storage/messageStore.js\";\nimport { StreamingPartitionSender } from \"../sender/streamingPartitionSender.js\";\nimport { createCbsAccepted } from \"../messages/cbs/cbsAccepted.js\";\nimport { getEventPosition } from \"../utils/eventPosition.js\";\n\nexport interface IMockEventHub {\n  readonly partitionIds: string[];\n  readonly consumerGroups: Set<string>;\n  readonly port: number;\n\n  start: () => Promise<void>;\n  stop: () => Promise<void>;\n}\n\nexport interface MockEventHubOptions extends MockServerOptions {\n  /**\n   * The number of partitions for the Event Hub.\n   * Defaults to 2.\n   */\n  partitionCount?: number;\n  /**\n   * The name of the Event Hub.\n   */\n  name: string;\n  /**\n   * The consumer groups available for receiving.\n   * `$default` is always available.\n   */\n  consumerGroups?: string[];\n\n  /**\n   * The amount of time in ms to wait while the connection is\n   * inactive before force closing the connection.\n   */\n  connectionInactivityTimeoutInMs?: number;\n}\n\ninterface PartionSenderEntityComponents {\n  eventHubName: string;\n  consumerGroup: string;\n  partitionId: string;\n}\n\ninterface PartionReceiverEntityComponents {\n  eventHubName: string;\n  partitionId: string;\n}\n\n/**\n * `MockEventHub` represents a mock EventHubs service.\n *\n * It stores events in memory and does not perform any auth verification.\n */\nexport class MockEventHub implements IMockEventHub {\n  /**\n   * When the EventHub was 'created'.\n   */\n  private _createdOn = new Date();\n  /**\n   * The name of the Event Hub.\n   */\n  private _name: string;\n  /**\n   * The number of partitions the Event Hub supports.\n   */\n  private _partitionCount: number;\n  /**\n   * Any additional consumer groups (beyond `$default`) the Event Hub supports.\n   */\n  private _consumerGroups: string[] = [];\n  /**\n   * The underlying AMQP server used to communicate to clients.\n   */\n  private _mockServer: MockServer;\n  /**\n   * The `MessageStore` that stores messages sent by clients to the Event Hub.\n   */\n  private _messageStore = new MessageStore();\n  /**\n   * This provides convenient access to a `Sender`'s `StreamingPartitionSender`\n   * so that we can stop it when a `Sender` is closed.\n   */\n  private _streamingPartitionSenderMap = new Map<rhea.Sender, StreamingPartitionSender>();\n\n  private _connectionInactivityTimeoutInMs: number;\n\n  private _connections: Set<rhea.Connection> = new Set();\n\n  private _clearableTimeouts = new Set<ReturnType<typeof setTimeout>>();\n  /**\n   * This provides a way to find all the partition senders for a combination\n   * of `consumerGroup` and `partitionId`.\n   *\n   * This is needed to support `ownerLevel` (epoch).\n   */\n  private _consumerGroupPartitionSenderMap = new Map<string, Map<string, Set<rhea.Sender>>>();\n\n  /**\n   * The Event Hub's partition ids.\n   */\n  public get partitionIds(): string[] {\n    const partitionIds: string[] = [];\n    for (let i = 0; i < this._partitionCount; i++) {\n      partitionIds.push(`${i}`);\n    }\n    return partitionIds;\n  }\n\n  /**\n   * The full Set of consumer groups the Event Hub supports.\n   */\n  public get consumerGroups(): Set<string> {\n    return new Set([\"$default\", ...this._consumerGroups]);\n  }\n\n  /**\n   * The port number the service is listening on.\n   * Returns `-1` if the service is not currently listening.\n   */\n  public get port(): number {\n    return this._mockServer.port;\n  }\n\n  /**\n   * Instantiates a `MockEventHub` using the provided options.\n   * @param options - The options to instantiate the MockEventHub with.\n   */\n  constructor(options: MockEventHubOptions) {\n    this._partitionCount = options.partitionCount ?? 2;\n    this._name = options.name;\n    this._consumerGroups = options.consumerGroups ?? [];\n    this._connectionInactivityTimeoutInMs = options.connectionInactivityTimeoutInMs ?? 0;\n\n    this._mockServer = new MockServer(options);\n    this._mockServer.on(\"receiverOpen\", this._handleReceiverOpen);\n    this._mockServer.on(\"senderOpen\", this._handleSenderOpen);\n    this._mockServer.on(\"senderClose\", this._handleSenderClose);\n    this._mockServer.on(\"connectionClose\", this._handleConnectionClose);\n    this._mockServer.on(\"onMessages\", this._handleOnMessages);\n    this._mockServer.on(\"connectionOpen\", (event) => {\n      this._connections.add(event.context.connection);\n      this._handleConnectionInactivity(event.context.connection);\n    });\n    this._mockServer.on(\"connectionClose\", (event) => {\n      this._connections.delete(event.context.connection);\n    });\n  }\n\n  private _handleConnectionInactivity = (connection: rhea.Connection): void => {\n    if (!this._connectionInactivityTimeoutInMs) {\n      return;\n    }\n\n    const forceCloseConnection = (): void => {\n      connection.close({\n        condition: \"amqp:connection:forced\",\n        description: `The connection was inactive for more than the allowed ${this._connectionInactivityTimeoutInMs} milliseconds and is closed by the service.`,\n      });\n    };\n\n    let tid = setTimeout(forceCloseConnection, this._connectionInactivityTimeoutInMs);\n    this._clearableTimeouts.add(tid);\n\n    const bounceTimeout = (): void => {\n      clearTimeout(tid);\n      this._clearableTimeouts.delete(tid);\n      tid = setTimeout(forceCloseConnection, this._connectionInactivityTimeoutInMs);\n      this._clearableTimeouts.add(tid);\n    };\n\n    connection.addListener(rhea.ConnectionEvents.settled, bounceTimeout);\n    connection.addListener(rhea.SenderEvents.senderFlow, bounceTimeout);\n    connection.addListener(rhea.SenderEvents.settled, bounceTimeout);\n    connection.addListener(rhea.ReceiverEvents.receiverFlow, bounceTimeout);\n    connection.addListener(rhea.ReceiverEvents.settled, bounceTimeout);\n  };\n\n  /**\n   * The event handler for when the service creates a `Receiver` link.\n   *\n   * This is done in response to the client opening a `Sender` link.\n   * @param event -\n   */\n  private _handleReceiverOpen = (event: ReceiverOpenEvent): void => {\n    event.receiver.set_source(event.receiver.source);\n    event.receiver.set_target(event.receiver.target);\n    if (this._isReceiverPartitionEntityPath(event.entityPath)) {\n      // Handle the case where the client is creating a partition-specific sender.\n      const entityComponents = this._parseReceiverPartitionEntityPath(event.entityPath);\n      if (!entityComponents) {\n        return;\n      }\n      const partitionId = entityComponents.partitionId;\n\n      // Validate that the partition the client's sender is targetting exists.\n      if (!this.partitionIds.includes(partitionId)) {\n        return event.receiver.close({\n          condition: \"com.microsoft:argument-out-of-range\",\n          description:\n            \"The specified partition is invalid for an EventHub partition sender or receiver.\",\n        });\n      }\n    }\n  };\n\n  /**\n   * The event handler for when the service creates a `Sender` link.\n   *\n   * This is done in response to the client opening a `Receiver` link.\n   * @param event -\n   */\n  private _handleSenderOpen = (event: SenderOpenEvent): void => {\n    event.sender.set_source(event.sender.source);\n    event.sender.set_target(event.sender.target);\n    if (event.entityPath === \"$cbs\") {\n      // We don't need to do anything special when opening a $cbs sender.\n    } else if (event.entityPath === \"$management\") {\n      // We don't need to do anything special when opening a $management sender.\n    } else if (this._isSenderPartitionEntityPath(event.entityPath)) {\n      // Handle partition-specific senders (e.g. /eventHubName/ConsumerGroups/$default/Partitions/0)\n      const entityComponents = this._parseSenderPartitionEntityPath(event.entityPath);\n      if (!entityComponents) {\n        return;\n      }\n\n      // Ensure the resource the sender is sourced from exists.\n      if (\n        !this._handlePartitionSenderOpenValidation(entityComponents, event.sender, event.context)\n      ) {\n        return;\n      }\n\n      // Ensure the sender is allowed to exist based on the ownerLevel of existing senders.\n      if (\n        !this._handleSenderOwnerLevel(\n          entityComponents.consumerGroup,\n          entityComponents.partitionId,\n          event.sender,\n        )\n      ) {\n        return;\n      }\n\n      const desiredCapabilities = Array.isArray(event.sender.desired_capabilities)\n        ? event.sender.desired_capabilities\n        : [event.sender.desired_capabilities];\n\n      // Check if we need to include runtime metrics on events we send to the client.\n      const enableRuntimeMetric = desiredCapabilities.includes(\n        \"com.microsoft:enable-receiver-runtime-metric\",\n      );\n\n      // Get the starting position from which to start reading events.\n      const sourceFilter: string =\n        event.sender.source.filter?.[\"apache.org:selector-filter:string\"]?.value ?? \"\";\n\n      try {\n        const startPosition = getEventPosition(sourceFilter);\n\n        const streamingPartitionSender = new StreamingPartitionSender(\n          this._messageStore,\n          event.sender,\n          entityComponents.partitionId,\n          startPosition,\n          enableRuntimeMetric,\n        );\n        this._streamingPartitionSenderMap.set(event.sender, streamingPartitionSender);\n        streamingPartitionSender.start();\n        this._storePartitionSender(\n          entityComponents.consumerGroup,\n          entityComponents.partitionId,\n          event.sender,\n        );\n      } catch (err: unknown) {\n        // Probably should close the sender at this point.\n        event.sender.close({\n          condition: \"amqp:internal-error\",\n          description: err instanceof Error ? err.message : \"\",\n        });\n      }\n    }\n  };\n\n  /**\n   * The event handler for when the service closes a `Sender` link.\n   *\n   * This is done in response to the client closing a `Receiver` link,\n   * or the service closing the `Sender` link.\n   * @param event -\n   */\n  private _handleSenderClose = (event: SenderCloseEvent): void => {\n    if (this._isSenderPartitionEntityPath(event.entityPath)) {\n      // Handles partition-specific senders.\n      const entityComponents = this._parseSenderPartitionEntityPath(event.entityPath);\n      const streamingPartitionSender = this._streamingPartitionSenderMap.get(event.sender);\n      this._streamingPartitionSenderMap.delete(event.sender);\n      if (streamingPartitionSender) {\n        streamingPartitionSender.stop();\n      }\n      if (entityComponents) {\n        this._deletePartitionSender(\n          entityComponents.consumerGroup,\n          entityComponents.partitionId,\n          event.sender,\n        );\n      }\n    }\n  };\n\n  /**\n   * The event handler for when the service closes a connection.\n   *\n   * This is done when a client explicitly closes or is disconnected.\n   * @param event -\n   */\n  private _handleConnectionClose = (event: ConnectionCloseEvent): void => {\n    // Cleanup the partition senders we might have for this connection.\n    // We'll just do brute force for now and optimize later.\n    for (const [, partitionMap] of this._consumerGroupPartitionSenderMap) {\n      for (const [, senders] of partitionMap) {\n        for (const sender of senders) {\n          if (sender.connection === event.context.connection) {\n            senders.delete(sender);\n          }\n        }\n      }\n    }\n\n    // Ensure any `StreamingPartitionSender`s associated with the connection are stopped.\n    for (const [sender, streamingSender] of this._streamingPartitionSenderMap) {\n      if (sender.connection === event.context.connection) {\n        this._streamingPartitionSenderMap.delete(sender);\n        if (streamingSender) {\n          streamingSender.stop();\n        }\n      }\n    }\n  };\n\n  /**\n   * The event handler for when the service receives a message.\n   *\n   * Messages are not automatically accepted/rejected.\n   * @param event -\n   */\n  private _handleOnMessages = (event: OnMessagesEvent): void => {\n    // Handle batched messages first.\n    if (event.entityPath === this._name) {\n      // received a message without a partition id\n      return this._handleReceivedMessage(event);\n    } else if (this._isReceiverPartitionEntityPath(event.entityPath)) {\n      // received a message targetted at a partition id\n      const entityComponents = this._parseReceiverPartitionEntityPath(event.entityPath);\n      if (!entityComponents) {\n        return;\n      }\n\n      return this._handleReceivedMessage(event, entityComponents.partitionId);\n    }\n\n    // Handle individual messages.\n    for (const message of event.messages) {\n      if (event.entityPath === \"$cbs\") {\n        return this._handleCbsMessage(event, message);\n      } else if (isHubRuntimeInfo(event.entityPath, message)) {\n        return this._handleHubRuntimeInfoMessage(event, message);\n      } else if (isPartitionInfo(event.entityPath, message)) {\n        return this._handlePartitionInfoMessage(event, message);\n      } else if (this._isSenderPartitionEntityPath(event.entityPath)) {\n        const entityComponents = this._parseSenderPartitionEntityPath(event.entityPath);\n        // Handle links to partitions\n        if (!entityComponents) {\n          return;\n        }\n        event.context.delivery?.accept();\n        return;\n      } else {\n        // Accept other messages my default.\n        event.context.delivery?.accept();\n      }\n    }\n  };\n\n  /**\n   * Handles responding to CBS messages.\n   * @param event -\n   */\n  private _handleCbsMessage(event: OnMessagesEvent, message: rhea.Message): void {\n    let outgoingMessage: rhea.Message;\n    if (!this.isValidCbsAuth(message)) {\n      outgoingMessage = {\n        correlation_id: message.message_id?.toString(),\n        to: message.reply_to,\n        application_properties: {\n          \"status-code\": 404,\n          \"status-description\": `The messaging entity '${message.application_properties?.name}' could not be found.`,\n          \"error-condition\": \"amqp:not-found\",\n        },\n        body: undefined,\n      };\n    } else {\n      outgoingMessage = createCbsAccepted({\n        correlationId: message.message_id as string,\n        toLinkName: message.reply_to,\n      });\n    }\n    event.context.delivery?.accept();\n    event.sendMessage(outgoingMessage);\n  }\n\n  /**\n   * Handles responding to Management READ EventHubs messages.\n   * @param event -\n   */\n  private _handleHubRuntimeInfoMessage(event: OnMessagesEvent, message: rhea.Message): void {\n    const outgoingMessage = generateHubRuntimeInfoResponse({\n      correlationId: message.message_id?.toString(),\n      partitions: this.partitionIds,\n      targetLinkName: message.reply_to,\n      createdOn: this._createdOn,\n      eventHubName: this._name,\n    });\n    event.context.delivery?.accept();\n    event.sendMessage(outgoingMessage);\n  }\n\n  /**\n   * Handles responding to Management READ Partition messages.\n   * @param event -\n   */\n  private _handlePartitionInfoMessage(event: OnMessagesEvent, message: rhea.Message): void {\n    const partitionId = message.application_properties?.partition;\n    let outgoingMessage: rhea.Message;\n    if (!this.partitionIds.includes(partitionId)) {\n      outgoingMessage = generateBadPartitionInfoResponse({\n        correlationId: message.message_id?.toString(),\n        targetLinkName: message.reply_to,\n      });\n    } else {\n      const partitionInfo = this._messageStore.getPartitionInfo(partitionId);\n      outgoingMessage = generatePartitionInfoResponse({\n        ...partitionInfo,\n        correlationId: message.message_id?.toString(),\n        targetLinkName: message.reply_to,\n        eventHubName: this._name,\n      });\n    }\n    event.context.delivery?.accept();\n    event.sendMessage(outgoingMessage);\n  }\n\n  /**\n   * Handles storing and accepting/rejecting messages sent from a client to a partition.\n   * @param event -\n   * @param partitionId -\n   */\n  private _handleReceivedMessage(event: OnMessagesEvent, partitionId?: string): void {\n    const delivery = event.context.delivery;\n\n    if (!delivery) {\n      throw new Error(\"event.context.delivery must be defined\");\n    }\n    const messageSize = (event.context as { message?: unknown[] })[\"message\"]?.length ?? 0;\n    const maxMessageSize =\n      event.context.receiver?.get_option(\"max_message_size\", 1024 * 1024) ?? 1024 * 1024;\n    if (messageSize >= maxMessageSize) {\n      delivery.reject({\n        condition: \"amqp:link:message-size-exceeded\",\n        description: `The received message (delivery-id:${\n          delivery.id\n        }, size:${messageSize} bytes) exceeds the limit (${\n          maxMessageSize ?? 1024 * 1024\n        } bytes) currently allowed on the link.`,\n      });\n      return;\n    }\n    delivery.accept();\n    this._storeMessage(event.messages, partitionId);\n  }\n\n  /**\n   * Gets the Sender's `ownerLevel`, if it has one.\n   * @param sender -\n   */\n  private _getSenderOwnerLevel(sender: rhea.Sender): number | undefined {\n    const ownerLevel: number | undefined = sender.properties?.[\"com.microsoft:epoch\"];\n    return ownerLevel;\n  }\n\n  /**\n   * Stores the partition sender based on its consumerGroup and partitionId.\n   *\n   * Note: Partition senders are used to send messages to a client receiver that\n   * is listening on a consumerGroup/partitionId combination.\n   * @param consumerGroup -\n   * @param partitionId -\n   * @param sender -\n   */\n  private _storePartitionSender(\n    consumerGroup: string,\n    partitionId: string,\n    sender: rhea.Sender,\n  ): void {\n    // Ensure we have an entry for the consumer group.\n    const consumerGroupPartitionMap =\n      this._consumerGroupPartitionSenderMap.get(consumerGroup) ??\n      new Map<string, Set<rhea.Sender>>();\n    this._consumerGroupPartitionSenderMap.set(consumerGroup, consumerGroupPartitionMap);\n\n    // Ensure we have an entry for the partition id.\n    const partitionSenderSet = consumerGroupPartitionMap.get(partitionId) ?? new Set<rhea.Sender>();\n    consumerGroupPartitionMap.set(partitionId, partitionSenderSet);\n\n    partitionSenderSet.add(sender);\n  }\n\n  /**\n   * Removes the partition sender based on its consumerGroup and partitionId.\n   *\n   * @param consumerGroup -\n   * @param partitionId -\n   * @param sender -\n   */\n  private _deletePartitionSender(\n    consumerGroup: string,\n    partitionId: string,\n    sender: rhea.Sender,\n  ): void {\n    const partitionSenders = this._consumerGroupPartitionSenderMap\n      .get(consumerGroup)\n      ?.get(partitionId);\n    if (partitionSenders) {\n      partitionSenders.delete(sender);\n    }\n  }\n\n  /**\n   * Checks if the `Sender` is allowed to be created based on its `ownerLevel`\n   * compared to other `Sender`s that exist on the same consumerGroup/partitionId.\n   *\n   * Returns `true` is the sender is allowed to be created, `false` otherwise.\n   *\n   * If the `Sender` is allowed to be created and does have an `ownerLevel`,\n   * any existing `Sender`s with the same consumerGroup/partitionId will be closed.\n   * @param consumerGroup -\n   * @param partitionId -\n   * @param sender -\n   */\n  private _handleSenderOwnerLevel(\n    consumerGroup: string,\n    partitionId: string,\n    sender: rhea.Sender,\n  ): boolean {\n    const ownerLevel = this._getSenderOwnerLevel(sender);\n\n    const partitionSenders = this._consumerGroupPartitionSenderMap\n      .get(consumerGroup)\n      ?.get(partitionId);\n    // If there aren't any other senders for this consumerGroup/partition, then just go ahead, it's fine.\n    if (!partitionSenders) {\n      return true;\n    }\n\n    let maxOwnerLevel = -1;\n    for (const partitionSender of partitionSenders) {\n      const senderOwnerLevel = this._getSenderOwnerLevel(partitionSender);\n      if (typeof senderOwnerLevel === \"number\" && senderOwnerLevel > maxOwnerLevel) {\n        maxOwnerLevel = senderOwnerLevel;\n      }\n    }\n\n    if (typeof ownerLevel === \"undefined\") {\n      if (maxOwnerLevel === -1) {\n        // No sender has an ownerLevel, so safe to continue.\n        return true;\n      } else {\n        // There's a sender with a higher ownerLevel, not safe to continue.\n        sender.close({\n          condition: \"amqp:link:stolen\",\n          description:\n            `At least one receiver for the endpoint is created with epoch of '${maxOwnerLevel}', and so non-epoch receiver is not allowed. ` +\n            `Either reconnect with a higher epoch, or make sure all epoch receivers are closed or disconnected.`,\n        });\n        return false;\n      }\n    }\n\n    if (ownerLevel >= maxOwnerLevel) {\n      // This ownerLevel is higher than the existing ownerLevels, so take precedence!\n      // Close existing senders!\n      for (const partitionSender of partitionSenders) {\n        const senderOwnerLevel = this._getSenderOwnerLevel(partitionSender);\n        partitionSender.close({\n          condition: \"amqp:link:stolen\",\n          description:\n            `New receiver 'nil' with higher epoch of '${ownerLevel}' is created hence current receiver 'nil' with epoch '${\n              senderOwnerLevel ?? \"\"\n            }' is getting disconnected. ` +\n            `If you are recreating the receiver, make sure a higher epoch is used.`,\n        });\n      }\n      return true;\n    }\n\n    // This ownerLevel is lower than the existing ownerLevels, so not safe to continue.\n    sender.close({\n      condition: \"amqp:link:stolen\",\n      description:\n        `Receiver 'nil' with a higher epoch '${maxOwnerLevel}' already exists. ` +\n        `Receiver 'nil' with epoch ${ownerLevel} cannot be created. ` +\n        `Make sure you are creating receiver with increasing epoch value to ensure connectivity, or ensure all old epoch receivers are closed or disconnected.`,\n    });\n    return false;\n  }\n\n  /**\n   * Stores a message in the `MessageStore`.\n   *\n   * If a `partitionId` is not provided, a partition will be assigned\n   * either based on the `partitionKey` if it is available, or at random.\n   * @param message -\n   * @param partitionId -\n   */\n  private _storeMessage(messages: rhea.Message[], partitionId?: string): void {\n    if (!messages.length) {\n      return;\n    }\n\n    let partitionKey: string | undefined;\n    // determine partition id\n    if (!partitionId) {\n      // handle partition key\n      partitionKey = messages[0].message_annotations?.[\"x-opt-partition-key\"] as string;\n      if (partitionKey) {\n        partitionId = this._partitionIdFromKey(partitionKey);\n      } else {\n        // random assignment\n        partitionId = `${Math.floor(Math.random() * this.partitionIds.length)}`;\n      }\n    }\n\n    for (const message of messages) {\n      this._messageStore.storeMessage(partitionId, message, partitionKey);\n    }\n  }\n\n  /**\n   * A very hacky 'hash' function to calculate a `partitionId` from a `partitionKey`.\n   * @param partitionKey -\n   */\n  private _partitionIdFromKey(partitionKey: string): string {\n    let hash = 0;\n    for (let i = 0; i < partitionKey.length; i++) {\n      hash += partitionKey.charCodeAt(i);\n    }\n    return `${hash % this.partitionIds.length}`;\n  }\n\n  /**\n   * Validates whether the partition sender can be created.\n   *\n   * @param entityComponents -\n   * @param sender -\n   * @param context -\n   */\n  private _handlePartitionSenderOpenValidation(\n    entityComponents: PartionSenderEntityComponents,\n    sender: rhea.Sender,\n    context: rhea.EventContext,\n  ): boolean {\n    const { eventHubName, consumerGroup, partitionId } = entityComponents;\n    if (!this.partitionIds.includes(partitionId)) {\n      sender.close({\n        condition: \"com.microsoft:argument-out-of-range\",\n        description:\n          \"The specified partition is invalid for an EventHub partition sender or receiver.\",\n      });\n      return false;\n    }\n    if (!this.consumerGroups.has(consumerGroup.toLowerCase())) {\n      const host = (context.connection.hostname ?? \"\").split(\".\")[0];\n      sender.close({\n        condition: \"amqp-not-found\",\n        description: `The messaging entity '${host}:eventhub:${eventHubName}~0|${consumerGroup}' could not be found.`,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Starts the service.\n   */\n  start(): Promise<void> {\n    return this._mockServer.start();\n  }\n\n  /**\n   * Stops the service.\n   */\n  stop(): Promise<void> {\n    for (const tid of this._clearableTimeouts.values()) {\n      clearTimeout(tid);\n    }\n    this._clearableTimeouts.clear();\n    return this._mockServer.stop();\n  }\n\n  private _parseReceiverPartitionEntityPath(\n    entityPath: string,\n  ): PartionReceiverEntityComponents | undefined {\n    const parts = entityPath.split(\"/\");\n    if (parts.length !== 3) {\n      return;\n    }\n\n    const [eventHubName, , partitionId] = parts;\n    return {\n      eventHubName,\n      partitionId,\n    };\n  }\n\n  private _parseSenderPartitionEntityPath(\n    entityPath: string,\n  ): PartionSenderEntityComponents | undefined {\n    const parts = entityPath.split(\"/\");\n    if (parts.length !== 5) {\n      return;\n    }\n\n    const [eventHubName, , consumerGroup, , partitionId] = parts;\n    return {\n      eventHubName,\n      consumerGroup,\n      partitionId,\n    };\n  }\n\n  private isValidCbsAuth(message: rhea.Message): boolean | undefined {\n    const name = message.application_properties?.name as string | undefined;\n    if (!name) {\n      return;\n    }\n\n    const url = new URL(name);\n\n    const searchPath = url.pathname.startsWith(\"/\") ? url.pathname.substring(1) : url.pathname;\n\n    if ([`${this._name}/$management`, this._name].includes(searchPath)) {\n      return true;\n    }\n\n    const receiverRegex = new RegExp(\n      `^${this._name}\\\\/ConsumerGroups\\\\/[\\\\w\\\\d\\\\$\\\\-\\\\_]+\\\\/Partitions\\\\/[\\\\w\\\\d\\\\$\\\\-\\\\_]+`,\n    );\n    if (receiverRegex.test(searchPath)) {\n      return true;\n    }\n\n    const senderRegex = new RegExp(`^${this._name}\\\\/Partitions\\\\/[\\\\w\\\\d\\\\$\\\\-\\\\_]+`);\n    if (senderRegex.test(searchPath)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private _isReceiverPartitionEntityPath(entityPath?: string): boolean {\n    return entityPath?.split(\"/\").length === 3;\n  }\n\n  private _isSenderPartitionEntityPath(entityPath?: string): boolean {\n    return entityPath?.split(\"/\").length === 5;\n  }\n}\n"]}