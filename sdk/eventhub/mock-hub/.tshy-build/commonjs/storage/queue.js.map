{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../../src/storage/queue.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC;;;;;GAKG;AACH,MAAa,KAAK;IAMhB,YAAY,KAAW;QACrB,IAAI,CAAC,MAAM,GAAG,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE,CAAC;IAC5B,CAAC;IAEM,IAAI;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,KAAK;QACV,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC,gBAAgB,CAAC;QAC/B,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACjC,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE,CAAC;YAChC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,gBAAgB,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,CAAC,CAAC;QAEvF,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACI,IAAI,CAAC,IAAO;QACjB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;IAEO,gBAAgB,CAAC,IAAO;QAC9B,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC3B,OAAO,KAAK,CAAC;QACf,CAAC;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACtC,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;QAClC,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;QAClC,OAAO,CAAC,IAAI,CAAC,CAAC;QACd,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AApDD,sBAoDC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * `Queue` stores items in the order that they are received.\n *\n * This differs from ordinary Queues in that `shift` returns a Promise for a value.\n * This allows a consumer of the queue to request an item that the queue does not yet have.\n */\nexport class Queue<T> {\n  private readonly _items: T[];\n\n  private _nextItemResolve?: (item: T) => void;\n  private _nextItemPromise?: Promise<T>;\n\n  constructor(items?: T[]) {\n    this._items = items ?? [];\n  }\n\n  public size(): number {\n    return this._items.length;\n  }\n\n  /**\n   * Returns a Promise that will resolve with the first item in the queue.\n   */\n  public shift(): Promise<T> {\n    if (this._nextItemPromise) {\n      return this._nextItemPromise;\n    }\n\n    const item = this._items.shift();\n    if (typeof item !== \"undefined\") {\n      return Promise.resolve(item);\n    }\n\n    this._nextItemPromise = new Promise<T>((resolve) => (this._nextItemResolve = resolve));\n\n    return this._nextItemPromise;\n  }\n\n  /**\n   * Appends new item to the queue.\n   * @param item - the item to append\n   */\n  public push(item: T): void {\n    if (!this._resolveNextItem(item)) {\n      this._items.push(item);\n    }\n  }\n\n  private _resolveNextItem(item: T): boolean {\n    if (!this._nextItemResolve) {\n      return false;\n    }\n    const resolve = this._nextItemResolve;\n    this._nextItemResolve = undefined;\n    this._nextItemPromise = undefined;\n    resolve(item);\n    return true;\n  }\n}\n"]}