{"version":3,"file":"partitionAssigner.js","sourceRoot":"","sources":["../../../src/impl/partitionAssigner.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,gDAA6C;AAC7C,2EAAkE;AAElE;;;GAGG;AACH,MAAa,iBAAiB;IAA9B;QACU,gBAAW,GAAa,EAAE,CAAC;QAE3B,kCAA6B,GAAW,CAAC,CAAC,CAAC;IA0DrD,CAAC;IAxDC;;;OAGG;IACI,eAAe,CAAC,YAAsB;QAC3C,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;IAClC,CAAC;IAED;;;;;;;;;OASG;IACH,eAAe,CAAC,EACd,WAAW,EACX,YAAY,GAIb;QACC,IAAI,IAAA,qBAAS,EAAC,WAAW,CAAC,IAAI,IAAA,qBAAS,EAAC,YAAY,CAAC,EAAE,CAAC;YACtD,MAAM,IAAI,KAAK,CACb,oBAAoB,WAAW,uBAAuB,YAAY,6BAA6B,CAChG,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;QACjF,CAAC;QAED,IAAI,IAAA,qBAAS,EAAC,WAAW,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;YACrE,OAAO,WAAW,CAAC;QACrB,CAAC;QAED,IAAI,IAAA,qBAAS,EAAC,YAAY,CAAC,EAAE,CAAC;YAC5B,OAAO,IAAA,+CAAmB,EAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC/E,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC3C,CAAC;IAEO,0BAA0B;QAChC,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QACtD,MAAM,sBAAsB,GAAG,IAAI,CAAC,6BAA6B,GAAG,CAAC,CAAC;QAEtE,MAAM,kBAAkB,GACtB,sBAAsB,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC;QAE1E,IAAI,CAAC,6BAA6B,GAAG,kBAAkB,CAAC;QACxD,OAAO,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;IAC9C,CAAC;CACF;AA7DD,8CA6DC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { isDefined } from \"@azure/core-util\";\nimport { mapPartitionKeyToId } from \"./partitionKeyToIdMapper.js\";\n\n/**\n * @internal\n * Assigns a partition based on the partition ids it knows about and an optional partition id or partition key.\n */\nexport class PartitionAssigner {\n  private _partitions: string[] = [];\n\n  private _lastRoundRobinPartitionIndex: number = -1;\n\n  /**\n   * Set the partition ids that can be used when assigning a partition.\n   * @param partitionIds - All valid partition ids.\n   */\n  public setPartitionIds(partitionIds: string[]): void {\n    this._partitions = partitionIds;\n  }\n\n  /**\n   * Returns a partitionId from the list of partition ids set via `setPartitionIds`.\n   *\n   * If a partitionId is specified, then that will be returned directly.\n   * If a partitionKey is specified, then a partitionId will be calculated based on the partitionKey.\n   * Specifying both partitionId and partitionKey results in an error.\n   *\n   * If neither partitionId nor partitionKey are specified, then a partitionId will be selected\n   * based on a round-robin approach.\n   */\n  assignPartition({\n    partitionId,\n    partitionKey,\n  }: {\n    partitionId?: string;\n    partitionKey?: string;\n  }): string {\n    if (isDefined(partitionId) && isDefined(partitionKey)) {\n      throw new Error(\n        `The partitionId (${partitionId}) and partitionKey (${partitionKey}) cannot both be specified.`,\n      );\n    }\n\n    if (!this._partitions.length) {\n      throw new Error(`Unable to determine partitionIds, can't assign partitionId.`);\n    }\n\n    if (isDefined(partitionId) && this._partitions.includes(partitionId)) {\n      return partitionId;\n    }\n\n    if (isDefined(partitionKey)) {\n      return mapPartitionKeyToId(partitionKey, this._partitions.length).toString();\n    }\n\n    return this._assignRoundRobinPartition();\n  }\n\n  private _assignRoundRobinPartition(): string {\n    const maxPartitionIndex = this._partitions.length - 1;\n    const proposedPartitionIndex = this._lastRoundRobinPartitionIndex + 1;\n\n    const nextPartitionIndex =\n      proposedPartitionIndex > maxPartitionIndex ? 0 : proposedPartitionIndex;\n\n    this._lastRoundRobinPartitionIndex = nextPartitionIndex;\n    return this._partitions[nextPartitionIndex];\n  }\n}\n"]}