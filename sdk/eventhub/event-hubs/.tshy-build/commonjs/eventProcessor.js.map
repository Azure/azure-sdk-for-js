{"version":3,"file":"eventProcessor.js","sourceRoot":"","sources":["../../src/eventProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport type { Checkpoint } from \"./partitionProcessor.js\";\nimport { PartitionProcessor } from \"./partitionProcessor.js\";\nimport type { EventPosition } from \"./eventPosition.js\";\nimport { isEventPosition, latestEventPosition } from \"./eventPosition.js\";\nimport type { PumpManager } from \"./pumpManager.js\";\nimport { PumpManagerImpl } from \"./pumpManager.js\";\nimport { logErrorStackTrace, logger } from \"./logger.js\";\nimport { CloseReason } from \"./models/public.js\";\nimport type { CommonEventProcessorOptions } from \"./models/private.js\";\nimport type { ConnectionContext } from \"./connectionContext.js\";\nimport type { LoadBalancingStrategy } from \"./loadBalancerStrategies/loadBalancingStrategy.js\";\nimport type { OperationOptions } from \"./util/operationOptions.js\";\nimport type { SubscriptionEventHandlers } from \"./eventHubConsumerClientModels.js\";\nimport { delayWithoutThrow } from \"./util/delayWithoutThrow.js\";\nimport { getRandomName } from \"./util/utils.js\";\nimport { StandardAbortMessage } from \"@azure/core-amqp\";\n\n/**\n * An interface representing the details on which instance of a `EventProcessor` owns processing\n * of a given partition from a consumer group of an Event Hub instance.\n *\n * **Note**: This is used internally by the `EventProcessor` and user never has to create it directly.\n */\nexport interface PartitionOwnership {\n  /**\n   * The fully qualified Event Hubs namespace. This is likely to be similar to\n   * <yournamespace>.servicebus.windows.net\n   */\n  fullyQualifiedNamespace: string;\n  /**\n   * The event hub name\n   */\n  eventHubName: string;\n  /**\n   * The consumer group name\n   */\n  consumerGroup: string;\n  /**\n   * The identifier of the Event Hub partition.\n   */\n  partitionId: string;\n  /**\n   * The unique identifier of the event processor.\n   */\n  ownerId: string;\n  /**\n   * The last modified time.\n   */\n  lastModifiedTimeInMs?: number;\n  /**\n   * The unique identifier for the operation.\n   */\n  etag?: string;\n}\n\n/**\n * A checkpoint store stores and retrieves partition ownership information and checkpoint details\n * for each partition in a given consumer group of an event hub instance.\n *\n * Users are not meant to implement an `CheckpointStore`.\n * Users are expected to choose existing implementations of this interface, instantiate it, and pass\n * it to the `EventHubConsumerClient` class constructor when instantiating a client.\n * Users are not expected to use any of the methods on a checkpoint store, these are used internally by\n * the client.\n *\n * Implementations of `CheckpointStore` can be found on npm by searching for packages with the prefix &commat;azure/eventhub-checkpointstore-.\n */\nexport interface CheckpointStore {\n  /**\n   * Called to get the list of all existing partition ownership from the underlying data store. Could return empty\n   * results if there are is no existing ownership information.\n   *\n   * @param fullyQualifiedNamespace - The fully qualified Event Hubs namespace. This is likely to be similar to\n   * <yournamespace>.servicebus.windows.net.\n   * @param eventHubName - The event hub name.\n   * @param consumerGroup - The consumer group name.\n   * @param options - A set of options that can be specified to influence the behavior of this method.\n   *  - `abortSignal`: A signal used to request operation cancellation.\n   *  - `tracingOptions`: Options for configuring tracing.\n   * @returns A list of partition ownership details of all the partitions that have/had an owner.\n   */\n  listOwnership(\n    fullyQualifiedNamespace: string,\n    eventHubName: string,\n    consumerGroup: string,\n    options?: OperationOptions,\n  ): Promise<PartitionOwnership[]>;\n  /**\n   * Called to claim ownership of a list of partitions. This will return the list of partitions that were owned\n   * successfully.\n   *\n   * @param partitionOwnership - The list of partition ownership this instance is claiming to own.\n   * @param options - A set of options that can be specified to influence the behavior of this method.\n   *  - `abortSignal`: A signal used to request operation cancellation.\n   *  - `tracingOptions`: Options for configuring tracing.\n   * @returns A list of partitions this instance successfully claimed ownership.\n   */\n  claimOwnership(\n    partitionOwnership: PartitionOwnership[],\n    options?: OperationOptions,\n  ): Promise<PartitionOwnership[]>;\n\n  /**\n   * Updates the checkpoint in the data store for a partition.\n   *\n   * @param checkpoint - The checkpoint.\n   * @param options - A set of options that can be specified to influence the behavior of this method.\n   *  - `abortSignal`: A signal used to request operation cancellation.\n   *  - `tracingOptions`: Options for configuring tracing.\n   */\n  updateCheckpoint(checkpoint: Checkpoint, options?: OperationOptions): Promise<void>;\n\n  /**\n   * Lists all the checkpoints in a data store for a given namespace, eventhub and consumer group.\n   *\n   * @param fullyQualifiedNamespace - The fully qualified Event Hubs namespace. This is likely to be similar to\n   * <yournamespace>.servicebus.windows.net.\n   * @param eventHubName - The event hub name.\n   * @param consumerGroup - The consumer group name.\n   * @param options - A set of options that can be specified to influence the behavior of this method.\n   *  - `abortSignal`: A signal used to request operation cancellation.\n   *  - `tracingOptions`: Options for configuring tracing.\n   * @returns A list of checkpoints for a given namespace, eventhub, and consumer group.\n   */\n  listCheckpoints(\n    fullyQualifiedNamespace: string,\n    eventHubName: string,\n    consumerGroup: string,\n    options?: OperationOptions,\n  ): Promise<Checkpoint[]>;\n}\n\n/**\n * A set of options to pass to the constructor of `EventProcessor`.\n * You can specify\n * - `maxBatchSize`: The max size of the batch of events passed each time to user code for processing.\n * - `maxWaitTimeInSeconds`: The maximum amount of time to wait to build up the requested message count before\n * passing the data to user code for processing. If not provided, it defaults to 60 seconds.\n *\n * Example usage with default values:\n * ```ts snippet:ignore\n * {\n *     maxBatchSize: 1,\n *     maxWaitTimeInSeconds: 60,\n * }\n * ```\n * @internal\n */\nexport interface FullEventProcessorOptions extends CommonEventProcessorOptions {\n  /**\n   * An optional pump manager to use, rather than instantiating one internally\n   * @internal\n   */\n  pumpManager?: PumpManager;\n  /**\n   * The amount of time between load balancing attempts.\n   */\n  loopIntervalInMs: number;\n  /**\n   * A specific partition to target.\n   */\n  processingTarget?: string;\n}\n\n/**\n * Event Processor based applications consist of one or more instances of EventProcessor which have been\n * configured to consume events from the same Event Hub and consumer group. They balance the\n * workload across different instances by distributing the partitions to be processed among themselves.\n * They also allow the user to track progress when events are processed using checkpoints.\n *\n * A checkpoint is meant to represent the last successfully processed event by the user from a particular\n * partition of a consumer group in an Event Hub instance.\n *\n * @internal\n */\nexport class EventProcessor {\n  private _processorOptions: FullEventProcessorOptions;\n  private _pumpManager: PumpManager;\n  private _id: string;\n  private _isRunning: boolean = false;\n  private _loopTask?: PromiseLike<void>;\n  private _abortController?: AbortController;\n  /**\n   * A specific partition to target.\n   */\n  private _processingTarget?: string;\n  /**\n   * Determines which partitions to claim as part of load balancing.\n   */\n  private _loadBalancingStrategy: LoadBalancingStrategy;\n  /**\n   * The amount of time between load balancing attempts.\n   */\n  private _loopIntervalInMs: number;\n  private _eventHubName: string;\n  private _fullyQualifiedNamespace: string;\n\n  /**\n   * @param consumerGroup - The name of the consumer group from which you want to process events.\n   * @param eventHubClient - An instance of `EventHubClient` that was created for the Event Hub instance.\n   * @param PartitionProcessorClass - A user-provided class that extends the `PartitionProcessor` class.\n   * This class will be responsible for processing and checkpointing events.\n   * @param checkpointStore - An instance of `CheckpointStore`. See &commat;azure/eventhubs-checkpointstore-blob for an implementation.\n   * For production, choose an implementation that will store checkpoints and partition ownership details to a durable store.\n   * @param options - A set of options to configure the Event Processor\n   * - `maxBatchSize`         : The max size of the batch of events passed each time to user code for processing.\n   * - `maxWaitTimeInSeconds` : The maximum amount of time to wait to build up the requested message count before\n   * passing the data to user code for processing. If not provided, it defaults to 60 seconds.\n   */\n  constructor(\n    private _consumerGroup: string,\n    private _context: ConnectionContext,\n    private _subscriptionEventHandlers: SubscriptionEventHandlers,\n    private _checkpointStore: CheckpointStore,\n    options: FullEventProcessorOptions,\n  ) {\n    if (options.ownerId) {\n      this._id = options.ownerId;\n      logger.verbose(`Starting event processor with ID ${this._id}`);\n    } else {\n      this._id = getRandomName();\n      logger.verbose(`Starting event processor with autogenerated ID ${this._id}`);\n    }\n\n    this._eventHubName = this._context.config.entityPath;\n    this._fullyQualifiedNamespace = this._context.config.host;\n    this._processorOptions = options;\n    this._pumpManager =\n      options.pumpManager || new PumpManagerImpl(this._id, this._processorOptions);\n    this._processingTarget = options.processingTarget;\n    this._loopIntervalInMs = options.loopIntervalInMs;\n    this._loadBalancingStrategy = options.loadBalancingStrategy;\n  }\n\n  /**\n   * The unique identifier for the EventProcessor.\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  private _createPartitionOwnershipRequest(\n    partitionOwnershipMap: Map<string, PartitionOwnership>,\n    partitionIdToClaim: string,\n  ): PartitionOwnership {\n    const previousPartitionOwnership = partitionOwnershipMap.get(partitionIdToClaim);\n    const partitionOwnership: PartitionOwnership = {\n      ownerId: this._id,\n      partitionId: partitionIdToClaim,\n      fullyQualifiedNamespace: this._fullyQualifiedNamespace,\n      consumerGroup: this._consumerGroup,\n      eventHubName: this._eventHubName,\n      etag: previousPartitionOwnership ? previousPartitionOwnership.etag : undefined,\n    };\n\n    return partitionOwnership;\n  }\n\n  /*\n   * Claim ownership of the given partition if it's available\n   */\n  private async _claimOwnership(\n    ownershipRequest: PartitionOwnership,\n    abortSignal: AbortSignalLike,\n  ): Promise<void> {\n    if (abortSignal.aborted) {\n      logger.verbose(\n        `[${this._id}] Subscription was closed before claiming ownership of ${ownershipRequest.partitionId}.`,\n      );\n      return;\n    }\n    logger.info(\n      `[${this._id}] Attempting to claim ownership of partition ${ownershipRequest.partitionId}.`,\n    );\n    try {\n      const claimedOwnerships = await this._checkpointStore.claimOwnership([ownershipRequest]);\n\n      // can happen if the partition was claimed out from underneath us - we shouldn't\n      // attempt to spin up a processor.\n      if (!claimedOwnerships.length) {\n        return;\n      }\n\n      logger.info(\n        `[${this._id}] Successfully claimed ownership of partition ${ownershipRequest.partitionId}.`,\n      );\n\n      await this._startPump(ownershipRequest.partitionId, abortSignal);\n    } catch (err: any) {\n      logger.warning(\n        `[${this._id}] Failed to claim ownership of partition ${ownershipRequest.partitionId}`,\n      );\n      logErrorStackTrace(err);\n      await this._handleSubscriptionError(err);\n    }\n  }\n\n  private async _startPump(partitionId: string, abortSignal: AbortSignalLike): Promise<void> {\n    if (abortSignal.aborted) {\n      logger.verbose(\n        `[${this._id}] The subscription was closed before starting to read from ${partitionId}.`,\n      );\n      return;\n    }\n\n    if (this._pumpManager.isReceivingFromPartition(partitionId)) {\n      logger.verbose(\n        `[${this._id}] There is already an active partitionPump for partition \"${partitionId}\", skipping pump creation.`,\n      );\n      return;\n    }\n\n    logger.verbose(\n      `[${this._id}] [${partitionId}] Calling user-provided PartitionProcessorFactory.`,\n    );\n\n    const partitionProcessor = new PartitionProcessor(\n      this._subscriptionEventHandlers,\n      this._checkpointStore,\n      {\n        fullyQualifiedNamespace: this._fullyQualifiedNamespace,\n        eventHubName: this._eventHubName,\n        consumerGroup: this._consumerGroup,\n        partitionId: partitionId,\n        eventProcessorId: this._id,\n      },\n    );\n\n    const eventPosition = await this._getStartingPosition(partitionId);\n    await this._pumpManager.createPump(\n      eventPosition,\n      this._context,\n      partitionProcessor,\n      abortSignal,\n    );\n\n    logger.verbose(`[${this._id}] PartitionPump created successfully.`);\n  }\n\n  private async _getStartingPosition(partitionIdToClaim: string): Promise<EventPosition> {\n    const availableCheckpoints = await this._checkpointStore.listCheckpoints(\n      this._fullyQualifiedNamespace,\n      this._eventHubName,\n      this._consumerGroup,\n    );\n\n    const validCheckpoints = availableCheckpoints.filter(\n      (chk) => chk.partitionId === partitionIdToClaim,\n    );\n\n    if (validCheckpoints.length > 0) {\n      return { offset: validCheckpoints[0].offset };\n    }\n\n    logger.verbose(\n      `No checkpoint found for partition ${partitionIdToClaim}. Looking for fallback.`,\n    );\n    return getStartPosition(partitionIdToClaim, this._processorOptions.startPosition);\n  }\n\n  private async _runLoopForSinglePartition(\n    partitionId: string,\n    abortSignal: AbortSignalLike,\n  ): Promise<void> {\n    while (!abortSignal.aborted) {\n      try {\n        await this._startPump(partitionId, abortSignal);\n      } catch (err: any) {\n        logger.warning(\n          `[${this._id}] An error occurred within the EventProcessor loop: ${err?.name}: ${err?.message}`,\n        );\n        logErrorStackTrace(err);\n        await this._handleSubscriptionError(err);\n      } finally {\n        // sleep for some time after which we can attempt to create a pump again.\n        logger.verbose(\n          `[${this._id}] Pausing the EventProcessor loop for ${this._loopIntervalInMs} ms.`,\n        );\n        // swallow errors from delay since it's fine for delay to exit early\n        await delayWithoutThrow(this._loopIntervalInMs, abortSignal);\n      }\n    }\n    this._isRunning = false;\n  }\n\n  /**\n   * Every loop to this method will result in this EventProcessor owning at most one new partition.\n   *\n   * The load is considered balanced when no active EventProcessor owns 2 partitions more than any other active\n   * EventProcessor. Given that each invocation to this method results in ownership claim of at most one partition,\n   * this algorithm converges gradually towards a steady state.\n   *\n   * When a new partition is claimed, this method is also responsible for starting a partition pump that creates an\n   * EventHubConsumer for processing events from that partition.\n   */\n  private async _runLoopWithLoadBalancing(\n    loadBalancingStrategy: LoadBalancingStrategy,\n    abortSignal: AbortSignalLike,\n  ): Promise<void> {\n    let cancelLoopResolver;\n    // This provides a mechanism for exiting the loop early\n    // if the subscription has had `close` called.\n    const cancelLoopPromise = new Promise<void>((resolve) => {\n      cancelLoopResolver = resolve;\n      if (abortSignal.aborted) {\n        resolve();\n        return;\n      }\n\n      abortSignal.addEventListener(\"abort\", resolve);\n    });\n\n    // Periodically check if any partitions need to be claimed and claim them.\n    while (!abortSignal.aborted) {\n      const iterationStartTimeInMs = Date.now();\n      try {\n        const { partitionIds } = await this._context.managementSession!.getEventHubProperties({\n          abortSignal,\n        });\n        await this._performLoadBalancing(loadBalancingStrategy, partitionIds, abortSignal);\n      } catch (err: any) {\n        logger.warning(\n          `[${this._id}] An error occurred within the EventProcessor loop: ${err?.name}: ${err?.message}`,\n        );\n        logErrorStackTrace(err);\n        // Protect against the scenario where the user awaits on subscription.close() from inside processError.\n        await Promise.race([this._handleSubscriptionError(err), cancelLoopPromise]);\n      } finally {\n        // Sleep for some time, then continue the loop.\n        const iterationDeltaInMs = Date.now() - iterationStartTimeInMs;\n        const delayDurationInMs = Math.max(this._loopIntervalInMs - iterationDeltaInMs, 0);\n        logger.verbose(\n          `[${this._id}] Pausing the EventProcessor loop for ${delayDurationInMs} ms.`,\n        );\n        // Swallow the error since it's fine to exit early from the delay.\n        await delayWithoutThrow(delayDurationInMs, abortSignal);\n      }\n    }\n\n    if (cancelLoopResolver) {\n      abortSignal.removeEventListener(\"abort\", cancelLoopResolver);\n    }\n    this._isRunning = false;\n  }\n\n  private async _performLoadBalancing(\n    loadBalancingStrategy: LoadBalancingStrategy,\n    partitionIds: string[],\n    abortSignal: AbortSignalLike,\n  ): Promise<void> {\n    if (abortSignal.aborted) throw new AbortError(StandardAbortMessage);\n\n    // Retrieve current partition ownership details from the datastore.\n    const partitionOwnership = await this._checkpointStore.listOwnership(\n      this._fullyQualifiedNamespace,\n      this._eventHubName,\n      this._consumerGroup,\n    );\n\n    if (abortSignal.aborted) throw new AbortError(StandardAbortMessage);\n\n    const { partitionOwnershipMap, partitionsToClaim } = computePartitionsToClaim({\n      id: this._id,\n      isReceivingFromPartition: (partitionId: string) =>\n        this._pumpManager.isReceivingFromPartition(partitionId),\n      loadBalancingStrategy,\n      partitionIds,\n      partitionOwnership,\n    });\n\n    for (const partitionToClaim of partitionsToClaim) {\n      const partitionOwnershipRequest = this._createPartitionOwnershipRequest(\n        partitionOwnershipMap,\n        partitionToClaim,\n      );\n\n      await this._claimOwnership(partitionOwnershipRequest, abortSignal);\n    }\n  }\n\n  /**\n   * This is called when there are errors that are not specific to a partition (ex: load balancing)\n   */\n  private async _handleSubscriptionError(err: Error): Promise<void> {\n    // filter out any internal \"expected\" errors\n    if (err.name === \"AbortError\") {\n      return;\n    }\n\n    if (this._subscriptionEventHandlers.processError) {\n      try {\n        await this._subscriptionEventHandlers.processError(err, {\n          fullyQualifiedNamespace: this._fullyQualifiedNamespace,\n          eventHubName: this._eventHubName,\n          consumerGroup: this._consumerGroup,\n          partitionId: \"\",\n          updateCheckpoint: async () => {\n            /* no-op */\n          },\n        });\n      } catch (errorFromUser: any) {\n        logger.verbose(\n          `[${this._id}] An error was thrown from the user's processError handler: ${errorFromUser}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Starts the `EventProcessor`. Based on the number of instances of `EventProcessor` that are running for the\n   * same consumer group, the partitions are distributed among these instances to process events.\n   *\n   * For each partition, the user provided `PartitionProcessor` is instantiated.\n   *\n   * Subsequent calls to start will be ignored if this event processor is already running.\n   * Calling `start()` after `stop()` is called will restart this event processor.\n   *\n   */\n  start(): void {\n    if (this._isRunning) {\n      logger.verbose(`[${this._id}] Attempted to start an already running EventProcessor.`);\n      return;\n    }\n\n    this._isRunning = true;\n    this._abortController = new AbortController();\n    logger.verbose(`[${this._id}] Starting an EventProcessor.`);\n\n    if (this._processingTarget) {\n      logger.verbose(`[${this._id}] Single partition target: ${this._processingTarget}`);\n      this._loopTask = this._runLoopForSinglePartition(\n        this._processingTarget,\n        this._abortController.signal,\n      );\n    } else {\n      logger.verbose(`[${this._id}] Multiple partitions, using load balancer`);\n      this._loopTask = this._runLoopWithLoadBalancing(\n        this._loadBalancingStrategy,\n        this._abortController.signal,\n      );\n    }\n  }\n\n  isRunning(): boolean {\n    return this._isRunning;\n  }\n\n  /**\n   * Stops processing events for all partitions owned by this event processor.\n   * All `PartitionProcessor` will be shutdown and any open resources will be closed.\n   *\n   * Subsequent calls to stop will be ignored if the event processor is not running.\n   *\n   */\n  async stop(): Promise<void> {\n    logger.verbose(`[${this._id}] Stopping an EventProcessor.`);\n    // cancel the event processor loop\n    this._abortController?.abort();\n\n    try {\n      // remove all existing pumps\n      await this._pumpManager.removeAllPumps(CloseReason.Shutdown);\n\n      // waits for the event processor loop to complete\n      // will complete immediately if _loopTask is undefined\n      if (this._loopTask) {\n        await this._loopTask;\n      }\n    } catch (err: any) {\n      logger.verbose(`[${this._id}] An error occurred while stopping the EventProcessor: ${err}`);\n    } finally {\n      logger.verbose(`[${this._id}] EventProcessor stopped.`);\n    }\n\n    if (this._processingTarget) {\n      logger.verbose(`[${this._id}] No partitions owned, skipping abandoning.`);\n    } else {\n      await this.abandonPartitionOwnerships();\n    }\n  }\n\n  private async abandonPartitionOwnerships(): Promise<PartitionOwnership[]> {\n    logger.verbose(`[${this._id}] Abandoning owned partitions`);\n    const allOwnerships = await this._checkpointStore.listOwnership(\n      this._fullyQualifiedNamespace,\n      this._eventHubName,\n      this._consumerGroup,\n    );\n    const ourOwnerships = allOwnerships.filter((ownership) => ownership.ownerId === this._id);\n    // unclaim any partitions that we currently own\n    for (const ownership of ourOwnerships) {\n      ownership.ownerId = \"\";\n    }\n    return this._checkpointStore.claimOwnership(ourOwnerships);\n  }\n}\n\nfunction isAbandoned(ownership: PartitionOwnership): boolean {\n  return ownership.ownerId === \"\";\n}\n\nfunction getStartPosition(\n  partitionIdToClaim: string,\n  startPositions?: EventPosition | { [partitionId: string]: EventPosition },\n): EventPosition {\n  if (startPositions == null) {\n    return latestEventPosition;\n  }\n\n  if (isEventPosition(startPositions)) {\n    return startPositions;\n  }\n\n  const startPosition = (startPositions as { [partitionId: string]: EventPosition })[\n    partitionIdToClaim\n  ];\n\n  if (startPosition == null) {\n    return latestEventPosition;\n  }\n\n  return startPosition;\n}\n\nfunction computePartitionsToClaim(inputs: {\n  partitionOwnership: PartitionOwnership[];\n  id: string;\n  isReceivingFromPartition: (id: string) => boolean;\n  loadBalancingStrategy: LoadBalancingStrategy;\n  partitionIds: string[];\n}): {\n  partitionsToClaim: Set<string>;\n  partitionOwnershipMap: Map<string, PartitionOwnership>;\n} {\n  const { partitionOwnership, id, isReceivingFromPartition, loadBalancingStrategy, partitionIds } =\n    inputs;\n\n  const partitionOwnershipMap = new Map<string, PartitionOwnership>();\n  const nonAbandonedPartitionOwnershipMap = new Map<string, PartitionOwnership>();\n  const partitionsToRenew: string[] = [];\n\n  // Separate abandoned ownerships from claimed ownerships.\n  // We only want to pass active partition ownerships to the\n  // load balancer, but we need to hold onto the abandoned\n  // partition ownerships because we need the etag to claim them.\n  for (const ownership of partitionOwnership) {\n    partitionOwnershipMap.set(ownership.partitionId, ownership);\n    if (!isAbandoned(ownership)) {\n      nonAbandonedPartitionOwnershipMap.set(ownership.partitionId, ownership);\n    }\n    if (ownership.ownerId === id && isReceivingFromPartition(ownership.partitionId)) {\n      partitionsToRenew.push(ownership.partitionId);\n    }\n  }\n\n  // Pass the list of all the partition ids and the collection of claimed partition ownerships\n  // to the load balance strategy.\n  // The load balancing strategy only needs to know the full list of partitions,\n  // and which of those are currently claimed.\n  // Since abandoned partitions are no longer claimed, we exclude them.\n  const partitionsToClaim = loadBalancingStrategy.getPartitionsToClaim(\n    id,\n    nonAbandonedPartitionOwnershipMap,\n    partitionIds,\n  );\n  partitionsToClaim.push(...partitionsToRenew);\n\n  return {\n    partitionsToClaim: new Set(partitionsToClaim),\n    partitionOwnershipMap,\n  };\n}\n"]}