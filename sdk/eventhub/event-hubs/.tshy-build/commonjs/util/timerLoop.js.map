{"version":3,"file":"timerLoop.js","sourceRoot":"","sources":["../../../src/util/timerLoop.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA2BlC,0CA0BC;AA9BD;;;GAGG;AACH,SAAgB,eAAe,CAC7B,WAAmB,EACnB,UAAkC;IAElC,IAAI,KAAoC,CAAC;IACzC,MAAM,IAAI,GAAG;QACX,KAAK,EAAE,GAAG,EAAE;YACV,YAAY,CAAC,KAAK,CAAC,CAAC;YACpB,KAAK,GAAG,UAAU,CAChB,GAAG,EAAE,CACH,UAAU,EAAE;iBACT,KAAK,CAAC,GAAG,EAAE;gBACV,kCAAkC;YACpC,CAAC,CAAC;iBACD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EACxB,WAAW,CACZ,CAAC;YACF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACxB,CAAC;QACD,IAAI,EAAE,GAAG,EAAE;YACT,YAAY,CAAC,KAAK,CAAC,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC;QACD,SAAS,EAAE,KAAK;KACjB,CAAC;IACF,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A timer loop is a loop over multiple instances of a promise every specific\n * time interval. It is different from `setInterval` in that it waits until the\n * promise is settled before it goes to the next iteration.\n * */\nexport interface TimerLoop {\n  /**\n   * Starts the timer loop. If the loop is already running, the loop will be\n   * restarted.\n   */\n  start: () => void;\n  /**\n   * Stops the timer loop. If the loop is not running, it is a no-op.\n   */\n  stop: () => void;\n  /**\n   * Whether the loop is running.\n   */\n  isRunning: boolean;\n}\n\n/**\n * Creates a timer loop with the given timeout and task.\n * @internal\n */\nexport function createTimerLoop(\n  timeoutInMs: number,\n  createTask: () => Promise<unknown>,\n): TimerLoop {\n  let token: ReturnType<typeof setTimeout>;\n  const loop = {\n    start: () => {\n      clearTimeout(token);\n      token = setTimeout(\n        () =>\n          createTask()\n            .catch(() => {\n              /** eats up any unhandled error */\n            })\n            .finally(loop.start),\n        timeoutInMs,\n      );\n      loop.isRunning = true;\n    },\n    stop: () => {\n      clearTimeout(token);\n      loop.isRunning = false;\n    },\n    isRunning: false,\n  };\n  return loop;\n}\n"]}