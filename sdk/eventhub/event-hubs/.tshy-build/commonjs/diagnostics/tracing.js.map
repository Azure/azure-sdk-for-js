{"version":3,"file":"tracing.js","sourceRoot":"","sources":["../../../src/diagnostics/tracing.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AA4BlC,sCA2BC;AApDD,sDAA0D;AAE1D,uDAAuD;AAOvD;;GAEG;AACU,QAAA,aAAa,GAAG,IAAA,kCAAmB,EAAC;IAC/C,SAAS,EAAE,oBAAoB;IAC/B,WAAW,EAAE,8BAAe,CAAC,IAAI;IACjC,cAAc,EAAE,8BAAe,CAAC,OAAO;CACxC,CAAC,CAAC;AAEH;;;;;;GAMG;AACH,SAAgB,aAAa,CAC3B,cAAqE,EACrE,SAAmC,EACnC,QAA0B;IAE1B,MAAM,YAAY,GAChB,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,SAAS;QAChD,CAAC,CAAC,uBAAuB;QACzB,CAAC,CAAC,4BAA4B,CAAC;IAEnC,MAAM,cAAc,GAAG;QACrB,kBAAkB,EAAE,WAAW;QAC/B,CAAC,YAAY,CAAC,EAAE,cAAc,CAAC,UAAU;QACzC,eAAe,EAAE,cAAc,CAAC,IAAI;KACrC,CAAC;IAEF,IAAI,SAAS,EAAE,CAAC;QACd,cAAc,CAAC,qBAAqB,CAAC,GAAG,SAAS,CAAC;IACpD,CAAC;IAED,MAAM,WAAW,GAAuB;QACtC,cAAc,EAAE,cAAc;KAC/B,CAAC;IACF,IAAI,QAAQ,EAAE,CAAC;QACb,WAAW,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAClC,CAAC;IACD,OAAO,WAAW,CAAC;AACrB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { TracingSpanOptions, TracingSpanKind } from \"@azure/core-tracing\";\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport type { EventHubConnectionConfig } from \"../eventhubConnectionConfig.js\";\nimport { packageJsonInfo } from \"../util/constants.js\";\n\n/**\n * The names of the operations that can be instrumented.\n */\nexport type MessagingOperationNames = \"publish\" | \"receive\" | \"process\";\n\n/**\n * The {@link TracingClient} that is used to add tracing spans.\n */\nexport const tracingClient = createTracingClient({\n  namespace: \"Microsoft.EventHub\",\n  packageName: packageJsonInfo.name,\n  packageVersion: packageJsonInfo.version,\n});\n\n/**\n * Creates {@link TracingSpanOptions} from the provided data.\n * @param eventHubConfig - The configuration object containing initial attributes to set on the span.\n * @param spanKind - The {@link TracingSpanKind} for the newly created span.\n * @param operation - The operation type.\n * @returns a {@link TracingSpanOptions} that can be passed to a {@link TracingClient}\n */\nexport function toSpanOptions(\n  eventHubConfig: Pick<EventHubConnectionConfig, \"entityPath\" | \"host\">,\n  operation?: MessagingOperationNames,\n  spanKind?: TracingSpanKind,\n): TracingSpanOptions {\n  const propertyName =\n    operation === \"process\" || operation === \"receive\"\n      ? \"messaging.source.name\"\n      : \"messaging.destination.name\";\n\n  const spanAttributes = {\n    \"messaging.system\": \"eventhubs\",\n    [propertyName]: eventHubConfig.entityPath,\n    \"net.peer.name\": eventHubConfig.host,\n  };\n\n  if (operation) {\n    spanAttributes[\"messaging.operation\"] = operation;\n  }\n\n  const spanOptions: TracingSpanOptions = {\n    spanAttributes: spanAttributes,\n  };\n  if (spanKind) {\n    spanOptions.spanKind = spanKind;\n  }\n  return spanOptions;\n}\n"]}