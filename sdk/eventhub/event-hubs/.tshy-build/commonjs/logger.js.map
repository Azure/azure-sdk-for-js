{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/logger.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAiBlC,gDAIC;AAKD,0DAMC;AAKD,sDAEC;AAKD,8DAEC;AAwBD,gDAOC;AAGD,wBAEC;AA/ED,0CAAmD;AACnD,gDAA0D;AAE1D;;;GAGG;AACU,QAAA,MAAM,GAAG,IAAA,2BAAkB,EAAC,YAAY,CAAC,CAAC;AAEvD;;;;GAIG;AACH,SAAgB,kBAAkB,CAAC,KAAc;IAC/C,IAAI,IAAA,kCAAsB,EAAC,KAAK,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;QAC7C,cAAM,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,uBAAuB,CACrC,UAAkB,EAClB,YAAoB,EACpB,WAAmB;IAEnB,OAAO,IAAI,YAAY,eAAe,WAAW,IAAI,UAAU,EAAE,CAAC;AACpE,CAAC;AAED;;GAEG;AACH,SAAgB,qBAAqB,CAAC,QAAgB,EAAE,YAAoB;IAC1E,OAAO,IAAI,YAAY,YAAY,QAAQ,EAAE,CAAC;AAChD,CAAC;AAED;;GAEG;AACH,SAAgB,yBAAyB,CAAC,YAAoB;IAC5D,OAAO,IAAI,YAAY,cAAc,CAAC;AACxC,CAAC;AASD,SAAS,iBAAiB,CACxB,WAAwB,EACxB,MAAc,EACd,KAAoB;IAEpB,OAAO,CAAC,GAAQ,EAAE,GAAG,IAAW,EAAE,EAAE,CAClC,WAAW,CAAC,KAAK,CAAC,CAChB,GAAG,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,EACpE,GAAG,IAAI,CACR,CAAC;AACN,CAAC;AAED;;GAEG;AACH,SAAgB,kBAAkB,CAAC,WAAwB,EAAE,MAAc;IACzE,OAAO;QACL,IAAI,EAAE,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC;QACpD,KAAK,EAAE,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC;QACtD,OAAO,EAAE,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,SAAS,CAAC;QAC1D,OAAO,EAAE,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,SAAS,CAAC;KAC3D,CAAC;AACJ,CAAC;AAED,gBAAgB;AAChB,SAAgB,MAAM,CAAC,GAAY;IACjC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;AACpC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AzureLogger, AzureLogLevel, Debugger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\nimport { isObjectWithProperties } from \"@azure/core-util\";\n\n/**\n * The `@azure/logger` configuration for this package.\n * This will output logs using the `azure:event-hubs` namespace prefix.\n */\nexport const logger = createClientLogger(\"event-hubs\");\n\n/**\n * Logs the error's stack trace to \"verbose\" if a stack trace is available.\n * @param error - Error containing a stack trace.\n * @internal\n */\nexport function logErrorStackTrace(error: unknown): void {\n  if (isObjectWithProperties(error, [\"stack\"])) {\n    logger.verbose(error.stack);\n  }\n}\n\n/**\n * @internal\n */\nexport function createReceiverLogPrefix(\n  consumerId: string,\n  connectionId: string,\n  partitionId: string,\n): string {\n  return `[${connectionId}] Receiver P${partitionId}-${consumerId}`;\n}\n\n/**\n * @internal\n */\nexport function createSenderLogPrefix(senderId: string, connectionId: string): string {\n  return `[${connectionId}] Sender ${senderId}`;\n}\n\n/**\n * @internal\n */\nexport function createManagementLogPrefix(connectionId: string): string {\n  return `[${connectionId}] Management`;\n}\n\n/**\n * @internal\n */\nexport type SimpleLogger = {\n  [Property in keyof AzureLogger]: Debugger[\"log\"];\n};\n\nfunction createLogFunction(\n  azureLogger: AzureLogger,\n  prefix: string,\n  level: AzureLogLevel,\n): (arg: any, ...args: any[]) => void {\n  return (arg: any, ...args: any[]) =>\n    azureLogger[level](\n      ...(typeof arg === \"string\" ? [`${prefix}: ${arg}`] : [prefix, arg]),\n      ...args,\n    );\n}\n\n/**\n * @internal\n */\nexport function createSimpleLogger(azureLogger: AzureLogger, prefix: string): SimpleLogger {\n  return {\n    info: createLogFunction(azureLogger, prefix, \"info\"),\n    error: createLogFunction(azureLogger, prefix, \"error\"),\n    verbose: createLogFunction(azureLogger, prefix, \"verbose\"),\n    warning: createLogFunction(azureLogger, prefix, \"warning\"),\n  };\n}\n\n/** @internal */\nexport function logObj(obj: unknown): void {\n  JSON.stringify(obj, undefined, 2);\n}\n"]}