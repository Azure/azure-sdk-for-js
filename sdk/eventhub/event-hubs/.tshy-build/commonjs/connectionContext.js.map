{"version":3,"file":"connectionContext.js","sourceRoot":"","sources":["../../src/connectionContext.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-inner-declarations */\n\nimport type { Connection, Dictionary, EventContext, OnAmqpEvent } from \"rhea-promise\";\nimport { ConnectionEvents } from \"rhea-promise\";\nimport type { CreateConnectionContextBaseParameters, SasTokenProvider } from \"@azure/core-amqp\";\nimport {\n  ConnectionConfig,\n  ConnectionContextBase,\n  Constants,\n  createSasTokenProvider,\n} from \"@azure/core-amqp\";\nimport type { EventHubConnectionStringProperties } from \"./util/connectionStringUtils.js\";\nimport { parseEventHubConnectionString } from \"./util/connectionStringUtils.js\";\nimport type { ManagementClientOptions } from \"./managementClient.js\";\nimport { ManagementClient } from \"./managementClient.js\";\nimport type { NamedKeyCredential, SASCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isNamedKeyCredential, isSASCredential } from \"@azure/core-auth\";\nimport { logErrorStackTrace, logger } from \"./logger.js\";\nimport type { EventHubClientOptions } from \"./models/public.js\";\nimport { EventHubConnectionConfig } from \"./eventhubConnectionConfig.js\";\nimport type { PartitionReceiver } from \"./partitionReceiver.js\";\nimport type { EventHubSender } from \"./eventHubSender.js\";\nimport { getRuntimeInfo } from \"./util/runtimeInfo.js\";\nimport { isCredential } from \"./util/typeGuards.js\";\nimport { packageJsonInfo } from \"./util/constants.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { createAbortablePromise } from \"@azure/core-util\";\n\n/**\n * @internal\n * Provides contextual information like the underlying amqp connection, cbs session, management session,\n * tokenProvider, senders, receivers, etc. about the EventHub client.\n */\nexport interface ConnectionContext extends ConnectionContextBase {\n  /**\n   * The EventHub connection config that is created after\n   * parsing the connection string.\n   */\n  readonly config: EventHubConnectionConfig;\n  /**\n   * The credential to be used for Authentication.\n   * Default value: SasTokenProvider.\n   */\n  tokenCredential: SasTokenProvider | TokenCredential;\n  /**\n   * Indicates whether the close() method was\n   * called on theconnection object.\n   */\n  wasConnectionCloseCalled: boolean;\n  /**\n   * A dictionary of the EventHub Receivers associated with this client.\n   */\n  receivers: Dictionary<PartitionReceiver>;\n  /**\n   * A dictionary of the EventHub Senders associated with this client.\n   */\n  senders: Dictionary<EventHubSender>;\n  /**\n   * A reference to the management session ($management endpoint) on\n   * the underlying amqp connection for the EventHub Client.\n   */\n  managementSession?: ManagementClient;\n  /**\n   * Function returning a promise that resolves once the connectionContext is ready to open an AMQP link.\n   * ConnectionContext will be ready to open an AMQP link when:\n   * - The AMQP connection is already open on both sides.\n   * - The AMQP connection has been closed or disconnected. In this case, a new AMQP connection is expected\n   * to be created first.\n   * An AMQP link cannot be opened if the AMQP connection\n   * is in the process of closing or disconnecting.\n   */\n  readyToOpenLink(options?: { abortSignal?: AbortSignalLike }): Promise<void>;\n  /**\n   * Closes all AMQP links, sessions and connection.\n   */\n  close(): Promise<void>;\n}\n\n/**\n * Describes the members on the ConnectionContext that are only\n * used by it internally.\n * @internal\n */\nexport interface ConnectionContextInternalMembers extends ConnectionContext {\n  /**\n   * Indicates whether the connection is in the process of closing.\n   * When this returns `true`, a `disconnected` event will be received\n   * after the connection is closed.\n   *\n   */\n  isConnectionClosing(): boolean;\n  /**\n   * Resolves once the context's connection emits a `disconnected` event.\n   */\n  waitForDisconnectedEvent(options?: { abortSignal?: AbortSignalLike }): Promise<void>;\n  /**\n   * Resolves once the connection has finished being reset.\n   * Connections are reset as part of reacting to a `disconnected` event.\n   */\n  waitForConnectionReset(): Promise<void>;\n}\n\n/**\n * @internal\n */\nexport interface ConnectionContextOptions extends EventHubClientOptions {\n  managementSessionAddress?: string;\n  managementSessionAudience?: string;\n}\n\n/**\n * Helper type to get the names of all the functions on an object.\n */\ntype FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]; // eslint-disable-line @typescript-eslint/no-unsafe-function-type\n/**\n * Helper type to get the types of all the functions on an object.\n */\ntype FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;\n/**\n * Helper type to get the types of all the functions on ConnectionContext\n * and the internal methods from ConnectionContextInternalMembers.\n * Note that this excludes the functions that ConnectionContext inherits.\n * Each function also has its `this` type set as `ConnectionContext`.\n */\ntype ConnectionContextMethods = Omit<\n  FunctionProperties<ConnectionContextInternalMembers>,\n  FunctionPropertyNames<ConnectionContextBase>\n> &\n  ThisType<ConnectionContextInternalMembers>;\n\n/**\n * @internal\n */\nexport namespace ConnectionContext {\n  /**\n   * The user agent string for the EventHubs client.\n   * See guideline at https://github.com/Azure/azure-sdk/blob/main/docs/design/Telemetry.mdk\n   */\n  const userAgent: string = `azsdk-js-azureeventhubs/${\n    packageJsonInfo.version\n  } (${getRuntimeInfo()})`;\n\n  export function getUserAgent(options: ConnectionContextOptions): string {\n    const finalUserAgent = options.userAgent ? `${userAgent},${options.userAgent}` : userAgent;\n    if (finalUserAgent.length > Constants.maxUserAgentLength) {\n      throw new Error(\n        `The user-agent string cannot be more than ${Constants.maxUserAgentLength} characters in length.` +\n          `The given user-agent string is: ${finalUserAgent} with length: ${finalUserAgent.length}`,\n      );\n    }\n    return finalUserAgent;\n  }\n\n  export function create(\n    config: EventHubConnectionConfig,\n    tokenCredential: SasTokenProvider | TokenCredential,\n    options?: ConnectionContextOptions,\n  ): ConnectionContext {\n    if (!options) options = {};\n\n    config.webSocket = options.webSocketOptions && options.webSocketOptions.webSocket;\n    config.webSocketEndpointPath = \"$servicebus/websocket\";\n    config.webSocketConstructorOptions =\n      options.webSocketOptions && options.webSocketOptions.webSocketConstructorOptions;\n\n    const parameters: CreateConnectionContextBaseParameters = {\n      config: config,\n      // re-enabling this will be a post-GA discussion.\n      // dataTransformer: options.dataTransformer,\n      isEntityPathRequired: true,\n      connectionProperties: {\n        product: \"MSJSClient\",\n        userAgent: getUserAgent(options),\n        version: packageJsonInfo.version,\n      },\n    };\n    // Let us create the base context and then add EventHub specific ConnectionContext properties.\n    const connectionContext = ConnectionContextBase.create(parameters) as ConnectionContext;\n    connectionContext.tokenCredential = tokenCredential;\n    connectionContext.wasConnectionCloseCalled = false;\n    connectionContext.senders = {};\n    connectionContext.receivers = {};\n    const mOptions: ManagementClientOptions = {\n      address: options.managementSessionAddress,\n      audience: options.managementSessionAudience,\n    };\n    connectionContext.managementSession = new ManagementClient(connectionContext, mOptions);\n\n    let waitForConnectionRefreshResolve: () => void;\n    let waitForConnectionRefreshPromise: Promise<void> | undefined;\n\n    Object.assign<ConnectionContext, ConnectionContextMethods>(connectionContext, {\n      isConnectionClosing() {\n        // When the connection is not open, but the remote end is open,\n        // then the rhea connection is in the process of terminating.\n        return Boolean(!this.connection.isOpen() && this.connection.isRemoteOpen());\n      },\n      async readyToOpenLink(optionsArg?: { abortSignal?: AbortSignalLike }) {\n        // Check that the connection isn't in the process of closing.\n        // This can happen when the idle timeout has been reached but\n        // the underlying socket is waiting to be destroyed.\n        if (this.isConnectionClosing()) {\n          // Wait for the disconnected event that indicates the underlying socket has closed.\n          await this.waitForDisconnectedEvent(optionsArg);\n        }\n\n        // Wait for the connection to be reset.\n        await this.waitForConnectionReset();\n      },\n      waitForDisconnectedEvent(optionsArg?: { abortSignal?: AbortSignalLike }) {\n        return createAbortablePromise((resolve) => {\n          logger.verbose(\n            `[${this.connectionId}] Attempting to reinitialize connection` +\n              ` but the connection is in the process of closing.` +\n              ` Waiting for the disconnect event before continuing.`,\n          );\n          this.connection.once(ConnectionEvents.disconnected, resolve);\n        }, optionsArg);\n      },\n      waitForConnectionReset() {\n        // Check if the connection is currently in the process of disconnecting.\n        if (waitForConnectionRefreshPromise) {\n          return waitForConnectionRefreshPromise;\n        }\n        return Promise.resolve();\n      },\n      async close() {\n        try {\n          if (this.connection.isOpen()) {\n            // Close all the senders.\n            await Promise.all(\n              Object.keys(connectionContext.senders).map((name) =>\n                connectionContext.senders[name]?.close().catch(() => {\n                  /* error already logged, swallow it here */\n                }),\n              ),\n            );\n            // Close all the receivers.\n            await Promise.all(\n              Object.keys(connectionContext.receivers).map((name) =>\n                connectionContext.receivers[name]?.close().catch(() => {\n                  /* error already logged, swallow it here */\n                }),\n              ),\n            );\n            // Close the cbs session;\n            await this.cbsSession.close();\n            // Close the management session\n            await this.managementSession?.close();\n            await this.connection.close();\n            this.wasConnectionCloseCalled = true;\n            logger.info(\"Closed the amqp connection '%s' on the client.\", this.connectionId);\n          }\n        } catch (err: any) {\n          const errorDescription =\n            err instanceof Error ? `${err.name}: ${err.message}` : JSON.stringify(err);\n          logger.warning(\n            `An error occurred while closing the connection \"${this.connectionId}\":\\n${errorDescription}`,\n          );\n          logErrorStackTrace(err);\n          throw err;\n        }\n      },\n    });\n\n    // Define listeners to be added to the connection object for\n    // \"connection_open\" and \"connection_error\" events.\n    const onConnectionOpen: OnAmqpEvent = () => {\n      connectionContext.wasConnectionCloseCalled = false;\n      logger.verbose(\n        \"[%s] setting 'wasConnectionCloseCalled' property of connection context to %s.\",\n        connectionContext.connection.id,\n        connectionContext.wasConnectionCloseCalled,\n      );\n    };\n\n    const onDisconnected: OnAmqpEvent = async (context: EventContext) => {\n      if (waitForConnectionRefreshPromise) {\n        return;\n      }\n      waitForConnectionRefreshPromise = new Promise((resolve) => {\n        waitForConnectionRefreshResolve = resolve;\n      });\n      try {\n        logger.verbose(\n          \"[%s] 'disconnected' event occurred on the amqp connection.\",\n          connectionContext.connection.id,\n        );\n\n        if (context.connection && context.connection.error) {\n          logger.verbose(\n            \"[%s] Accompanying error on the context.connection: %O\",\n            connectionContext.connection.id,\n            context.connection && context.connection.error,\n          );\n        }\n        if (context.error) {\n          logger.verbose(\n            \"[%s] Accompanying error on the context: %O\",\n            connectionContext.connection.id,\n            context.error,\n          );\n        }\n        const state: Readonly<{\n          wasConnectionCloseCalled: boolean;\n          numSenders: number;\n          numReceivers: number;\n        }> = {\n          wasConnectionCloseCalled: connectionContext.wasConnectionCloseCalled,\n          numSenders: Object.keys(connectionContext.senders).length,\n          numReceivers: Object.keys(connectionContext.receivers).length,\n        };\n        logger.verbose(\n          \"[%s] Closing all open senders and receivers in the state: %O\",\n          connectionContext.connection.id,\n          state,\n        );\n\n        // Clear internal map maintained by rhea to avoid reconnecting of old links once the\n        // connection is back up.\n        connectionContext.connection.removeAllSessions();\n\n        // Close the cbs session to ensure all the event handlers are released.\n        await connectionContext.cbsSession?.close().catch(() => {\n          /* error already logged, swallow it here */\n        });\n        // Close the management session to ensure all the event handlers are released.\n        await connectionContext.managementSession?.close().catch(() => {\n          /* error already logged, swallow it here */\n        });\n\n        // Close all senders and receivers to ensure clean up of timers & other resources.\n        if (state.numSenders || state.numReceivers) {\n          await Promise.all(\n            Object.keys(connectionContext.senders).map((name) =>\n              connectionContext.senders[name]?.close().catch(() => {\n                /* error already logged, swallow it here */\n              }),\n            ),\n          );\n\n          await Promise.all(\n            Object.keys(connectionContext.receivers).map((name) =>\n              connectionContext.receivers[name]?.close().catch(() => {\n                /* error already logged, swallow it here */\n              }),\n            ),\n          );\n        }\n      } catch (err: any) {\n        logger.verbose(\n          `[${connectionContext.connectionId}] An error occurred while closing the connection in 'disconnected'. %O`,\n          err,\n        );\n      }\n\n      try {\n        await refreshConnection(connectionContext);\n      } catch (err: any) {\n        logger.verbose(\n          `[${connectionContext.connectionId}] An error occurred while refreshing the connection in 'disconnected'. %O`,\n          err,\n        );\n      } finally {\n        waitForConnectionRefreshResolve();\n        waitForConnectionRefreshPromise = undefined;\n      }\n    };\n\n    const protocolError: OnAmqpEvent = async (context: EventContext) => {\n      logger.verbose(\n        \"[%s] 'protocol_error' event occurred on the amqp connection.\",\n        connectionContext.connection.id,\n      );\n\n      if (context.connection && context.connection.error) {\n        logger.verbose(\n          \"[%s] Accompanying error on the context.connection: %O\",\n          connectionContext.connection.id,\n          context.connection && context.connection.error,\n        );\n      }\n      if (context.error) {\n        logger.verbose(\n          \"[%s] Accompanying error on the context: %O\",\n          connectionContext.connection.id,\n          context.error,\n        );\n      }\n    };\n\n    const error: OnAmqpEvent = async (context: EventContext) => {\n      logger.verbose(\n        \"[%s] 'error' event occurred on the amqp connection.\",\n        connectionContext.connection.id,\n      );\n\n      if (context.connection && context.connection.error) {\n        logger.verbose(\n          \"[%s] Accompanying error on the context.connection: %O\",\n          connectionContext.connection.id,\n          context.connection && context.connection.error,\n        );\n      }\n      if (context.error) {\n        logger.verbose(\n          \"[%s] Accompanying error on the context: %O\",\n          connectionContext.connection.id,\n          context.error,\n        );\n      }\n    };\n\n    function addConnectionListeners(connection: Connection): void {\n      // Add listeners on the connection object.\n      connection.on(ConnectionEvents.connectionOpen, onConnectionOpen);\n      connection.on(ConnectionEvents.disconnected, onDisconnected);\n      connection.on(ConnectionEvents.protocolError, protocolError);\n      connection.on(ConnectionEvents.error, error);\n    }\n\n    function cleanConnectionContext(context: ConnectionContext): Promise<void> {\n      // Remove listeners from the connection object.\n      context.connection.removeListener(ConnectionEvents.connectionOpen, onConnectionOpen);\n      context.connection.removeListener(ConnectionEvents.disconnected, onDisconnected);\n      context.connection.removeListener(ConnectionEvents.protocolError, protocolError);\n      context.connection.removeListener(ConnectionEvents.error, error);\n      // Close the connection\n      return context.connection.close();\n    }\n\n    async function refreshConnection(context: ConnectionContext): Promise<void> {\n      const originalConnectionId = context.connectionId;\n      try {\n        await cleanConnectionContext(context);\n      } catch (err: any) {\n        logger.verbose(\n          `[${context.connectionId}] There was an error closing the connection before reconnecting: %O`,\n          err,\n        );\n      }\n\n      // Create a new connection, id, locks, and cbs client.\n      context.refreshConnection();\n      addConnectionListeners(context.connection);\n      logger.verbose(\n        `The connection \"${originalConnectionId}\" has been updated to \"${context.connectionId}\".`,\n      );\n    }\n\n    addConnectionListeners(connectionContext.connection);\n\n    logger.verbose(\"[%s] Created connection context successfully.\", connectionContext.connectionId);\n    return connectionContext;\n  }\n}\n\n/**\n * Helper method to create a ConnectionContext from the input passed to either\n * EventHubProducerClient or EventHubConsumerClient constructors\n *\n * @internal\n */\nexport function createConnectionContext(\n  hostOrConnectionString: string,\n  eventHubNameOrOptions?: string | EventHubClientOptions,\n  credentialOrOptions?:\n    | TokenCredential\n    | NamedKeyCredential\n    | SASCredential\n    | EventHubClientOptions,\n  options?: EventHubClientOptions,\n): ConnectionContext {\n  let connectionString;\n  let config;\n  let credential: TokenCredential | SasTokenProvider;\n  hostOrConnectionString = String(hostOrConnectionString);\n\n  if (!isCredential(credentialOrOptions)) {\n    const parsedCS = parseEventHubConnectionString(hostOrConnectionString);\n    if (\n      !(\n        parsedCS.eventHubName ||\n        (typeof eventHubNameOrOptions === \"string\" && eventHubNameOrOptions)\n      )\n    ) {\n      throw new TypeError(\n        `Either provide \"eventHubName\" or the \"connectionString\": \"${hostOrConnectionString}\", ` +\n          `must contain \"EntityPath=<your-event-hub-name>\".`,\n      );\n    }\n    if (\n      parsedCS.eventHubName &&\n      typeof eventHubNameOrOptions === \"string\" &&\n      eventHubNameOrOptions &&\n      parsedCS.eventHubName !== eventHubNameOrOptions\n    ) {\n      throw new TypeError(\n        `The entity path \"${parsedCS.eventHubName}\" in connectionString: \"${hostOrConnectionString}\" ` +\n          `doesn't match with eventHubName: \"${eventHubNameOrOptions}\".`,\n      );\n    }\n    connectionString = hostOrConnectionString;\n    if (typeof eventHubNameOrOptions !== \"string\") {\n      // connectionstring and/or options were passed to constructor\n      config = EventHubConnectionConfig.create(connectionString);\n      options = eventHubNameOrOptions;\n    } else {\n      // connectionstring, eventHubName and/or options were passed to constructor\n      const eventHubName = eventHubNameOrOptions;\n      config = EventHubConnectionConfig.create(connectionString, eventHubName);\n      options = credentialOrOptions;\n    }\n\n    const parsed = parseEventHubConnectionString(connectionString) as Required<\n      | Pick<EventHubConnectionStringProperties, \"sharedAccessKey\" | \"sharedAccessKeyName\">\n      | Pick<EventHubConnectionStringProperties, \"sharedAccessSignature\">\n    >;\n    // Since connectionString was passed, create a TokenProvider.\n    credential = createSasTokenProvider(parsed);\n  } else {\n    // host, eventHubName, a TokenCredential and/or options were passed to constructor\n    const eventHubName = eventHubNameOrOptions;\n    let host = hostOrConnectionString;\n    if (isNamedKeyCredential(credentialOrOptions) || isSASCredential(credentialOrOptions)) {\n      credential = createSasTokenProvider(credentialOrOptions);\n    } else {\n      credential = credentialOrOptions;\n    }\n    if (!eventHubName) {\n      throw new TypeError(`\"eventHubName\" is missing`);\n    }\n\n    if (!host.endsWith(\"/\")) host += \"/\";\n    connectionString = `Endpoint=sb://${host};SharedAccessKeyName=defaultKeyName;SharedAccessKey=defaultKeyValue;EntityPath=${eventHubName}`;\n    config = EventHubConnectionConfig.create(connectionString);\n  }\n\n  if (options?.customEndpointAddress) {\n    EventHubConnectionConfig.setCustomEndpointAddress(config, options.customEndpointAddress);\n  }\n\n  ConnectionConfig.validate(config);\n\n  return ConnectionContext.create(config, credential, options);\n}\n"]}