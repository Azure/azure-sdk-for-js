{"version":3,"file":"eventHubSender.js","sourceRoot":"","sources":["../../src/eventHubSender.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAUlC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAE9C,OAAO,EACL,wBAAwB,EACxB,kBAAkB,EAClB,sBAAsB,EACtB,KAAK,EACL,KAAK,EACL,SAAS,GACV,MAAM,kBAAkB,CAAC;AAE1B,OAAO,EAAE,oCAAoC,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAErF,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAEvD,OAAO,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,MAAM,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AASpG,OAAO,EAAE,0BAA0B,EAAE,MAAM,mBAAmB,CAAC;AAC/D,OAAO,EACL,mCAAmC,EACnC,8BAA8B,EAC9B,cAAc,GACf,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAEjD,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACzC,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAqBhD;;;GAGG;AACH,MAAM,OAAO,cAAc;IA2FzB;;;;OAIG;IACH,YACE,OAA0B,EAC1B,QAAgB,EAChB,EAAE,WAAW,EAAE,wBAAwB,EAAE,0BAA0B,EAAyB;QAlG9F;;;WAGG;QACc,eAAU,GAAW,aAAa,CAAC,QAAQ,CAAC,CAAC;QAgD9D;;;WAGG;QACK,iBAAY,GAAY,KAAK,CAAC;QA4CpC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC5D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;QACzB,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,qBAAqB,GAAG,wBAAwB,CAAC;QACtD,IAAI,CAAC,8BAA8B,GAAG,0BAA0B,CAAC;QACjE,MAAM,SAAS,GAAG,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC/E,IAAI,CAAC,MAAM,GAAG,kBAAkB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAEpD,IAAI,CAAC,YAAY,GAAG,CAAC,YAA0B,EAAE,EAAE;YACjD,MAAM,WAAW,GAAG,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC;YACrE,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,4DAA4D,EAC5D,WAAW,CACZ,CAAC;YACF,sEAAsE;QACxE,CAAC,CAAC;QAEF,IAAI,CAAC,eAAe,GAAG,CAAC,YAA0B,EAAE,EAAE;YACpD,MAAM,YAAY,GAAG,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC;YACxE,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,6DAA6D,EAC7D,YAAY,CACb,CAAC;YACF,sEAAsE;QACxE,CAAC,CAAC;QAEF,IAAI,CAAC,YAAY,GAAG,KAAK,EAAE,YAA0B,EAAE,EAAE;YACvD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,IAAI,YAAY,CAAC,MAAO,CAAC;YACpD,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,mFAAmF;gBACjF,iDAAiD,EACnD,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,cAAc,GAAG,QAAQ,EAAE,EACnC,IAAI,CAAC,YAAY,CAClB,CAAC;YACF,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACjC,kDAAkD;gBAClD,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;oBACjC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,mDAAmD,EAAE,GAAG,CAAC,CAAC;gBAChF,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAAC,eAAe,GAAG,KAAK,EAAE,YAA0B,EAAE,EAAE;YAC1D,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,IAAI,YAAY,CAAC,MAAO,CAAC;YACpD,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,0FAA0F;gBACxF,iDAAiD,EACnD,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,qBAAqB,GAAG,QAAQ,EAAE,EAC1C,IAAI,CAAC,YAAY,CAClB,CAAC;YACF,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACjC,kDAAkD;gBAClD,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;oBACjC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,oDAAoD,EAAE,GAAG,CAAC,CAAC;gBACjF,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK;;QACT,IAAI,CAAC;YACH,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;gBACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;gBAChC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;gBACzB,MAAA,IAAI,CAAC,QAAQ,0CAAE,IAAI,EAAE,CAAC;gBACtB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACjC,CAAC;QACH,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,MAAM,GAAG,GAAG,oCAAoC,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,KAAK,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,EAAE,CAAC;YAC7E,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACzB,kBAAkB,CAAC,GAAG,CAAC,CAAC;YACxB,MAAM,GAAG,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,MAAM;QACJ,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QAC9C,OAAO,MAAM,CAAC;IAChB,CAAC;IACD;;;;;;OAMG;IACH,KAAK,CAAC,iBAAiB,CACrB,UAGI,EAAE;QAEN,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAE5C,OAAO,MAAM,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,gCAAgC,CACpC,UAGI,EAAE;;QAEN,IAAI,IAAI,CAAC,0BAA0B,EAAE,CAAC;YACpC,mEAAmE;YACnE,yBAAY,IAAI,CAAC,0BAA0B,EAAG;QAChD,CAAC;QAED,MAAM,UAAU,GAAkC;YAChD,6BAA6B,EAAE,IAAI,CAAC,qBAAqB;YACzD,WAAW,EAAE,MAAA,IAAI,CAAC,WAAW,mCAAI,EAAE;SACpC,CAAC;QAEF,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC/B,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC5C,4CAA4C;YAC5C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBAClB,gGAAgG;gBAChG,kEAAkE;gBAClE,MAAM,IAAI,KAAK,CACb,qEAAqE,IAAI,CAAC,WAAW,IAAI,CAC1F,CAAC;YACJ,CAAC;YAED,MAAM,EACJ,CAAC,mCAAmC,CAAC,KAAK,CAAC,EAAE,UAAU,EACvD,CAAC,mCAAmC,CAAC,UAAU,CAAC,EAAE,eAAe,EACjE,CAAC,mCAAmC,CAAC,sBAAsB,CAAC,EAAE,2BAA2B,GAC1F,GAAG,MAAA,IAAI,CAAC,OAAO,CAAC,UAAU,mCAAI,EAAE,CAAC;YAElC,UAAU,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YACjD,UAAU,CAAC,eAAe,GAAG,QAAQ,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;YAC3D,UAAU,CAAC,2BAA2B,GAAG,QAAQ,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAC;QACrF,CAAC;QAED,IAAI,CAAC,0BAA0B,GAAG,UAAU,CAAC;QAE7C,mEAAmE;QACnE,yBAAY,UAAU,EAAG;IAC3B,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,IAAI,CACR,MAAoC,EACpC,OACkF;QAElF,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;YAChD,IAAI,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvD,MAAM,IAAI,KAAK,CACb,8GAA8G,CAC/G,CAAC;YACJ,CAAC;YAED,MAAM,UAAU,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;YAC3E,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;gBACrB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;gBACxD,OAAO;YACT,CAAC;YAED,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAC/B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC9B,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YACnD,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAC1C,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAC/B,+BAA+B,CAAC,MAAM,CAAC,CAAC;gBACxC,IAAI,IAAI,CAAC,0BAA0B,EAAE,CAAC;oBACpC,MAAM,EAAE,2BAA2B,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,0BAA0B,CAAC;oBAC5E,qFAAqF;oBACrF,IAAI,CAAC,0BAA0B,CAAC,2BAA2B;wBACzD,2BAA2B,GAAG,UAAU,CAAC;gBAC7C,CAAC;YACH,CAAC;YACD,OAAO;QACT,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,iCAAiC,CAAC,MAAM,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,qDAAqD,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,KAAK,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,EAAE,CAClF,CAAC;YACF,kBAAkB,CAAC,GAAG,CAAC,CAAC;YACxB,MAAM,GAAG,CAAC;QACZ,CAAC;gBAAS,CAAC;YACT,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAC/B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC/B,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,kCAAkC,CAAC,MAAuB;;QAChE,MAAM,EACJ,CAAC,mCAAmC,CAAC,KAAK,CAAC,EAAE,UAAU,EACvD,CAAC,mCAAmC,CAAC,UAAU,CAAC,EAAE,eAAe,EACjE,CAAC,mCAAmC,CAAC,sBAAsB,CAAC,EAAE,2BAA2B,GAC1F,GAAG,MAAA,MAAM,CAAC,UAAU,mCAAI,EAAE,CAAC;QAE5B,IAAI,CAAC,0BAA0B,GAAG;YAChC,6BAA6B,EAAE,IAAI,CAAC,qBAAqB;YACzD,WAAW,EAAE,MAAA,IAAI,CAAC,WAAW,mCAAI,EAAE;YACnC,2BAA2B;YAC3B,UAAU;YACV,eAAe;SAChB,CAAC;IACJ,CAAC;IAEO,gBAAgB;QACtB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;IACxD,CAAC;IAEO,oBAAoB;QAC1B,MAAM,SAAS,GAA2B;YACxC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,GAAG;YAChB,MAAM,EAAE;gBACN,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB;YACD,OAAO,EAAE,IAAI,CAAC,YAAY;YAC1B,OAAO,EAAE,IAAI,CAAC,YAAY;YAC1B,cAAc,EAAE,IAAI,CAAC,eAAe;YACpC,cAAc,EAAE,IAAI,CAAC,eAAe;SACrC,CAAC;QAEF,SAAS,CAAC,oBAAoB,GAAG,CAAC,cAAc,CAAC,CAAC;QAClD,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC/B,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,mCAAmC,CAAC,UAAU,CAAC,CAAC;YACpF,MAAM,oBAAoB,GAAG,gCAAgC,CAC3D,IAAI,CAAC,8BAA8B,EACnC,IAAI,CAAC,0BAA0B,CAChC,CAAC;YACF,SAAS,CAAC,UAAU,GAAG,oBAAoB,CAAC;QAC9C,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gCAAgC,EAAE,SAAS,CAAC,CAAC;QACjE,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;;;;;OAQG;IACK,KAAK,CAAC,aAAa,CACzB,MAAoC,EACpC,UAMM,EAAE;QAER,MAAM,WAAW,GAAgC,OAAO,CAAC,WAAW,CAAC;QACrE,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,EAAE,CAAC;QAChD,MAAM,WAAW,GAAG,0BAA0B,CAAC,YAAY,CAAC,CAAC;QAC7D,YAAY,CAAC,WAAW,GAAG,WAAW,CAAC;QAEvC,MAAM,gBAAgB,GAAG,KAAK,IAAmB,EAAE;;YACjD,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACjC,4BAA4B;YAC5B,aAAa;YACb,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC5C,YAAY;YACZ,4CAA4C;YAC5C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gCAAgC,CAAC,OAAO,CAAC,CAAC;YAC7E,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,aAAa,CAAC;YAEnD,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,0BAA0B,EAC1B,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CACpC,CAAC;YAEF,IAAI,mBAAmB,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,WAAW,GAAG,eAAe,GAAG,mBAAmB,EAAE,CAAC;gBAC9E,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,oDAAoD,CAAC,CAAC;gBAE1E,MAAM,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEjC,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,sDAAsD,EACtD,MAAM,CAAC,MAAM,EACb,MAAA,MAAA,MAAM,CAAC,OAAO,0CAAE,QAAQ,0CAAE,SAAS,EAAE,CACtC,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,mBAAmB,GAAG,CAAC,CAAC;YAC1B,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;gBACvB,oDAAoD;gBACpD,MAAM,GAAG,GAAG,sDAAsD,CAAC;gBACnE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACzB,MAAM,SAAS,GAAc;oBAC3B,SAAS,EAAE,wBAAwB,CAAC,eAAe;oBACnD,WAAW,EAAE,GAAG;iBACjB,CAAC;gBACF,MAAM,SAAS,CAAC,SAAS,CAAC,CAAC;YAC7B,CAAC;YAED,IAAI,WAAW,IAAI,eAAe,GAAG,mBAAmB,EAAE,CAAC;gBACzD,MAAM,IAAI,GACR,kDAAkD,GAAG,uBAAuB,CAAC;gBAC/E,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,GAAc;oBACnB,SAAS,EAAE,wBAAwB,CAAC,uBAAuB;oBAC3D,WAAW,EAAE,IAAI;iBAClB,CAAC;gBACF,MAAM,SAAS,CAAC,CAAC,CAAC,CAAC;YACrB,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,cAAc,GAAG,sBAAsB,CAAC,MAAM,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;gBAChF,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE;oBACjD,MAAM,EAAE,UAAU;oBAClB,gBAAgB,EAAE,CAAC,WAAW,GAAG,eAAe,GAAG,mBAAmB,CAAC,GAAG,IAAI;oBAC9E,WAAW;iBACZ,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mCAAmC,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YACrE,CAAC;YAAC,OAAO,GAAQ,EAAE,CAAC;gBAClB,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC;gBACpC,MAAM,eAAe,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;gBAC9C,MAAM,eAAe,CAAC;YACxB,CAAC;QACH,CAAC,CAAC;QAEF,MAAM,MAAM,GAAsB;YAChC,SAAS,EAAE,gBAAgB;YAC3B,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY;YACxC,aAAa,EAAE,kBAAkB,CAAC,WAAW;YAC7C,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,YAAY;SAC3B,CAAC;QAEF,IAAI,CAAC;YACH,MAAM,KAAK,CAAO,MAAM,CAAC,CAAC;QAC5B,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,MAAM,eAAe,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,gDAAgD,EAChD,GAAG,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,IAAI,KAAK,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,EAAE,CACxD,CAAC;YACF,kBAAkB,CAAC,eAAe,CAAC,CAAC;YACpC,MAAM,eAAe,CAAC;QACxB,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,QAAQ,CACpB,UAGI,EAAE;QAEN,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAClC,OAAO,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;QACD,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,EAAE,CAAC;QAChD,MAAM,WAAW,GAAG,0BAA0B,CAAC,YAAY,CAAC,CAAC;QAC7D,YAAY,CAAC,WAAW,GAAG,WAAW,CAAC;QACvC,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAElD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,iBAAiB,GAAG,KAAK,IAA8B,EAAE;YAC7D,OAAO,sBAAsB,CAAC,OAAO,CACnC,IAAI,CAAC,UAAU,EACf,GAAG,EAAE;gBACH,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACjC,MAAM,eAAe,GAAG,WAAW,GAAG,CAAC,aAAa,GAAG,SAAS,CAAC,CAAC;gBAClE,OAAO,IAAI,CAAC,KAAK,iCACZ,aAAa,KAChB,WAAW,EAAE,OAAO,CAAC,WAAW,EAChC,WAAW,EAAE,eAAe,IAC5B,CAAC;YACL,CAAC,EACD,EAAE,WAAW,EAAE,OAAO,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,CAC/D,CAAC;QACJ,CAAC,CAAC;QAEF,MAAM,MAAM,GAAiC;YAC3C,SAAS,EAAE,iBAAiB;YAC5B,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY;YACxC,aAAa,EAAE,kBAAkB,CAAC,UAAU;YAC5C,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,YAAY,EAAE,YAAY;SAC3B,CAAC;QAEF,IAAI,CAAC;YACH,OAAO,MAAM,KAAK,CAAkB,MAAM,CAAC,CAAC;QAC9C,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,MAAM,eAAe,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,sCAAsC,EACtC,GAAG,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,IAAI,KAAK,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,EAAE,CACxD,CAAC;YACF,kBAAkB,CAAC,eAAe,CAAC,CAAC;YACpC,MAAM,eAAe,CAAC;QACxB,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,KAAK,CACjB,OAGC;QAED,MAAM,YAAY,GAAG,KAAK,IAAI,EAAE;YAC9B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;YAE/C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YAC7E,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACtD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC;YAEzD,0EAA0E;YAC1E,iEAAiE;YACjE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;gBAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QACjF,CAAC,CAAC;QACF,IAAI,CAAC;YACH,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACpC,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC;gBACtC,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ,CAC5B,YAAY,EACZ,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,QAAQ,EACb,OAAO,CAAC,WAAW,EACnB,IAAI,CAAC,MAAM,EACX,EAAE,WAAW,EAAE,OAAO,CAAC,WAAW,EAAE,CACrC,CAAC;gBACF,0EAA0E;gBAC1E,oBAAoB;gBACpB,OAAO,IAAI,CAAC,OAAQ,CAAC;YACvB,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,wCAAwC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC7E,OAAO,IAAI,CAAC,OAAO,CAAC;YACtB,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,eAAe,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,2CAA2C,EAC3C,GAAG,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,IAAI,KAAK,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,EAAE,CACxD,CAAC;YACF,kBAAkB,CAAC,eAAe,CAAC,CAAC;YACpC,MAAM,eAAe,CAAC;QACxB,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,MAAM,CACX,OAA0B,EAC1B,QAAgB,EAChB,OAA8B;QAE9B,MAAM,QAAQ,GAAmB,IAAI,cAAc,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAChF,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YACpC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;QAC5C,CAAC;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;CACF;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,gCAAgC,CAC9C,6BAAqE,EACrE,sBAAiE;IAEjE,IAAI,UAA8B,CAAC;IACnC,IAAI,eAAmC,CAAC;IACxC,IAAI,cAAkC,CAAC;IAEvC,oFAAoF;IACpF,+EAA+E;IAC/E,IAAI,sBAAsB,EAAE,CAAC;QAC3B,UAAU,GAAG,sBAAsB,CAAC,UAAU,CAAC;QAC/C,eAAe,GAAG,sBAAsB,CAAC,eAAe,CAAC;QACzD,cAAc,GAAG,sBAAsB,CAAC,2BAA2B,CAAC;IACtE,CAAC;SAAM,IAAI,6BAA6B,EAAE,CAAC;QACzC,UAAU,GAAG,6BAA6B,CAAC,UAAU,CAAC;QACtD,eAAe,GAAG,6BAA6B,CAAC,eAAe,CAAC;QAChE,cAAc,GAAG,6BAA6B,CAAC,sBAAsB,CAAC;IACxE,CAAC;SAAM,CAAC;QACN,gEAAgE;QAChE,4EAA4E;QAC5E,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,qEAAqE;IACrE,iCAAiC;IACjC,kEAAkE;IAClE,2BAA2B;IAC3B,MAAM,wBAAwB,GAA6B;QACzD,CAAC,mCAAmC,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,UAAU,CAAC;YAChE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC;YAC9B,CAAC,CAAC,IAAI;QACR,CAAC,mCAAmC,CAAC,UAAU,CAAC,EAAE,SAAS,CAAC,eAAe,CAAC;YAC1E,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC;YAClC,CAAC,CAAC,IAAI;QACR,CAAC,mCAAmC,CAAC,sBAAsB,CAAC,EAAE,SAAS,CAAC,cAAc,CAAC;YACrF,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC;YAChC,CAAC,CAAC,IAAI;KACT,CAAC;IAEF,OAAO,wBAAwB,CAAC;AAClC,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,sBAAsB,CACpC,MAAoC,EACpC,eAA8C,EAC9C,UAMI,EAAE;;IAEN,IAAI,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC;QAC7B,OAAQ,MAA6B,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;IAC1E,CAAC;SAAM,CAAC;QACN,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC;QACjC,kCAAkC;QAClC,MAAM,YAAY,GAAkB,EAAE,CAAC;QACvC,MAAM,iBAAiB,GAAG,MAAA,OAAO,CAAC,iBAAiB,mCAAI,EAAE,CAAC;QAC1D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,MAAM,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,eAAe,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC7C,wEAAwE;YACxE,MAAM,KAAK,mCACN,aAAa,KAChB,UAAU,kCAAO,aAAa,CAAC,UAAU,GAAK,eAAe,IAC9D,CAAC;YACF,MAAM,WAAW,GAAG,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;YAE/D,0CAA0C;YAC1C,MAAM,EAAE,2BAA2B,GAAG,CAAC,EAAE,GAAG,eAAe,CAAC;YAC5D,MAAM,sBAAsB,GAAG,2BAA2B,GAAG,CAAC,CAAC;YAC/D,MAAM,4BAA4B,GAAG,sBAAsB,GAAG,CAAC,CAAC;YAChE,oCAAoC,CAAC,WAAW,kCAC3C,eAAe,KAClB,qBAAqB,EAAE,4BAA4B,IACnD,CAAC;YAEH,IAAI,eAAe,CAAC,6BAA6B,EAAE,CAAC;gBAClD,0CAA0C;gBACzC,aAAmC,CAAC,8BAA8B,CAAC;oBAClE,4BAA4B,CAAC;YACjC,CAAC;YAED,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,CAAC;QAED,wFAAwF;QACxF,MAAM,YAAY,GAAgB;YAChC,IAAI,EAAE,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC9D,CAAC;QAEF,kDAAkD;QAClD,wCAAwC;QACxC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC;YACxC,YAAY,CAAC,mBAAmB,qBAAQ,YAAY,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAE,CAAC;QAChF,CAAC;QAED,+CAA+C;QAC/C,OAAO,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH,SAAS,+BAA+B,CACtC,MAAuE;IAEvE,IAAI,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC;QAC5B,MAA6B,CAAC,cAAc,EAAE,CAAC;IAClD,CAAC;SAAM,CAAC;QACN,iFAAiF;QACjF,8DAA8D;QAC9D,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,KAAK,CAAC,wBAAwB,GAAG,KAAK,CAAC,8BAA8B,CAAC,CAAC;YACvE,OAAO,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAS,iCAAiC,CACxC,MAAuE;IAEvE,IAAI,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC;QAC7B,yBAAyB;IAC3B,CAAC;SAAM,CAAC;QACN,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,OAAO,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  AmqpError,\n  AwaitableSender,\n  AwaitableSenderOptions,\n  EventContext,\n  OnAmqpEvent,\n  Message as RheaMessage,\n} from \"rhea-promise\";\nimport { message, types } from \"rhea-promise\";\nimport type { RetryConfig, RetryOptions } from \"@azure/core-amqp\";\nimport {\n  ErrorNameConditionMapper,\n  RetryOperationType,\n  defaultCancellableLock,\n  delay,\n  retry,\n  translate,\n} from \"@azure/core-amqp\";\nimport type { EventData, EventDataInternal } from \"./eventData.js\";\nimport { populateIdempotentMessageAnnotations, toRheaMessage } from \"./eventData.js\";\nimport type { EventDataBatch, EventDataBatchImpl } from \"./eventDataBatch.js\";\nimport { isEventDataBatch } from \"./eventDataBatch.js\";\nimport type { SimpleLogger } from \"./logger.js\";\nimport { logErrorStackTrace, createSimpleLogger, logger, createSenderLogPrefix } from \"./logger.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type { ConnectionContext } from \"./connectionContext.js\";\nimport type { EventHubProducerOptions, IdempotentLinkProperties } from \"./models/private.js\";\nimport type { SendOptions } from \"./models/public.js\";\nimport type {\n  PartitionPublishingOptions,\n  PartitionPublishingProperties,\n} from \"./models/private.js\";\nimport { getRetryAttemptTimeoutInMs } from \"./util/retries.js\";\nimport {\n  idempotentProducerAmqpPropertyNames,\n  PENDING_PUBLISH_SEQ_NUM_SYMBOL,\n  geoReplication,\n} from \"./util/constants.js\";\nimport { isDefined } from \"@azure/core-util\";\nimport { translateError } from \"./util/error.js\";\nimport type { TimerLoop } from \"./util/timerLoop.js\";\nimport { withAuth } from \"./withAuth.js\";\nimport { getRandomName } from \"./util/utils.js\";\n\n/**\n * @internal\n */\nexport interface EventHubSenderOptions {\n  /**\n   * Indicates whether or not the sender should enable idempotent publishing to Event Hub partitions.\n   */\n  enableIdempotentProducer: boolean;\n  /**\n   * The EventHub partition id to which the sender wants to send the event data.\n   */\n  partitionId?: string;\n  /**\n   * The set of options that can be specified to influence publishing behavior\n   * specific to a partition.\n   */\n  partitionPublishingOptions?: PartitionPublishingOptions;\n}\n\n/**\n * Describes the EventHubSender that will send event data to EventHub.\n * @internal\n */\nexport class EventHubSender {\n  /**\n   * The unique lock name per connection that is used to acquire the\n   * lock for establishing a sender link by an entity on that connection.\n   */\n  private readonly senderLock: string = getRandomName(\"sender\");\n  /**\n   * The handler function to handle errors that happen on the\n   * underlying sender.\n   */\n  private readonly _onAmqpError: OnAmqpEvent;\n  /**\n   * The handler function to handle \"sender_close\" event\n   * that happens on the underlying sender.\n   */\n  private readonly _onAmqpClose: OnAmqpEvent;\n  /**\n   * The message handler that will be set as the handler on\n   * the underlying rhea sender's session for the \"session_error\" event.\n   */\n  private _onSessionError: OnAmqpEvent;\n  /**\n   * The message handler that will be set as the handler on\n   * the underlying rhea sender's session for the \"session_close\" event.\n   */\n  private _onSessionClose: OnAmqpEvent;\n  /**\n   * The AMQP sender link.\n   */\n  private _sender?: AwaitableSender;\n  /**\n   * The partition ID.\n   */\n  private readonly partitionId?: string;\n  /**\n   * Indicates whether the sender is configured for idempotent publishing.\n   */\n  private _isIdempotentProducer: boolean;\n  /**\n   * Indicates whether the sender has an in-flight send while idempotent\n   * publishing is enabled.\n   */\n  private _hasPendingSend?: boolean;\n  /**\n   * A local copy of the PartitionPublishingProperties that can be mutated to\n   * keep track of the lastSequenceNumber used.\n   */\n  private _localPublishingProperties?: PartitionPublishingProperties;\n  /**\n   * The user-provided set of options that can be specified to influence\n   * publishing behavior specific to a partition.\n   */\n  private _userProvidedPublishingOptions?: PartitionPublishingOptions;\n  /**\n   * Indicates whether the link is in the process of connecting\n   * (establishing) itself. Default value: `false`.\n   */\n  private isConnecting: boolean = false;\n  /**\n   * The unique name for the entity (mostly a guid).\n   */\n  private readonly name: string;\n  /**\n   * The address in the following form:\n   * - `\"<hubName>\"`\n   * - `\"<hubName>/Partitions/<partitionId>\"`.\n   */\n  private readonly address: string;\n  /**\n   * The token audience in the following form:\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>\"`\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>\"`.\n   */\n  private readonly audience: string;\n  /**\n   * Provides relevant information about the amqp connection,\n   * cbs and $management sessions, token provider, sender and receivers.\n   */\n  private readonly _context: ConnectionContext;\n  /**\n   * The auth loop.\n   */\n  private authLoop?: TimerLoop;\n  /**\n   * The logger.\n   */\n  private readonly logger: SimpleLogger;\n\n  /** The client identifier */\n  private _id: string;\n\n  /**\n   * Creates a new EventHubSender instance.\n   * @param context - The connection context.\n   * @param options - Options used to configure the EventHubSender.\n   */\n  constructor(\n    context: ConnectionContext,\n    senderId: string,\n    { partitionId, enableIdempotentProducer, partitionPublishingOptions }: EventHubSenderOptions,\n  ) {\n    this.address = context.config.getSenderAddress(partitionId);\n    this.name = this.address;\n    this._id = senderId;\n    this.audience = context.config.getSenderAudience(partitionId);\n    this._context = context;\n    this.partitionId = partitionId;\n    this._isIdempotentProducer = enableIdempotentProducer;\n    this._userProvidedPublishingOptions = partitionPublishingOptions;\n    const logPrefix = createSenderLogPrefix(this.name, this._context.connectionId);\n    this.logger = createSimpleLogger(logger, logPrefix);\n\n    this._onAmqpError = (eventContext: EventContext) => {\n      const senderError = eventContext.sender && eventContext.sender.error;\n      this.logger.verbose(\n        \"'sender_error' event occurred. The associated error is: %O\",\n        senderError,\n      );\n      // TODO: Consider rejecting promise in trySendBatch() or createBatch()\n    };\n\n    this._onSessionError = (eventContext: EventContext) => {\n      const sessionError = eventContext.session && eventContext.session.error;\n      this.logger.verbose(\n        \"'session_error' event occurred. The associated error is: %O\",\n        sessionError,\n      );\n      // TODO: Consider rejecting promise in trySendBatch() or createBatch()\n    };\n\n    this._onAmqpClose = async (eventContext: EventContext) => {\n      const sender = this._sender || eventContext.sender!;\n      this.logger.verbose(\n        \"'sender_close' event occurred. Value for isItselfClosed on the receiver is: '%s' \" +\n          \"Value for isConnecting on the session is: '%s'.\",\n        sender?.isItselfClosed().toString(),\n        this.isConnecting,\n      );\n      if (sender && !this.isConnecting) {\n        // Call close to clean up timers & other resources\n        await sender.close().catch((err) => {\n          this.logger.verbose(\"error when closing after 'sender_close' event: %O\", err);\n        });\n      }\n    };\n\n    this._onSessionClose = async (eventContext: EventContext) => {\n      const sender = this._sender || eventContext.sender!;\n      this.logger.verbose(\n        \"'session_close' event occurred. Value for isSessionItselfClosed on the session is: '%s' \" +\n          \"Value for isConnecting on the session is: '%s'.\",\n        sender?.isSessionItselfClosed().toString(),\n        this.isConnecting,\n      );\n      if (sender && !this.isConnecting) {\n        // Call close to clean up timers & other resources\n        await sender.close().catch((err) => {\n          this.logger.verbose(\"error when closing after 'session_close' event: %O\", err);\n        });\n      }\n    };\n  }\n\n  /**\n   * Deletes the sender from the context. Clears the token renewal timer. Closes the sender link.\n   */\n  async close(): Promise<void> {\n    try {\n      if (this._sender) {\n        this.logger.info(\"closing\");\n        const senderLink = this._sender;\n        this._deleteFromCache();\n        await senderLink.close();\n        this.authLoop?.stop();\n        this.logger.verbose(\"closed.\");\n      }\n    } catch (err: any) {\n      const msg = `an error occurred while closing: ${err?.name}: ${err?.message}`;\n      this.logger.warning(msg);\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Determines whether the AMQP sender link is open. If open then returns true else returns false.\n   * @returns boolean\n   */\n  isOpen(): boolean {\n    const result = Boolean(this._sender && this._sender.isOpen());\n    this.logger.verbose(\"is open? -> %s\", result);\n    return result;\n  }\n  /**\n   * Returns maximum message size on the AMQP sender link.\n   * @param abortSignal - An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   * @returns Promise<number>\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  async getMaxMessageSize(\n    options: {\n      retryOptions?: RetryOptions;\n      abortSignal?: AbortSignalLike;\n    } = {},\n  ): Promise<number> {\n    const sender = await this._getLink(options);\n\n    return sender.maxMessageSize;\n  }\n\n  /**\n   * Get the information about the state of publishing for a partition as observed by the `EventHubSender`.\n   * This data can always be read, but will only be populated with information relevant to the active features\n   * for the producer client.\n   */\n  async getPartitionPublishingProperties(\n    options: {\n      retryOptions?: RetryOptions;\n      abortSignal?: AbortSignalLike;\n    } = {},\n  ): Promise<PartitionPublishingProperties> {\n    if (this._localPublishingProperties) {\n      // Send a copy of the properties so it can't be mutated downstream.\n      return { ...this._localPublishingProperties };\n    }\n\n    const properties: PartitionPublishingProperties = {\n      isIdempotentPublishingEnabled: this._isIdempotentProducer,\n      partitionId: this.partitionId ?? \"\",\n    };\n\n    if (this._isIdempotentProducer) {\n      this._sender = await this._getLink(options);\n      // await this._createLinkIfNotOpen(options);\n      if (!this._sender) {\n        // createLinkIfNotOpen should throw if `this._sender` can't be created, but just in case it gets\n        // deleted while setting up token refreshing, make sure it exists.\n        throw new Error(\n          `Failed to retrieve partition publishing properties for partition \"${this.partitionId}\".`,\n        );\n      }\n\n      const {\n        [idempotentProducerAmqpPropertyNames.epoch]: ownerLevel,\n        [idempotentProducerAmqpPropertyNames.producerId]: producerGroupId,\n        [idempotentProducerAmqpPropertyNames.producerSequenceNumber]: lastPublishedSequenceNumber,\n      } = this._sender.properties ?? {};\n\n      properties.ownerLevel = parseInt(ownerLevel, 10);\n      properties.producerGroupId = parseInt(producerGroupId, 10);\n      properties.lastPublishedSequenceNumber = parseInt(lastPublishedSequenceNumber, 10);\n    }\n\n    this._localPublishingProperties = properties;\n\n    // Send a copy of the properties so it can't be mutated downstream.\n    return { ...properties };\n  }\n\n  /**\n   * Send a batch of EventData to the EventHub. The \"message_annotations\",\n   * \"application_properties\" and \"properties\" of the first message will be set as that\n   * of the envelope (batch message).\n   * @param events -  An array of EventData objects to be sent in a Batch message.\n   * @param options - Options to control the way the events are batched along with request options\n   */\n  async send(\n    events: EventData[] | EventDataBatch,\n    options?: SendOptions &\n      EventHubProducerOptions & { tracingProperties?: Array<EventData[\"properties\"]> },\n  ): Promise<void> {\n    try {\n      this.logger.info(\"trying to send EventData[].\");\n      if (this._isIdempotentProducer && this._hasPendingSend) {\n        throw new Error(\n          `There can only be 1 \"sendBatch\" call in-flight per partition while \"enableIdempotentRetries\" is set to true.`,\n        );\n      }\n\n      const eventCount = isEventDataBatch(events) ? events.count : events.length;\n      if (eventCount === 0) {\n        this.logger.info(`no events were passed to sendBatch.`);\n        return;\n      }\n\n      if (this._isIdempotentProducer) {\n        this._hasPendingSend = true;\n      }\n\n      this.logger.info(\"sending encoded batch message.\");\n      await this._trySendBatch(events, options);\n      if (this._isIdempotentProducer) {\n        commitIdempotentSequenceNumbers(events);\n        if (this._localPublishingProperties) {\n          const { lastPublishedSequenceNumber = 0 } = this._localPublishingProperties;\n          // Increment the lastPublishedSequenceNumber based on the number of events published.\n          this._localPublishingProperties.lastPublishedSequenceNumber =\n            lastPublishedSequenceNumber + eventCount;\n        }\n      }\n      return;\n    } catch (err: any) {\n      rollbackIdempotentSequenceNumbers(events);\n      this.logger.warning(\n        `an error occurred while sending the batch message ${err?.name}: ${err?.message}`,\n      );\n      logErrorStackTrace(err);\n      throw err;\n    } finally {\n      if (this._isIdempotentProducer) {\n        this._hasPendingSend = false;\n      }\n    }\n  }\n\n  /**\n   * @param sender - The rhea sender that contains the idempotent producer properties.\n   */\n  private _populateLocalPublishingProperties(sender: AwaitableSender): void {\n    const {\n      [idempotentProducerAmqpPropertyNames.epoch]: ownerLevel,\n      [idempotentProducerAmqpPropertyNames.producerId]: producerGroupId,\n      [idempotentProducerAmqpPropertyNames.producerSequenceNumber]: lastPublishedSequenceNumber,\n    } = sender.properties ?? {};\n\n    this._localPublishingProperties = {\n      isIdempotentPublishingEnabled: this._isIdempotentProducer,\n      partitionId: this.partitionId ?? \"\",\n      lastPublishedSequenceNumber,\n      ownerLevel,\n      producerGroupId,\n    };\n  }\n\n  private _deleteFromCache(): void {\n    this._sender = undefined;\n    delete this._context.senders[this.name];\n    this.logger.verbose(\"deleted from the client cache.\");\n  }\n\n  private _createSenderOptions(): AwaitableSenderOptions {\n    const srOptions: AwaitableSenderOptions = {\n      name: this.name,\n      source: this._id,\n      target: {\n        address: this.address,\n      },\n      onError: this._onAmqpError,\n      onClose: this._onAmqpClose,\n      onSessionError: this._onSessionError,\n      onSessionClose: this._onSessionClose,\n    };\n\n    srOptions.desired_capabilities = [geoReplication];\n    if (this._isIdempotentProducer) {\n      srOptions.desired_capabilities.push(idempotentProducerAmqpPropertyNames.capability);\n      const idempotentProperties = generateIdempotentLinkProperties(\n        this._userProvidedPublishingOptions,\n        this._localPublishingProperties,\n      );\n      srOptions.properties = idempotentProperties;\n    }\n    this.logger.verbose(\"being created with options: %O\", srOptions);\n    return srOptions;\n  }\n\n  /**\n   * Tries to send the message to EventHub if there is enough credit to send them\n   * and the circular buffer has available space to settle the message after sending them.\n   *\n   * We have implemented a synchronous send over here in the sense that we shall be waiting\n   * for the message to be accepted or rejected and accordingly resolve or reject the promise.\n   * @param rheaMessage - The message to be sent to EventHub.\n   * @returns Promise<void>\n   */\n  private async _trySendBatch(\n    events: EventData[] | EventDataBatch,\n    options: SendOptions &\n      EventHubProducerOptions & {\n        /**\n         * Tracing properties that are associated with EventData.\n         */\n        tracingProperties?: Array<EventData[\"properties\"]>;\n      } = {},\n  ): Promise<void> {\n    const abortSignal: AbortSignalLike | undefined = options.abortSignal;\n    const retryOptions = options.retryOptions || {};\n    const timeoutInMs = getRetryAttemptTimeoutInMs(retryOptions);\n    retryOptions.timeoutInMs = timeoutInMs;\n\n    const sendEventPromise = async (): Promise<void> => {\n      const initStartTime = Date.now();\n      // TODO: (jeremymeng) A or B\n      // variant A:\n      const sender = await this._getLink(options);\n      // variant B\n      // await this._createLinkIfNotOpen(options);\n      const publishingProps = await this.getPartitionPublishingProperties(options);\n      const timeTakenByInit = Date.now() - initStartTime;\n\n      this.logger.verbose(\n        \"credit: %d available: %d\",\n        sender.credit,\n        sender.session.outgoing.available(),\n      );\n\n      let waitTimeForSendable = 1000;\n      if (!sender.sendable() && timeoutInMs - timeTakenByInit > waitTimeForSendable) {\n        this.logger.verbose(\"waiting for 1 second for sender to become sendable\");\n\n        await delay(waitTimeForSendable);\n\n        this.logger.verbose(\n          \"after waiting for a second, credit: %d available: %d\",\n          sender.credit,\n          sender.session?.outgoing?.available(),\n        );\n      } else {\n        waitTimeForSendable = 0;\n      }\n\n      if (!sender.sendable()) {\n        // let us retry to send the message after some time.\n        const msg = `cannot send the message right now. Please try later.`;\n        this.logger.warning(msg);\n        const amqpError: AmqpError = {\n          condition: ErrorNameConditionMapper.SenderBusyError,\n          description: msg,\n        };\n        throw translate(amqpError);\n      }\n\n      if (timeoutInMs <= timeTakenByInit + waitTimeForSendable) {\n        const desc: string =\n          `was not able to send the message right now, due ` + `to operation timeout.`;\n        this.logger.warning(desc);\n        const e: AmqpError = {\n          condition: ErrorNameConditionMapper.ServiceUnavailableError,\n          description: desc,\n        };\n        throw translate(e);\n      }\n\n      try {\n        const encodedMessage = transformEventsForSend(events, publishingProps, options);\n        const delivery = await sender.send(encodedMessage, {\n          format: 0x80013700,\n          timeoutInSeconds: (timeoutInMs - timeTakenByInit - waitTimeForSendable) / 1000,\n          abortSignal,\n        });\n        this.logger.info(\"sent message with delivery id: %d\", delivery.id);\n      } catch (err: any) {\n        const error = err.innerError || err;\n        const translatedError = translateError(error);\n        throw translatedError;\n      }\n    };\n\n    const config: RetryConfig<void> = {\n      operation: sendEventPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.sendMessage,\n      abortSignal: abortSignal,\n      retryOptions: retryOptions,\n    };\n\n    try {\n      await retry<void>(config);\n    } catch (err: any) {\n      const translatedError = translate(err);\n      this.logger.warning(\n        \"an error occurred while sending the message %s\",\n        `${translatedError?.name}: ${translatedError?.message}`,\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  private async _getLink(\n    options: {\n      retryOptions?: RetryOptions;\n      abortSignal?: AbortSignalLike;\n    } = {},\n  ): Promise<AwaitableSender> {\n    if (this.isOpen() && this._sender) {\n      return this._sender;\n    }\n    const retryOptions = options.retryOptions || {};\n    const timeoutInMs = getRetryAttemptTimeoutInMs(retryOptions);\n    retryOptions.timeoutInMs = timeoutInMs;\n    const senderOptions = this._createSenderOptions();\n\n    const startTime = Date.now();\n    const createLinkPromise = async (): Promise<AwaitableSender> => {\n      return defaultCancellableLock.acquire(\n        this.senderLock,\n        () => {\n          const taskStartTime = Date.now();\n          const taskTimeoutInMs = timeoutInMs - (taskStartTime - startTime);\n          return this._init({\n            ...senderOptions,\n            abortSignal: options.abortSignal,\n            timeoutInMs: taskTimeoutInMs,\n          });\n        },\n        { abortSignal: options.abortSignal, timeoutInMs: timeoutInMs },\n      );\n    };\n\n    const config: RetryConfig<AwaitableSender> = {\n      operation: createLinkPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.senderLink,\n      abortSignal: options.abortSignal,\n      retryOptions: retryOptions,\n    };\n\n    try {\n      return await retry<AwaitableSender>(config);\n    } catch (err: any) {\n      const translatedError = translate(err);\n      this.logger.warning(\n        \"an error occurred while creating: %s\",\n        `${translatedError?.name}: ${translatedError?.message}`,\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  /**\n   * Initializes the sender session on the connection.\n   * Should only be called from _createLinkIfNotOpen\n   */\n  private async _init(\n    options: AwaitableSenderOptions & {\n      abortSignal: AbortSignalLike | undefined;\n      timeoutInMs: number;\n    },\n  ): Promise<AwaitableSender> {\n    const createSender = async () => {\n      this.logger.verbose(\"trying to be created...\");\n\n      const sender = await this._context.connection.createAwaitableSender(options);\n      this._sender = sender;\n      this._populateLocalPublishingProperties(this._sender);\n      this.isConnecting = false;\n      this.logger.verbose(\"created with options: %O\", options);\n\n      // It is possible for someone to close the sender and then start it again.\n      // Thus make sure that the sender is present in the client cache.\n      if (!this._context.senders[this.name]) this._context.senders[this.name] = this;\n    };\n    try {\n      if (!this.isOpen() || !this._sender) {\n        await this._context.readyToOpenLink();\n        this.authLoop = await withAuth(\n          createSender,\n          this._context,\n          this.audience,\n          options.timeoutInMs,\n          this.logger,\n          { abortSignal: options.abortSignal },\n        );\n        // it is guaranteed to be defined at this point, otherwise, an error would\n        // have been thrown.\n        return this._sender!;\n      } else {\n        this.logger.verbose(\"is open -> %s. Hence not reconnecting.\", this.isOpen());\n        return this._sender;\n      }\n    } catch (err) {\n      const translatedError = translate(err);\n      this.logger.warning(\n        \"an error occurred while being created: %s\",\n        `${translatedError?.name}: ${translatedError?.message}`,\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  /**\n   * Creates a new sender to the given event hub, and optionally to a given partition if it is\n   * not present in the context or returns the one present in the context.\n   * @hidden\n   * @param options - Options used to configure the EventHubSender.\n   */\n  static create(\n    context: ConnectionContext,\n    senderId: string,\n    options: EventHubSenderOptions,\n  ): EventHubSender {\n    const ehSender: EventHubSender = new EventHubSender(context, senderId, options);\n    if (!context.senders[ehSender.name]) {\n      context.senders[ehSender.name] = ehSender;\n    }\n    return context.senders[ehSender.name];\n  }\n}\n\n/**\n * Generates the link properties for an indemopotent sender given\n * based on the user-provided and locally-cached publishing options.\n *\n * Note: The set of idempotent properties a user specifies at EventHubProducerClient instantiation-time\n * is slightly different than what the service returns and the EventHubSender keeps track of locally.\n *\n * The difference is that the user specifies the `startingSequenceNumber`, whereas the local options\n * (those returned by getPartitionPublishingProperties) specifies `lastPublishedSequenceNumber`.\n *\n * These _can_ be the same, but the user is technically free to set any `startingSequenceNumber` they want.\n * @internal\n */\nexport function generateIdempotentLinkProperties(\n  userProvidedPublishingOptions: PartitionPublishingOptions | undefined,\n  localPublishingOptions: PartitionPublishingProperties | undefined,\n): IdempotentLinkProperties | Record<string, never> {\n  let ownerLevel: number | undefined;\n  let producerGroupId: number | undefined;\n  let sequenceNumber: number | undefined;\n\n  // Prefer local publishing options since this is the up-to-date state of the sender.\n  // Only use user-provided publishing options the first time we create the link.\n  if (localPublishingOptions) {\n    ownerLevel = localPublishingOptions.ownerLevel;\n    producerGroupId = localPublishingOptions.producerGroupId;\n    sequenceNumber = localPublishingOptions.lastPublishedSequenceNumber;\n  } else if (userProvidedPublishingOptions) {\n    ownerLevel = userProvidedPublishingOptions.ownerLevel;\n    producerGroupId = userProvidedPublishingOptions.producerGroupId;\n    sequenceNumber = userProvidedPublishingOptions.startingSequenceNumber;\n  } else {\n    // If we don't have any properties at all, send an empty object.\n    // This will cause the service to generate a new producer-id for our client.\n    return {};\n  }\n\n  // The service requires that if ANY_ of these properties are defined,\n  // they _ALL_ have to be defined.\n  // If we don't have one of the required values, use `null` and the\n  // service will provide it.\n  const idempotentLinkProperties: IdempotentLinkProperties = {\n    [idempotentProducerAmqpPropertyNames.epoch]: isDefined(ownerLevel)\n      ? types.wrap_short(ownerLevel)\n      : null,\n    [idempotentProducerAmqpPropertyNames.producerId]: isDefined(producerGroupId)\n      ? types.wrap_long(producerGroupId)\n      : null,\n    [idempotentProducerAmqpPropertyNames.producerSequenceNumber]: isDefined(sequenceNumber)\n      ? types.wrap_int(sequenceNumber)\n      : null,\n  };\n\n  return idempotentLinkProperties;\n}\n\n/**\n * Encodes a list or batch of events into a single binary message that can be sent to the service.\n *\n * Prior to encoding, any special properties not specified by the user, such as tracing or idempotent\n * properties, are assigned to the list or batch of events as needed.\n *\n * @internal\n * @param events - Events to transform for sending to the service.\n * @param publishingProps - Describes the current publishing state for the partition.\n * @param options - Options used to configure this function.\n */\nexport function transformEventsForSend(\n  events: EventData[] | EventDataBatch,\n  publishingProps: PartitionPublishingProperties,\n  options: SendOptions & {\n    /**\n     * A list containing the `Diagnostic-Id` tracing property that is associated with each EventData.\n     * The index of tracingProperties corresponds to the same index in `events` when `events` is EventData[].\n     */\n    tracingProperties?: Array<EventData[\"properties\"]>;\n  } = {},\n): Buffer {\n  if (isEventDataBatch(events)) {\n    return (events as EventDataBatchImpl)._generateMessage(publishingProps);\n  } else {\n    const eventCount = events.length;\n    // convert events to rhea messages\n    const rheaMessages: RheaMessage[] = [];\n    const tracingProperties = options.tracingProperties ?? [];\n    for (let i = 0; i < eventCount; i++) {\n      const originalEvent = events[i];\n      const tracingProperty = tracingProperties[i];\n      // Create a copy of the user's event so we can add the tracing property.\n      const event: EventData = {\n        ...originalEvent,\n        properties: { ...originalEvent.properties, ...tracingProperty },\n      };\n      const rheaMessage = toRheaMessage(event, options.partitionKey);\n\n      // populate idempotent message annotations\n      const { lastPublishedSequenceNumber = 0 } = publishingProps;\n      const startingSequenceNumber = lastPublishedSequenceNumber + 1;\n      const pendingPublishSequenceNumber = startingSequenceNumber + i;\n      populateIdempotentMessageAnnotations(rheaMessage, {\n        ...publishingProps,\n        publishSequenceNumber: pendingPublishSequenceNumber,\n      });\n\n      if (publishingProps.isIdempotentPublishingEnabled) {\n        // Set pending seq number on user's event.\n        (originalEvent as EventDataInternal)[PENDING_PUBLISH_SEQ_NUM_SYMBOL] =\n          pendingPublishSequenceNumber;\n      }\n\n      rheaMessages.push(rheaMessage);\n    }\n\n    // Encode every amqp message and then convert every encoded message to amqp data section\n    const batchMessage: RheaMessage = {\n      body: message.data_sections(rheaMessages.map(message.encode)),\n    };\n\n    // Set message_annotations of the first message as\n    // that of the envelope (batch message).\n    if (rheaMessages[0].message_annotations) {\n      batchMessage.message_annotations = { ...rheaMessages[0].message_annotations };\n    }\n\n    // Finally encode the envelope (batch message).\n    return message.encode(batchMessage);\n  }\n}\n\n/**\n * Commits the pending publish sequence number events.\n * EventDataBatch exposes this as `startingPublishSequenceNumber`,\n * EventData not in a batch exposes this as `publishedSequenceNumber`.\n */\nfunction commitIdempotentSequenceNumbers(\n  events: Omit<EventDataInternal, \"getRawAmqpMessage\">[] | EventDataBatch,\n): void {\n  if (isEventDataBatch(events)) {\n    (events as EventDataBatchImpl)._commitPublish();\n  } else {\n    // For each event, set the `publishedSequenceNumber` equal to the sequence number\n    // we set when we attempted to send the events to the service.\n    for (const event of events) {\n      event._publishedSequenceNumber = event[PENDING_PUBLISH_SEQ_NUM_SYMBOL];\n      delete event[PENDING_PUBLISH_SEQ_NUM_SYMBOL];\n    }\n  }\n}\n\n/**\n * Rolls back any pending publish sequence number in the events.\n */\nfunction rollbackIdempotentSequenceNumbers(\n  events: Omit<EventDataInternal, \"getRawAmqpMessage\">[] | EventDataBatch,\n): void {\n  if (isEventDataBatch(events)) {\n    /* No action required. */\n  } else {\n    for (const event of events) {\n      delete event[PENDING_PUBLISH_SEQ_NUM_SYMBOL];\n    }\n  }\n}\n"]}