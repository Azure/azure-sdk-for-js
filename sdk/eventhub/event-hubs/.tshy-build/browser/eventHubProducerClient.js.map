{"version":3,"file":"eventHubProducerClient.js","sourceRoot":"","sources":["../../src/eventHubProducerClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ConnectionContext } from \"./connectionContext.js\";\nimport { createConnectionContext } from \"./connectionContext.js\";\nimport type {\n  CreateBatchOptions,\n  EventHubClientOptions,\n  GetEventHubPropertiesOptions,\n  GetPartitionIdsOptions,\n  GetPartitionPropertiesOptions,\n  SendBatchOptions,\n} from \"./models/public.js\";\nimport type {\n  PartitionPublishingOptions,\n  PartitionPublishingProperties,\n} from \"./models/private.js\";\nimport type { EventDataBatch } from \"./eventDataBatch.js\";\nimport { EventDataBatchImpl, isEventDataBatch } from \"./eventDataBatch.js\";\nimport type { EventHubProperties, PartitionProperties } from \"./managementClient.js\";\nimport type { TracingContext, TracingSpanLink } from \"@azure/core-tracing\";\nimport type { NamedKeyCredential, SASCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isDefined } from \"@azure/core-util\";\nimport { isCredential } from \"./util/typeGuards.js\";\nimport { logErrorStackTrace, logger } from \"./logger.js\";\nimport {\n  idempotentAlreadyPublished,\n  idempotentSomeAlreadyPublished,\n  throwErrorIfConnectionClosed,\n  throwTypeErrorIfParameterMissing,\n  validateProducerPartitionSettings,\n} from \"./util/error.js\";\nimport type { AmqpAnnotatedMessage } from \"@azure/core-amqp\";\nimport type { EventData, EventDataInternal } from \"./eventData.js\";\nimport { assertIsEventData } from \"./eventData.js\";\nimport { EventHubSender } from \"./eventHubSender.js\";\nimport type { OperationOptions } from \"./util/operationOptions.js\";\nimport { toSpanOptions, tracingClient } from \"./diagnostics/tracing.js\";\nimport { instrumentEventData } from \"./diagnostics/instrumentEventData.js\";\nimport { getRandomName } from \"./util/utils.js\";\n\n/**\n * The `EventHubProducerClient` class is used to send events to an Event Hub.\n *\n * There are multiple ways to create an `EventHubProducerClient`\n * - Use the connection string from the SAS policy created for your Event Hub instance.\n * - Use the connection string from the SAS policy created for your Event Hub namespace,\n * and the name of the Event Hub instance\n * - Use the full namespace like `<yournamespace>.servicebus.windows.net`, and a credentials object.\n *\n * Optionally, you can also pass an options bag to configure the retry policy or proxy settings.\n *\n */\nexport class EventHubProducerClient {\n  /**\n   * Describes the amqp connection context for the client.\n   */\n  private _context: ConnectionContext;\n\n  /**\n   * The options passed by the user when creating the EventHubClient instance.\n   */\n  private _clientOptions: EventHubClientOptions;\n  /**\n   * Map of partitionId to senders\n   */\n  private _sendersMap: Map<string, EventHubSender>;\n  /**\n   * Indicates whether or not the EventHubProducerClient should enable idempotent publishing to Event Hub partitions.\n   * If enabled, the producer will only be able to publish directly to partitions;\n   * it will not be able to publish to the Event Hubs gateway for automatic partition routing\n   * nor will it be able to use a partition key.\n   * Default: false\n   */\n  private _enableIdempotentRetries?: boolean;\n  /**\n   * The set of options that can be specified to influence publishing behavior specific to the configured Event Hub partition.\n   * These options are not necessary in the majority of scenarios and are intended for use with specialized scenarios,\n   * such as when recovering the state used for idempotent publishing.\n   */\n  private _partitionOptions?: Record<string, PartitionPublishingOptions>;\n  /**\n   * @readonly\n   * The name of the Event Hub instance for which this client is created.\n   */\n  get eventHubName(): string {\n    return this._context.config.entityPath;\n  }\n\n  /**\n   * @readonly\n   * The fully qualified namespace of the Event Hub instance for which this client is created.\n   * This is likely to be similar to <yournamespace>.servicebus.windows.net.\n   */\n  get fullyQualifiedNamespace(): string {\n    return this._context.config.host;\n  }\n\n  /**\n   * The name used to identify this EventHubProducerClient.\n   * If not specified or empty, a random unique one will be generated.\n   */\n  public readonly identifier: string;\n\n  /**\n   * The `EventHubProducerClient` class is used to send events to an Event Hub.\n   * Use the `options` parmeter to configure retry policy or proxy settings.\n   * @param connectionString - The connection string to use for connecting to the Event Hub instance.\n   * It is expected that the shared key properties and the Event Hub path are contained in this connection string.\n   * e.g. 'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.\n   * @param options - A set of options to apply when configuring the client.\n   * - `retryOptions`   : Configures the retry policy for all the operations on the client.\n   * For example, `{ \"maxRetries\": 4 }` or `{ \"maxRetries\": 4, \"retryDelayInMs\": 30000 }`.\n   * - `webSocketOptions`: Configures the channelling of the AMQP connection over Web Sockets.\n   * - `userAgent`      : A string to append to the built in user agent string that is passed to the service.\n   */\n  constructor(connectionString: string, options?: EventHubClientOptions); // eslint-disable-line @azure/azure-sdk/ts-naming-options\n  /**\n   * The `EventHubProducerClient` class is used to send events to an Event Hub.\n   * Use the `options` parmeter to configure retry policy or proxy settings.\n   * @param connectionString - The connection string to use for connecting to the Event Hubs namespace.\n   * It is expected that the shared key properties are contained in this connection string, but not the Event Hub path,\n   * e.g. 'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;'.\n   * @param eventHubName - The name of the specific Event Hub to connect the client to.\n   * @param options - A set of options to apply when configuring the client.\n   * - `retryOptions`   : Configures the retry policy for all the operations on the client.\n   * For example, `{ \"maxRetries\": 4 }` or `{ \"maxRetries\": 4, \"retryDelayInMs\": 30000 }`.\n   * - `webSocketOptions`: Configures the channelling of the AMQP connection over Web Sockets.\n   * - `userAgent`      : A string to append to the built in user agent string that is passed to the service.\n   */\n  constructor(connectionString: string, eventHubName: string, options?: EventHubClientOptions); // eslint-disable-line @azure/azure-sdk/ts-naming-options\n  /**\n   * The `EventHubProducerClient` class is used to send events to an Event Hub.\n   * Use the `options` parmeter to configure retry policy or proxy settings.\n   * @param fullyQualifiedNamespace - The full namespace which is likely to be similar to\n   * <yournamespace>.servicebus.windows.net\n   * @param eventHubName - The name of the specific Event Hub to connect the client to.\n   * @param credential - An credential object used by the client to get the token to authenticate the connection\n   * with the Azure Event Hubs service.\n   * See &commat;azure/identity for creating credentials that support AAD auth.\n   * Use the `AzureNamedKeyCredential` from &commat;azure/core-auth if you want to pass in a `SharedAccessKeyName`\n   * and `SharedAccessKey` without using a connection string. These fields map to the `name` and `key` field respectively\n   * in `AzureNamedKeyCredential`.\n   * Use the `AzureSASCredential` from &commat;azure/core-auth if you want to pass in a `SharedAccessSignature`\n   * without using a connection string. This field maps to `signature` in `AzureSASCredential`.\n   * @param options - A set of options to apply when configuring the client.\n   * - `retryOptions`   : Configures the retry policy for all the operations on the client.\n   * For example, `{ \"maxRetries\": 4 }` or `{ \"maxRetries\": 4, \"retryDelayInMs\": 30000 }`.\n   * - `webSocketOptions`: Configures the channelling of the AMQP connection over Web Sockets.\n   * - `userAgent`      : A string to append to the built in user agent string that is passed to the service.\n   */\n  constructor(\n    fullyQualifiedNamespace: string,\n    eventHubName: string,\n    credential: TokenCredential | NamedKeyCredential | SASCredential,\n    options?: EventHubClientOptions, // eslint-disable-line @azure/azure-sdk/ts-naming-options\n  );\n  constructor(\n    fullyQualifiedNamespaceOrConnectionString1: string,\n    eventHubNameOrOptions2?: string | EventHubClientOptions,\n    credentialOrOptions3?:\n      | TokenCredential\n      | NamedKeyCredential\n      | SASCredential\n      | EventHubClientOptions,\n    options4?: EventHubClientOptions, // eslint-disable-line @azure/azure-sdk/ts-naming-options\n  ) {\n    this._context = createConnectionContext(\n      fullyQualifiedNamespaceOrConnectionString1,\n      eventHubNameOrOptions2,\n      credentialOrOptions3,\n      options4,\n    );\n    if (typeof eventHubNameOrOptions2 !== \"string\") {\n      this._clientOptions = eventHubNameOrOptions2 || {};\n    } else if (!isCredential(credentialOrOptions3)) {\n      this._clientOptions = credentialOrOptions3 || {};\n    } else {\n      this._clientOptions = options4 || {};\n    }\n    this.identifier = this._clientOptions.identifier ?? getRandomName();\n    this._sendersMap = new Map();\n  }\n\n  /**\n   * Creates an instance of `EventDataBatch` to which one can add events until the maximum supported size is reached.\n   * The batch can be passed to the {@link sendBatch} method of the `EventHubProducerClient` to be sent to Azure Event Hubs.\n   *\n   * Events with different values for partitionKey or partitionId will need to be put into different batches.\n   * To simplify such batch management across partitions or to have the client automatically batch events\n   * and send them in specific intervals, use `EventHubBufferedProducerClient` instead.\n   *\n   * The below example assumes you have an array of events at hand to be batched safely.\n   * If you have events coming in one by one, `EventHubBufferedProducerClient` is recommended instead\n   * for effecient management of batches.\n   *\n   * Example usage:\n   * ```ts snippet:EventHubProducerClient_CreateBatch\n   * import { EventHubProducerClient } from \"@azure/event-hubs\";\n   *\n   * const client = new EventHubProducerClient(\"my-connection-string\", \"my-event-hub\");\n   *\n   * const messages = [\n   *   { body: \"my-event-body1\" },\n   *   { body: \"my-event-body2\" },\n   *   { body: \"my-event-body3\" },\n   *   { body: \"my-event-body4\" },\n   *   { body: \"my-event-body5\" },\n   * ];\n   *\n   * let batch = await client.createBatch();\n   * for (let i = 0; i < messages.length; i++) {\n   *   if (!batch.tryAdd(messages[i])) {\n   *     await client.sendBatch(batch);\n   *     batch = await client.createBatch();\n   *     if (!batch.tryAdd(messages[i])) {\n   *       throw new Error(\"Message too big to fit\");\n   *     }\n   *     if (i === messages.length - 1) {\n   *       await client.sendBatch(batch);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @param options -  Configures the behavior of the batch.\n   * - `partitionKey`  : A value that is hashed and used by the Azure Event Hubs service to determine the partition to which\n   * the events need to be sent.\n   * - `partitionId`   : Id of the partition to which the batch of events need to be sent.\n   * - `maxSizeInBytes`: The upper limit for the size of batch. The `tryAdd` function will return `false` after this limit is reached.\n   * - `abortSignal`   : A signal the request to cancel the operation.\n   * @returns Promise<EventDataBatch>\n   * @throws Error if both `partitionId` and `partitionKey` are set in the options.\n   * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal in the options.\n   */\n  async createBatch(options: CreateBatchOptions = {}): Promise<EventDataBatch> {\n    throwErrorIfConnectionClosed(this._context);\n\n    const partitionId = isDefined(options.partitionId) ? String(options.partitionId) : undefined;\n\n    validateProducerPartitionSettings({\n      enableIdempotentRetries: this._enableIdempotentRetries,\n      partitionId,\n      partitionKey: options.partitionKey,\n    });\n\n    let sender = this._sendersMap.get(partitionId || \"\");\n    if (!sender) {\n      const partitionPublishingOptions = isDefined(partitionId)\n        ? this._partitionOptions?.[partitionId]\n        : undefined;\n      sender = EventHubSender.create(this._context, this.identifier, {\n        enableIdempotentProducer: Boolean(this._enableIdempotentRetries),\n        partitionId,\n        partitionPublishingOptions,\n      });\n      this._sendersMap.set(partitionId || \"\", sender);\n    }\n\n    let maxMessageSize = await sender.getMaxMessageSize({\n      retryOptions: this._clientOptions.retryOptions,\n      abortSignal: options.abortSignal,\n    });\n\n    if (options.maxSizeInBytes) {\n      if (options.maxSizeInBytes > maxMessageSize) {\n        const error = new Error(\n          `Max message size (${options.maxSizeInBytes} bytes) is greater than maximum message size (${maxMessageSize} bytes) on the AMQP sender link.`,\n        );\n        logger.warning(`[${this._context.connectionId}] ${error.message}`);\n        logErrorStackTrace(error);\n        throw error;\n      }\n      maxMessageSize = options.maxSizeInBytes;\n    }\n    return new EventDataBatchImpl(\n      this._context,\n      maxMessageSize,\n      Boolean(this._enableIdempotentRetries),\n      options.partitionKey,\n      partitionId,\n    );\n  }\n\n  /**\n   * Get the information about the state of publishing for a partition as observed by the `EventHubProducerClient`.\n   * This data can always be read, but will only be populated with information relevant to the active features\n   * for the producer client.\n   *\n   * @param partitionId - Id of the partition from which to retrieve publishing properties.\n   * @param options - The set of options to apply to the operation call.\n   * - `abortSignal`  : A signal the request to cancel the send operation.\n   * @returns Promise<void>\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore this is called in EventHubBufferedProducerClient via cast-to-any workaround\n  private async getPartitionPublishingProperties(\n    partitionId: string,\n    options: OperationOptions = {},\n  ): Promise<PartitionPublishingProperties> {\n    if (!isDefined(partitionId)) {\n      throw new TypeError(\n        `getPartitionPublishingProperties called without required argument \"partitionId\"`,\n      );\n    }\n\n    if (typeof partitionId === \"number\") {\n      partitionId = String(partitionId);\n    }\n\n    let sender = this._sendersMap.get(partitionId);\n    if (!sender) {\n      sender = EventHubSender.create(this._context, this.identifier, {\n        enableIdempotentProducer: Boolean(this._enableIdempotentRetries),\n        partitionId,\n        partitionPublishingOptions: this._partitionOptions?.[partitionId],\n      });\n      this._sendersMap.set(partitionId, sender);\n    }\n\n    return sender.getPartitionPublishingProperties(options);\n  }\n\n  /**\n   * Sends an array of events as a batch to the associated Event Hub.\n   *\n   * Azure Event Hubs has a limit on the size of the batch that can be sent which if exceeded\n   * will result in an error with code `MessageTooLargeError`.\n   * To safely send within batch size limits, use `EventHubProducerClient.createBatch()` or\n   * `EventHubBufferedProducerClient` instead.\n   *\n   * Example usage:\n   * ```ts snippet:EventHubProducerClient_SendBatch\n   * import { EventHubProducerClient } from \"@azure/event-hubs\";\n   *\n   * const client = new EventHubProducerClient(\"my-connection-string\", \"my-event-hub\");\n   *\n   * const messages = [\n   *   { body: \"my-event-body1\" },\n   *   { body: \"my-event-body2\" },\n   *   { body: \"my-event-body3\" },\n   *   { body: \"my-event-body4\" },\n   *   { body: \"my-event-body5\" },\n   * ];\n   *\n   * await client.sendBatch(messages);\n   * ```\n   *\n   * @param batch - An array of {@link EventData} or `AmqpAnnotatedMessage`.\n   * @param options - A set of options that can be specified to influence the way in which\n   * events are sent to the associated Event Hub.\n   * - `abortSignal`  : A signal the request to cancel the send operation.\n   * - `partitionId`  : The partition this batch will be sent to. If set, `partitionKey` can not be set.\n   * - `partitionKey` : A value that is hashed to produce a partition assignment. If set, `partitionId` can not be set.\n   *\n   * @returns Promise<void>\n   * @throws MessageTooLargeError if all the events in the input array cannot be fit into a batch.\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   * @throws MessagingError if an error is encountered while sending a message.\n   * @throws Error if the underlying connection or sender has been closed.\n   */\n  async sendBatch(\n    batch: EventData[] | AmqpAnnotatedMessage[],\n    options?: SendBatchOptions,\n  ): Promise<void>;\n  /**\n   * Sends a batch of events created using `EventHubProducerClient.createBatch()` to the associated Event Hub.\n   *\n   * Events with different values for partitionKey or partitionId will need to be put into different batches.\n   * To simplify such batch management across partitions or to have the client automatically batch events\n   * and send them in specific intervals, use `EventHubBufferedProducerClient` instead.\n   *\n   * The below example assumes you have an array of events at hand to be batched safely.\n   * If you have events coming in one by one, `EventHubBufferedProducerClient` is recommended instead\n   * for effecient management of batches.\n   *\n   * Example usage:\n   * ```ts snippet:EventHubProducerClient_SendBatchPartitioned\n   * import { EventHubProducerClient } from \"@azure/event-hubs\";\n   *\n   * const client = new EventHubProducerClient(\"my-connection-string\", \"my-event-hub\");\n   *\n   * const messages = [\n   *   { body: \"my-event-body1\" },\n   *   { body: \"my-event-body2\" },\n   *   { body: \"my-event-body3\" },\n   *   { body: \"my-event-body4\" },\n   *   { body: \"my-event-body5\" },\n   * ];\n   *\n   * let batch = await client.createBatch();\n   * for (let i = 0; i < messages.length; i++) {\n   *   if (!batch.tryAdd(messages[i])) {\n   *     await client.sendBatch(batch);\n   *     batch = await client.createBatch();\n   *     if (!batch.tryAdd(messages[i])) {\n   *       throw new Error(\"Message too big to fit\");\n   *     }\n   *     if (i === messages.length - 1) {\n   *       await client.sendBatch(batch);\n   *     }\n   *   }\n   * }\n   * ```\n   * @param batch - A batch of events that you can create using the {@link createBatch} method.\n   * @param options - A set of options that can be specified to influence the way in which\n   * events are sent to the associated Event Hub.\n   * - `abortSignal`  : A signal the request to cancel the send operation.\n   *\n   * @returns Promise<void>\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   * @throws MessagingError if an error is encountered while sending a message.\n   * @throws Error if the underlying connection or sender has been closed.\n   */\n  async sendBatch(batch: EventDataBatch, options?: OperationOptions): Promise<void>;\n  async sendBatch(\n    batch: EventDataBatch | EventData[],\n    options: SendBatchOptions | OperationOptions = {},\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"sendBatch\", \"batch\", batch);\n\n    let partitionId: string | undefined;\n    let partitionKey: string | undefined;\n\n    // Holds an EventData properties object containing tracing properties.\n    // This lets us avoid cloning batch when it is EventData[], which is\n    // important as the idempotent EventHubSender needs to decorate the\n    // original EventData passed through.\n    const eventDataTracingProperties: Array<EventData[\"properties\"]> = [];\n\n    // link message span contexts\n    let spanContextsToLink: TracingContext[] = [];\n\n    if (isEventDataBatch(batch)) {\n      if (\n        this._enableIdempotentRetries &&\n        isDefined((batch as EventDataBatchImpl).startingPublishedSequenceNumber)\n      ) {\n        throw new Error(idempotentAlreadyPublished);\n      }\n      const partitionAssignment = extractPartitionAssignmentFromBatch(batch, options);\n      partitionId = partitionAssignment.partitionId;\n      partitionKey = partitionAssignment.partitionKey;\n      spanContextsToLink = (batch as EventDataBatchImpl)._messageSpanContexts;\n    } else {\n      if (!Array.isArray(batch)) {\n        batch = [batch];\n      }\n      batch.forEach(assertIsEventData);\n      if (batch.some((event) => isDefined((event as EventDataInternal)._publishedSequenceNumber))) {\n        throw new Error(idempotentSomeAlreadyPublished);\n      }\n      const partitionAssignment = extractPartitionAssignmentFromOptions(options);\n      partitionId = partitionAssignment.partitionId;\n      partitionKey = partitionAssignment.partitionKey;\n\n      for (let i = 0; i < batch.length; i++) {\n        batch[i] = instrumentEventData(\n          batch[i],\n          options,\n          this._context.config.entityPath,\n          this._context.config.host,\n          \"publish\",\n        ).event;\n        eventDataTracingProperties[i] = batch[i].properties;\n      }\n    }\n\n    validateProducerPartitionSettings({\n      enableIdempotentRetries: this._enableIdempotentRetries,\n      partitionId,\n      partitionKey,\n    });\n\n    return tracingClient.withSpan(\n      `${EventHubProducerClient.name}.${this.sendBatch.name}`,\n      options,\n      (updatedOptions) => {\n        let sender = this._sendersMap.get(partitionId || \"\");\n        if (!sender) {\n          const partitionPublishingOptions = isDefined(partitionId)\n            ? this._partitionOptions?.[partitionId]\n            : undefined;\n          sender = EventHubSender.create(this._context, this.identifier, {\n            enableIdempotentProducer: Boolean(this._enableIdempotentRetries),\n            partitionId,\n            partitionPublishingOptions,\n          });\n          this._sendersMap.set(partitionId || \"\", sender);\n        }\n\n        return sender.send(batch, {\n          ...updatedOptions,\n          partitionId,\n          partitionKey,\n          retryOptions: this._clientOptions.retryOptions,\n        });\n      },\n      {\n        spanLinks: spanContextsToLink.map<TracingSpanLink>((tracingContext) => {\n          return { tracingContext };\n        }),\n        ...toSpanOptions(this._context.config, \"publish\", \"client\"),\n      },\n    );\n  }\n\n  /**\n   * Closes the AMQP connection to the Event Hub instance,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @returns Promise<void>\n   * @throws Error if the underlying connection encounters an error while closing.\n   */\n  async close(): Promise<void> {\n    await this._context.close();\n\n    for (const pair of this._sendersMap) {\n      await pair[1].close();\n    }\n    this._sendersMap.clear();\n  }\n\n  /**\n   * Provides the Event Hub runtime information.\n   * @param options - The set of options to apply to the operation call.\n   * @returns A promise that resolves with information about the Event Hub instance.\n   * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  getEventHubProperties(options: GetEventHubPropertiesOptions = {}): Promise<EventHubProperties> {\n    return this._context.managementSession!.getEventHubProperties({\n      ...options,\n      retryOptions: this._clientOptions.retryOptions,\n    });\n  }\n\n  /**\n   * Provides the id for each partition associated with the Event Hub.\n   * @param options - The set of options to apply to the operation call.\n   * @returns A promise that resolves with an Array of strings representing the id for\n   * each partition associated with the Event Hub.\n   * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  getPartitionIds(options: GetPartitionIdsOptions = {}): Promise<Array<string>> {\n    return this._context\n      .managementSession!.getEventHubProperties({\n        ...options,\n        retryOptions: this._clientOptions.retryOptions,\n      })\n      .then((eventHubProperties) => {\n        return eventHubProperties.partitionIds;\n      });\n  }\n\n  /**\n   * Provides information about the state of the specified partition.\n   * @param partitionId - The id of the partition for which information is required.\n   * @param options - The set of options to apply to the operation call.\n   * @returns A promise that resolves with information about the state of the partition .\n   * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  getPartitionProperties(\n    partitionId: string,\n    options: GetPartitionPropertiesOptions = {},\n  ): Promise<PartitionProperties> {\n    return this._context.managementSession!.getPartitionProperties(partitionId, {\n      ...options,\n      retryOptions: this._clientOptions.retryOptions,\n    });\n  }\n}\n\n/**\n * @internal\n */\nfunction extractPartitionAssignmentFromOptions(options: SendBatchOptions = {}): {\n  partitionKey?: string;\n  partitionId?: string;\n} {\n  const result: ReturnType<typeof extractPartitionAssignmentFromOptions> = {};\n  const { partitionId, partitionKey } = options;\n\n  if (isDefined(partitionId)) {\n    result.partitionId = String(partitionId);\n  }\n  if (isDefined(partitionKey)) {\n    result.partitionKey = String(partitionKey);\n  }\n\n  return result;\n}\n\n/**\n * @internal\n */\nfunction extractPartitionAssignmentFromBatch(\n  batch: EventDataBatch,\n  options: SendBatchOptions,\n): { partitionKey?: string; partitionId?: string } {\n  const result: ReturnType<typeof extractPartitionAssignmentFromBatch> = {};\n  const partitionId = batch.partitionId;\n  const partitionKey = batch.partitionKey;\n\n  const { partitionId: unexpectedPartitionId, partitionKey: unexpectedPartitionKey } =\n    extractPartitionAssignmentFromOptions(options);\n  if (unexpectedPartitionKey && partitionKey !== unexpectedPartitionKey) {\n    throw new Error(\n      `The partitionKey (${unexpectedPartitionKey}) set on sendBatch does not match the partitionKey (${partitionKey}) set when creating the batch.`,\n    );\n  }\n  if (unexpectedPartitionId && unexpectedPartitionId !== partitionId) {\n    throw new Error(\n      `The partitionId (${unexpectedPartitionId}) set on sendBatch does not match the partitionId (${partitionId}) set when creating the batch.`,\n    );\n  }\n\n  if (isDefined(partitionId)) {\n    result.partitionId = String(partitionId);\n  }\n  if (isDefined(partitionKey)) {\n    result.partitionKey = String(partitionKey);\n  }\n\n  return result;\n}\n"]}