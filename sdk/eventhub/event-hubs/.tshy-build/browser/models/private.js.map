{"version":3,"file":"private.js","sourceRoot":"","sources":["../../../src/models/private.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { LoadBalancingStrategy } from \"../loadBalancerStrategies/loadBalancingStrategy.js\";\nimport type { RetryOptions } from \"@azure/core-amqp\";\nimport type { Typed } from \"rhea-promise\";\nimport type { SubscribeOptions } from \"../eventHubConsumerClientModels.js\";\nimport type { idempotentProducerAmqpPropertyNames } from \"../util/constants.js\";\n\n/**\n * The set of options to configure the behavior of an `EventHubProducer`.\n * These can be specified when creating the producer via the `createProducer` method.\n * - `partitionId`  : The string identifier of the partition that the producer can be bound to.\n * - `retryOptions` : The retry options used to govern retry attempts when an issue is encountered while sending events.\n * A simple usage can be `{ \"maxRetries\": 4 }`.\n * @internal\n */\nexport interface EventHubProducerOptions {\n  /**\n   * The identifier of the partition that the producer will be bound to.\n   * If a value is provided, all events sent using the producer will reach the same partition.\n   * If no value is provided, the service will determine the partition to which the event will be sent.\n   */\n  partitionId?: string;\n  /**\n   * The retry options used to govern retry attempts when an issue is encountered while sending events.\n   * If no value is provided here, the retry options set when creating the `EventHubClient` is used.\n   */\n  retryOptions?: RetryOptions;\n}\n\n/**\n * @internal\n */\nexport type OperationNames = \"getEventHubProperties\" | \"getPartitionIds\" | \"getPartitionProperties\";\n\n/**\n * @internal\n */\nexport interface CommonEventProcessorOptions\n  extends Required<Pick<SubscribeOptions, \"maxBatchSize\" | \"maxWaitTimeInSeconds\">>,\n    Pick<\n      SubscribeOptions,\n      Exclude<\n        keyof SubscribeOptions,\n        // (made required above)\n        \"maxBatchSize\" | \"maxWaitTimeInSeconds\"\n      >\n    > {\n  /**\n   * A load balancing strategy that determines how to claim partitions.\n   */\n  loadBalancingStrategy: LoadBalancingStrategy;\n\n  /**\n   * An optional ownerId to use rather than using an internally generated ID\n   * This allows you to logically group a series of processors together (for instance\n   * like we do with EventHubConsumerClient)\n   */\n  ownerId?: string;\n\n  /**\n   * The maximum amount of time since a PartitionOwnership was updated\n   * to use to determine if a partition is no longer claimed.\n   * Setting this value to 0 will cause the default value to be used.\n   */\n  inactiveTimeLimitInMs?: number;\n  /**\n   * Retry Options to be used when receiving events\n   */\n  retryOptions?: RetryOptions;\n}\n\n/**\n * The set of options to configure the behavior of an `EventHubConsumer`.\n * These can be specified when creating the consumer using the `createConsumer` method.\n * - `ownerLevel`  : A number indicating that the consumer intends to be an exclusive consumer of events resulting in other\n * consumers to fail if their `ownerLevel` is lower or doesn't exist.\n * - `retryOptions`: The retry options used to govern retry attempts when an issue is encountered while receiving events.\n * A simple usage can be `{ \"maxRetries\": 4 }`.\n * - `skipParsingBodyAsJson` : Option to disable the client from running JSON.parse() on the message body when receiving the message.\n * Not applicable if the message was sent with AMQP body type value or sequence. Use this option when you prefer to work directly with\n * the bytes present in the message body than have the client attempt to parse it.\n *\n * Example usage:\n * ```ts snippet:ignore\n * {\n *     retryOptions: {\n *         maxRetries: 4\n *     },\n *     trackLastEnqueuedEventProperties: false,\n *     skipParsingBodyAsJson: true\n * }\n * ```\n * @internal\n */\nexport interface PartitionReceiverOptions {\n  /**\n   * The owner level associated with an exclusive consumer.\n   *\n   * When provided, the owner level indicates that a consumer is intended to be the exclusive receiver of events for the\n   * requested partition and the associated consumer group.\n   * When multiple consumers exist for the same partition/consumer group pair, then the ones with lower or no\n   * `ownerLevel` will get a `ReceiverDisconnectedError` during the next attempted receive operation.\n   */\n  ownerLevel?: number;\n  /**\n   * The retry options used to govern retry attempts when an issue is encountered while receiving events.\n   * If no value is provided here, the retry options set when creating the `EventHubClient` is used.\n   */\n  retryOptions?: RetryOptions;\n  /**\n   * Indicates whether or not the consumer should request information on the last enqueued event on its\n   * associated partition, and track that information as events are received.\n\n   * When information about the partition's last enqueued event is being tracked, each event received\n   * from the Event Hubs service will carry metadata about the partition that it otherwise would not. This results in a small amount of\n   * additional network bandwidth consumption that is generally a favorable trade-off when considered\n   * against periodically making requests for partition properties using the Event Hub client.\n   */\n  trackLastEnqueuedEventProperties?: boolean;\n  /**\n   * Option to disable the client from running JSON.parse() on the message body when receiving the message.\n   * Not applicable if the message was sent with AMQP body type value or sequence. Use this option when you\n   * prefer to work directly with the bytes present in the message body than have the client attempt to parse it.\n   */\n  skipParsingBodyAsJson?: boolean;\n  /**\n   * The count of events requested eagerly and queued without regard to whether a read was requested.\n   */\n  prefetchCount?: number;\n}\n\n/**\n * @internal\n */\nexport interface IdempotentLinkProperties {\n  [idempotentProducerAmqpPropertyNames.epoch]: Typed | null;\n  [idempotentProducerAmqpPropertyNames.producerId]: Typed | null;\n  [idempotentProducerAmqpPropertyNames.producerSequenceNumber]: Typed | null;\n}\n\n/**\n * The set of options that can be specified for an `EventHubProducerClient`\n * to influence its behavior when publishing directly to an Event Hub partition.\n *\n * These options are ignored when publishing to the Event Hubs gateway for automatic\n * routing or when using a partition key.\n */\nexport interface PartitionPublishingOptions {\n  /**\n   * The owner level indicates that a publishing is intended to be performed exclusively for events in the\n   * requested partition in the context of the associated producer group.\n   *\n   * To do so, publishing will attempt to assert ownership over the partition;\n   * in the case where more than one publisher in the producer group attempts to assert ownership for the same partition,\n   * the one having a larger `ownerLevel` value will \"win\".\n   */\n  ownerLevel?: number;\n  /**\n   * The identifier of the producer group that this producer is associated with when publishing to the associated partition.\n   * Events will be published in the context of this group.\n   *\n   * If `undefined`, the Event Hubs service will control the value.\n   *\n   * The producer group is only recognized and relevant when certain features of the producer are enabled.\n   * For example, it is used by idempotent publishing.\n   */\n  producerGroupId?: number;\n  /**\n   * The starting number that should be used for the automatic sequencing of events for the associated partition, when published by this producer.\n   *\n   * If `undefined`, the Event Hubs service will control the value.\n   *\n   * The producer group is only recognized and relevant when certain features of the producer are enabled.\n   * For example, it is used by idempotent publishing.\n   */\n  startingSequenceNumber?: number;\n}\n\n/**\n * Describes the information about the state of publishing for a partition.\n */\nexport interface PartitionPublishingProperties {\n  /**\n   * Indicates whether or not idempotent publishing is enabled for the producer and, by extension, the associated partition.\n   */\n  isIdempotentPublishingEnabled: boolean;\n  /**\n   * The owner level of the producer publishing to the associated partition.\n   */\n  ownerLevel?: number;\n  /**\n   * The partition id the properties are associated with.\n   */\n  partitionId: string;\n  /**\n   * The identifier of the producer group for which this producer is publishing to the associated partition.\n   */\n  producerGroupId?: number;\n  /**\n   * The sequence number assigned to the event that was most recently published to the associated partition successfully.\n   */\n  lastPublishedSequenceNumber?: number;\n}\n"]}