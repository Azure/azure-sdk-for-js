{"version":3,"file":"managementClient.js","sourceRoot":"","sources":["../../src/managementClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { RetryConfig, RetryOptions, SendRequestOptions } from \"@azure/core-amqp\";\nimport {\n  Constants,\n  RequestResponseLink,\n  RetryOperationType,\n  defaultCancellableLock,\n  isSasTokenProvider,\n  retry,\n  translate,\n} from \"@azure/core-amqp\";\nimport type { EventContext, Message, ReceiverOptions, SenderOptions } from \"rhea-promise\";\nimport { ReceiverEvents, SenderEvents } from \"rhea-promise\";\nimport type { SimpleLogger } from \"./logger.js\";\nimport {\n  logErrorStackTrace,\n  createSimpleLogger,\n  logger,\n  createManagementLogPrefix,\n} from \"./logger.js\";\nimport { throwErrorIfConnectionClosed, throwTypeErrorIfParameterMissing } from \"./util/error.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type { AccessToken } from \"@azure/core-auth\";\nimport type { ConnectionContext } from \"./connectionContext.js\";\nimport type { OperationOptions } from \"./util/operationOptions.js\";\nimport { toSpanOptions, tracingClient } from \"./diagnostics/tracing.js\";\nimport { getRetryAttemptTimeoutInMs } from \"./util/retries.js\";\nimport type { TimerLoop } from \"./util/timerLoop.js\";\nimport { withAuth } from \"./withAuth.js\";\nimport { getRandomName } from \"./util/utils.js\";\n\n/**\n * Describes the runtime information of an Event Hub.\n */\nexport interface EventHubProperties {\n  /**\n   * The name of the event hub.\n   */\n  name: string;\n  /**\n   * The date and time the hub was created in UTC.\n   */\n  createdOn: Date;\n  /**\n   * The slice of string partition identifiers.\n   */\n  partitionIds: string[];\n  /**\n   * Whether the hub has geographical disaster recovery enabled.\n   */\n  isGeoDrEnabled: boolean;\n}\n\n/**\n * Describes the runtime information of an EventHub Partition.\n */\nexport interface PartitionProperties {\n  /**\n   * The name of the Event Hub.\n   */\n  eventHubName: string;\n  /**\n   * Identifier of the partition within the Event Hub.\n   */\n  partitionId: string;\n  /**\n   * The starting sequence number of the partition's message log.\n   */\n  beginningSequenceNumber: number;\n  /**\n   * The last sequence number of the partition's message log.\n   */\n  lastEnqueuedSequenceNumber: number;\n  /**\n   * The offset of the last enqueued message in the partition's message log.\n   */\n  lastEnqueuedOffset: string;\n  /**\n   * The time of the last enqueued message in the partition's message log in UTC.\n   */\n  lastEnqueuedOnUtc: Date;\n  /**\n   * Indicates whether the partition is empty.\n   */\n  isEmpty: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ManagementClientOptions {\n  address?: string;\n  audience?: string;\n}\n\n/**\n * @internal\n * Describes the EventHubs Management Client that talks\n * to the $management endpoint over AMQP connection.\n */\nexport class ManagementClient {\n  readonly managementLock: string = getRandomName(Constants.managementRequestKey);\n  /**\n   * The name/path of the entity (hub name) for which the management\n   * request needs to be made.\n   */\n  private readonly entityPath: string;\n  /**\n   * The reply to Guid for the management client.\n   */\n  private readonly replyTo: string = getRandomName();\n  /**\n   * $management sender, receiver on the same session.\n   */\n  private _mgmtReqResLink?: RequestResponseLink;\n  /**\n   * The address in the following form:\n   * `\"$management\"`.\n   */\n  private readonly address: string;\n  /**\n   * The token audience in the following form:\n   * `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management\"`.\n   */\n  private readonly audience: string;\n  /**\n   * Provides relevant information about the amqp connection,\n   * cbs and $management sessions, token provider, sender and receivers.\n   */\n  private readonly _context: ConnectionContext;\n  /**\n   * The authentication loop that keeps the token refreshed.\n   */\n  private authLoop?: TimerLoop;\n  private readonly logger: SimpleLogger;\n\n  /**\n   * Instantiates the management client.\n   * @param context - The connection context.\n   * @param address - The address for the management endpoint. For IotHub it will be\n   * `/messages/events/$management`.\n   */\n  constructor(context: ConnectionContext, { address, audience }: ManagementClientOptions = {}) {\n    this.address = address ?? Constants.management;\n    this.audience = audience ?? context.config.getManagementAudience();\n    this._context = context;\n    const logPrefix = createManagementLogPrefix(this._context.connectionId);\n    this.logger = createSimpleLogger(logger, logPrefix);\n    this.entityPath = context.config.entityPath as string;\n  }\n\n  /**\n   * Gets the security token for the management application properties.\n   * @internal\n   */\n  async getSecurityToken(): Promise<AccessToken | null> {\n    if (isSasTokenProvider(this._context.tokenCredential)) {\n      // the security_token has the $management address removed from the end of the audience\n      // expected audience: sb://fully.qualified.namespace/event-hub-name/$management\n      const audienceParts = this.audience.split(\"/\");\n      // for management links, address should be '$management'\n      if (audienceParts[audienceParts.length - 1] === this.address) {\n        audienceParts.pop();\n      }\n      const audience = audienceParts.join(\"/\");\n      return this._context.tokenCredential.getToken(audience);\n    }\n\n    // aad credentials use the aad scope\n    return this._context.tokenCredential.getToken(Constants.aadEventHubsScope);\n  }\n\n  /**\n   * Provides the eventhub runtime information.\n   */\n  async getEventHubProperties(\n    options: OperationOptions & { retryOptions?: RetryOptions } = {},\n  ): Promise<EventHubProperties> {\n    throwErrorIfConnectionClosed(this._context);\n    return tracingClient.withSpan(\n      \"ManagementClient.getEventHubProperties\",\n      options,\n      async (updatedOptions) => {\n        try {\n          const securityToken = await this.getSecurityToken();\n\n          const request: Message = {\n            body: Buffer.from(JSON.stringify([])),\n            message_id: getRandomName(),\n            reply_to: this.replyTo,\n            application_properties: {\n              operation: Constants.readOperation,\n              name: this.entityPath as string,\n              type: `${Constants.vendorString}:${Constants.eventHub}`,\n              security_token: securityToken?.token,\n            },\n          };\n\n          const info: any = await this._makeManagementRequest(request, {\n            ...updatedOptions,\n            requestName: \"getHubRuntimeInformation\",\n          });\n          const runtimeInfo: EventHubProperties = {\n            name: info.name,\n            createdOn: new Date(info.created_at),\n            partitionIds: info.partition_ids,\n            isGeoDrEnabled: info.georeplication_factor > 1,\n          };\n          logger.verbose(\"the hub runtime info is: %O\", runtimeInfo);\n\n          return runtimeInfo;\n        } catch (error: any) {\n          logger.warning(\n            `an error occurred while getting the hub runtime information: ${error?.name}: ${error?.message}`,\n          );\n          logErrorStackTrace(error);\n          throw error;\n        }\n      },\n      toSpanOptions(this._context.config),\n    );\n  }\n\n  /**\n   * Provides information about the specified partition.\n   * @param partitionId - Partition ID for which partition information is required.\n   */\n  async getPartitionProperties(\n    partitionId: string,\n    options: OperationOptions & { retryOptions?: RetryOptions } = {},\n  ): Promise<PartitionProperties> {\n    throwErrorIfConnectionClosed(this._context);\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"getPartitionProperties\",\n      \"partitionId\",\n      partitionId,\n    );\n    partitionId = String(partitionId);\n\n    return tracingClient.withSpan(\n      \"ManagementClient.getPartitionProperties\",\n      options,\n      async (updatedOptions) => {\n        try {\n          const securityToken = await this.getSecurityToken();\n          const request: Message = {\n            body: Buffer.from(JSON.stringify([])),\n            message_id: getRandomName(),\n            reply_to: this.replyTo,\n            application_properties: {\n              operation: Constants.readOperation,\n              name: this.entityPath as string,\n              type: `${Constants.vendorString}:${Constants.partition}`,\n              partition: `${partitionId}`,\n              security_token: securityToken?.token,\n            },\n          };\n\n          const info: any = await this._makeManagementRequest(request, {\n            ...updatedOptions,\n            requestName: \"getPartitionInformation\",\n          });\n\n          const partitionInfo: PartitionProperties = {\n            beginningSequenceNumber: info.begin_sequence_number,\n            eventHubName: info.name,\n            lastEnqueuedOffset: info.last_enqueued_offset,\n            lastEnqueuedOnUtc: new Date(info.last_enqueued_time_utc),\n            lastEnqueuedSequenceNumber: info.last_enqueued_sequence_number,\n            partitionId: info.partition,\n            isEmpty: info.is_partition_empty,\n          };\n          logger.verbose(\"the partition info is: %O.\", partitionInfo);\n          return partitionInfo;\n        } catch (error: any) {\n          logger.warning(\n            `an error occurred while getting the partition information: ${error?.name}: ${error?.message}`,\n          );\n          logErrorStackTrace(error);\n          throw error;\n        }\n      },\n      toSpanOptions(this._context.config),\n    );\n  }\n\n  /**\n   * Closes the AMQP management session to the Event Hub for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   */\n  async close(): Promise<void> {\n    try {\n      // Always stop the auth loop when closing the management link.\n      this.authLoop?.stop();\n      if (this._isMgmtRequestResponseLinkOpen()) {\n        const mgmtLink = this._mgmtReqResLink;\n        this._mgmtReqResLink = undefined;\n        await mgmtLink!.close();\n        logger.info(\"successfully closed the management session.\");\n      }\n    } catch (err: any) {\n      const msg = `an error occurred while closing the management session: ${err?.name}: ${err?.message}`;\n      logger.warning(msg);\n      logErrorStackTrace(err);\n      throw new Error(msg);\n    }\n  }\n\n  private async _init({\n    abortSignal,\n    timeoutInMs,\n  }: {\n    abortSignal: AbortSignalLike | undefined;\n    timeoutInMs: number;\n  }): Promise<void> {\n    const createLink = async () => {\n      const rxopt: ReceiverOptions = {\n        source: { address: this.address },\n        name: this.replyTo,\n        target: { address: this.replyTo },\n        onSessionError: (context: EventContext) => {\n          const ehError = translate(context.session!.error!);\n          logger.verbose(\n            \"an error occurred on the session for request/response links for \" + \"$management: %O\",\n            ehError,\n          );\n        },\n      };\n      const sropt: SenderOptions = {\n        target: { address: this.address },\n      };\n      logger.verbose(\n        \"creating sender/receiver links with \" + \"srOpts: %o, receiverOpts: %O.\",\n        sropt,\n        rxopt,\n      );\n      this._mgmtReqResLink = await RequestResponseLink.create(\n        this._context.connection,\n        sropt,\n        rxopt,\n        { abortSignal },\n      );\n      this._mgmtReqResLink.sender.on(SenderEvents.senderError, (context: EventContext) => {\n        const ehError = translate(context.sender!.error!);\n        logger.verbose(\"an error occurred on the $management sender link.. %O\", ehError);\n      });\n      this._mgmtReqResLink.receiver.on(ReceiverEvents.receiverError, (context: EventContext) => {\n        const ehError = translate(context.receiver!.error!);\n        logger.verbose(\"an error occurred on the $management receiver link.. %O\", ehError);\n      });\n      logger.verbose(\n        \"created sender '%s' and receiver '%s' links\",\n        this._mgmtReqResLink.sender.name,\n        this._mgmtReqResLink.receiver.name,\n      );\n    };\n    try {\n      if (!this._isMgmtRequestResponseLinkOpen()) {\n        // Wait for the connectionContext to be ready to open the link.\n        await this._context.readyToOpenLink();\n        this.authLoop = await withAuth(\n          createLink,\n          this._context,\n          this.audience,\n          timeoutInMs,\n          this.logger,\n          { abortSignal },\n        );\n      }\n    } catch (err) {\n      const translatedError = translate(err);\n      logger.warning(\n        `an error occurred while establishing the links: ${translatedError?.name}: ${translatedError?.message}`,\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  /**\n   * Helper method to make the management request\n   * @param request - The AMQP message to send\n   * @param options - The options to use when sending a request over a $management link\n   */\n  private async _makeManagementRequest(\n    request: Message,\n    options: {\n      retryOptions?: RetryOptions;\n      abortSignal?: AbortSignalLike;\n      requestName?: string;\n    } = {},\n  ): Promise<any> {\n    const retryOptions = options.retryOptions || {};\n    try {\n      const abortSignal: AbortSignalLike | undefined = options && options.abortSignal;\n\n      const sendOperationPromise = async (): Promise<Message> => {\n        let count = 0;\n\n        const retryTimeoutInMs = getRetryAttemptTimeoutInMs(options.retryOptions);\n        let timeTakenByInit = 0;\n\n        if (!this._isMgmtRequestResponseLinkOpen()) {\n          logger.verbose(\"acquiring lock to get the management req res link.\");\n\n          const initOperationStartTime = Date.now();\n          try {\n            await defaultCancellableLock.acquire(\n              this.managementLock,\n              () => {\n                const acquireLockEndTime = Date.now();\n                const timeoutInMs =\n                  retryTimeoutInMs - (acquireLockEndTime - initOperationStartTime);\n                return this._init({ abortSignal, timeoutInMs });\n              },\n              { abortSignal, timeoutInMs: retryTimeoutInMs },\n            );\n          } catch (err) {\n            const translatedError = translate(err);\n            logger.warning(\n              \"an error occurred while creating the link: %s\",\n              `${translatedError?.name}: ${translatedError?.message}`,\n            );\n            logErrorStackTrace(translatedError);\n            throw translatedError;\n          }\n          timeTakenByInit = Date.now() - initOperationStartTime;\n        }\n\n        const remainingOperationTimeoutInMs = retryTimeoutInMs - timeTakenByInit;\n\n        const sendRequestOptions: SendRequestOptions = {\n          abortSignal: options.abortSignal,\n          requestName: options.requestName,\n          timeoutInMs: remainingOperationTimeoutInMs,\n        };\n\n        count++;\n        if (count !== 1) {\n          // Generate a new message_id every time after the first attempt\n          request.message_id = getRandomName();\n        } else if (!request.message_id) {\n          // Set the message_id in the first attempt only if it is not set\n          request.message_id = getRandomName();\n        }\n\n        return this._mgmtReqResLink!.sendRequest(request, sendRequestOptions);\n      };\n\n      const config: RetryConfig<Message> = Object.defineProperties(\n        {\n          operation: sendOperationPromise,\n          operationType: RetryOperationType.management,\n          abortSignal: abortSignal,\n          retryOptions: retryOptions,\n        },\n        {\n          connectionId: {\n            enumerable: true,\n            get: () => {\n              return this._context.connectionId;\n            },\n          },\n        },\n      ) as RetryConfig<Message>;\n      return (await retry<Message>(config)).body;\n    } catch (err) {\n      const translatedError = translate(err);\n      logger.warning(\n        \"an error occurred during send on management request-response link with address: %s\",\n        `${translatedError?.name}: ${translatedError?.message}`,\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  private _isMgmtRequestResponseLinkOpen(): boolean {\n    return this._mgmtReqResLink! && this._mgmtReqResLink!.isOpen();\n  }\n}\n"]}