{"version":3,"file":"error.js","sourceRoot":"","sources":["../../../src/util/error.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { logErrorStackTrace, logger } from \"../logger.js\";\nimport type { ConnectionContext } from \"../connectionContext.js\";\nimport { isDefined } from \"@azure/core-util\";\nimport type { AmqpError } from \"rhea-promise\";\nimport { isAmqpError } from \"rhea-promise\";\nimport type { MessagingError } from \"@azure/core-amqp\";\nimport { isMessagingError, translate } from \"@azure/core-amqp\";\n\n/**\n * @internal\n * Logs and throws Error if the current AMQP connection is closed.\n * @param context - The ConnectionContext associated with the current AMQP connection.\n */\nexport function throwErrorIfConnectionClosed(context: ConnectionContext): void {\n  if (context && context.wasConnectionCloseCalled) {\n    const errorMessage = \"The underlying AMQP connection is closed.\";\n    const error = new Error(errorMessage);\n    logger.warning(`[${context.connectionId}] ${error.name}: ${error.message}`);\n    logErrorStackTrace(error);\n    throw error;\n  }\n}\n\n/**\n * @internal\n * Logs and Throws TypeError if given parameter is undefined or null\n * @param connectionId - Id of the underlying AMQP connection used for logging\n * @param methodName - Name of the method that was passed the parameter\n * @param parameterName - Name of the parameter to check\n * @param parameterValue - Value of the parameter to check\n */\nexport function throwTypeErrorIfParameterMissing(\n  connectionId: string,\n  methodName: string,\n  parameterName: string,\n  parameterValue: unknown,\n): void {\n  if (!isDefined(parameterValue)) {\n    const error = new TypeError(\n      `${methodName} called without required argument \"${parameterName}\"`,\n    );\n    logger.warning(`[${connectionId}] ${error.name}: ${error.message}`);\n    logErrorStackTrace(error);\n    throw error;\n  }\n}\n\n/**\n * Maps the amqp error conditions to the Error names.\n * @internal\n */\nenum ConditionErrorNameMapper {\n  /**\n   * Indicates that a sequenc enumber was out of order.\n   */\n  \"com.microsoft:out-of-order-sequence\" = \"SequenceOutOfOrderError\",\n  /**\n   * Error is thrown when two or more instances connect to the same partition\n   * with different epoch values.\n   */\n  \"com.microsoft:producer-epoch-stolen\" = \"ProducerDisconnectedError\",\n}\n\n/**\n * @internal\n */\nconst nonRetryableErrors: Set<string> = new Set([\n  \"ProducerDisconnectedError\",\n  \"SequenceOutOfOrderError\",\n]);\n\n/**\n * @internal\n */\nexport function translateError(err: AmqpError | Error): MessagingError | Error {\n  const translatedError = translate(err);\n  // If we're not dealing with a messaging error, or the original error wasn't an AMQP error,\n  // or we have a resolved code on the messaging error, just return the translated error.\n  if (!isMessagingError(translatedError) || !isAmqpError(err) || translatedError.code) {\n    return translatedError;\n  }\n\n  const amqpError = err as AmqpError;\n  const condition = amqpError.condition;\n\n  // If we don't have a condition, we can't map the condition to a code.\n  if (!condition) {\n    return translatedError;\n  }\n\n  // Attempt to resolve codes core-amqp doesn't know about.\n  translatedError.code =\n    ConditionErrorNameMapper[condition as keyof typeof ConditionErrorNameMapper];\n  if (translatedError.code) {\n    translatedError.retryable = !nonRetryableErrors.has(translatedError.code);\n  }\n\n  return translatedError;\n}\n\n/**\n * @internal\n */\nexport const idempotentAlreadyPublished =\n  \"These events have already been successfully published. When idempotent publishing is enabled, events that were acknowledged by the Event Hubs service may not be published again.\";\n\n/**\n * @internal\n */\nexport const idempotentSomeAlreadyPublished =\n  \"1 or more of these events have already been successfully published. When idempotent publishing is enabled, events that were acknowledged by the Event Hubs service may not be published again.\";\n\n/**\n * @internal\n */\nexport function validateProducerPartitionSettings({\n  enableIdempotentRetries,\n  partitionId,\n  partitionKey,\n}: {\n  enableIdempotentRetries?: boolean;\n  partitionId?: string;\n  partitionKey?: string;\n}): void {\n  if (enableIdempotentRetries && (isDefined(partitionKey) || !isDefined(partitionId))) {\n    throw new Error(\n      `The \"partitionId\" must be supplied and \"partitionKey\" must not be provided when the EventHubProducerClient has \"enableIdempotentRetries\" set to true.`,\n    );\n  }\n\n  if (isDefined(partitionId) && isDefined(partitionKey)) {\n    throw new Error(\n      `The partitionId (${partitionId}) and partitionKey (${partitionKey}) cannot both be specified.`,\n    );\n  }\n}\n"]}