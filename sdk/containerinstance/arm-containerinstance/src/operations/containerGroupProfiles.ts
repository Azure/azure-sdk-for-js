/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ContainerGroupProfiles } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerInstanceManagementClient } from "../containerInstanceManagementClient";
import {
  ContainerGroupProfile,
  ContainerGroupProfilesListNextOptionalParams,
  ContainerGroupProfilesListOptionalParams,
  ContainerGroupProfilesListResponse,
  ContainerGroupProfilesListByResourceGroupNextOptionalParams,
  ContainerGroupProfilesListByResourceGroupOptionalParams,
  ContainerGroupProfilesListByResourceGroupResponse,
  ContainerGroupProfilesGetOptionalParams,
  ContainerGroupProfilesGetResponse,
  ContainerGroupProfilesCreateOrUpdateOptionalParams,
  ContainerGroupProfilesCreateOrUpdateResponse,
  ContainerGroupProfilePatch,
  ContainerGroupProfilesPatchOptionalParams,
  ContainerGroupProfilesPatchResponse,
  ContainerGroupProfilesDeleteOptionalParams,
  ContainerGroupProfilesListNextResponse,
  ContainerGroupProfilesListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ContainerGroupProfiles operations. */
export class ContainerGroupProfilesImpl implements ContainerGroupProfiles {
  private readonly client: ContainerInstanceManagementClient;

  /**
   * Initialize a new instance of the class ContainerGroupProfiles class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerInstanceManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of container group profiles in the specified subscription. This operation returns
   * properties of each container group profile including containers, image registry credentials, restart
   * policy, IP address type, OS type,volumes,current revision number, etc.
   * @param options The options parameters.
   */
  public list(
    options?: ContainerGroupProfilesListOptionalParams,
  ): PagedAsyncIterableIterator<ContainerGroupProfile> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: ContainerGroupProfilesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ContainerGroupProfile[]> {
    let result: ContainerGroupProfilesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: ContainerGroupProfilesListOptionalParams,
  ): AsyncIterableIterator<ContainerGroupProfile> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of container group profiles in a specified subscription and resource group. This
   * operation returns properties of each container group profile including containers, image registry
   * credentials, restart policy, IP address type, OS type volumes, current revision number, etc.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ContainerGroupProfilesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<ContainerGroupProfile> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ContainerGroupProfilesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ContainerGroupProfile[]> {
    let result: ContainerGroupProfilesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ContainerGroupProfilesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<ContainerGroupProfile> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of container group profiles in the specified subscription. This operation returns
   * properties of each container group profile including containers, image registry credentials, restart
   * policy, IP address type, OS type,volumes,current revision number, etc.
   * @param options The options parameters.
   */
  private _list(
    options?: ContainerGroupProfilesListOptionalParams,
  ): Promise<ContainerGroupProfilesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Get a list of container group profiles in a specified subscription and resource group. This
   * operation returns properties of each container group profile including containers, image registry
   * credentials, restart policy, IP address type, OS type volumes, current revision number, etc.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ContainerGroupProfilesListByResourceGroupOptionalParams,
  ): Promise<ContainerGroupProfilesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Gets the properties of the specified container group profile in the specified subscription and
   * resource group. The operation returns the properties of container group profile including
   * containers, image registry credentials, restart policy, IP address type, OS type, volumes, current
   * revision number, etc.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName The name of the container group profile.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    containerGroupProfileName: string,
    options?: ContainerGroupProfilesGetOptionalParams,
  ): Promise<ContainerGroupProfilesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerGroupProfileName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update container group profiles with specified configurations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName The name of the container group profile.
   * @param containerGroupProfile The properties of the container group profile to be created or updated.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    containerGroupProfileName: string,
    containerGroupProfile: ContainerGroupProfile,
    options?: ContainerGroupProfilesCreateOrUpdateOptionalParams,
  ): Promise<ContainerGroupProfilesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        containerGroupProfileName,
        containerGroupProfile,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Patches container group profile with specified properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName The name of the container group profile.
   * @param properties The container group profile properties that need to be updated.
   * @param options The options parameters.
   */
  patch(
    resourceGroupName: string,
    containerGroupProfileName: string,
    properties: ContainerGroupProfilePatch,
    options?: ContainerGroupProfilesPatchOptionalParams,
  ): Promise<ContainerGroupProfilesPatchResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerGroupProfileName, properties, options },
      patchOperationSpec,
    );
  }

  /**
   * Delete the specified container group profile in the specified subscription and resource group. The
   * operation does not delete other resources provided by the user, such as volumes.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName The name of the container group profile.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    containerGroupProfileName: string,
    options?: ContainerGroupProfilesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerGroupProfileName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ContainerGroupProfilesListNextOptionalParams,
  ): Promise<ContainerGroupProfilesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ContainerGroupProfilesListByResourceGroupNextOptionalParams,
  ): Promise<ContainerGroupProfilesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/containerGroupProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfileListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfileListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfile,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerGroupProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfile,
    },
    201: {
      bodyMapper: Mappers.ContainerGroupProfile,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.containerGroupProfile,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerGroupProfileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const patchOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfile,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerGroupProfileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerGroupProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfileListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfileListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
