{"version":3,"file":"clientDefinitions.js","sourceRoot":"","sources":["../../../src/rest/clientDefinitions.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport type {\n  ListWidgetsParameters,\n  CreateWidgetParameters,\n  GetWidgetParameters,\n  UpdateWidgetParameters,\n  DeleteWidgetParameters,\n  AnalyzeWidgetParameters,\n} from \"./parameters.js\";\nimport type {\n  ListWidgets200Response,\n  ListWidgetsDefaultResponse,\n  CreateWidget201Response,\n  CreateWidgetDefaultResponse,\n  GetWidget200Response,\n  GetWidgetDefaultResponse,\n  UpdateWidget200Response,\n  UpdateWidgetDefaultResponse,\n  DeleteWidget204Response,\n  DeleteWidgetDefaultResponse,\n  AnalyzeWidget200Response,\n  AnalyzeWidgetDefaultResponse,\n} from \"./responses.js\";\nimport type { Client, StreamableMethod } from \"@azure-rest/core-client\";\n\nexport interface ListWidgets {\n  /**\n   * List all widgets in the system. This operation is not paginated, and returns a simple array of widgets.\n   *\n   * It does not accept any options or parameters.\n   */\n  get(\n    options?: ListWidgetsParameters,\n  ): StreamableMethod<ListWidgets200Response | ListWidgetsDefaultResponse>;\n  /**\n   * Create a new widget.\n   *\n   * The widget ID is not required during creation, as it is automatically set by the server. Providing an ID will\n   * result in an error.\n   */\n  post(\n    options?: CreateWidgetParameters,\n  ): StreamableMethod<CreateWidget201Response | CreateWidgetDefaultResponse>;\n}\n\nexport interface GetWidget {\n  /** Get a widget by ID. */\n  get(\n    options?: GetWidgetParameters,\n  ): StreamableMethod<GetWidget200Response | GetWidgetDefaultResponse>;\n  /**\n   * Update the contents of the widget. The widget ID is required in the input, but cannot be changed. All other fields\n   * are optional and will be updated within the widget if provided.\n   */\n  patch(\n    options?: UpdateWidgetParameters,\n  ): StreamableMethod<UpdateWidget200Response | UpdateWidgetDefaultResponse>;\n  /** Delete a widget by ID. */\n  delete(\n    options?: DeleteWidgetParameters,\n  ): StreamableMethod<DeleteWidget204Response | DeleteWidgetDefaultResponse>;\n}\n\nexport interface AnalyzeWidget {\n  /** Analyze a widget. The only guarantee is that this method will return a string containing the results of the analysis. */\n  post(\n    options?: AnalyzeWidgetParameters,\n  ): StreamableMethod<AnalyzeWidget200Response | AnalyzeWidgetDefaultResponse>;\n}\n\nexport interface Routes {\n  /** Resource for '/widgets' has methods for the following verbs: get, post */\n  (path: \"/widgets\"): ListWidgets;\n  /** Resource for '/widgets/\\{id\\}' has methods for the following verbs: get, patch, delete */\n  (path: \"/widgets/{id}\", id: string): GetWidget;\n  /** Resource for '/widgets/\\{id\\}/analyze' has methods for the following verbs: post */\n  (path: \"/widgets/{id}/analyze\", id: string): AnalyzeWidget;\n}\n\nexport type WidgetServiceContext = Client & {\n  path: Routes;\n};\n"]}