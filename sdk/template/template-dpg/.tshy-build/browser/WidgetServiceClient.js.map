{"version":3,"file":"WidgetServiceClient.js","sourceRoot":"","sources":["../../src/WidgetServiceClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAWlC,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAErD,OAAO,EAAE,mBAAmB,EAAE,MAAM,+BAA+B,CAAC;AAYpE,OAAO,EACL,aAAa,EACb,YAAY,EACZ,YAAY,EACZ,SAAS,EACT,WAAW,EACX,YAAY,GACb,MAAM,gBAAgB,CAAC;AAKxB,MAAM,OAAO,mBAAmB;IAM9B,YACE,QAAgB,EAChB,mBAAkE,EAClE,UAAsC,EAAE;QAExC,IAAI,iBAAiB,CAAC,mBAAmB,CAAC,EAAE,CAAC;YAC3C,IAAI,CAAC,OAAO,GAAG,mBAAmB,CAAC,QAAQ,EAAE,mBAAmB,EAAE,OAAO,CAAC,CAAC;QAC7E,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,OAAO,GAAG,mBAAmB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,UAA8B,EAAE,cAAc,EAAE,EAAE,EAAE;QAC9D,OAAO,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED,0BAA0B;IAC1B,SAAS,CAAC,EAAU,EAAE,UAA4B,EAAE,cAAc,EAAE,EAAE,EAAE;QACtE,OAAO,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACH,YAAY,CACV,MAAc,EACd,KAAgB,EAChB,UAA+B,EAAE,cAAc,EAAE,EAAE,EAAE;QAErD,OAAO,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC5D,CAAC;IAED;;;OAGG;IACH,YAAY,CAAC,EAAU,EAAE,UAA+B,EAAE,cAAc,EAAE,EAAE,EAAE;QAC5E,OAAO,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAED,6BAA6B;IAC7B,YAAY,CAAC,EAAU,EAAE,UAA+B,EAAE,cAAc,EAAE,EAAE,EAAE;QAC5E,OAAO,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAED,4HAA4H;IAC5H,aAAa,CACX,EAAU,EACV,UAAgC,EAAE,cAAc,EAAE,EAAE,EAAE;QAEtD,OAAO,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport type { WidgetServiceClientOptions } from \"./api/WidgetServiceContext.js\";\nimport { createWidgetService } from \"./api/WidgetServiceContext.js\";\nimport type {\n  AnalyzeResult,\n  AnalyzeWidgetOptions,\n  ColorType,\n  CreateWidgetOptions,\n  DeleteWidgetOptions,\n  GetWidgetOptions,\n  ListWidgetsOptions,\n  UpdateWidgetOptions,\n  Widget,\n} from \"./api/index.js\";\nimport {\n  analyzeWidget,\n  createWidget,\n  deleteWidget,\n  getWidget,\n  listWidgets,\n  updateWidget,\n} from \"./api/index.js\";\nimport type { WidgetServiceContext } from \"./rest/clientDefinitions.js\";\n\nexport { WidgetServiceClientOptions } from \"./api/WidgetServiceContext.js\";\n\nexport class WidgetServiceClient {\n  private _client: WidgetServiceContext;\n\n  /** */\n  constructor(endpoint: string, options?: WidgetServiceClientOptions);\n  constructor(endpoint: string, credential: TokenCredential, options?: WidgetServiceClientOptions);\n  constructor(\n    endpoint: string,\n    credentialOrOptions?: TokenCredential | WidgetServiceClientOptions,\n    options: WidgetServiceClientOptions = {},\n  ) {\n    if (isTokenCredential(credentialOrOptions)) {\n      this._client = createWidgetService(endpoint, credentialOrOptions, options);\n    } else {\n      this._client = createWidgetService(endpoint, credentialOrOptions);\n    }\n  }\n\n  /**\n   * List all widgets in the system. This operation is not paginated, and returns a simple array of widgets.\n   *\n   * It does not accept any options or parameters.\n   */\n  listWidgets(options: ListWidgetsOptions = { requestOptions: {} }): Promise<Widget[]> {\n    return listWidgets(this._client, options);\n  }\n\n  /** Get a widget by ID. */\n  getWidget(id: string, options: GetWidgetOptions = { requestOptions: {} }): Promise<Widget> {\n    return getWidget(this._client, id, options);\n  }\n\n  /**\n   * Create a new widget.\n   *\n   * The widget ID is not required during creation, as it is automatically set by the server. Providing an ID will\n   * result in an error.\n   */\n  createWidget(\n    weight: number,\n    color: ColorType,\n    options: CreateWidgetOptions = { requestOptions: {} },\n  ): Promise<Widget> {\n    return createWidget(this._client, weight, color, options);\n  }\n\n  /**\n   * Update the contents of the widget. The widget ID is required in the input, but cannot be changed. All other fields\n   * are optional and will be updated within the widget if provided.\n   */\n  updateWidget(id: string, options: UpdateWidgetOptions = { requestOptions: {} }): Promise<Widget> {\n    return updateWidget(this._client, id, options);\n  }\n\n  /** Delete a widget by ID. */\n  deleteWidget(id: string, options: DeleteWidgetOptions = { requestOptions: {} }): Promise<void> {\n    return deleteWidget(this._client, id, options);\n  }\n\n  /** Analyze a widget. The only guarantee is that this method will return a string containing the results of the analysis. */\n  analyzeWidget(\n    id: string,\n    options: AnalyzeWidgetOptions = { requestOptions: {} },\n  ): Promise<AnalyzeResult> {\n    return analyzeWidget(this._client, id, options);\n  }\n}\n"]}