{"version":3,"file":"widgetServiceClient.js","sourceRoot":"","sources":["../../../src/rest/widgetServiceClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA6BlC,+BAeC;AAjCD,yDAAiF;AAEjF,gDAAqD;AACrD,4CAAsC;AAetC,SAAwB,YAAY,CAClC,QAAgB,EAChB,mBAAqD,EACrD,UAAyB,EAAE;IAE3B,IAAI,UAAuC,CAAC;IAC5C,IAAI,IAAA,6BAAiB,EAAC,mBAAmB,CAAC,EAAE,CAAC;QAC3C,UAAU,GAAG,mBAAmB,CAAC;IACnC,CAAC;SAAM,CAAC;QACN,OAAO,GAAG,mBAAmB,aAAnB,mBAAmB,cAAnB,mBAAmB,GAAI,EAAE,CAAC;IACtC,CAAC;IAED,MAAM,MAAM,GAAG,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAChD,IAAA,yCAA2B,EAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,UAAU,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC;IAC/F,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,SAAS,aAAa,CAAC,QAAgB,EAAE,UAAyB,EAAE;;IAClE,MAAM,OAAO,GAAG,MAAA,OAAO,CAAC,OAAO,mCAAI,GAAG,QAAQ,EAAE,CAAC;IACjD,OAAO,CAAC,UAAU,GAAG,MAAA,OAAO,CAAC,UAAU,mCAAI,OAAO,CAAC;IACnD,MAAM,aAAa,GAAG,mCAAmC,CAAC;IAC1D,MAAM,eAAe,GACnB,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,gBAAgB,CAAC,eAAe;QAClE,CAAC,CAAC,GAAG,OAAO,CAAC,gBAAgB,CAAC,eAAe,IAAI,aAAa,EAAE;QAChE,CAAC,CAAC,GAAG,aAAa,EAAE,CAAC;IACzB,OAAO,mCACF,OAAO,KACV,gBAAgB,EAAE;YAChB,eAAe;SAChB,EACD,cAAc,EAAE;YACd,MAAM,EAAE,MAAA,MAAA,OAAO,CAAC,cAAc,0CAAE,MAAM,mCAAI,kBAAM,CAAC,IAAI;SACtD,GACF,CAAC;IACF,MAAM,MAAM,GAAG,IAAA,uBAAS,EAAC,OAAO,EAAE,OAAO,CAAyB,CAAC;IACnE,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport type { ClientOptions } from \"@azure-rest/core-client\";\nimport { addCredentialPipelinePolicy, getClient } from \"@azure-rest/core-client\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { logger } from \"../logger.js\";\nimport type { WidgetServiceContext } from \"./clientDefinitions.js\";\n\n/**\n * This customization adds credential support to the client. And overloads for when it is optional\n */\nexport default function createClient(\n  endpoint: string,\n  credential: TokenCredential,\n  options?: ClientOptions,\n): WidgetServiceContext;\nexport default function createClient(\n  endpoint: string,\n  options?: ClientOptions,\n): WidgetServiceContext;\nexport default function createClient(\n  endpoint: string,\n  credentialOrOptions?: TokenCredential | ClientOptions,\n  options: ClientOptions = {},\n): WidgetServiceContext {\n  let credential: TokenCredential | undefined;\n  if (isTokenCredential(credentialOrOptions)) {\n    credential = credentialOrOptions;\n  } else {\n    options = credentialOrOptions ?? {};\n  }\n\n  const client = _createClient(endpoint, options);\n  addCredentialPipelinePolicy(client.pipeline, endpoint, { credential, clientOptions: options });\n  return client;\n}\n\n/**\n * Initialize a new instance of `WidgetServiceContext`\n * @param endpoint - The parameter endpoint\n * @param options - the parameter for all optional parameters\n */\nfunction _createClient(endpoint: string, options: ClientOptions = {}): WidgetServiceContext {\n  const baseUrl = options.baseUrl ?? `${endpoint}`;\n  options.apiVersion = options.apiVersion ?? \"1.0.0\";\n  const userAgentInfo = `azsdk-js-widget-rest/1.0.0-beta.2`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n  };\n  const client = getClient(baseUrl, options) as WidgetServiceContext;\n  return client;\n}\n"]}