{"version":3,"file":"configurationClient.js","sourceRoot":"","sources":["../../src/configurationClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,mDAA6E;AAM7E,kEAA4E;AAG5E,sDAA0D;AAC1D,iDAA6C;AAC7C,2CAAqC;AACrC,uCAAsC;AA2BtC;;GAEG;AACH,MAAa,mBAAmB;IAI9B;;;;;;;;;;;;;;;;OAgBG;IACH,YACE,WAAmB,EACnB,UAA2B,EAC3B,UAAsC,EAAE;QAExC,wEAAwE;QACxE,qCAAqC;QACrC,MAAM,UAAU,GAAG,IAAA,oDAA+B,EAAC;YACjD,UAAU;YACV,MAAM,EAAE,GAAG,WAAW,WAAW;SAClC,CAAC,CAAC;QAEH,MAAM,6BAA6B,iDAC9B,OAAO,KACV,sBAAsB,EAAE;gBACtB,oBAAoB,EAAE;oBACpB,IAAI,EAAE;wBACJ,gDAAgD;wBAChD,6CAA6C;wBAC7C,8CAA8C;wBAC9C,iDAAiD;wBACjD,+CAA+C;qBAChD;iBACF;aACF,KACE;YACD,cAAc,EAAE;gBACd,MAAM,EAAE,kBAAM,CAAC,IAAI;gBACnB,uEAAuE;gBACvE,uEAAuE;gBACvE,4BAA4B,EAAE,CAAC,6BAA6B,CAAC;aAC9D;SACF,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,GAAG,IAAI,0BAAe,CAAC,WAAW,EAAE,6BAA6B,CAAC,CAAC;QAC9E,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,IAAA,kCAAmB,EAAC;YACvC,+EAA+E;YAC/E,wGAAwG;YACxG,SAAS,EAAE,iBAAiB;YAC5B,+BAA+B;YAC/B,WAAW,EAAE,iBAAiB;YAC9B,cAAc,EAAE,0BAAW;SAC5B,CAAC,CAAC;IACL,CAAC;IAyBM,KAAK,CAAC,uBAAuB,CAClC,YAA2C,EAC3C,UAA0C,EAAE;QAE5C,IAAI,GAAW,CAAC;QAChB,IAAI,WAA+B,CAAC;QAEpC,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ;QAChC,8DAA8D;QAC9D,6CAA6C,EAC7C,OAAO,EACP,CAAC,cAAc,EAAE,EAAE;YACjB,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,CAAC;gBACrC,GAAG,GAAG,YAAY,CAAC;gBACnB,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC;oBAC1B,MAAM,IAAI,UAAU,CAClB,uFAAuF,CACxF,CAAC;gBACJ,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,GAAG,GAAG,YAAY,CAAC,GAAI,CAAC;gBACxB,MAAM,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;gBAC/B,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC;oBAC1B,WAAW,GAAG,IAAA,mBAAS,EAAC,IAAI,CAAC,CAAC;gBAChC,CAAC;YACH,CAAC;YAED,0EAA0E;YAC1E,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,kCAAO,cAAc,KAAE,WAAW,IAAG,CAAC;QAC1E,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AA3HD,kDA2HC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { GeneratedClient, ConfigurationSetting } from \"./generated/index.js\";\nimport type {\n  CommonClientOptions,\n  OperationOptions,\n  InternalClientPipelineOptions,\n} from \"@azure/core-client\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { TracingClient } from \"@azure/core-tracing\";\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"./constants.js\";\nimport { logger } from \"./logger.js\";\nimport { quoteETag } from \"./util.js\";\n\n// re-export generated types that are used as public interfaces.\nexport { ConfigurationSetting };\n\n/**\n * Options for the `getConfigurationSetting` method of `ConfigurationClient`.\n */\nexport interface GetConfigurationSettingOptions extends OperationOptions {\n  /**\n   * If set to `true`, the method will use entity tags to instruct the service\n   * to send an updated value only if the value has changed.\n   *\n   * NOTE: This option is only supported if passing a full\n   * `ConfigurationSetting` object with an `etag` as the first parameter to\n   * `getConfigurationSetting`.\n   */\n  onlyIfChanged?: boolean;\n}\n\n/**\n * Client options used to configure App Configuration API requests.\n */\nexport interface ConfigurationClientOptions extends CommonClientOptions {\n  // Any custom options configured at the client level go here.\n}\n\n/**\n * The client class used to interact with the App Configuration service.\n */\nexport class ConfigurationClient {\n  private client: GeneratedClient;\n  private tracingClient: TracingClient;\n\n  /**\n   * Creates an instance of a ConfigurationClient.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleCreateClient\n   * import { ConfigurationClient } from \"@azure/template\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const client = new ConfigurationClient(\n   *   process.env.ENDPOINT ?? \"<app configuration endpoint>\",\n   *   new DefaultAzureCredential(),\n   * );\n   * ```\n   * @param endpointUrl - the URL to the App Configuration endpoint\n   * @param credential - used to authenticate requests to the service\n   * @param options - optional configuration used to send requests to the service\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential,\n    options: ConfigurationClientOptions = {},\n  ) {\n    // The AAD scope for an API is usually the baseUri + \"/.default\", but it\n    // may be different for your service.\n    const authPolicy = bearerTokenAuthenticationPolicy({\n      credential,\n      scopes: `${endpointUrl}/.default`,\n    });\n\n    const internalClientPipelineOptions: InternalClientPipelineOptions = {\n      ...options,\n      deserializationOptions: {\n        expectedContentTypes: {\n          json: [\n            \"application/vnd.microsoft.appconfig.kvset+json\",\n            \"application/vnd.microsoft.appconfig.kv+json\",\n            \"application/vnd.microsoft.appconfig.kvs+json\",\n            \"application/vnd.microsoft.appconfig.keyset+json\",\n            \"application/vnd.microsoft.appconfig.revs+json\",\n          ],\n        },\n      },\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          // This array contains header names we want to log that are not already\n          // included as safe. Unknown/unsafe headers are logged as \"<REDACTED>\".\n          additionalAllowedHeaderNames: [\"x-ms-correlation-request-id\"],\n        },\n      },\n    };\n\n    this.client = new GeneratedClient(endpointUrl, internalClientPipelineOptions);\n    this.client.pipeline.addPolicy(authPolicy);\n    this.tracingClient = createTracingClient({\n      // The name of the resource provider requests are made against, as described in\n      // https://github.com/Azure/azure-sdk/blob/main/docs/tracing/distributed-tracing-conventions.yml#L11-L15\n      namespace: \"Microsoft.Learn\",\n      // The package name and version\n      packageName: \"@azure/template\",\n      packageVersion: SDK_VERSION,\n    });\n  }\n\n  /**\n   * Retrieve the contents of an App Configuration setting by name (key).\n   *\n   * @param key - the unique name of the setting to get\n   * @param options - optional configuration for the operation\n   */\n  public async getConfigurationSetting(\n    key: string,\n    options?: GetConfigurationSettingOptions,\n  ): Promise<ConfigurationSetting>;\n\n  /**\n   * Retrieve an updated value of an App Configuration setting, allowing for\n   * the use of entity tags to request the new value only if it has changed.\n   *\n   * @param setting - the setting to retrieve from the service\n   * @param options - optional configuration for the operation\n   */\n  public async getConfigurationSetting(\n    setting: ConfigurationSetting,\n    options?: GetConfigurationSettingOptions,\n  ): Promise<ConfigurationSetting>;\n\n  public async getConfigurationSetting(\n    keyOrSetting: string | ConfigurationSetting,\n    options: GetConfigurationSettingOptions = {},\n  ): Promise<ConfigurationSetting> {\n    let key: string;\n    let ifNoneMatch: string | undefined;\n\n    return this.tracingClient.withSpan(\n      // Span names should take the form \"<className>.<methodName>\".\n      \"ConfigurationClient.getConfigurationSetting\",\n      options,\n      (updatedOptions) => {\n        if (typeof keyOrSetting === \"string\") {\n          key = keyOrSetting;\n          if (options.onlyIfChanged) {\n            throw new RangeError(\n              \"You must pass a ConfigurationSetting instead of a key to perform a conditional fetch.\",\n            );\n          }\n        } else {\n          key = keyOrSetting.key!;\n          const etag = keyOrSetting.etag;\n          if (options.onlyIfChanged) {\n            ifNoneMatch = quoteETag(etag);\n          }\n        }\n\n        // You must pass updatedOptions to any calls you make within the callback.\n        return this.client.getKeyValue(key, { ...updatedOptions, ifNoneMatch });\n      },\n    );\n  }\n}\n"]}