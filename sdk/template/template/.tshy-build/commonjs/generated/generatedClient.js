"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratedClient = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const core_lro_1 = require("@azure/core-lro");
const lroImpl_js_1 = require("./lroImpl.js");
const Parameters = tslib_1.__importStar(require("./models/parameters.js"));
const Mappers = tslib_1.__importStar(require("./models/mappers.js"));
const generatedClientContext_js_1 = require("./generatedClientContext.js");
/** @internal */
class GeneratedClient extends generatedClientContext_js_1.GeneratedClientContext {
    /**
     * Initializes a new instance of the GeneratedClient class.
     * @param endpoint The endpoint of the App Configuration instance to send requests to.
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        super(endpoint, options);
    }
    /**
     * Gets a list of keys.
     * @param options The options parameters.
     */
    getKeys(options) {
        return this.sendOperationRequest({ options }, getKeysOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param options The options parameters.
     */
    checkKeys(options) {
        return this.sendOperationRequest({ options }, checkKeysOperationSpec);
    }
    /**
     * Gets a list of key-values.
     * @param options The options parameters.
     */
    getKeyValues(options) {
        return this.sendOperationRequest({ options }, getKeyValuesOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param options The options parameters.
     */
    checkKeyValues(options) {
        return this.sendOperationRequest({ options }, checkKeyValuesOperationSpec);
    }
    /**
     * Gets a single key-value.
     * @param key The key of the key-value to retrieve.
     * @param options The options parameters.
     */
    getKeyValue(key, options) {
        return this.sendOperationRequest({ key, options }, getKeyValueOperationSpec);
    }
    /**
     * Creates a key-value.
     * @param key The key of the key-value to create.
     * @param options The options parameters.
     */
    putKeyValue(key, options) {
        return this.sendOperationRequest({ key, options }, putKeyValueOperationSpec);
    }
    /**
     * Deletes a key-value.
     * @param key The key of the key-value to delete.
     * @param options The options parameters.
     */
    deleteKeyValue(key, options) {
        return this.sendOperationRequest({ key, options }, deleteKeyValueOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param key The key of the key-value to retrieve.
     * @param options The options parameters.
     */
    checkKeyValue(key, options) {
        return this.sendOperationRequest({ key, options }, checkKeyValueOperationSpec);
    }
    /**
     * Gets a list of key-value snapshots.
     * @param options The options parameters.
     */
    getSnapshots(options) {
        return this.sendOperationRequest({ options }, getSnapshotsOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param options The options parameters.
     */
    checkSnapshots(options) {
        return this.sendOperationRequest({ options }, checkSnapshotsOperationSpec);
    }
    /**
     * Gets a single key-value snapshot.
     * @param name The name of the key-value snapshot to retrieve.
     * @param options The options parameters.
     */
    getSnapshot(name, options) {
        return this.sendOperationRequest({ name, options }, getSnapshotOperationSpec);
    }
    /**
     * Creates a key-value snapshot.
     * @param name The name of the key-value snapshot to create.
     * @param entity The key-value snapshot to create.
     * @param options The options parameters.
     */
    async beginCreateSnapshot(name, entity, options) {
        const directSendOperation = async (args, spec) => {
            return this.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new lroImpl_js_1.LroImpl(sendOperation, { name, entity, options }, createSnapshotOperationSpec);
        return new core_lro_1.LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
    }
    /**
     * Creates a key-value snapshot.
     * @param name The name of the key-value snapshot to create.
     * @param entity The key-value snapshot to create.
     * @param options The options parameters.
     */
    async beginCreateSnapshotAndWait(name, entity, options) {
        const poller = await this.beginCreateSnapshot(name, entity, options);
        return poller.pollUntilDone();
    }
    /**
     * Updates the state of a key-value snapshot.
     * @param name The name of the key-value snapshot to update.
     * @param entity The parameters used to update the snapshot.
     * @param options The options parameters.
     */
    updateSnapshot(name, entity, options) {
        return this.sendOperationRequest({ name, entity, options }, updateSnapshotOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param name The name of the key-value snapshot to check.
     * @param options The options parameters.
     */
    checkSnapshot(name, options) {
        return this.sendOperationRequest({ name, options }, checkSnapshotOperationSpec);
    }
    /**
     * Gets a list of labels.
     * @param options The options parameters.
     */
    getLabels(options) {
        return this.sendOperationRequest({ options }, getLabelsOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param options The options parameters.
     */
    checkLabels(options) {
        return this.sendOperationRequest({ options }, checkLabelsOperationSpec);
    }
    /**
     * Locks a key-value.
     * @param key The key of the key-value to lock.
     * @param options The options parameters.
     */
    putLock(key, options) {
        return this.sendOperationRequest({ key, options }, putLockOperationSpec);
    }
    /**
     * Unlocks a key-value.
     * @param key The key of the key-value to unlock.
     * @param options The options parameters.
     */
    deleteLock(key, options) {
        return this.sendOperationRequest({ key, options }, deleteLockOperationSpec);
    }
    /**
     * Gets a list of key-value revisions.
     * @param options The options parameters.
     */
    getRevisions(options) {
        return this.sendOperationRequest({ options }, getRevisionsOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param options The options parameters.
     */
    checkRevisions(options) {
        return this.sendOperationRequest({ options }, checkRevisionsOperationSpec);
    }
    /**
     * Gets the state of a long running operation.
     * @param snapshot Snapshot identifier for the long running operation.
     * @param options The options parameters.
     */
    getOperationDetails(snapshot, options) {
        return this.sendOperationRequest({ snapshot, options }, getOperationDetailsOperationSpec);
    }
    /**
     * GetKeysNext
     * @param nextLink The nextLink from the previous successful call to the GetKeys method.
     * @param options The options parameters.
     */
    getKeysNext(nextLink, options) {
        return this.sendOperationRequest({ nextLink, options }, getKeysNextOperationSpec);
    }
    /**
     * GetKeyValuesNext
     * @param nextLink The nextLink from the previous successful call to the GetKeyValues method.
     * @param options The options parameters.
     */
    getKeyValuesNext(nextLink, options) {
        return this.sendOperationRequest({ nextLink, options }, getKeyValuesNextOperationSpec);
    }
    /**
     * GetSnapshotsNext
     * @param nextLink The nextLink from the previous successful call to the GetSnapshots method.
     * @param options The options parameters.
     */
    getSnapshotsNext(nextLink, options) {
        return this.sendOperationRequest({ nextLink, options }, getSnapshotsNextOperationSpec);
    }
    /**
     * GetLabelsNext
     * @param nextLink The nextLink from the previous successful call to the GetLabels method.
     * @param options The options parameters.
     */
    getLabelsNext(nextLink, options) {
        return this.sendOperationRequest({ nextLink, options }, getLabelsNextOperationSpec);
    }
    /**
     * GetRevisionsNext
     * @param nextLink The nextLink from the previous successful call to the GetRevisions method.
     * @param options The options parameters.
     */
    getRevisionsNext(nextLink, options) {
        return this.sendOperationRequest({ nextLink, options }, getRevisionsNextOperationSpec);
    }
}
exports.GeneratedClient = GeneratedClient;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getKeysOperationSpec = {
    path: "/keys",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyListResult,
            headersMapper: Mappers.GeneratedClientGetKeysHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.accept,
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    serializer
};
const checkKeysOperationSpec = {
    path: "/keys",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.GeneratedClientCheckKeysHeaders
        },
        default: {}
    },
    queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
    serializer
};
const getKeyValuesOperationSpec = {
    path: "/kv",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValueListResult,
            headersMapper: Mappers.GeneratedClientGetKeyValuesHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select,
        Parameters.snapshot
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept1,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    serializer
};
const checkKeyValuesOperationSpec = {
    path: "/kv",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.GeneratedClientCheckKeyValuesHeaders
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select,
        Parameters.snapshot
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    serializer
};
const getKeyValueOperationSpec = {
    path: "/kv/{key}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationSetting,
            headersMapper: Mappers.GeneratedClientGetKeyValueHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.label, Parameters.select],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.accept2
    ],
    serializer
};
const putKeyValueOperationSpec = {
    path: "/kv/{key}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationSetting,
            headersMapper: Mappers.GeneratedClientPutKeyValueHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.entity,
    queryParameters: [Parameters.apiVersion, Parameters.label],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.accept2,
        Parameters.contentType
    ],
    mediaType: "json",
    serializer
};
const deleteKeyValueOperationSpec = {
    path: "/kv/{key}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationSetting,
            headersMapper: Mappers.GeneratedClientDeleteKeyValueHeaders
        },
        204: {
            headersMapper: Mappers.GeneratedClientDeleteKeyValueHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.label],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch,
        Parameters.accept2
    ],
    serializer
};
const checkKeyValueOperationSpec = {
    path: "/kv/{key}",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.GeneratedClientCheckKeyValueHeaders
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.label, Parameters.select],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    serializer
};
const getSnapshotsOperationSpec = {
    path: "/snapshots",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SnapshotListResult,
            headersMapper: Mappers.GeneratedClientGetSnapshotsHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select1,
        Parameters.status
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.syncToken, Parameters.accept3],
    serializer
};
const checkSnapshotsOperationSpec = {
    path: "/snapshots",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.GeneratedClientCheckSnapshotsHeaders
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.after],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.syncToken],
    serializer
};
const getSnapshotOperationSpec = {
    path: "/snapshots/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Snapshot,
            headersMapper: Mappers.GeneratedClientGetSnapshotHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.select1],
    urlParameters: [Parameters.endpoint, Parameters.name1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.accept4
    ],
    serializer
};
const createSnapshotOperationSpec = {
    path: "/snapshots/{name}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Snapshot,
            headersMapper: Mappers.GeneratedClientCreateSnapshotHeaders
        },
        201: {
            bodyMapper: Mappers.Snapshot,
            headersMapper: Mappers.GeneratedClientCreateSnapshotHeaders
        },
        202: {
            bodyMapper: Mappers.Snapshot,
            headersMapper: Mappers.GeneratedClientCreateSnapshotHeaders
        },
        204: {
            bodyMapper: Mappers.Snapshot,
            headersMapper: Mappers.GeneratedClientCreateSnapshotHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.entity1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.name2],
    headerParameters: [
        Parameters.syncToken,
        Parameters.accept4,
        Parameters.contentType1
    ],
    mediaType: "json",
    serializer
};
const updateSnapshotOperationSpec = {
    path: "/snapshots/{name}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.Snapshot,
            headersMapper: Mappers.GeneratedClientUpdateSnapshotHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.entity2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.name1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.accept4,
        Parameters.contentType2
    ],
    mediaType: "json",
    serializer
};
const checkSnapshotOperationSpec = {
    path: "/snapshots/{name}",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.GeneratedClientCheckSnapshotHeaders
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.name1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    serializer
};
const getLabelsOperationSpec = {
    path: "/labels",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LabelListResult,
            headersMapper: Mappers.GeneratedClientGetLabelsHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select2
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept5
    ],
    serializer
};
const checkLabelsOperationSpec = {
    path: "/labels",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.GeneratedClientCheckLabelsHeaders
        },
        default: {}
    },
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select2
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
    serializer
};
const putLockOperationSpec = {
    path: "/locks/{key}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationSetting,
            headersMapper: Mappers.GeneratedClientPutLockHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.label],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.accept2
    ],
    serializer
};
const deleteLockOperationSpec = {
    path: "/locks/{key}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationSetting,
            headersMapper: Mappers.GeneratedClientDeleteLockHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.label],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.accept2
    ],
    serializer
};
const getRevisionsOperationSpec = {
    path: "/revisions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValueListResult,
            headersMapper: Mappers.GeneratedClientGetRevisionsHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept1
    ],
    serializer
};
const checkRevisionsOperationSpec = {
    path: "/revisions",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.GeneratedClientCheckRevisionsHeaders
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
    serializer
};
const getOperationDetailsOperationSpec = {
    path: "/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OperationDetails
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.snapshot1],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept6],
    serializer
};
const getKeysNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyListResult,
            headersMapper: Mappers.GeneratedClientGetKeysNextHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [
        Parameters.accept,
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    serializer
};
const getKeyValuesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValueListResult,
            headersMapper: Mappers.GeneratedClientGetKeyValuesNextHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select,
        Parameters.snapshot
    ],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept1,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    serializer
};
const getSnapshotsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SnapshotListResult,
            headersMapper: Mappers.GeneratedClientGetSnapshotsNextHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select1,
        Parameters.status
    ],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.syncToken, Parameters.accept3],
    serializer
};
const getLabelsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LabelListResult,
            headersMapper: Mappers.GeneratedClientGetLabelsNextHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select2
    ],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept5
    ],
    serializer
};
const getRevisionsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValueListResult,
            headersMapper: Mappers.GeneratedClientGetRevisionsNextHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select
    ],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept1
    ],
    serializer
};
//# sourceMappingURL=generatedClient.js.map