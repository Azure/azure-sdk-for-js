/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DocumentProcessor } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Syntex } from "../syntex";
import {
  DocumentProcessorResource,
  DocumentProcessorListNextOptionalParams,
  DocumentProcessorListOptionalParams,
  DocumentProcessorListByResourceGroupNextOptionalParams,
  DocumentProcessorListByResourceGroupOptionalParams,
  DocumentProcessorListResponse,
  DocumentProcessorListByResourceGroupResponse,
  DocumentProcessorGetOptionalParams,
  DocumentProcessorGetResponse,
  DocumentProcessorDeleteOptionalParams,
  DocumentProcessorCreateOptionalParams,
  DocumentProcessorCreateResponse,
  DocumentProcessorPatchableProperties,
  DocumentProcessorUpdateOptionalParams,
  DocumentProcessorUpdateResponse,
  DocumentProcessorListNextResponse,
  DocumentProcessorListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DocumentProcessor operations. */
export class DocumentProcessorImpl implements DocumentProcessor {
  private readonly client: Syntex;

  /**
   * Initialize a new instance of the class DocumentProcessor class.
   * @param client Reference to the service client
   */
  constructor(client: Syntex) {
    this.client = client;
  }

  /**
   * Returns document processors in the subscription.
   * @param options The options parameters.
   */
  public list(
    options?: DocumentProcessorListOptionalParams
  ): PagedAsyncIterableIterator<DocumentProcessorResource> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: DocumentProcessorListOptionalParams
  ): AsyncIterableIterator<DocumentProcessorResource[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: DocumentProcessorListOptionalParams
  ): AsyncIterableIterator<DocumentProcessorResource> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns document processors in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: DocumentProcessorListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<DocumentProcessorResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: DocumentProcessorListByResourceGroupOptionalParams
  ): AsyncIterableIterator<DocumentProcessorResource[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: DocumentProcessorListByResourceGroupOptionalParams
  ): AsyncIterableIterator<DocumentProcessorResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns document processors in the subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: DocumentProcessorListOptionalParams
  ): Promise<DocumentProcessorListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Returns document processors in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: DocumentProcessorListByResourceGroupOptionalParams
  ): Promise<DocumentProcessorListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Returns a document processor for a given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param processorName The name of document processor resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    processorName: string,
    options?: DocumentProcessorGetOptionalParams
  ): Promise<DocumentProcessorGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, processorName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes document processor resource for a given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param processorName The name of document processor resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    processorName: string,
    options?: DocumentProcessorDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, processorName, options },
      deleteOperationSpec
    );
  }

  /**
   * Creates a document processor resource for a given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param processorName The name of document processor resource.
   * @param body Document processor details.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    processorName: string,
    body: DocumentProcessorResource,
    options?: DocumentProcessorCreateOptionalParams
  ): Promise<DocumentProcessorCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, processorName, body, options },
      createOperationSpec
    );
  }

  /**
   * Updates a document processor resource for a given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param processorName The name of document processor resource.
   * @param body Document processor details.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    processorName: string,
    body: DocumentProcessorPatchableProperties,
    options?: DocumentProcessorUpdateOptionalParams
  ): Promise<DocumentProcessorUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, processorName, body, options },
      updateOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: DocumentProcessorListNextOptionalParams
  ): Promise<DocumentProcessorListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DocumentProcessorListByResourceGroupNextOptionalParams
  ): Promise<DocumentProcessorListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Syntex/documentProcessors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DocumentProcessorList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Syntex/documentProcessors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DocumentProcessorList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Syntex/documentProcessors/{processorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DocumentProcessorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.processorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Syntex/documentProcessors/{processorName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.processorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Syntex/documentProcessors/{processorName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DocumentProcessorResource
    },
    201: {
      bodyMapper: Mappers.DocumentProcessorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.processorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Syntex/documentProcessors/{processorName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DocumentProcessorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.processorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DocumentProcessorList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DocumentProcessorList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
