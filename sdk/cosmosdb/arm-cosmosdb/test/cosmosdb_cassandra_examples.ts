/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { CosmosDBManagementClient } from "../src/cosmosDBManagementClient";
import { ClientSecretCredential } from "@azure/identity";


const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

describe("My test", () => {
  let recorder: Recorder;
  let client: CosmosDBManagementClient;
  let subscriptionId: string;
  let location: string;
  let resourceGroupName: string;
  let accountName: string;
  let keyspaceName: string;

  beforeEach(async function() {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID;
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID,
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = new CosmosDBManagementClient(credential, subscriptionId);
    location = "eastus";
    resourceGroupName = "myjstest";
    accountName = "myaccountxxx1";
    keyspaceName = "mykeyspacexxx";
  });

  afterEach(async function() {
    await recorder.stop();
  });

  it("databaseAccounts create for cassandraResources test", async function() {
    const res = await client.databaseAccounts.beginCreateOrUpdateAndWait(resourceGroupName,accountName,{
      kind: "GlobalDocumentDB",
      databaseAccountOfferType: "Standard",
      locations: [
          {
              failoverPriority: 0,
              locationName: "eastus",
              isZoneRedundant: false
          }
      ],
      location: location,
      capabilities: [
          {
              name: "EnableCassandra"
          }
      ],
      apiProperties: {},
      createMode: "Default"
  });
    console.log(res);
  });

  it("cassandraResources create test", async function() {
    const res = await client.cassandraResources.beginCreateUpdateCassandraKeyspaceAndWait(resourceGroupName,accountName,keyspaceName,{
      location: location,
        resource: {
            id: keyspaceName
        },
        options: {
            throughput: 2000
        }
    });
    console.log(res);
  });

  it("cassandraResources update test", async function() {
    const res = await client.cassandraResources.beginUpdateCassandraKeyspaceThroughputAndWait(resourceGroupName,accountName,keyspaceName,{
      location: location,
        resource: {
            throughput: 400
        }
    });
    console.log(res);
  });

  it("cassandraResources get test", async function() {
    const res = await client.cassandraResources.getCassandraKeyspaceThroughput(resourceGroupName,accountName,keyspaceName);
    console.log(res);
  });

  it("cassandraResources list test", async function() {
    for await (let item of client.cassandraResources.listCassandraKeyspaces(resourceGroupName,accountName)){
        console.log(item);
    }
  });

  it("cassandraResources MigrateCassandra test", async function() {
    const res = await client.cassandraResources.beginMigrateCassandraKeyspaceToAutoscaleAndWait(resourceGroupName,accountName,keyspaceName);
    console.log(res);
  });

  it("cassandraResources delete test", async function() {
    const res = await client.cassandraResources.beginDeleteCassandraKeyspaceAndWait(resourceGroupName,accountName,keyspaceName);
    console.log(res);
  });

  it("databaseAccounts delete for cassandraResources test", async function() {
    const res = await client.databaseAccounts.beginDeleteAndWait(resourceGroupName,accountName);
    console.log(res);
  });
});
