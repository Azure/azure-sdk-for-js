/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/databaseAccountsMappers";
import * as Parameters from "../models/parameters";
import { CosmosDBManagementClientContext } from "../cosmosDBManagementClientContext";

/** Class representing a DatabaseAccounts. */
export class DatabaseAccounts {
  private readonly client: CosmosDBManagementClientContext;

  /**
   * Create a DatabaseAccounts.
   * @param {CosmosDBManagementClientContext} client Reference to the service client.
   */
  constructor(client: CosmosDBManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the properties of an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.DatabaseAccount>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatabaseAccount>): void;
  get(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatabaseAccount>, callback?: msRest.ServiceCallback<Models.DatabaseAccount>): Promise<Models.DatabaseAccountsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetResponse>;
  }

  /**
   * Patches the properties of an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param updateParameters The tags parameter to patch for the current database account.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsPatchResponse>
   */
  patch(resourceGroupName: string, accountName: string, updateParameters: Models.DatabaseAccountPatchParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsPatchResponse> {
    return this.beginPatch(resourceGroupName,accountName,updateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsPatchResponse>;
  }

  /**
   * Creates or updates an Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateParameters The parameters to provide for the current database account.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, accountName: string, createUpdateParameters: Models.DatabaseAccountCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,accountName,createUpdateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,accountName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0
   * indicates a write region. The maximum value for a failover priority = (total number of regions -
   * 1). Failover priority values must be unique for each of the regions in which the database
   * account exists.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param failoverParameters The new failover policies for the database account.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  failoverPriorityChange(resourceGroupName: string, accountName: string, failoverParameters: Models.FailoverPolicies, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginFailoverPriorityChange(resourceGroupName,accountName,failoverParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists all the Azure Cosmos DB database accounts available under the subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.DatabaseAccountsListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatabaseAccountsListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatabaseAccountsListResult>, callback?: msRest.ServiceCallback<Models.DatabaseAccountsListResult>): Promise<Models.DatabaseAccountsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListResponse>;
  }

  /**
   * Lists all the Azure Cosmos DB database accounts available under the given resource group.
   * @param resourceGroupName Name of an Azure resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DatabaseAccountsListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatabaseAccountsListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatabaseAccountsListResult>, callback?: msRest.ServiceCallback<Models.DatabaseAccountsListResult>): Promise<Models.DatabaseAccountsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListByResourceGroupResponse>;
  }

  /**
   * Lists the access keys for the specified Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListKeysResponse>
   */
  listKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListKeysResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.DatabaseAccountListKeysResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatabaseAccountListKeysResult>): void;
  listKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatabaseAccountListKeysResult>, callback?: msRest.ServiceCallback<Models.DatabaseAccountListKeysResult>): Promise<Models.DatabaseAccountsListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListKeysResponse>;
  }

  /**
   * Lists the connection strings for the specified Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListConnectionStringsResponse>
   */
  listConnectionStrings(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListConnectionStringsResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listConnectionStrings(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.DatabaseAccountListConnectionStringsResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnectionStrings(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatabaseAccountListConnectionStringsResult>): void;
  listConnectionStrings(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatabaseAccountListConnectionStringsResult>, callback?: msRest.ServiceCallback<Models.DatabaseAccountListConnectionStringsResult>): Promise<Models.DatabaseAccountsListConnectionStringsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listConnectionStringsOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListConnectionStringsResponse>;
  }

  /**
   * Offline the specified region for the specified Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param regionParameterForOffline Cosmos DB region to offline for the database account.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  offlineRegion(resourceGroupName: string, accountName: string, regionParameterForOffline: Models.RegionForOnlineOffline, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginOfflineRegion(resourceGroupName,accountName,regionParameterForOffline,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Online the specified region for the specified Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param regionParameterForOnline Cosmos DB region to online for the database account.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  onlineRegion(resourceGroupName: string, accountName: string, regionParameterForOnline: Models.RegionForOnlineOffline, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginOnlineRegion(resourceGroupName,accountName,regionParameterForOnline,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the read-only access keys for the specified Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetReadOnlyKeysResponse>
   */
  getReadOnlyKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetReadOnlyKeysResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  getReadOnlyKeys(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.DatabaseAccountListReadOnlyKeysResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getReadOnlyKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatabaseAccountListReadOnlyKeysResult>): void;
  getReadOnlyKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatabaseAccountListReadOnlyKeysResult>, callback?: msRest.ServiceCallback<Models.DatabaseAccountListReadOnlyKeysResult>): Promise<Models.DatabaseAccountsGetReadOnlyKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      getReadOnlyKeysOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetReadOnlyKeysResponse>;
  }

  /**
   * Lists the read-only access keys for the specified Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListReadOnlyKeysResponse>
   */
  listReadOnlyKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListReadOnlyKeysResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listReadOnlyKeys(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.DatabaseAccountListReadOnlyKeysResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listReadOnlyKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatabaseAccountListReadOnlyKeysResult>): void;
  listReadOnlyKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatabaseAccountListReadOnlyKeysResult>, callback?: msRest.ServiceCallback<Models.DatabaseAccountListReadOnlyKeysResult>): Promise<Models.DatabaseAccountsListReadOnlyKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listReadOnlyKeysOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListReadOnlyKeysResponse>;
  }

  /**
   * Regenerates an access key for the specified Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyToRegenerate The name of the key to regenerate.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  regenerateKey(resourceGroupName: string, accountName: string, keyToRegenerate: Models.DatabaseAccountRegenerateKeyParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRegenerateKey(resourceGroupName,accountName,keyToRegenerate,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain
   * only lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCheckNameExistsResponse>
   */
  checkNameExists(accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCheckNameExistsResponse>;
  /**
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  checkNameExists(accountName: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameExists(accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  checkNameExists(accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.DatabaseAccountsCheckNameExistsResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        options
      },
      checkNameExistsOperationSpec,
      callback) as Promise<Models.DatabaseAccountsCheckNameExistsResponse>;
  }

  /**
   * Retrieves the metrics determined by the given filter for the given database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param filter An OData filter expression that describes a subset of metrics to return. The
   * parameters that can be filtered are name.value (name of the metric, can have an or of multiple
   * names), startTime, endTime, and timeGrain. The supported operator is eq.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListMetricsResponse>
   */
  listMetrics(resourceGroupName: string, accountName: string, filter: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListMetricsResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param filter An OData filter expression that describes a subset of metrics to return. The
   * parameters that can be filtered are name.value (name of the metric, can have an or of multiple
   * names), startTime, endTime, and timeGrain. The supported operator is eq.
   * @param callback The callback
   */
  listMetrics(resourceGroupName: string, accountName: string, filter: string, callback: msRest.ServiceCallback<Models.MetricListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param filter An OData filter expression that describes a subset of metrics to return. The
   * parameters that can be filtered are name.value (name of the metric, can have an or of multiple
   * names), startTime, endTime, and timeGrain. The supported operator is eq.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMetrics(resourceGroupName: string, accountName: string, filter: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricListResult>): void;
  listMetrics(resourceGroupName: string, accountName: string, filter: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricListResult>, callback?: msRest.ServiceCallback<Models.MetricListResult>): Promise<Models.DatabaseAccountsListMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        filter,
        options
      },
      listMetricsOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListMetricsResponse>;
  }

  /**
   * Retrieves the usages (most recent data) for the given database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListUsagesResponse>
   */
  listUsages(resourceGroupName: string, accountName: string, options?: Models.DatabaseAccountsListUsagesOptionalParams): Promise<Models.DatabaseAccountsListUsagesResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listUsages(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.UsagesResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsages(resourceGroupName: string, accountName: string, options: Models.DatabaseAccountsListUsagesOptionalParams, callback: msRest.ServiceCallback<Models.UsagesResult>): void;
  listUsages(resourceGroupName: string, accountName: string, options?: Models.DatabaseAccountsListUsagesOptionalParams | msRest.ServiceCallback<Models.UsagesResult>, callback?: msRest.ServiceCallback<Models.UsagesResult>): Promise<Models.DatabaseAccountsListUsagesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listUsagesOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListUsagesResponse>;
  }

  /**
   * Retrieves metric definitions for the given database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListMetricDefinitionsResponse>
   */
  listMetricDefinitions(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListMetricDefinitionsResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listMetricDefinitions(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.MetricDefinitionsListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMetricDefinitions(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionsListResult>): void;
  listMetricDefinitions(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionsListResult>, callback?: msRest.ServiceCallback<Models.MetricDefinitionsListResult>): Promise<Models.DatabaseAccountsListMetricDefinitionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listMetricDefinitionsOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListMetricDefinitionsResponse>;
  }

  /**
   * Lists the SQL databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListSqlDatabasesResponse>
   */
  listSqlDatabases(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListSqlDatabasesResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listSqlDatabases(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.SqlDatabaseListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSqlDatabases(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlDatabaseListResult>): void;
  listSqlDatabases(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlDatabaseListResult>, callback?: msRest.ServiceCallback<Models.SqlDatabaseListResult>): Promise<Models.DatabaseAccountsListSqlDatabasesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listSqlDatabasesOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListSqlDatabasesResponse>;
  }

  /**
   * Gets the SQL databases under an existing Azure Cosmos DB database account with the provided id.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetSqlDatabaseResponse>
   */
  getSqlDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetSqlDatabaseResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param callback The callback
   */
  getSqlDatabase(resourceGroupName: string, accountName: string, databaseRid: string, callback: msRest.ServiceCallback<Models.SqlDatabase>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlDatabase>): void;
  getSqlDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlDatabase>, callback?: msRest.ServiceCallback<Models.SqlDatabase>): Promise<Models.DatabaseAccountsGetSqlDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        options
      },
      getSqlDatabaseOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetSqlDatabaseResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL database
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCreateUpdateSqlDatabaseResponse>
   */
  createUpdateSqlDatabase(resourceGroupName: string, accountName: string, databaseRid: string, createUpdateSqlDatabaseParameters: Models.SqlDatabaseCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCreateUpdateSqlDatabaseResponse> {
    return this.beginCreateUpdateSqlDatabase(resourceGroupName,accountName,databaseRid,createUpdateSqlDatabaseParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsCreateUpdateSqlDatabaseResponse>;
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL database.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSqlDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteSqlDatabase(resourceGroupName,accountName,databaseRid,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListSqlContainersResponse>
   */
  listSqlContainers(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListSqlContainersResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param callback The callback
   */
  listSqlContainers(resourceGroupName: string, accountName: string, databaseRid: string, callback: msRest.ServiceCallback<Models.ContainerListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSqlContainers(resourceGroupName: string, accountName: string, databaseRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContainerListResult>): void;
  listSqlContainers(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContainerListResult>, callback?: msRest.ServiceCallback<Models.ContainerListResult>): Promise<Models.DatabaseAccountsListSqlContainersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        options
      },
      listSqlContainersOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListSqlContainersResponse>;
  }

  /**
   * Gets the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetSqlContainerResponse>
   */
  getSqlContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetSqlContainerResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param callback The callback
   */
  getSqlContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, callback: msRest.ServiceCallback<Models.Container>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Container>): void;
  getSqlContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Container>, callback?: msRest.ServiceCallback<Models.Container>): Promise<Models.DatabaseAccountsGetSqlContainerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        containerRid,
        options
      },
      getSqlContainerOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetSqlContainerResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL container
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL
   * container.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCreateUpdateSqlContainerResponse>
   */
  createUpdateSqlContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, createUpdateSqlContainerParameters: Models.ContainerCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCreateUpdateSqlContainerResponse> {
    return this.beginCreateUpdateSqlContainer(resourceGroupName,accountName,databaseRid,containerRid,createUpdateSqlContainerParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsCreateUpdateSqlContainerResponse>;
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL container.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSqlContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteSqlContainer(resourceGroupName,accountName,databaseRid,containerRid,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the Mongo databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListMongoDatabasesResponse>
   */
  listMongoDatabases(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListMongoDatabasesResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listMongoDatabases(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.MongoDatabaseListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMongoDatabases(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MongoDatabaseListResult>): void;
  listMongoDatabases(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MongoDatabaseListResult>, callback?: msRest.ServiceCallback<Models.MongoDatabaseListResult>): Promise<Models.DatabaseAccountsListMongoDatabasesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listMongoDatabasesOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListMongoDatabasesResponse>;
  }

  /**
   * Gets the Mongo databases under an existing Azure Cosmos DB database account with the provided
   * id.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetMongoDatabaseResponse>
   */
  getMongoDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetMongoDatabaseResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param callback The callback
   */
  getMongoDatabase(resourceGroupName: string, accountName: string, databaseRid: string, callback: msRest.ServiceCallback<Models.MongoDatabase>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMongoDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MongoDatabase>): void;
  getMongoDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MongoDatabase>, callback?: msRest.ServiceCallback<Models.MongoDatabase>): Promise<Models.DatabaseAccountsGetMongoDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        options
      },
      getMongoDatabaseOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetMongoDatabaseResponse>;
  }

  /**
   * Create or updates Azure Cosmos DB Mongo database
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param createUpdateMongoDatabaseParameters The parameters to provide for the current Mongo
   * database.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCreateUpdateMongoDatabaseResponse>
   */
  createUpdateMongoDatabase(resourceGroupName: string, accountName: string, databaseRid: string, createUpdateMongoDatabaseParameters: Models.MongoDatabaseCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCreateUpdateMongoDatabaseResponse> {
    return this.beginCreateUpdateMongoDatabase(resourceGroupName,accountName,databaseRid,createUpdateMongoDatabaseParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsCreateUpdateMongoDatabaseResponse>;
  }

  /**
   * Deletes an existing Azure Cosmos DB Mongo database.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMongoDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMongoDatabase(resourceGroupName,accountName,databaseRid,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the Mongo collection under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListMongoCollectionsResponse>
   */
  listMongoCollections(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListMongoCollectionsResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param callback The callback
   */
  listMongoCollections(resourceGroupName: string, accountName: string, databaseRid: string, callback: msRest.ServiceCallback<Models.MongoCollectionListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMongoCollections(resourceGroupName: string, accountName: string, databaseRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MongoCollectionListResult>): void;
  listMongoCollections(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MongoCollectionListResult>, callback?: msRest.ServiceCallback<Models.MongoCollectionListResult>): Promise<Models.DatabaseAccountsListMongoCollectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        options
      },
      listMongoCollectionsOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListMongoCollectionsResponse>;
  }

  /**
   * Gets the Mongo collection under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param collectionRid Cosmos DB collection rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetMongoCollectionResponse>
   */
  getMongoCollection(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetMongoCollectionResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param collectionRid Cosmos DB collection rid.
   * @param callback The callback
   */
  getMongoCollection(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, callback: msRest.ServiceCallback<Models.MongoCollection>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param collectionRid Cosmos DB collection rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMongoCollection(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MongoCollection>): void;
  getMongoCollection(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MongoCollection>, callback?: msRest.ServiceCallback<Models.MongoCollection>): Promise<Models.DatabaseAccountsGetMongoCollectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        collectionRid,
        options
      },
      getMongoCollectionOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetMongoCollectionResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB Mongo Collection
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param collectionRid Cosmos DB collection rid.
   * @param createUpdateMongoCollectionParameters The parameters to provide for the current Mongo
   * Collection.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCreateUpdateMongoCollectionResponse>
   */
  createUpdateMongoCollection(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, createUpdateMongoCollectionParameters: Models.MongoCollectionCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCreateUpdateMongoCollectionResponse> {
    return this.beginCreateUpdateMongoCollection(resourceGroupName,accountName,databaseRid,collectionRid,createUpdateMongoCollectionParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsCreateUpdateMongoCollectionResponse>;
  }

  /**
   * Deletes an existing Azure Cosmos DB Mongo Collection.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param collectionRid Cosmos DB collection rid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMongoCollection(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMongoCollection(resourceGroupName,accountName,databaseRid,collectionRid,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the Tables under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListTablesResponse>
   */
  listTables(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListTablesResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listTables(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.TableListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listTables(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TableListResult>): void;
  listTables(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TableListResult>, callback?: msRest.ServiceCallback<Models.TableListResult>): Promise<Models.DatabaseAccountsListTablesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listTablesOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListTablesResponse>;
  }

  /**
   * Gets the Tables under an existing Azure Cosmos DB database account with the provided id.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param tableRid Cosmos DB table rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetTableResponse>
   */
  getTable(resourceGroupName: string, accountName: string, tableRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetTableResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param tableRid Cosmos DB table rid.
   * @param callback The callback
   */
  getTable(resourceGroupName: string, accountName: string, tableRid: string, callback: msRest.ServiceCallback<Models.Table>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param tableRid Cosmos DB table rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTable(resourceGroupName: string, accountName: string, tableRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Table>): void;
  getTable(resourceGroupName: string, accountName: string, tableRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Table>, callback?: msRest.ServiceCallback<Models.Table>): Promise<Models.DatabaseAccountsGetTableResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        tableRid,
        options
      },
      getTableOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetTableResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB Table
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param tableRid Cosmos DB table rid.
   * @param createUpdateTableParameters The parameters to provide for the current Table.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCreateUpdateTableResponse>
   */
  createUpdateTable(resourceGroupName: string, accountName: string, tableRid: string, createUpdateTableParameters: Models.TableCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCreateUpdateTableResponse> {
    return this.beginCreateUpdateTable(resourceGroupName,accountName,tableRid,createUpdateTableParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsCreateUpdateTableResponse>;
  }

  /**
   * Deletes an existing Azure Cosmos DB Table.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param tableRid Cosmos DB table rid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTable(resourceGroupName: string, accountName: string, tableRid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteTable(resourceGroupName,accountName,tableRid,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListCassandraKeyspacesResponse>
   */
  listCassandraKeyspaces(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListCassandraKeyspacesResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listCassandraKeyspaces(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.CassandraKeyspaceListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCassandraKeyspaces(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CassandraKeyspaceListResult>): void;
  listCassandraKeyspaces(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CassandraKeyspaceListResult>, callback?: msRest.ServiceCallback<Models.CassandraKeyspaceListResult>): Promise<Models.DatabaseAccountsListCassandraKeyspacesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listCassandraKeyspacesOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListCassandraKeyspacesResponse>;
  }

  /**
   * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the
   * provided id.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetCassandraKeyspaceResponse>
   */
  getCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetCassandraKeyspaceResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param callback The callback
   */
  getCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceRid: string, callback: msRest.ServiceCallback<Models.CassandraKeyspace>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CassandraKeyspace>): void;
  getCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CassandraKeyspace>, callback?: msRest.ServiceCallback<Models.CassandraKeyspace>): Promise<Models.DatabaseAccountsGetCassandraKeyspaceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        keyspaceRid,
        options
      },
      getCassandraKeyspaceOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetCassandraKeyspaceResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB Cassandra keyspace
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current
   * Cassandra keyspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCreateUpdateCassandraKeyspaceResponse>
   */
  createUpdateCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceRid: string, createUpdateCassandraKeyspaceParameters: Models.CassandraKeyspaceCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCreateUpdateCassandraKeyspaceResponse> {
    return this.beginCreateUpdateCassandraKeyspace(resourceGroupName,accountName,keyspaceRid,createUpdateCassandraKeyspaceParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsCreateUpdateCassandraKeyspaceResponse>;
  }

  /**
   * Deletes an existing Azure Cosmos DB Cassandra keyspace.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceRid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteCassandraKeyspace(resourceGroupName,accountName,keyspaceRid,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the Cassandra table under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListCassandraTablesResponse>
   */
  listCassandraTables(resourceGroupName: string, accountName: string, keyspaceRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListCassandraTablesResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param callback The callback
   */
  listCassandraTables(resourceGroupName: string, accountName: string, keyspaceRid: string, callback: msRest.ServiceCallback<Models.CassandraTableListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCassandraTables(resourceGroupName: string, accountName: string, keyspaceRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CassandraTableListResult>): void;
  listCassandraTables(resourceGroupName: string, accountName: string, keyspaceRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CassandraTableListResult>, callback?: msRest.ServiceCallback<Models.CassandraTableListResult>): Promise<Models.DatabaseAccountsListCassandraTablesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        keyspaceRid,
        options
      },
      listCassandraTablesOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListCassandraTablesResponse>;
  }

  /**
   * Gets the Cassandra table under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param tableRid Cosmos DB table rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetCassandraTableResponse>
   */
  getCassandraTable(resourceGroupName: string, accountName: string, keyspaceRid: string, tableRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetCassandraTableResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param tableRid Cosmos DB table rid.
   * @param callback The callback
   */
  getCassandraTable(resourceGroupName: string, accountName: string, keyspaceRid: string, tableRid: string, callback: msRest.ServiceCallback<Models.CassandraTable>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param tableRid Cosmos DB table rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCassandraTable(resourceGroupName: string, accountName: string, keyspaceRid: string, tableRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CassandraTable>): void;
  getCassandraTable(resourceGroupName: string, accountName: string, keyspaceRid: string, tableRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CassandraTable>, callback?: msRest.ServiceCallback<Models.CassandraTable>): Promise<Models.DatabaseAccountsGetCassandraTableResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        keyspaceRid,
        tableRid,
        options
      },
      getCassandraTableOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetCassandraTableResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB Cassandra Table
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param tableRid Cosmos DB table rid.
   * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra
   * Table.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCreateUpdateCassandraTableResponse>
   */
  createUpdateCassandraTable(resourceGroupName: string, accountName: string, keyspaceRid: string, tableRid: string, createUpdateCassandraTableParameters: Models.CassandraTableCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCreateUpdateCassandraTableResponse> {
    return this.beginCreateUpdateCassandraTable(resourceGroupName,accountName,keyspaceRid,tableRid,createUpdateCassandraTableParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsCreateUpdateCassandraTableResponse>;
  }

  /**
   * Deletes an existing Azure Cosmos DB Cassandra table.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param tableRid Cosmos DB table rid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCassandraTable(resourceGroupName: string, accountName: string, keyspaceRid: string, tableRid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteCassandraTable(resourceGroupName,accountName,keyspaceRid,tableRid,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListGremlinDatabasesResponse>
   */
  listGremlinDatabases(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListGremlinDatabasesResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listGremlinDatabases(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.GremlinDatabaseListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGremlinDatabases(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GremlinDatabaseListResult>): void;
  listGremlinDatabases(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GremlinDatabaseListResult>, callback?: msRest.ServiceCallback<Models.GremlinDatabaseListResult>): Promise<Models.DatabaseAccountsListGremlinDatabasesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listGremlinDatabasesOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListGremlinDatabasesResponse>;
  }

  /**
   * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided
   * id.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetGremlinDatabaseResponse>
   */
  getGremlinDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetGremlinDatabaseResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param callback The callback
   */
  getGremlinDatabase(resourceGroupName: string, accountName: string, databaseRid: string, callback: msRest.ServiceCallback<Models.GremlinDatabase>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getGremlinDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GremlinDatabase>): void;
  getGremlinDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GremlinDatabase>, callback?: msRest.ServiceCallback<Models.GremlinDatabase>): Promise<Models.DatabaseAccountsGetGremlinDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        options
      },
      getGremlinDatabaseOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetGremlinDatabaseResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB Gremlin database
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin
   * database.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCreateUpdateGremlinDatabaseResponse>
   */
  createUpdateGremlinDatabase(resourceGroupName: string, accountName: string, databaseRid: string, createUpdateGremlinDatabaseParameters: Models.GremlinDatabaseCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCreateUpdateGremlinDatabaseResponse> {
    return this.beginCreateUpdateGremlinDatabase(resourceGroupName,accountName,databaseRid,createUpdateGremlinDatabaseParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsCreateUpdateGremlinDatabaseResponse>;
  }

  /**
   * Deletes an existing Azure Cosmos DB Gremlin database.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteGremlinDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteGremlinDatabase(resourceGroupName,accountName,databaseRid,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the Gremlin container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsListGremlinContainersResponse>
   */
  listGremlinContainers(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsListGremlinContainersResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param callback The callback
   */
  listGremlinContainers(resourceGroupName: string, accountName: string, databaseRid: string, callback: msRest.ServiceCallback<Models.ContainerListResult>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGremlinContainers(resourceGroupName: string, accountName: string, databaseRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContainerListResult>): void;
  listGremlinContainers(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContainerListResult>, callback?: msRest.ServiceCallback<Models.ContainerListResult>): Promise<Models.DatabaseAccountsListGremlinContainersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        options
      },
      listGremlinContainersOperationSpec,
      callback) as Promise<Models.DatabaseAccountsListGremlinContainersResponse>;
  }

  /**
   * Gets the Gremlin container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsGetGremlinContainerResponse>
   */
  getGremlinContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsGetGremlinContainerResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param callback The callback
   */
  getGremlinContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, callback: msRest.ServiceCallback<Models.Container>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getGremlinContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Container>): void;
  getGremlinContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Container>, callback?: msRest.ServiceCallback<Models.Container>): Promise<Models.DatabaseAccountsGetGremlinContainerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        containerRid,
        options
      },
      getGremlinContainerOperationSpec,
      callback) as Promise<Models.DatabaseAccountsGetGremlinContainerResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB Gremlin container
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param createUpdateGremlinContainerParameters The parameters to provide for the current Gremlin
   * container.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAccountsCreateUpdateGremlinContainerResponse>
   */
  createUpdateGremlinContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, createUpdateGremlinContainerParameters: Models.ContainerCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAccountsCreateUpdateGremlinContainerResponse> {
    return this.beginCreateUpdateGremlinContainer(resourceGroupName,accountName,databaseRid,containerRid,createUpdateGremlinContainerParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DatabaseAccountsCreateUpdateGremlinContainerResponse>;
  }

  /**
   * Deletes an existing Azure Cosmos DB Gremlin container.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteGremlinContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteGremlinContainer(resourceGroupName,accountName,databaseRid,containerRid,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Patches the properties of an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param updateParameters The tags parameter to patch for the current database account.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPatch(resourceGroupName: string, accountName: string, updateParameters: Models.DatabaseAccountPatchParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        updateParameters,
        options
      },
      beginPatchOperationSpec,
      options);
  }

  /**
   * Creates or updates an Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateParameters The parameters to provide for the current database account.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, accountName: string, createUpdateParameters: Models.DatabaseAccountCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        createUpdateParameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes an existing Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0
   * indicates a write region. The maximum value for a failover priority = (total number of regions -
   * 1). Failover priority values must be unique for each of the regions in which the database
   * account exists.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param failoverParameters The new failover policies for the database account.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginFailoverPriorityChange(resourceGroupName: string, accountName: string, failoverParameters: Models.FailoverPolicies, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        failoverParameters,
        options
      },
      beginFailoverPriorityChangeOperationSpec,
      options);
  }

  /**
   * Offline the specified region for the specified Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param regionParameterForOffline Cosmos DB region to offline for the database account.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginOfflineRegion(resourceGroupName: string, accountName: string, regionParameterForOffline: Models.RegionForOnlineOffline, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        regionParameterForOffline,
        options
      },
      beginOfflineRegionOperationSpec,
      options);
  }

  /**
   * Online the specified region for the specified Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param regionParameterForOnline Cosmos DB region to online for the database account.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginOnlineRegion(resourceGroupName: string, accountName: string, regionParameterForOnline: Models.RegionForOnlineOffline, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        regionParameterForOnline,
        options
      },
      beginOnlineRegionOperationSpec,
      options);
  }

  /**
   * Regenerates an access key for the specified Azure Cosmos DB database account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyToRegenerate The name of the key to regenerate.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRegenerateKey(resourceGroupName: string, accountName: string, keyToRegenerate: Models.DatabaseAccountRegenerateKeyParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyToRegenerate,
        options
      },
      beginRegenerateKeyOperationSpec,
      options);
  }

  /**
   * Create or update an Azure Cosmos DB SQL database
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateSqlDatabase(resourceGroupName: string, accountName: string, databaseRid: string, createUpdateSqlDatabaseParameters: Models.SqlDatabaseCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        createUpdateSqlDatabaseParameters,
        options
      },
      beginCreateUpdateSqlDatabaseOperationSpec,
      options);
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL database.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteSqlDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        options
      },
      beginDeleteSqlDatabaseOperationSpec,
      options);
  }

  /**
   * Create or update an Azure Cosmos DB SQL container
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL
   * container.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateSqlContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, createUpdateSqlContainerParameters: Models.ContainerCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        containerRid,
        createUpdateSqlContainerParameters,
        options
      },
      beginCreateUpdateSqlContainerOperationSpec,
      options);
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL container.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteSqlContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        containerRid,
        options
      },
      beginDeleteSqlContainerOperationSpec,
      options);
  }

  /**
   * Create or updates Azure Cosmos DB Mongo database
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param createUpdateMongoDatabaseParameters The parameters to provide for the current Mongo
   * database.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateMongoDatabase(resourceGroupName: string, accountName: string, databaseRid: string, createUpdateMongoDatabaseParameters: Models.MongoDatabaseCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        createUpdateMongoDatabaseParameters,
        options
      },
      beginCreateUpdateMongoDatabaseOperationSpec,
      options);
  }

  /**
   * Deletes an existing Azure Cosmos DB Mongo database.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMongoDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        options
      },
      beginDeleteMongoDatabaseOperationSpec,
      options);
  }

  /**
   * Create or update an Azure Cosmos DB Mongo Collection
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param collectionRid Cosmos DB collection rid.
   * @param createUpdateMongoCollectionParameters The parameters to provide for the current Mongo
   * Collection.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateMongoCollection(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, createUpdateMongoCollectionParameters: Models.MongoCollectionCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        collectionRid,
        createUpdateMongoCollectionParameters,
        options
      },
      beginCreateUpdateMongoCollectionOperationSpec,
      options);
  }

  /**
   * Deletes an existing Azure Cosmos DB Mongo Collection.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param collectionRid Cosmos DB collection rid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMongoCollection(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        collectionRid,
        options
      },
      beginDeleteMongoCollectionOperationSpec,
      options);
  }

  /**
   * Create or update an Azure Cosmos DB Table
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param tableRid Cosmos DB table rid.
   * @param createUpdateTableParameters The parameters to provide for the current Table.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateTable(resourceGroupName: string, accountName: string, tableRid: string, createUpdateTableParameters: Models.TableCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        tableRid,
        createUpdateTableParameters,
        options
      },
      beginCreateUpdateTableOperationSpec,
      options);
  }

  /**
   * Deletes an existing Azure Cosmos DB Table.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param tableRid Cosmos DB table rid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteTable(resourceGroupName: string, accountName: string, tableRid: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        tableRid,
        options
      },
      beginDeleteTableOperationSpec,
      options);
  }

  /**
   * Create or update an Azure Cosmos DB Cassandra keyspace
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current
   * Cassandra keyspace.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceRid: string, createUpdateCassandraKeyspaceParameters: Models.CassandraKeyspaceCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceRid,
        createUpdateCassandraKeyspaceParameters,
        options
      },
      beginCreateUpdateCassandraKeyspaceOperationSpec,
      options);
  }

  /**
   * Deletes an existing Azure Cosmos DB Cassandra keyspace.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceRid: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceRid,
        options
      },
      beginDeleteCassandraKeyspaceOperationSpec,
      options);
  }

  /**
   * Create or update an Azure Cosmos DB Cassandra Table
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param tableRid Cosmos DB table rid.
   * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra
   * Table.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateCassandraTable(resourceGroupName: string, accountName: string, keyspaceRid: string, tableRid: string, createUpdateCassandraTableParameters: Models.CassandraTableCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceRid,
        tableRid,
        createUpdateCassandraTableParameters,
        options
      },
      beginCreateUpdateCassandraTableOperationSpec,
      options);
  }

  /**
   * Deletes an existing Azure Cosmos DB Cassandra table.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceRid Cosmos DB keyspace rid.
   * @param tableRid Cosmos DB table rid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteCassandraTable(resourceGroupName: string, accountName: string, keyspaceRid: string, tableRid: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceRid,
        tableRid,
        options
      },
      beginDeleteCassandraTableOperationSpec,
      options);
  }

  /**
   * Create or update an Azure Cosmos DB Gremlin database
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin
   * database.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateGremlinDatabase(resourceGroupName: string, accountName: string, databaseRid: string, createUpdateGremlinDatabaseParameters: Models.GremlinDatabaseCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        createUpdateGremlinDatabaseParameters,
        options
      },
      beginCreateUpdateGremlinDatabaseOperationSpec,
      options);
  }

  /**
   * Deletes an existing Azure Cosmos DB Gremlin database.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteGremlinDatabase(resourceGroupName: string, accountName: string, databaseRid: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        options
      },
      beginDeleteGremlinDatabaseOperationSpec,
      options);
  }

  /**
   * Create or update an Azure Cosmos DB Gremlin container
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param createUpdateGremlinContainerParameters The parameters to provide for the current Gremlin
   * container.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateGremlinContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, createUpdateGremlinContainerParameters: Models.ContainerCreateUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        containerRid,
        createUpdateGremlinContainerParameters,
        options
      },
      beginCreateUpdateGremlinContainerOperationSpec,
      options);
  }

  /**
   * Deletes an existing Azure Cosmos DB Gremlin container.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Cosmos DB database account name.
   * @param databaseRid Cosmos DB database rid.
   * @param containerRid Cosmos DB container rid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteGremlinContainer(resourceGroupName: string, accountName: string, databaseRid: string, containerRid: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseRid,
        containerRid,
        options
      },
      beginDeleteGremlinContainerOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseAccount
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseAccountsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseAccountsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseAccountListKeysResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listConnectionStringsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseAccountListConnectionStringsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getReadOnlyKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseAccountListReadOnlyKeysResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listReadOnlyKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseAccountListReadOnlyKeysResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkNameExistsOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}",
  urlParameters: [
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listUsagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsagesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listMetricDefinitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSqlDatabasesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlDatabaseListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlDatabase
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSqlContainersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseRid}/containers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContainerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlContainerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseRid}/containers/{containerRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid,
    Parameters.containerRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Container
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listMongoDatabasesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongo/databases",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MongoDatabaseListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMongoDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongo/databases/{databaseRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MongoDatabase
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listMongoCollectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongo/databases/{databaseRid}/collections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MongoCollectionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMongoCollectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongo/databases/{databaseRid}/collections/{collectionRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid,
    Parameters.collectionRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MongoCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listTablesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TableListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.tableRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Table
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listCassandraKeyspacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CassandraKeyspaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCassandraKeyspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CassandraKeyspace
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listCassandraTablesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceRid}/tables",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CassandraTableListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCassandraTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceRid}/tables/{tableRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceRid,
    Parameters.tableRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CassandraTable
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listGremlinDatabasesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GremlinDatabaseListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getGremlinDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GremlinDatabase
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listGremlinContainersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseRid}/containers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContainerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getGremlinContainerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseRid}/containers/{containerRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid,
    Parameters.containerRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Container
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "updateParameters",
    mapper: {
      ...Mappers.DatabaseAccountPatchParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseAccount
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createUpdateParameters",
    mapper: {
      ...Mappers.DatabaseAccountCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseAccount
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginFailoverPriorityChangeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "failoverParameters",
    mapper: {
      ...Mappers.FailoverPolicies,
      required: true
    }
  },
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginOfflineRegionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "regionParameterForOffline",
    mapper: {
      ...Mappers.RegionForOnlineOffline,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginOnlineRegionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "regionParameterForOnline",
    mapper: {
      ...Mappers.RegionForOnlineOffline,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginRegenerateKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "keyToRegenerate",
    mapper: {
      ...Mappers.DatabaseAccountRegenerateKeyParameters,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateSqlDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createUpdateSqlDatabaseParameters",
    mapper: {
      ...Mappers.SqlDatabaseCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlDatabase
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteSqlDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateSqlContainerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseRid}/containers/{containerRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid,
    Parameters.containerRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createUpdateSqlContainerParameters",
    mapper: {
      ...Mappers.ContainerCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Container
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteSqlContainerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseRid}/containers/{containerRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid,
    Parameters.containerRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateMongoDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongo/databases/{databaseRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createUpdateMongoDatabaseParameters",
    mapper: {
      ...Mappers.MongoDatabaseCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.MongoDatabase
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMongoDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongo/databases/{databaseRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateMongoCollectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongo/databases/{databaseRid}/collections/{collectionRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid,
    Parameters.collectionRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createUpdateMongoCollectionParameters",
    mapper: {
      ...Mappers.MongoCollectionCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.MongoCollection
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMongoCollectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongo/databases/{databaseRid}/collections/{collectionRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid,
    Parameters.collectionRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.tableRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createUpdateTableParameters",
    mapper: {
      ...Mappers.TableCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Table
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.tableRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateCassandraKeyspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createUpdateCassandraKeyspaceParameters",
    mapper: {
      ...Mappers.CassandraKeyspaceCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CassandraKeyspace
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteCassandraKeyspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateCassandraTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceRid}/tables/{tableRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceRid,
    Parameters.tableRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createUpdateCassandraTableParameters",
    mapper: {
      ...Mappers.CassandraTableCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CassandraTable
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteCassandraTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceRid}/tables/{tableRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceRid,
    Parameters.tableRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateGremlinDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createUpdateGremlinDatabaseParameters",
    mapper: {
      ...Mappers.GremlinDatabaseCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GremlinDatabase
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteGremlinDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateGremlinContainerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseRid}/containers/{containerRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid,
    Parameters.containerRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createUpdateGremlinContainerParameters",
    mapper: {
      ...Mappers.ContainerCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Container
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteGremlinContainerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseRid}/containers/{containerRid}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseRid,
    Parameters.containerRid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
