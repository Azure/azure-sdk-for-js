/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing ConsistencyPolicy.
 * The consistency policy for the Cosmos DB database account.
 *
 */
export interface ConsistencyPolicy {
  /**
   * @member {DefaultConsistencyLevel} defaultConsistencyLevel The default
   * consistency level and configuration settings of the Cosmos DB account.
   * Possible values include: 'Eventual', 'Session', 'BoundedStaleness',
   * 'Strong', 'ConsistentPrefix'
   */
  defaultConsistencyLevel: DefaultConsistencyLevel;
  /**
   * @member {number} [maxStalenessPrefix] When used with the Bounded Staleness
   * consistency level, this value represents the number of stale requests
   * tolerated. Accepted range for this value is 1 â€“ 2,147,483,647. Required
   * when defaultConsistencyPolicy is set to 'BoundedStaleness'.
   */
  maxStalenessPrefix?: number;
  /**
   * @member {number} [maxIntervalInSeconds] When used with the Bounded
   * Staleness consistency level, this value represents the time amount of
   * staleness (in seconds) tolerated. Accepted range for this value is 5 -
   * 86400. Required when defaultConsistencyPolicy is set to
   * 'BoundedStaleness'.
   */
  maxIntervalInSeconds?: number;
}

/**
 * @interface
 * An interface representing Capability.
 * Cosmos DB capability object
 *
 */
export interface Capability {
  /**
   * @member {string} [name] Name of the Cosmos DB capability. For example,
   * "name": "EnableCassandra". Current values also include "EnableTable" and
   * "EnableGremlin".
   */
  name?: string;
}

/**
 * @interface
 * An interface representing Location.
 * A region in which the Azure Cosmos DB database account is deployed.
 *
 */
export interface Location {
  /**
   * @member {string} [id] The unique identifier of the region within the
   * database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [locationName] The name of the region.
   */
  locationName?: string;
  /**
   * @member {string} [documentEndpoint] The connection endpoint for the
   * specific region. Example:
   * https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly documentEndpoint?: string;
  /**
   * @member {string} [provisioningState]
   */
  provisioningState?: string;
  /**
   * @member {number} [failoverPriority] The failover priority of the region. A
   * failover priority of 0 indicates a write region. The maximum value for a
   * failover priority = (total number of regions - 1). Failover priority
   * values must be unique for each of the regions in which the database
   * account exists.
   */
  failoverPriority?: number;
}

/**
 * @interface
 * An interface representing FailoverPolicy.
 * The failover policy for a given region of a database account.
 *
 */
export interface FailoverPolicy {
  /**
   * @member {string} [id] The unique identifier of the region in which the
   * database account replicates to. Example:
   * &lt;accountName&gt;-&lt;locationName&gt;.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [locationName] The name of the region in which the
   * database account exists.
   */
  locationName?: string;
  /**
   * @member {number} [failoverPriority] The failover priority of the region. A
   * failover priority of 0 indicates a write region. The maximum value for a
   * failover priority = (total number of regions - 1). Failover priority
   * values must be unique for each of the regions in which the database
   * account exists.
   */
  failoverPriority?: number;
}

/**
 * @interface
 * An interface representing VirtualNetworkRule.
 * Virtual Network ACL Rule object
 *
 */
export interface VirtualNetworkRule {
  /**
   * @member {string} [id] Resource ID of a subnet, for example:
   * /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
   */
  id?: string;
  /**
   * @member {boolean} [ignoreMissingVNetServiceEndpoint] Create firewall rule
   * before the virtual network has vnet service endpoint enabled.
   */
  ignoreMissingVNetServiceEndpoint?: boolean;
}

/**
 * @interface
 * An interface representing Resource.
 * The core properties of ARM resources.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] The unique resource identifier of the database
   * account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the database account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The type of Azure resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [location] The location of the resource group to which
   * the resource belongs.
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags]
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing DatabaseAccount.
 * An Azure Cosmos DB database account.
 *
 * @extends Resource
 */
export interface DatabaseAccount extends Resource {
  /**
   * @member {DatabaseAccountKind} [kind] Indicates the type of database
   * account. This can only be set at database account creation. Possible
   * values include: 'GlobalDocumentDB', 'MongoDB', 'Parse'. Default value:
   * 'GlobalDocumentDB' .
   */
  kind?: DatabaseAccountKind;
  /**
   * @member {string} [provisioningState]
   */
  provisioningState?: string;
  /**
   * @member {string} [documentEndpoint] The connection endpoint for the Cosmos
   * DB database account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly documentEndpoint?: string;
  /**
   * @member {DatabaseAccountOfferType} [databaseAccountOfferType] The offer
   * type for the Cosmos DB database account. Default value: Standard. Possible
   * values include: 'Standard'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseAccountOfferType?: DatabaseAccountOfferType;
  /**
   * @member {string} [ipRangeFilter] Cosmos DB Firewall Support: This value
   * specifies the set of IP addresses or IP address ranges in CIDR form to be
   * included as the allowed list of client IPs for a given database account.
   * IP addresses/ranges must be comma separated and must not contain any
   * spaces.
   */
  ipRangeFilter?: string;
  /**
   * @member {boolean} [isVirtualNetworkFilterEnabled] Flag to indicate whether
   * to enable/disable Virtual Network ACL rules.
   */
  isVirtualNetworkFilterEnabled?: boolean;
  /**
   * @member {boolean} [enableAutomaticFailover] Enables automatic failover of
   * the write region in the rare event that the region is unavailable due to
   * an outage. Automatic failover will result in a new write region for the
   * account and is chosen based on the failover priorities configured for the
   * account.
   */
  enableAutomaticFailover?: boolean;
  /**
   * @member {ConsistencyPolicy} [consistencyPolicy] The consistency policy for
   * the Cosmos DB database account.
   */
  consistencyPolicy?: ConsistencyPolicy;
  /**
   * @member {Capability[]} [capabilities] List of Cosmos DB capabilities for
   * the account
   */
  capabilities?: Capability[];
  /**
   * @member {Location[]} [writeLocations] An array that contains the write
   * location for the Cosmos DB account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly writeLocations?: Location[];
  /**
   * @member {Location[]} [readLocations] An array that contains of the read
   * locations enabled for the Cosmos DB account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly readLocations?: Location[];
  /**
   * @member {FailoverPolicy[]} [failoverPolicies] An array that contains the
   * regions ordered by their failover priorities.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly failoverPolicies?: FailoverPolicy[];
  /**
   * @member {VirtualNetworkRule[]} [virtualNetworkRules] List of Virtual
   * Network ACL rules configured for the Cosmos DB account.
   */
  virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * @member {boolean} [enableMultipleWriteLocations] Enables the account to
   * write in multiple locations
   */
  enableMultipleWriteLocations?: boolean;
}

/**
 * @interface
 * An interface representing SqlDatabase.
 * An Azure Cosmos DB SQL database.
 *
 * @extends Resource
 */
export interface SqlDatabase extends Resource {
  /**
   * @member {string} sqlDatabaseId Name of the Cosmos DB SQL database
   */
  sqlDatabaseId: string;
  /**
   * @member {string} [_rid] A system generated property. A unique identifier.
   */
  _rid?: string;
  /**
   * @member {any} [_ts] A system generated property that denotes the last
   * updated timestamp of the resource.
   */
  _ts?: any;
  /**
   * @member {string} [_etag] A system generated property representing the
   * resource etag required for optimistic concurrency control.
   */
  _etag?: string;
  /**
   * @member {string} [_colls] A system generated property that specified the
   * addressable path of the collections resource.
   */
  _colls?: string;
  /**
   * @member {string} [_users] A system generated property that specifies the
   * addressable path of the users resource.
   */
  _users?: string;
}

/**
 * @interface
 * An interface representing Indexes.
 * The indexes for the path.
 *
 */
export interface Indexes {
  /**
   * @member {DataType} [dataType] The datatype for which the indexing behavior
   * is applied to. Possible values include: 'String', 'Number', 'Point',
   * 'Polygon', 'LineString', 'MultiPolygon'. Default value: 'String' .
   */
  dataType?: DataType;
  /**
   * @member {number} [precision] The precision of the index. -1 is maximum
   * precision.
   */
  precision?: number;
  /**
   * @member {IndexKind} [kind] Indicates the type of index. Possible values
   * include: 'Hash', 'Range', 'Spatial'. Default value: 'Hash' .
   */
  kind?: IndexKind;
}

/**
 * @interface
 * An interface representing IncludedPath.
 * The paths that are included in indexing
 *
 */
export interface IncludedPath {
  /**
   * @member {string} [path] The path for which the indexing behavior applies
   * to. Index paths typically start with root and end with wildcard (/path/*)
   */
  path?: string;
  /**
   * @member {Indexes[]} [indexes] List of indexes for this path
   */
  indexes?: Indexes[];
}

/**
 * @interface
 * An interface representing ExcludedPath.
 */
export interface ExcludedPath {
  /**
   * @member {string} [path] The path for which the indexing behavior applies
   * to. Index paths typically start with root and end with wildcard (/path/*)
   */
  path?: string;
}

/**
 * @interface
 * An interface representing IndexingPolicy.
 * Cosmos DB indexing policy
 *
 */
export interface IndexingPolicy {
  /**
   * @member {boolean} [automatic] Indicates if the indexing policy is
   * automatic
   */
  automatic?: boolean;
  /**
   * @member {IndexingMode} [indexingMode] Indicates the indexing mode.
   * Possible values include: 'Consistent', 'Lazy', 'None'. Default value:
   * 'Consistent' .
   */
  indexingMode?: IndexingMode;
  /**
   * @member {IncludedPath[]} [includedPaths] List of paths to include in the
   * indexing
   */
  includedPaths?: IncludedPath[];
  /**
   * @member {ExcludedPath[]} [excludedPaths] List of paths to exclude from
   * indexing
   */
  excludedPaths?: ExcludedPath[];
}

/**
 * @interface
 * An interface representing ContainerPartitionKey.
 * The configuration of the partition key to be used for partitioning data into
 * multiple partitions
 *
 */
export interface ContainerPartitionKey {
  /**
   * @member {string[]} [paths] List of paths using which data within the
   * container can be partitioned
   */
  paths?: string[];
  /**
   * @member {PartitionKind} [kind] Indicates the kind of algorithm used for
   * partitioning. Possible values include: 'Hash', 'Range'. Default value:
   * 'Hash' .
   */
  kind?: PartitionKind;
}

/**
 * @interface
 * An interface representing UniqueKey.
 * The unique key on that enforces uniqueness constraint on documents in the
 * collection in the Azure Cosmos DB service.
 *
 */
export interface UniqueKey {
  /**
   * @member {string[]} [paths] List of paths must be unique for each document
   * in the Azure Cosmos DB service
   */
  paths?: string[];
}

/**
 * @interface
 * An interface representing UniqueKeyPolicy.
 * The unique key policy configuration for specifying uniqueness constraints on
 * documents in the collection in the Azure Cosmos DB service.
 *
 */
export interface UniqueKeyPolicy {
  /**
   * @member {UniqueKey[]} [uniqueKeys] List of unique keys on that enforces
   * uniqueness constraint on documents in the collection in the Azure Cosmos
   * DB service.
   */
  uniqueKeys?: UniqueKey[];
}

/**
 * @interface
 * An interface representing ConflictResolutionPolicy.
 * The conflict resolution policy for the container.
 *
 */
export interface ConflictResolutionPolicy {
  /**
   * @member {ConflictResolutionMode} [mode] Indicates the conflict resolution
   * mode. Possible values include: 'LastWriterWins', 'Custom'. Default value:
   * 'LastWriterWins' .
   */
  mode?: ConflictResolutionMode;
  /**
   * @member {string} [conflictResolutionPath] The conflict resolution path in
   * the case of LastWriterWins mode.
   */
  conflictResolutionPath?: string;
  /**
   * @member {string} [conflictResolutionProcedure] The procedure to resolve
   * conflicts in the case of custom mode.
   */
  conflictResolutionProcedure?: string;
}

/**
 * @interface
 * An interface representing Container.
 * An Azure Cosmos DB container.
 *
 * @extends Resource
 */
export interface Container extends Resource {
  /**
   * @member {string} containerId Name of the Cosmos DB container
   */
  containerId: string;
  /**
   * @member {IndexingPolicy} [indexingPolicy] The configuration of the
   * indexing policy. By default, the indexing is automatic for all document
   * paths within the container
   */
  indexingPolicy?: IndexingPolicy;
  /**
   * @member {ContainerPartitionKey} [partitionKey] The configuration of the
   * partition key to be used for partitioning data into multiple partitions
   */
  partitionKey?: ContainerPartitionKey;
  /**
   * @member {number} [defaultTtl] Default time to live
   */
  defaultTtl?: number;
  /**
   * @member {UniqueKeyPolicy} [uniqueKeyPolicy] The unique key policy
   * configuration for specifying uniqueness constraints on documents in the
   * collection in the Azure Cosmos DB service.
   */
  uniqueKeyPolicy?: UniqueKeyPolicy;
  /**
   * @member {ConflictResolutionPolicy} [conflictResolutionPolicy] The conflict
   * resolution policy for the container.
   */
  conflictResolutionPolicy?: ConflictResolutionPolicy;
  /**
   * @member {string} [_rid] A system generated property. A unique identifier.
   */
  _rid?: string;
  /**
   * @member {any} [_ts] A system generated property that denotes the last
   * updated timestamp of the resource.
   */
  _ts?: any;
  /**
   * @member {string} [_etag] A system generated property representing the
   * resource etag required for optimistic concurrency control.
   */
  _etag?: string;
}

/**
 * @interface
 * An interface representing MongoDatabase.
 * An Azure Cosmos DB Mongo database.
 *
 * @extends Resource
 */
export interface MongoDatabase extends Resource {
  /**
   * @member {string} mongoDatabaseId Name of the Cosmos DB Mongo database
   */
  mongoDatabaseId: string;
}

/**
 * @interface
 * An interface representing MongoCollection.
 * An Azure Cosmos DB Mongo collection.
 *
 * @extends Resource
 */
export interface MongoCollection extends Resource {
  /**
   * @member {string} mongoCollectionId Name of the Cosmos DB Mongo collection
   */
  mongoCollectionId: string;
  /**
   * @member {{ [propertyName: string]: string }} [shardKey] A key-value pair
   * of shard keys to be applied for the request.
   */
  shardKey?: { [propertyName: string]: string };
  /**
   * @member {MongoIndex[]} [indexes] List of index keys
   */
  indexes?: MongoIndex[];
}

/**
 * @interface
 * An interface representing Table.
 * An Azure Cosmos DB Table.
 *
 * @extends Resource
 */
export interface Table extends Resource {
  /**
   * @member {string} tableId Name of the Cosmos DB table
   */
  tableId: string;
}

/**
 * @interface
 * An interface representing CassandraKeyspace.
 * An Azure Cosmos DB Cassandra keyspace.
 *
 * @extends Resource
 */
export interface CassandraKeyspace extends Resource {
  /**
   * @member {string} cassandraKeyspaceId Name of the Cosmos DB Cassandra
   * keyspace
   */
  cassandraKeyspaceId: string;
}

/**
 * @interface
 * An interface representing CassandraTable.
 * An Azure Cosmos DB Cassandra table.
 *
 * @extends Resource
 */
export interface CassandraTable extends Resource {
  /**
   * @member {string} cassandraTableId Name of the Cosmos DB Cassandra table
   */
  cassandraTableId: string;
  /**
   * @member {number} [defaultTtl] Time to live of the Cosmos DB Cassandra
   * table
   */
  defaultTtl?: number;
  /**
   * @member {CassandraSchema} [schema] Schema of the Cosmos DB Cassandra table
   */
  schema?: CassandraSchema;
}

/**
 * @interface
 * An interface representing GremlinDatabase.
 * An Azure Cosmos DB Gremlin database.
 *
 * @extends Resource
 */
export interface GremlinDatabase extends Resource {
  /**
   * @member {string} gremlinDatabaseId Name of the Cosmos DB Gremlin database
   */
  gremlinDatabaseId: string;
  /**
   * @member {string} [_rid] A system generated property. A unique identifier.
   */
  _rid?: string;
  /**
   * @member {any} [_ts] A system generated property that denotes the last
   * updated timestamp of the resource.
   */
  _ts?: any;
  /**
   * @member {string} [_etag] A system generated property representing the
   * resource etag required for optimistic concurrency control.
   */
  _etag?: string;
}

/**
 * @interface
 * An interface representing ErrorResponse.
 * Error Response.
 *
 */
export interface ErrorResponse {
  /**
   * @member {string} [code] Error code.
   */
  code?: string;
  /**
   * @member {string} [message] Error message indicating why the operation
   * failed.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing FailoverPolicies.
 * The list of new failover policies for the failover priority change.
 *
 */
export interface FailoverPolicies {
  /**
   * @member {FailoverPolicy[]} failoverPolicies List of failover policies.
   */
  failoverPolicies: FailoverPolicy[];
}

/**
 * @interface
 * An interface representing RegionForOnlineOffline.
 * Cosmos DB region to online or offline.
 *
 */
export interface RegionForOnlineOffline {
  /**
   * @member {string} region Cosmos DB region, with spaces between words and
   * each word capitalized.
   */
  region: string;
}

/**
 * @interface
 * An interface representing ExtendedResourceProperties.
 * The system generated resource properties associated with SQL databases and
 * SQL containers.
 *
 */
export interface ExtendedResourceProperties {
  /**
   * @member {string} [_rid] A system generated property. A unique identifier.
   */
  _rid?: string;
  /**
   * @member {any} [_ts] A system generated property that denotes the last
   * updated timestamp of the resource.
   */
  _ts?: any;
  /**
   * @member {string} [_etag] A system generated property representing the
   * resource etag required for optimistic concurrency control.
   */
  _etag?: string;
}

/**
 * @interface
 * An interface representing DatabaseAccountCreateUpdateParameters.
 * Parameters to create and update Cosmos DB database accounts.
 *
 * @extends Resource
 */
export interface DatabaseAccountCreateUpdateParameters extends Resource {
  /**
   * @member {DatabaseAccountKind} [kind] Indicates the type of database
   * account. This can only be set at database account creation. Possible
   * values include: 'GlobalDocumentDB', 'MongoDB', 'Parse'. Default value:
   * 'GlobalDocumentDB' .
   */
  kind?: DatabaseAccountKind;
  /**
   * @member {ConsistencyPolicy} [consistencyPolicy] The consistency policy for
   * the Cosmos DB account.
   */
  consistencyPolicy?: ConsistencyPolicy;
  /**
   * @member {Location[]} locations An array that contains the georeplication
   * locations enabled for the Cosmos DB account.
   */
  locations: Location[];
  /**
   * @member {string} [ipRangeFilter] Cosmos DB Firewall Support: This value
   * specifies the set of IP addresses or IP address ranges in CIDR form to be
   * included as the allowed list of client IPs for a given database account.
   * IP addresses/ranges must be comma separated and must not contain any
   * spaces.
   */
  ipRangeFilter?: string;
  /**
   * @member {boolean} [isVirtualNetworkFilterEnabled] Flag to indicate whether
   * to enable/disable Virtual Network ACL rules.
   */
  isVirtualNetworkFilterEnabled?: boolean;
  /**
   * @member {boolean} [enableAutomaticFailover] Enables automatic failover of
   * the write region in the rare event that the region is unavailable due to
   * an outage. Automatic failover will result in a new write region for the
   * account and is chosen based on the failover priorities configured for the
   * account.
   */
  enableAutomaticFailover?: boolean;
  /**
   * @member {Capability[]} [capabilities] List of Cosmos DB capabilities for
   * the account
   */
  capabilities?: Capability[];
  /**
   * @member {VirtualNetworkRule[]} [virtualNetworkRules] List of Virtual
   * Network ACL rules configured for the Cosmos DB account.
   */
  virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * @member {boolean} [enableMultipleWriteLocations] Enables the account to
   * write in multiple locations
   */
  enableMultipleWriteLocations?: boolean;
}

/**
 * @interface
 * An interface representing DatabaseAccountPatchParameters.
 * Parameters for patching Azure Cosmos DB database account properties.
 *
 */
export interface DatabaseAccountPatchParameters {
  /**
   * @member {{ [propertyName: string]: string }} [tags]
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {Capability[]} [capabilities] List of Cosmos DB capabilities for
   * the account
   */
  capabilities?: Capability[];
}

/**
 * @interface
 * An interface representing DatabaseAccountListReadOnlyKeysResult.
 * The read-only access keys for the given database account.
 *
 */
export interface DatabaseAccountListReadOnlyKeysResult {
  /**
   * @member {string} [primaryReadonlyMasterKey] Base 64 encoded value of the
   * primary read-only key.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primaryReadonlyMasterKey?: string;
  /**
   * @member {string} [secondaryReadonlyMasterKey] Base 64 encoded value of the
   * secondary read-only key.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondaryReadonlyMasterKey?: string;
}

/**
 * @interface
 * An interface representing DatabaseAccountListKeysResult.
 * The access keys for the given database account.
 *
 */
export interface DatabaseAccountListKeysResult {
  /**
   * @member {string} [primaryMasterKey] Base 64 encoded value of the primary
   * read-write key.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primaryMasterKey?: string;
  /**
   * @member {string} [secondaryMasterKey] Base 64 encoded value of the
   * secondary read-write key.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondaryMasterKey?: string;
  /**
   * @member {string} [primaryReadonlyMasterKey] Base 64 encoded value of the
   * primary read-only key.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primaryReadonlyMasterKey?: string;
  /**
   * @member {string} [secondaryReadonlyMasterKey] Base 64 encoded value of the
   * secondary read-only key.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondaryReadonlyMasterKey?: string;
}

/**
 * @interface
 * An interface representing DatabaseAccountConnectionString.
 * Connection string for the Cosmos DB account
 *
 */
export interface DatabaseAccountConnectionString {
  /**
   * @member {string} [connectionString] Value of the connection string
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectionString?: string;
  /**
   * @member {string} [description] Description of the connection string
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly description?: string;
}

/**
 * @interface
 * An interface representing DatabaseAccountListConnectionStringsResult.
 * The connection strings for the given database account.
 *
 */
export interface DatabaseAccountListConnectionStringsResult {
  /**
   * @member {DatabaseAccountConnectionString[]} [connectionStrings] An array
   * that contains the connection strings for the Cosmos DB account.
   */
  connectionStrings?: DatabaseAccountConnectionString[];
}

/**
 * @interface
 * An interface representing DatabaseAccountRegenerateKeyParameters.
 * Parameters to regenerate the keys within the database account.
 *
 */
export interface DatabaseAccountRegenerateKeyParameters {
  /**
   * @member {KeyKind} keyKind The access key to regenerate. Possible values
   * include: 'primary', 'secondary', 'primaryReadonly', 'secondaryReadonly'
   */
  keyKind: KeyKind;
}

/**
 * @interface
 * An interface representing SqlDatabaseResource.
 * Cosmos DB SQL database id object
 *
 */
export interface SqlDatabaseResource {
  /**
   * @member {string} id Name of the Cosmos DB SQL database
   */
  id: string;
}

/**
 * @interface
 * An interface representing SqlDatabaseCreateUpdateParameters.
 * Parameters to create and update Cosmos DB SQL database.
 *
 */
export interface SqlDatabaseCreateUpdateParameters {
  /**
   * @member {SqlDatabaseResource} resource The standard JSON format of a SQL
   * database
   */
  resource: SqlDatabaseResource;
  /**
   * @member {{ [propertyName: string]: string }} options A key-value pair of
   * options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ContainerResource.
 * Cosmos DB container resource object
 *
 */
export interface ContainerResource {
  /**
   * @member {string} id Name of the Cosmos DB container
   */
  id: string;
  /**
   * @member {IndexingPolicy} [indexingPolicy] The configuration of the
   * indexing policy. By default, the indexing is automatic for all document
   * paths within the container
   */
  indexingPolicy?: IndexingPolicy;
  /**
   * @member {ContainerPartitionKey} [partitionKey] The configuration of the
   * partition key to be used for partitioning data into multiple partitions
   */
  partitionKey?: ContainerPartitionKey;
  /**
   * @member {number} [defaultTtl] Default time to live
   */
  defaultTtl?: number;
  /**
   * @member {UniqueKeyPolicy} [uniqueKeyPolicy] The unique key policy
   * configuration for specifying uniqueness constraints on documents in the
   * collection in the Azure Cosmos DB service.
   */
  uniqueKeyPolicy?: UniqueKeyPolicy;
  /**
   * @member {ConflictResolutionPolicy} [conflictResolutionPolicy] The conflict
   * resolution policy for the container.
   */
  conflictResolutionPolicy?: ConflictResolutionPolicy;
}

/**
 * @interface
 * An interface representing ContainerCreateUpdateParameters.
 * Parameters to create and update Cosmos DB container.
 *
 */
export interface ContainerCreateUpdateParameters {
  /**
   * @member {ContainerResource} resource The standard JSON format of a
   * container
   */
  resource: ContainerResource;
  /**
   * @member {{ [propertyName: string]: string }} options A key-value pair of
   * options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing MongoDatabaseResource.
 * Cosmos DB Mongo database id object
 *
 */
export interface MongoDatabaseResource {
  /**
   * @member {string} id Name of the Cosmos DB Mongo database
   */
  id: string;
}

/**
 * @interface
 * An interface representing MongoDatabaseCreateUpdateParameters.
 * Parameters to create and update Cosmos DB Mongo database.
 *
 */
export interface MongoDatabaseCreateUpdateParameters {
  /**
   * @member {MongoDatabaseResource} resource The standard JSON format of a
   * Mongo database
   */
  resource: MongoDatabaseResource;
  /**
   * @member {{ [propertyName: string]: string }} options A key-value pair of
   * options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing MongoIndexKeys.
 * Cosmos DB Mongo collection resource object
 *
 */
export interface MongoIndexKeys {
  /**
   * @member {string[]} [keys] List of keys for each Mongo collection in the
   * Azure Cosmos DB service
   */
  keys?: string[];
}

/**
 * @interface
 * An interface representing MongoIndexOptions.
 * Cosmos DB Mongo collection index options
 *
 */
export interface MongoIndexOptions {
  /**
   * @member {number} [expireAfterSeconds] Expire after seconds
   */
  expireAfterSeconds?: number;
  /**
   * @member {boolean} [unique] Is unique or not
   */
  unique?: boolean;
}

/**
 * @interface
 * An interface representing MongoIndex.
 * Cosmos DB Mongo collection index key
 *
 */
export interface MongoIndex {
  /**
   * @member {MongoIndexKeys} [key] Cosmos DB Mongo collection index keys
   */
  key?: MongoIndexKeys;
  /**
   * @member {MongoIndexOptions} [options] Cosmos DB Mongo collection index key
   * options
   */
  options?: MongoIndexOptions;
}

/**
 * @interface
 * An interface representing MongoCollectionResource.
 * Cosmos DB Mongo collection resource object
 *
 */
export interface MongoCollectionResource {
  /**
   * @member {string} id Name of the Cosmos DB Mongo collection
   */
  id: string;
  /**
   * @member {{ [propertyName: string]: string }} [shardKey] A key-value pair
   * of shard keys to be applied for the request.
   */
  shardKey?: { [propertyName: string]: string };
  /**
   * @member {MongoIndex[]} [indexes] List of index keys
   */
  indexes?: MongoIndex[];
}

/**
 * @interface
 * An interface representing MongoCollectionCreateUpdateParameters.
 * Parameters to create and update Cosmos DB Mongo collection.
 *
 */
export interface MongoCollectionCreateUpdateParameters {
  /**
   * @member {MongoCollectionResource} resource The standard JSON format of a
   * Mongo collection
   */
  resource: MongoCollectionResource;
  /**
   * @member {{ [propertyName: string]: string }} options A key-value pair of
   * options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing TableResource.
 * Cosmos DB table id object
 *
 */
export interface TableResource {
  /**
   * @member {string} id Name of the Cosmos DB table
   */
  id: string;
}

/**
 * @interface
 * An interface representing TableCreateUpdateParameters.
 * Parameters to create and update Cosmos DB Table.
 *
 */
export interface TableCreateUpdateParameters {
  /**
   * @member {TableResource} resource The standard JSON format of a Table
   */
  resource: TableResource;
  /**
   * @member {{ [propertyName: string]: string }} options A key-value pair of
   * options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing CassandraKeyspaceResource.
 * Cosmos DB Cassandra keyspace id object
 *
 */
export interface CassandraKeyspaceResource {
  /**
   * @member {string} id Name of the Cosmos DB Cassandra keyspace
   */
  id: string;
}

/**
 * @interface
 * An interface representing CassandraKeyspaceCreateUpdateParameters.
 * Parameters to create and update Cosmos DB Cassandra keyspace.
 *
 */
export interface CassandraKeyspaceCreateUpdateParameters {
  /**
   * @member {CassandraKeyspaceResource} resource The standard JSON format of a
   * Cassandra keyspace
   */
  resource: CassandraKeyspaceResource;
  /**
   * @member {{ [propertyName: string]: string }} options A key-value pair of
   * options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing Column.
 * Cosmos DB Cassandra table column
 *
 */
export interface Column {
  /**
   * @member {string} [name] Name of the Cosmos DB Cassandra table column
   */
  name?: string;
  /**
   * @member {string} [type] Type of the Cosmos DB Cassandra table column
   */
  type?: string;
}

/**
 * @interface
 * An interface representing CassandraPartitionKey.
 * Cosmos DB Cassandra table partition key
 *
 */
export interface CassandraPartitionKey {
  /**
   * @member {string} [name] Name of the Cosmos DB Cassandra table partition
   * key
   */
  name?: string;
}

/**
 * @interface
 * An interface representing ClusterKey.
 * Cosmos DB Cassandra table cluster key
 *
 */
export interface ClusterKey {
  /**
   * @member {string} [name] Name of the Cosmos DB Cassandra table cluster key
   */
  name?: string;
  /**
   * @member {string} [orderBy] Order of the Cosmos DB Cassandra table cluster
   * key, only support "Asc" and "Desc"
   */
  orderBy?: string;
}

/**
 * @interface
 * An interface representing CassandraSchema.
 * Cosmos DB Cassandra table schema
 *
 */
export interface CassandraSchema {
  /**
   * @member {Column[]} [columns] List of Cassandra table columns.
   */
  columns?: Column[];
  /**
   * @member {CassandraPartitionKey[]} [partitionKeys] List of partition key.
   */
  partitionKeys?: CassandraPartitionKey[];
  /**
   * @member {ClusterKey[]} [clusterKeys] List of cluster key.
   */
  clusterKeys?: ClusterKey[];
}

/**
 * @interface
 * An interface representing CassandraTableResource.
 * Cosmos DB Cassandra table id object
 *
 */
export interface CassandraTableResource {
  /**
   * @member {string} id Name of the Cosmos DB Cassandra table
   */
  id: string;
  /**
   * @member {number} [defaultTtl] Time to live of the Cosmos DB Cassandra
   * table
   */
  defaultTtl?: number;
  /**
   * @member {CassandraSchema} [schema] Schema of the Cosmos DB Cassandra table
   */
  schema?: CassandraSchema;
}

/**
 * @interface
 * An interface representing CassandraTableCreateUpdateParameters.
 * Parameters to create and update Cosmos DB Cassandra table.
 *
 */
export interface CassandraTableCreateUpdateParameters {
  /**
   * @member {CassandraTableResource} resource The standard JSON format of a
   * Cassandra table
   */
  resource: CassandraTableResource;
  /**
   * @member {{ [propertyName: string]: string }} options A key-value pair of
   * options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing GremlinDatabaseResource.
 * Cosmos DB Gremlin database id object
 *
 */
export interface GremlinDatabaseResource {
  /**
   * @member {string} id Name of the Cosmos DB Gremlin database
   */
  id: string;
}

/**
 * @interface
 * An interface representing GremlinDatabaseCreateUpdateParameters.
 * Parameters to create and update Cosmos DB Gremlin database.
 *
 */
export interface GremlinDatabaseCreateUpdateParameters {
  /**
   * @member {GremlinDatabaseResource} resource The standard JSON format of a
   * Gremlin database
   */
  resource: GremlinDatabaseResource;
  /**
   * @member {{ [propertyName: string]: string }} options A key-value pair of
   * options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing OperationDisplay.
 * The object that represents the operation.
 *
 */
export interface OperationDisplay {
  /**
   * @member {string} [provider] Service provider: Microsoft.ResourceProvider
   */
  provider?: string;
  /**
   * @member {string} [resource] Resource on which the operation is performed:
   * Profile, endpoint, etc.
   */
  resource?: string;
  /**
   * @member {string} [operation] Operation type: Read, write, delete, etc.
   */
  operation?: string;
  /**
   * @member {string} [description] Description of operation
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Operation.
 * REST API operation
 *
 */
export interface Operation {
  /**
   * @member {string} [name] Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * @member {OperationDisplay} [display] The object that represents the
   * operation.
   */
  display?: OperationDisplay;
}

/**
 * @interface
 * An interface representing MetricName.
 * A metric name.
 *
 */
export interface MetricName {
  /**
   * @member {string} [value] The name of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: string;
  /**
   * @member {string} [localizedValue] The friendly name of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly localizedValue?: string;
}

/**
 * @interface
 * An interface representing Usage.
 * The usage data for a usage request.
 *
 */
export interface Usage {
  /**
   * @member {UnitType} [unit] The unit of the metric. Possible values include:
   * 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond',
   * 'BytesPerSecond', 'Milliseconds'
   */
  unit?: UnitType;
  /**
   * @member {MetricName} [name] The name information for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: MetricName;
  /**
   * @member {string} [quotaPeriod] The quota period used to summarize the
   * usage values.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly quotaPeriod?: string;
  /**
   * @member {number} [limit] Maximum value for this metric
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly limit?: number;
  /**
   * @member {number} [currentValue] Current value for this metric
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currentValue?: number;
}

/**
 * @interface
 * An interface representing PartitionUsage.
 * The partition level usage data for a usage request.
 *
 * @extends Usage
 */
export interface PartitionUsage extends Usage {
  /**
   * @member {string} [partitionId] The partition id (GUID identifier) of the
   * usages.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly partitionId?: string;
  /**
   * @member {string} [partitionKeyRangeId] The partition key range id (integer
   * identifier) of the usages.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly partitionKeyRangeId?: string;
}

/**
 * @interface
 * An interface representing MetricAvailability.
 * The availability of the metric.
 *
 */
export interface MetricAvailability {
  /**
   * @member {string} [timeGrain] The time grain to be used to summarize the
   * metric values.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timeGrain?: string;
  /**
   * @member {string} [retention] The retention for the metric values.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly retention?: string;
}

/**
 * @interface
 * An interface representing MetricDefinition.
 * The definition of a metric.
 *
 */
export interface MetricDefinition {
  /**
   * @member {MetricAvailability[]} [metricAvailabilities] The list of metric
   * availabilities for the account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly metricAvailabilities?: MetricAvailability[];
  /**
   * @member {PrimaryAggregationType} [primaryAggregationType] The primary
   * aggregation type of the metric. Possible values include: 'None',
   * 'Average', 'Total', 'Minimimum', 'Maximum', 'Last'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primaryAggregationType?: PrimaryAggregationType;
  /**
   * @member {UnitType} [unit] The unit of the metric. Possible values include:
   * 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond',
   * 'BytesPerSecond', 'Milliseconds'
   */
  unit?: UnitType;
  /**
   * @member {string} [resourceUri] The resource uri of the database.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceUri?: string;
  /**
   * @member {MetricName} [name] The name information for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: MetricName;
}

/**
 * @interface
 * An interface representing MetricValue.
 * Represents metrics values.
 *
 */
export interface MetricValue {
  /**
   * @member {number} [_count] The number of values for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly _count?: number;
  /**
   * @member {number} [average] The average value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly average?: number;
  /**
   * @member {number} [maximum] The max value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly maximum?: number;
  /**
   * @member {number} [minimum] The min value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly minimum?: number;
  /**
   * @member {Date} [timestamp] The metric timestamp (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timestamp?: Date;
  /**
   * @member {number} [total] The total value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly total?: number;
}

/**
 * @interface
 * An interface representing Metric.
 * Metric data
 *
 */
export interface Metric {
  /**
   * @member {Date} [startTime] The start time for the metric (ISO-8601
   * format).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startTime?: Date;
  /**
   * @member {Date} [endTime] The end time for the metric (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endTime?: Date;
  /**
   * @member {string} [timeGrain] The time grain to be used to summarize the
   * metric values.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timeGrain?: string;
  /**
   * @member {UnitType} [unit] The unit of the metric. Possible values include:
   * 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond',
   * 'BytesPerSecond', 'Milliseconds'
   */
  unit?: UnitType;
  /**
   * @member {MetricName} [name] The name information for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: MetricName;
  /**
   * @member {MetricValue[]} [metricValues] The metric values for the specified
   * time window and timestep.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly metricValues?: MetricValue[];
}

/**
 * @interface
 * An interface representing PercentileMetricValue.
 * Represents percentile metrics values.
 *
 * @extends MetricValue
 */
export interface PercentileMetricValue extends MetricValue {
  /**
   * @member {number} [p10] The 10th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly p10?: number;
  /**
   * @member {number} [p25] The 25th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly p25?: number;
  /**
   * @member {number} [p50] The 50th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly p50?: number;
  /**
   * @member {number} [p75] The 75th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly p75?: number;
  /**
   * @member {number} [p90] The 90th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly p90?: number;
  /**
   * @member {number} [p95] The 95th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly p95?: number;
  /**
   * @member {number} [p99] The 99th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly p99?: number;
}

/**
 * @interface
 * An interface representing PercentileMetric.
 * Percentile Metric data
 *
 */
export interface PercentileMetric {
  /**
   * @member {Date} [startTime] The start time for the metric (ISO-8601
   * format).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startTime?: Date;
  /**
   * @member {Date} [endTime] The end time for the metric (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endTime?: Date;
  /**
   * @member {string} [timeGrain] The time grain to be used to summarize the
   * metric values.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timeGrain?: string;
  /**
   * @member {UnitType} [unit] The unit of the metric. Possible values include:
   * 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond',
   * 'BytesPerSecond', 'Milliseconds'
   */
  unit?: UnitType;
  /**
   * @member {MetricName} [name] The name information for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: MetricName;
  /**
   * @member {PercentileMetricValue[]} [metricValues] The percentile metric
   * values for the specified time window and timestep.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly metricValues?: PercentileMetricValue[];
}

/**
 * @interface
 * An interface representing PartitionMetric.
 * The metric values for a single partition.
 *
 * @extends Metric
 */
export interface PartitionMetric extends Metric {
  /**
   * @member {string} [partitionId] The partition id (GUID identifier) of the
   * metric values.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly partitionId?: string;
  /**
   * @member {string} [partitionKeyRangeId] The partition key range id (integer
   * identifier) of the metric values.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly partitionKeyRangeId?: string;
}

/**
 * @interface
 * An interface representing DatabaseAccountsListUsagesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DatabaseAccountsListUsagesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] An OData filter expression that describes a
   * subset of usages to return. The supported parameter is name.value (name of
   * the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing DatabaseListUsagesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DatabaseListUsagesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] An OData filter expression that describes a
   * subset of usages to return. The supported parameter is name.value (name of
   * the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing CollectionListUsagesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface CollectionListUsagesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] An OData filter expression that describes a
   * subset of usages to return. The supported parameter is name.value (name of
   * the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing CollectionPartitionListUsagesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface CollectionPartitionListUsagesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] An OData filter expression that describes a
   * subset of usages to return. The supported parameter is name.value (name of
   * the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing CosmosDBManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface CosmosDBManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the DatabaseAccountsListResult.
 * The List operation response, that contains the database accounts and their
 * properties.
 *
 * @extends Array<DatabaseAccount>
 */
export interface DatabaseAccountsListResult extends Array<DatabaseAccount> {
}

/**
 * @interface
 * An interface representing the MetricListResult.
 * The response to a list metrics request.
 *
 * @extends Array<Metric>
 */
export interface MetricListResult extends Array<Metric> {
}

/**
 * @interface
 * An interface representing the UsagesResult.
 * The response to a list usage request.
 *
 * @extends Array<Usage>
 */
export interface UsagesResult extends Array<Usage> {
}

/**
 * @interface
 * An interface representing the MetricDefinitionsListResult.
 * The response to a list metric definitions request.
 *
 * @extends Array<MetricDefinition>
 */
export interface MetricDefinitionsListResult extends Array<MetricDefinition> {
}

/**
 * @interface
 * An interface representing the SqlDatabaseListResult.
 * The List operation response, that contains the SQL databases and their
 * properties.
 *
 * @extends Array<SqlDatabase>
 */
export interface SqlDatabaseListResult extends Array<SqlDatabase> {
}

/**
 * @interface
 * An interface representing the ContainerListResult.
 * The List operation response, that contains the containers and their
 * properties.
 *
 * @extends Array<Container>
 */
export interface ContainerListResult extends Array<Container> {
}

/**
 * @interface
 * An interface representing the MongoDatabaseListResult.
 * The List operation response, that contains the Mongo databases and their
 * properties.
 *
 * @extends Array<MongoDatabase>
 */
export interface MongoDatabaseListResult extends Array<MongoDatabase> {
}

/**
 * @interface
 * An interface representing the MongoCollectionListResult.
 * The List operation response, that contains the Mongo collections and their
 * properties.
 *
 * @extends Array<MongoCollection>
 */
export interface MongoCollectionListResult extends Array<MongoCollection> {
}

/**
 * @interface
 * An interface representing the TableListResult.
 * The List operation response, that contains the Table and their properties.
 *
 * @extends Array<Table>
 */
export interface TableListResult extends Array<Table> {
}

/**
 * @interface
 * An interface representing the CassandraKeyspaceListResult.
 * The List operation response, that contains the Cassandra keyspaces and their
 * properties.
 *
 * @extends Array<CassandraKeyspace>
 */
export interface CassandraKeyspaceListResult extends Array<CassandraKeyspace> {
}

/**
 * @interface
 * An interface representing the CassandraTableListResult.
 * The List operation response, that contains the Cassandra tables and their
 * properties.
 *
 * @extends Array<CassandraTable>
 */
export interface CassandraTableListResult extends Array<CassandraTable> {
}

/**
 * @interface
 * An interface representing the GremlinDatabaseListResult.
 * The List operation response, that contains the Gremlin databases and their
 * properties.
 *
 * @extends Array<GremlinDatabase>
 */
export interface GremlinDatabaseListResult extends Array<GremlinDatabase> {
}

/**
 * @interface
 * An interface representing the OperationListResult.
 * Result of the request to list Resource Provider operations. It contains a
 * list of operations and a URL link to get the next set of results.
 *
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the PercentileMetricListResult.
 * The response to a list percentile metrics request.
 *
 * @extends Array<PercentileMetric>
 */
export interface PercentileMetricListResult extends Array<PercentileMetric> {
}

/**
 * @interface
 * An interface representing the PartitionMetricListResult.
 * The response to a list partition metrics request.
 *
 * @extends Array<PartitionMetric>
 */
export interface PartitionMetricListResult extends Array<PartitionMetric> {
}

/**
 * @interface
 * An interface representing the PartitionUsagesResult.
 * The response to a list partition level usage request.
 *
 * @extends Array<PartitionUsage>
 */
export interface PartitionUsagesResult extends Array<PartitionUsage> {
}

/**
 * Defines values for DatabaseAccountKind.
 * Possible values include: 'GlobalDocumentDB', 'MongoDB', 'Parse'
 * @readonly
 * @enum {string}
 */
export type DatabaseAccountKind = 'GlobalDocumentDB' | 'MongoDB' | 'Parse';

/**
 * Defines values for DatabaseAccountOfferType.
 * Possible values include: 'Standard'
 * @readonly
 * @enum {string}
 */
export type DatabaseAccountOfferType = 'Standard';

/**
 * Defines values for DefaultConsistencyLevel.
 * Possible values include: 'Eventual', 'Session', 'BoundedStaleness', 'Strong', 'ConsistentPrefix'
 * @readonly
 * @enum {string}
 */
export type DefaultConsistencyLevel = 'Eventual' | 'Session' | 'BoundedStaleness' | 'Strong' | 'ConsistentPrefix';

/**
 * Defines values for IndexingMode.
 * Possible values include: 'Consistent', 'Lazy', 'None'
 * @readonly
 * @enum {string}
 */
export type IndexingMode = 'Consistent' | 'Lazy' | 'None';

/**
 * Defines values for DataType.
 * Possible values include: 'String', 'Number', 'Point', 'Polygon', 'LineString', 'MultiPolygon'
 * @readonly
 * @enum {string}
 */
export type DataType = 'String' | 'Number' | 'Point' | 'Polygon' | 'LineString' | 'MultiPolygon';

/**
 * Defines values for IndexKind.
 * Possible values include: 'Hash', 'Range', 'Spatial'
 * @readonly
 * @enum {string}
 */
export type IndexKind = 'Hash' | 'Range' | 'Spatial';

/**
 * Defines values for PartitionKind.
 * Possible values include: 'Hash', 'Range'
 * @readonly
 * @enum {string}
 */
export type PartitionKind = 'Hash' | 'Range';

/**
 * Defines values for ConflictResolutionMode.
 * Possible values include: 'LastWriterWins', 'Custom'
 * @readonly
 * @enum {string}
 */
export type ConflictResolutionMode = 'LastWriterWins' | 'Custom';

/**
 * Defines values for KeyKind.
 * Possible values include: 'primary', 'secondary', 'primaryReadonly', 'secondaryReadonly'
 * @readonly
 * @enum {string}
 */
export type KeyKind = 'primary' | 'secondary' | 'primaryReadonly' | 'secondaryReadonly';

/**
 * Defines values for UnitType.
 * Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond',
 * 'BytesPerSecond', 'Milliseconds'
 * @readonly
 * @enum {string}
 */
export type UnitType = 'Count' | 'Bytes' | 'Seconds' | 'Percent' | 'CountPerSecond' | 'BytesPerSecond' | 'Milliseconds';

/**
 * Defines values for PrimaryAggregationType.
 * Possible values include: 'None', 'Average', 'Total', 'Minimimum', 'Maximum', 'Last'
 * @readonly
 * @enum {string}
 */
export type PrimaryAggregationType = 'None' | 'Average' | 'Total' | 'Minimimum' | 'Maximum' | 'Last';

/**
 * Contains response data for the get operation.
 */
export type DatabaseAccountsGetResponse = DatabaseAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccount;
    };
};

/**
 * Contains response data for the patch operation.
 */
export type DatabaseAccountsPatchResponse = DatabaseAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccount;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseAccountsCreateOrUpdateResponse = DatabaseAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccount;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DatabaseAccountsListResponse = DatabaseAccountsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountsListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DatabaseAccountsListByResourceGroupResponse = DatabaseAccountsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountsListResult;
    };
};

/**
 * Contains response data for the listKeys operation.
 */
export type DatabaseAccountsListKeysResponse = DatabaseAccountListKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountListKeysResult;
    };
};

/**
 * Contains response data for the listConnectionStrings operation.
 */
export type DatabaseAccountsListConnectionStringsResponse = DatabaseAccountListConnectionStringsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountListConnectionStringsResult;
    };
};

/**
 * Contains response data for the getReadOnlyKeys operation.
 */
export type DatabaseAccountsGetReadOnlyKeysResponse = DatabaseAccountListReadOnlyKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountListReadOnlyKeysResult;
    };
};

/**
 * Contains response data for the listReadOnlyKeys operation.
 */
export type DatabaseAccountsListReadOnlyKeysResponse = DatabaseAccountListReadOnlyKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountListReadOnlyKeysResult;
    };
};

/**
 * Contains response data for the checkNameExists operation.
 */
export type DatabaseAccountsCheckNameExistsResponse = {
  /**
   * The parsed response body.
   */
  body: boolean;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: boolean;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabaseAccountsListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listUsages operation.
 */
export type DatabaseAccountsListUsagesResponse = UsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesResult;
    };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type DatabaseAccountsListMetricDefinitionsResponse = MetricDefinitionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricDefinitionsListResult;
    };
};

/**
 * Contains response data for the listSqlDatabases operation.
 */
export type DatabaseAccountsListSqlDatabasesResponse = SqlDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlDatabaseListResult;
    };
};

/**
 * Contains response data for the getSqlDatabase operation.
 */
export type DatabaseAccountsGetSqlDatabaseResponse = SqlDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlDatabase;
    };
};

/**
 * Contains response data for the createUpdateSqlDatabase operation.
 */
export type DatabaseAccountsCreateUpdateSqlDatabaseResponse = SqlDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlDatabase;
    };
};

/**
 * Contains response data for the listSqlContainers operation.
 */
export type DatabaseAccountsListSqlContainersResponse = ContainerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ContainerListResult;
    };
};

/**
 * Contains response data for the getSqlContainer operation.
 */
export type DatabaseAccountsGetSqlContainerResponse = Container & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Container;
    };
};

/**
 * Contains response data for the createUpdateSqlContainer operation.
 */
export type DatabaseAccountsCreateUpdateSqlContainerResponse = Container & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Container;
    };
};

/**
 * Contains response data for the listMongoDatabases operation.
 */
export type DatabaseAccountsListMongoDatabasesResponse = MongoDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDatabaseListResult;
    };
};

/**
 * Contains response data for the getMongoDatabase operation.
 */
export type DatabaseAccountsGetMongoDatabaseResponse = MongoDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDatabase;
    };
};

/**
 * Contains response data for the createUpdateMongoDatabase operation.
 */
export type DatabaseAccountsCreateUpdateMongoDatabaseResponse = MongoDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDatabase;
    };
};

/**
 * Contains response data for the listMongoCollections operation.
 */
export type DatabaseAccountsListMongoCollectionsResponse = MongoCollectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoCollectionListResult;
    };
};

/**
 * Contains response data for the getMongoCollection operation.
 */
export type DatabaseAccountsGetMongoCollectionResponse = MongoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoCollection;
    };
};

/**
 * Contains response data for the createUpdateMongoCollection operation.
 */
export type DatabaseAccountsCreateUpdateMongoCollectionResponse = MongoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoCollection;
    };
};

/**
 * Contains response data for the listTables operation.
 */
export type DatabaseAccountsListTablesResponse = TableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TableListResult;
    };
};

/**
 * Contains response data for the getTable operation.
 */
export type DatabaseAccountsGetTableResponse = Table & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Table;
    };
};

/**
 * Contains response data for the createUpdateTable operation.
 */
export type DatabaseAccountsCreateUpdateTableResponse = Table & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Table;
    };
};

/**
 * Contains response data for the listCassandraKeyspaces operation.
 */
export type DatabaseAccountsListCassandraKeyspacesResponse = CassandraKeyspaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraKeyspaceListResult;
    };
};

/**
 * Contains response data for the getCassandraKeyspace operation.
 */
export type DatabaseAccountsGetCassandraKeyspaceResponse = CassandraKeyspace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraKeyspace;
    };
};

/**
 * Contains response data for the createUpdateCassandraKeyspace operation.
 */
export type DatabaseAccountsCreateUpdateCassandraKeyspaceResponse = CassandraKeyspace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraKeyspace;
    };
};

/**
 * Contains response data for the listCassandraTables operation.
 */
export type DatabaseAccountsListCassandraTablesResponse = CassandraTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraTableListResult;
    };
};

/**
 * Contains response data for the getCassandraTable operation.
 */
export type DatabaseAccountsGetCassandraTableResponse = CassandraTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraTable;
    };
};

/**
 * Contains response data for the createUpdateCassandraTable operation.
 */
export type DatabaseAccountsCreateUpdateCassandraTableResponse = CassandraTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraTable;
    };
};

/**
 * Contains response data for the listGremlinDatabases operation.
 */
export type DatabaseAccountsListGremlinDatabasesResponse = GremlinDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinDatabaseListResult;
    };
};

/**
 * Contains response data for the getGremlinDatabase operation.
 */
export type DatabaseAccountsGetGremlinDatabaseResponse = GremlinDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinDatabase;
    };
};

/**
 * Contains response data for the createUpdateGremlinDatabase operation.
 */
export type DatabaseAccountsCreateUpdateGremlinDatabaseResponse = GremlinDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinDatabase;
    };
};

/**
 * Contains response data for the listGremlinContainers operation.
 */
export type DatabaseAccountsListGremlinContainersResponse = ContainerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ContainerListResult;
    };
};

/**
 * Contains response data for the getGremlinContainer operation.
 */
export type DatabaseAccountsGetGremlinContainerResponse = Container & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Container;
    };
};

/**
 * Contains response data for the createUpdateGremlinContainer operation.
 */
export type DatabaseAccountsCreateUpdateGremlinContainerResponse = Container & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Container;
    };
};

/**
 * Contains response data for the beginPatch operation.
 */
export type DatabaseAccountsBeginPatchResponse = DatabaseAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccount;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DatabaseAccountsBeginCreateOrUpdateResponse = DatabaseAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccount;
    };
};

/**
 * Contains response data for the beginCreateUpdateSqlDatabase operation.
 */
export type DatabaseAccountsBeginCreateUpdateSqlDatabaseResponse = SqlDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlDatabase;
    };
};

/**
 * Contains response data for the beginCreateUpdateSqlContainer operation.
 */
export type DatabaseAccountsBeginCreateUpdateSqlContainerResponse = Container & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Container;
    };
};

/**
 * Contains response data for the beginCreateUpdateMongoDatabase operation.
 */
export type DatabaseAccountsBeginCreateUpdateMongoDatabaseResponse = MongoDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDatabase;
    };
};

/**
 * Contains response data for the beginCreateUpdateMongoCollection operation.
 */
export type DatabaseAccountsBeginCreateUpdateMongoCollectionResponse = MongoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoCollection;
    };
};

/**
 * Contains response data for the beginCreateUpdateTable operation.
 */
export type DatabaseAccountsBeginCreateUpdateTableResponse = Table & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Table;
    };
};

/**
 * Contains response data for the beginCreateUpdateCassandraKeyspace operation.
 */
export type DatabaseAccountsBeginCreateUpdateCassandraKeyspaceResponse = CassandraKeyspace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraKeyspace;
    };
};

/**
 * Contains response data for the beginCreateUpdateCassandraTable operation.
 */
export type DatabaseAccountsBeginCreateUpdateCassandraTableResponse = CassandraTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraTable;
    };
};

/**
 * Contains response data for the beginCreateUpdateGremlinDatabase operation.
 */
export type DatabaseAccountsBeginCreateUpdateGremlinDatabaseResponse = GremlinDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinDatabase;
    };
};

/**
 * Contains response data for the beginCreateUpdateGremlinContainer operation.
 */
export type DatabaseAccountsBeginCreateUpdateGremlinContainerResponse = Container & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Container;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabaseListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listUsages operation.
 */
export type DatabaseListUsagesResponse = UsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesResult;
    };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type DatabaseListMetricDefinitionsResponse = MetricDefinitionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricDefinitionsListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listUsages operation.
 */
export type CollectionListUsagesResponse = UsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesResult;
    };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type CollectionListMetricDefinitionsResponse = MetricDefinitionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricDefinitionsListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionRegionListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabaseAccountRegionListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PercentileSourceTargetListMetricsResponse = PercentileMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PercentileMetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PercentileTargetListMetricsResponse = PercentileMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PercentileMetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PercentileListMetricsResponse = PercentileMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PercentileMetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionPartitionRegionListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PartitionMetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionPartitionListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PartitionMetricListResult;
    };
};

/**
 * Contains response data for the listUsages operation.
 */
export type CollectionPartitionListUsagesResponse = PartitionUsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PartitionUsagesResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PartitionKeyRangeIdListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PartitionMetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PartitionKeyRangeIdRegionListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PartitionMetricListResult;
    };
};
