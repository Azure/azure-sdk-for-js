/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  DatabaseAccountsImpl,
  OperationsImpl,
  DatabaseImpl,
  CollectionImpl,
  CollectionRegionImpl,
  DatabaseAccountRegionImpl,
  PercentileSourceTargetImpl,
  PercentileTargetImpl,
  PercentileImpl,
  CollectionPartitionRegionImpl,
  CollectionPartitionImpl,
  PartitionKeyRangeIdImpl,
  PartitionKeyRangeIdRegionImpl,
  GraphResourcesImpl,
  SqlResourcesImpl,
  MongoDBResourcesImpl,
  TableResourcesImpl,
  CassandraResourcesImpl,
  GremlinResourcesImpl,
  NotebookWorkspacesImpl,
  PrivateEndpointConnectionsImpl,
  PrivateLinkResourcesImpl,
  RestorableDatabaseAccountsImpl,
  RestorableSqlDatabasesImpl,
  RestorableSqlContainersImpl,
  RestorableSqlResourcesImpl,
  RestorableMongodbDatabasesImpl,
  RestorableMongodbCollectionsImpl,
  RestorableMongodbResourcesImpl,
  CassandraClustersImpl,
  CassandraDataCentersImpl,
  ServiceImpl
} from "./operations";
import {
  DatabaseAccounts,
  Operations,
  Database,
  Collection,
  CollectionRegion,
  DatabaseAccountRegion,
  PercentileSourceTarget,
  PercentileTarget,
  Percentile,
  CollectionPartitionRegion,
  CollectionPartition,
  PartitionKeyRangeId,
  PartitionKeyRangeIdRegion,
  GraphResources,
  SqlResources,
  MongoDBResources,
  TableResources,
  CassandraResources,
  GremlinResources,
  NotebookWorkspaces,
  PrivateEndpointConnections,
  PrivateLinkResources,
  RestorableDatabaseAccounts,
  RestorableSqlDatabases,
  RestorableSqlContainers,
  RestorableSqlResources,
  RestorableMongodbDatabases,
  RestorableMongodbCollections,
  RestorableMongodbResources,
  CassandraClusters,
  CassandraDataCenters,
  Service
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { CosmosDBManagementClientContext } from "./cosmosDBManagementClientContext";
import {
  CosmosDBManagementClientOptionalParams,
  LocationGetResult,
  CosmosDBManagementClientLocationListOptionalParams,
  CosmosDBManagementClientLocationListResponse,
  CosmosDBManagementClientLocationGetOptionalParams,
  CosmosDBManagementClientLocationGetResponse
} from "./models";

/// <reference lib="esnext.asynciterable" />
export class CosmosDBManagementClient extends CosmosDBManagementClientContext {
  /**
   * Initializes a new instance of the CosmosDBManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: CosmosDBManagementClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.databaseAccounts = new DatabaseAccountsImpl(this);
    this.operations = new OperationsImpl(this);
    this.database = new DatabaseImpl(this);
    this.collection = new CollectionImpl(this);
    this.collectionRegion = new CollectionRegionImpl(this);
    this.databaseAccountRegion = new DatabaseAccountRegionImpl(this);
    this.percentileSourceTarget = new PercentileSourceTargetImpl(this);
    this.percentileTarget = new PercentileTargetImpl(this);
    this.percentile = new PercentileImpl(this);
    this.collectionPartitionRegion = new CollectionPartitionRegionImpl(this);
    this.collectionPartition = new CollectionPartitionImpl(this);
    this.partitionKeyRangeId = new PartitionKeyRangeIdImpl(this);
    this.partitionKeyRangeIdRegion = new PartitionKeyRangeIdRegionImpl(this);
    this.graphResources = new GraphResourcesImpl(this);
    this.sqlResources = new SqlResourcesImpl(this);
    this.mongoDBResources = new MongoDBResourcesImpl(this);
    this.tableResources = new TableResourcesImpl(this);
    this.cassandraResources = new CassandraResourcesImpl(this);
    this.gremlinResources = new GremlinResourcesImpl(this);
    this.notebookWorkspaces = new NotebookWorkspacesImpl(this);
    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
    this.privateLinkResources = new PrivateLinkResourcesImpl(this);
    this.restorableDatabaseAccounts = new RestorableDatabaseAccountsImpl(this);
    this.restorableSqlDatabases = new RestorableSqlDatabasesImpl(this);
    this.restorableSqlContainers = new RestorableSqlContainersImpl(this);
    this.restorableSqlResources = new RestorableSqlResourcesImpl(this);
    this.restorableMongodbDatabases = new RestorableMongodbDatabasesImpl(this);
    this.restorableMongodbCollections = new RestorableMongodbCollectionsImpl(
      this
    );
    this.restorableMongodbResources = new RestorableMongodbResourcesImpl(this);
    this.cassandraClusters = new CassandraClustersImpl(this);
    this.cassandraDataCenters = new CassandraDataCentersImpl(this);
    this.service = new ServiceImpl(this);
  }

  /**
   * List Cosmos DB locations and their properties
   * @param options The options parameters.
   */
  public listLocationList(
    options?: CosmosDBManagementClientLocationListOptionalParams
  ): PagedAsyncIterableIterator<LocationGetResult> {
    const iter = this.locationListPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.locationListPagingPage(options);
      }
    };
  }

  private async *locationListPagingPage(
    options?: CosmosDBManagementClientLocationListOptionalParams
  ): AsyncIterableIterator<LocationGetResult[]> {
    let result = await this._locationList(options);
    yield result.value || [];
  }

  private async *locationListPagingAll(
    options?: CosmosDBManagementClientLocationListOptionalParams
  ): AsyncIterableIterator<LocationGetResult> {
    for await (const page of this.locationListPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List Cosmos DB locations and their properties
   * @param options The options parameters.
   */
  private _locationList(
    options?: CosmosDBManagementClientLocationListOptionalParams
  ): Promise<CosmosDBManagementClientLocationListResponse> {
    return this.sendOperationRequest({ options }, locationListOperationSpec);
  }

  /**
   * Get the properties of an existing Cosmos DB location
   * @param location Cosmos DB region, with spaces between words and each word capitalized.
   * @param options The options parameters.
   */
  locationGet(
    location: string,
    options?: CosmosDBManagementClientLocationGetOptionalParams
  ): Promise<CosmosDBManagementClientLocationGetResponse> {
    return this.sendOperationRequest(
      { location, options },
      locationGetOperationSpec
    );
  }

  databaseAccounts: DatabaseAccounts;
  operations: Operations;
  database: Database;
  collection: Collection;
  collectionRegion: CollectionRegion;
  databaseAccountRegion: DatabaseAccountRegion;
  percentileSourceTarget: PercentileSourceTarget;
  percentileTarget: PercentileTarget;
  percentile: Percentile;
  collectionPartitionRegion: CollectionPartitionRegion;
  collectionPartition: CollectionPartition;
  partitionKeyRangeId: PartitionKeyRangeId;
  partitionKeyRangeIdRegion: PartitionKeyRangeIdRegion;
  graphResources: GraphResources;
  sqlResources: SqlResources;
  mongoDBResources: MongoDBResources;
  tableResources: TableResources;
  cassandraResources: CassandraResources;
  gremlinResources: GremlinResources;
  notebookWorkspaces: NotebookWorkspaces;
  privateEndpointConnections: PrivateEndpointConnections;
  privateLinkResources: PrivateLinkResources;
  restorableDatabaseAccounts: RestorableDatabaseAccounts;
  restorableSqlDatabases: RestorableSqlDatabases;
  restorableSqlContainers: RestorableSqlContainers;
  restorableSqlResources: RestorableSqlResources;
  restorableMongodbDatabases: RestorableMongodbDatabases;
  restorableMongodbCollections: RestorableMongodbCollections;
  restorableMongodbResources: RestorableMongodbResources;
  cassandraClusters: CassandraClusters;
  cassandraDataCenters: CassandraDataCenters;
  service: Service;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const locationListOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const locationGetOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocationGetResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
