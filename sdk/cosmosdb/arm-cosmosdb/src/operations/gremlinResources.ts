/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { GremlinResources } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CosmosDBManagementClient } from "../cosmosDBManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  GremlinDatabaseGetResults,
  GremlinResourcesListGremlinDatabasesOptionalParams,
  GremlinGraphGetResults,
  GremlinResourcesListGremlinGraphsOptionalParams,
  GremlinResourcesListGremlinDatabasesResponse,
  GremlinResourcesGetGremlinDatabaseOptionalParams,
  GremlinResourcesGetGremlinDatabaseResponse,
  GremlinDatabaseCreateUpdateParameters,
  GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams,
  GremlinResourcesCreateUpdateGremlinDatabaseResponse,
  GremlinResourcesDeleteGremlinDatabaseOptionalParams,
  GremlinResourcesGetGremlinDatabaseThroughputOptionalParams,
  GremlinResourcesGetGremlinDatabaseThroughputResponse,
  ThroughputSettingsUpdateParameters,
  GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams,
  GremlinResourcesUpdateGremlinDatabaseThroughputResponse,
  GremlinResourcesMigrateGremlinDatabaseToAutoscaleOptionalParams,
  GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse,
  GremlinResourcesMigrateGremlinDatabaseToManualThroughputOptionalParams,
  GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse,
  GremlinResourcesListGremlinGraphsResponse,
  GremlinResourcesGetGremlinGraphOptionalParams,
  GremlinResourcesGetGremlinGraphResponse,
  GremlinGraphCreateUpdateParameters,
  GremlinResourcesCreateUpdateGremlinGraphOptionalParams,
  GremlinResourcesCreateUpdateGremlinGraphResponse,
  GremlinResourcesDeleteGremlinGraphOptionalParams,
  GremlinResourcesGetGremlinGraphThroughputOptionalParams,
  GremlinResourcesGetGremlinGraphThroughputResponse,
  GremlinResourcesUpdateGremlinGraphThroughputOptionalParams,
  GremlinResourcesUpdateGremlinGraphThroughputResponse,
  GremlinResourcesMigrateGremlinGraphToAutoscaleOptionalParams,
  GremlinResourcesMigrateGremlinGraphToAutoscaleResponse,
  GremlinResourcesMigrateGremlinGraphToManualThroughputOptionalParams,
  GremlinResourcesMigrateGremlinGraphToManualThroughputResponse,
  ContinuousBackupRestoreLocation,
  GremlinResourcesRetrieveContinuousBackupInformationOptionalParams,
  GremlinResourcesRetrieveContinuousBackupInformationResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GremlinResources operations. */
export class GremlinResourcesImpl implements GremlinResources {
  private readonly client: CosmosDBManagementClient;

  /**
   * Initialize a new instance of the class GremlinResources class.
   * @param client Reference to the service client
   */
  constructor(client: CosmosDBManagementClient) {
    this.client = client;
  }

  /**
   * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  public listGremlinDatabases(
    resourceGroupName: string,
    accountName: string,
    options?: GremlinResourcesListGremlinDatabasesOptionalParams
  ): PagedAsyncIterableIterator<GremlinDatabaseGetResults> {
    const iter = this.listGremlinDatabasesPagingAll(
      resourceGroupName,
      accountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listGremlinDatabasesPagingPage(
          resourceGroupName,
          accountName,
          options
        );
      }
    };
  }

  private async *listGremlinDatabasesPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: GremlinResourcesListGremlinDatabasesOptionalParams
  ): AsyncIterableIterator<GremlinDatabaseGetResults[]> {
    let result = await this._listGremlinDatabases(
      resourceGroupName,
      accountName,
      options
    );
    yield result.value || [];
  }

  private async *listGremlinDatabasesPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: GremlinResourcesListGremlinDatabasesOptionalParams
  ): AsyncIterableIterator<GremlinDatabaseGetResults> {
    for await (const page of this.listGremlinDatabasesPagingPage(
      resourceGroupName,
      accountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  public listGremlinGraphs(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesListGremlinGraphsOptionalParams
  ): PagedAsyncIterableIterator<GremlinGraphGetResults> {
    const iter = this.listGremlinGraphsPagingAll(
      resourceGroupName,
      accountName,
      databaseName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listGremlinGraphsPagingPage(
          resourceGroupName,
          accountName,
          databaseName,
          options
        );
      }
    };
  }

  private async *listGremlinGraphsPagingPage(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesListGremlinGraphsOptionalParams
  ): AsyncIterableIterator<GremlinGraphGetResults[]> {
    let result = await this._listGremlinGraphs(
      resourceGroupName,
      accountName,
      databaseName,
      options
    );
    yield result.value || [];
  }

  private async *listGremlinGraphsPagingAll(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesListGremlinGraphsOptionalParams
  ): AsyncIterableIterator<GremlinGraphGetResults> {
    for await (const page of this.listGremlinGraphsPagingPage(
      resourceGroupName,
      accountName,
      databaseName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  private _listGremlinDatabases(
    resourceGroupName: string,
    accountName: string,
    options?: GremlinResourcesListGremlinDatabasesOptionalParams
  ): Promise<GremlinResourcesListGremlinDatabasesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listGremlinDatabasesOperationSpec
    );
  }

  /**
   * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided
   * name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  getGremlinDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesGetGremlinDatabaseOptionalParams
  ): Promise<GremlinResourcesGetGremlinDatabaseResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, databaseName, options },
      getGremlinDatabaseOperationSpec
    );
  }

  /**
   * Create or update an Azure Cosmos DB Gremlin database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin
   *                                              database.
   * @param options The options parameters.
   */
  async beginCreateUpdateGremlinDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    createUpdateGremlinDatabaseParameters: GremlinDatabaseCreateUpdateParameters,
    options?: GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<GremlinResourcesCreateUpdateGremlinDatabaseResponse>,
      GremlinResourcesCreateUpdateGremlinDatabaseResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GremlinResourcesCreateUpdateGremlinDatabaseResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        accountName,
        databaseName,
        createUpdateGremlinDatabaseParameters,
        options
      },
      createUpdateGremlinDatabaseOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update an Azure Cosmos DB Gremlin database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin
   *                                              database.
   * @param options The options parameters.
   */
  async beginCreateUpdateGremlinDatabaseAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    createUpdateGremlinDatabaseParameters: GremlinDatabaseCreateUpdateParameters,
    options?: GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams
  ): Promise<GremlinResourcesCreateUpdateGremlinDatabaseResponse> {
    const poller = await this.beginCreateUpdateGremlinDatabase(
      resourceGroupName,
      accountName,
      databaseName,
      createUpdateGremlinDatabaseParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes an existing Azure Cosmos DB Gremlin database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  async beginDeleteGremlinDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesDeleteGremlinDatabaseOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, databaseName, options },
      deleteGremlinDatabaseOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes an existing Azure Cosmos DB Gremlin database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  async beginDeleteGremlinDatabaseAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesDeleteGremlinDatabaseOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteGremlinDatabase(
      resourceGroupName,
      accountName,
      databaseName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account
   * with the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  getGremlinDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesGetGremlinDatabaseThroughputOptionalParams
  ): Promise<GremlinResourcesGetGremlinDatabaseThroughputResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, databaseName, options },
      getGremlinDatabaseThroughputOperationSpec
    );
  }

  /**
   * Update RUs per second of an Azure Cosmos DB Gremlin database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
   *                                   Gremlin database.
   * @param options The options parameters.
   */
  async beginUpdateGremlinDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GremlinResourcesUpdateGremlinDatabaseThroughputResponse
      >,
      GremlinResourcesUpdateGremlinDatabaseThroughputResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GremlinResourcesUpdateGremlinDatabaseThroughputResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        accountName,
        databaseName,
        updateThroughputParameters,
        options
      },
      updateGremlinDatabaseThroughputOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update RUs per second of an Azure Cosmos DB Gremlin database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
   *                                   Gremlin database.
   * @param options The options parameters.
   */
  async beginUpdateGremlinDatabaseThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams
  ): Promise<GremlinResourcesUpdateGremlinDatabaseThroughputResponse> {
    const poller = await this.beginUpdateGremlinDatabaseThroughput(
      resourceGroupName,
      accountName,
      databaseName,
      updateThroughputParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Migrate an Azure Cosmos DB Gremlin database from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  async beginMigrateGremlinDatabaseToAutoscale(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesMigrateGremlinDatabaseToAutoscaleOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse
      >,
      GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, databaseName, options },
      migrateGremlinDatabaseToAutoscaleOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Migrate an Azure Cosmos DB Gremlin database from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  async beginMigrateGremlinDatabaseToAutoscaleAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesMigrateGremlinDatabaseToAutoscaleOptionalParams
  ): Promise<GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse> {
    const poller = await this.beginMigrateGremlinDatabaseToAutoscale(
      resourceGroupName,
      accountName,
      databaseName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Migrate an Azure Cosmos DB Gremlin database from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  async beginMigrateGremlinDatabaseToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesMigrateGremlinDatabaseToManualThroughputOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse
      >,
      GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, databaseName, options },
      migrateGremlinDatabaseToManualThroughputOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Migrate an Azure Cosmos DB Gremlin database from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  async beginMigrateGremlinDatabaseToManualThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesMigrateGremlinDatabaseToManualThroughputOptionalParams
  ): Promise<GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse> {
    const poller = await this.beginMigrateGremlinDatabaseToManualThroughput(
      resourceGroupName,
      accountName,
      databaseName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  private _listGremlinGraphs(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesListGremlinGraphsOptionalParams
  ): Promise<GremlinResourcesListGremlinGraphsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, databaseName, options },
      listGremlinGraphsOperationSpec
    );
  }

  /**
   * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  getGremlinGraph(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesGetGremlinGraphOptionalParams
  ): Promise<GremlinResourcesGetGremlinGraphResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, databaseName, graphName, options },
      getGremlinGraphOperationSpec
    );
  }

  /**
   * Create or update an Azure Cosmos DB Gremlin graph
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph.
   * @param options The options parameters.
   */
  async beginCreateUpdateGremlinGraph(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    createUpdateGremlinGraphParameters: GremlinGraphCreateUpdateParameters,
    options?: GremlinResourcesCreateUpdateGremlinGraphOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<GremlinResourcesCreateUpdateGremlinGraphResponse>,
      GremlinResourcesCreateUpdateGremlinGraphResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GremlinResourcesCreateUpdateGremlinGraphResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        accountName,
        databaseName,
        graphName,
        createUpdateGremlinGraphParameters,
        options
      },
      createUpdateGremlinGraphOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update an Azure Cosmos DB Gremlin graph
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph.
   * @param options The options parameters.
   */
  async beginCreateUpdateGremlinGraphAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    createUpdateGremlinGraphParameters: GremlinGraphCreateUpdateParameters,
    options?: GremlinResourcesCreateUpdateGremlinGraphOptionalParams
  ): Promise<GremlinResourcesCreateUpdateGremlinGraphResponse> {
    const poller = await this.beginCreateUpdateGremlinGraph(
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      createUpdateGremlinGraphParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes an existing Azure Cosmos DB Gremlin graph.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  async beginDeleteGremlinGraph(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesDeleteGremlinGraphOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, databaseName, graphName, options },
      deleteGremlinGraphOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes an existing Azure Cosmos DB Gremlin graph.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  async beginDeleteGremlinGraphAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesDeleteGremlinGraphOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteGremlinGraph(
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the
   * provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  getGremlinGraphThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesGetGremlinGraphThroughputOptionalParams
  ): Promise<GremlinResourcesGetGremlinGraphThroughputResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, databaseName, graphName, options },
      getGremlinGraphThroughputOperationSpec
    );
  }

  /**
   * Update RUs per second of an Azure Cosmos DB Gremlin graph
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
   *                                   Gremlin graph.
   * @param options The options parameters.
   */
  async beginUpdateGremlinGraphThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: GremlinResourcesUpdateGremlinGraphThroughputOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<GremlinResourcesUpdateGremlinGraphThroughputResponse>,
      GremlinResourcesUpdateGremlinGraphThroughputResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GremlinResourcesUpdateGremlinGraphThroughputResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        accountName,
        databaseName,
        graphName,
        updateThroughputParameters,
        options
      },
      updateGremlinGraphThroughputOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update RUs per second of an Azure Cosmos DB Gremlin graph
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
   *                                   Gremlin graph.
   * @param options The options parameters.
   */
  async beginUpdateGremlinGraphThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: GremlinResourcesUpdateGremlinGraphThroughputOptionalParams
  ): Promise<GremlinResourcesUpdateGremlinGraphThroughputResponse> {
    const poller = await this.beginUpdateGremlinGraphThroughput(
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      updateThroughputParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Migrate an Azure Cosmos DB Gremlin graph from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  async beginMigrateGremlinGraphToAutoscale(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesMigrateGremlinGraphToAutoscaleOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GremlinResourcesMigrateGremlinGraphToAutoscaleResponse
      >,
      GremlinResourcesMigrateGremlinGraphToAutoscaleResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GremlinResourcesMigrateGremlinGraphToAutoscaleResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, databaseName, graphName, options },
      migrateGremlinGraphToAutoscaleOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Migrate an Azure Cosmos DB Gremlin graph from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  async beginMigrateGremlinGraphToAutoscaleAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesMigrateGremlinGraphToAutoscaleOptionalParams
  ): Promise<GremlinResourcesMigrateGremlinGraphToAutoscaleResponse> {
    const poller = await this.beginMigrateGremlinGraphToAutoscale(
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Migrate an Azure Cosmos DB Gremlin graph from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  async beginMigrateGremlinGraphToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesMigrateGremlinGraphToManualThroughputOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GremlinResourcesMigrateGremlinGraphToManualThroughputResponse
      >,
      GremlinResourcesMigrateGremlinGraphToManualThroughputResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GremlinResourcesMigrateGremlinGraphToManualThroughputResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, databaseName, graphName, options },
      migrateGremlinGraphToManualThroughputOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Migrate an Azure Cosmos DB Gremlin graph from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  async beginMigrateGremlinGraphToManualThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesMigrateGremlinGraphToManualThroughputOptionalParams
  ): Promise<GremlinResourcesMigrateGremlinGraphToManualThroughputResponse> {
    const poller = await this.beginMigrateGremlinGraphToManualThroughput(
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Retrieves continuous backup information for a gremlin graph.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param location The name of the continuous backup restore location.
   * @param options The options parameters.
   */
  async beginRetrieveContinuousBackupInformation(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    location: ContinuousBackupRestoreLocation,
    options?: GremlinResourcesRetrieveContinuousBackupInformationOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GremlinResourcesRetrieveContinuousBackupInformationResponse
      >,
      GremlinResourcesRetrieveContinuousBackupInformationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GremlinResourcesRetrieveContinuousBackupInformationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        accountName,
        databaseName,
        graphName,
        location,
        options
      },
      retrieveContinuousBackupInformationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Retrieves continuous backup information for a gremlin graph.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param location The name of the continuous backup restore location.
   * @param options The options parameters.
   */
  async beginRetrieveContinuousBackupInformationAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    location: ContinuousBackupRestoreLocation,
    options?: GremlinResourcesRetrieveContinuousBackupInformationOptionalParams
  ): Promise<GremlinResourcesRetrieveContinuousBackupInformationResponse> {
    const poller = await this.beginRetrieveContinuousBackupInformation(
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      location,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listGremlinDatabasesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinDatabaseListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getGremlinDatabaseOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinDatabaseGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createUpdateGremlinDatabaseOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinDatabaseGetResults
    },
    201: {
      bodyMapper: Mappers.GremlinDatabaseGetResults
    },
    202: {
      bodyMapper: Mappers.GremlinDatabaseGetResults
    },
    204: {
      bodyMapper: Mappers.GremlinDatabaseGetResults
    }
  },
  requestBody: Parameters.createUpdateGremlinDatabaseParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteGremlinDatabaseOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  serializer
};
const getGremlinDatabaseThroughputOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateGremlinDatabaseThroughputOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    201: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    204: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  requestBody: Parameters.updateThroughputParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const migrateGremlinDatabaseToAutoscaleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default/migrateToAutoscale",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    201: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    204: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const migrateGremlinDatabaseToManualThroughputOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default/migrateToManualThroughput",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    201: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    204: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGremlinGraphsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinGraphListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getGremlinGraphOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinGraphGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.graphName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createUpdateGremlinGraphOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinGraphGetResults
    },
    201: {
      bodyMapper: Mappers.GremlinGraphGetResults
    },
    202: {
      bodyMapper: Mappers.GremlinGraphGetResults
    },
    204: {
      bodyMapper: Mappers.GremlinGraphGetResults
    }
  },
  requestBody: Parameters.createUpdateGremlinGraphParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.graphName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteGremlinGraphOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.graphName,
    Parameters.databaseName
  ],
  serializer
};
const getGremlinGraphThroughputOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.graphName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateGremlinGraphThroughputOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    201: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    204: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  requestBody: Parameters.updateThroughputParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.graphName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const migrateGremlinGraphToAutoscaleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default/migrateToAutoscale",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    201: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    204: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.graphName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const migrateGremlinGraphToManualThroughputOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default/migrateToManualThroughput",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    201: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    204: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.graphName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const retrieveContinuousBackupInformationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/retrieveContinuousBackupInformation",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupInformation
    },
    201: {
      bodyMapper: Mappers.BackupInformation
    },
    202: {
      bodyMapper: Mappers.BackupInformation
    },
    204: {
      bodyMapper: Mappers.BackupInformation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.location,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.graphName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
