/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/sqlResourcesMappers";
import * as Parameters from "../models/parameters";
import { CosmosDBManagementClientContext } from "../cosmosDBManagementClientContext";

/** Class representing a SqlResources. */
export class SqlResources {
  private readonly client: CosmosDBManagementClientContext;

  /**
   * Create a SqlResources.
   * @param {CosmosDBManagementClientContext} client Reference to the service client.
   */
  constructor(client: CosmosDBManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the SQL databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesListSqlDatabasesResponse>
   */
  listSqlDatabases(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesListSqlDatabasesResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listSqlDatabases(
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<Models.SqlDatabaseListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSqlDatabases(
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlDatabaseListResult>
  ): void;
  listSqlDatabases(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlDatabaseListResult>,
    callback?: msRest.ServiceCallback<Models.SqlDatabaseListResult>
  ): Promise<Models.SqlResourcesListSqlDatabasesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listSqlDatabasesOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesListSqlDatabasesResponse>;
  }

  /**
   * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesGetSqlDatabaseResponse>
   */
  getSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesGetSqlDatabaseResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param callback The callback
   */
  getSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    callback: msRest.ServiceCallback<Models.SqlDatabaseGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlDatabaseGetResults>
  ): void;
  getSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlDatabaseGetResults>,
    callback?: msRest.ServiceCallback<Models.SqlDatabaseGetResults>
  ): Promise<Models.SqlResourcesGetSqlDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        options
      },
      getSqlDatabaseOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesGetSqlDatabaseResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesCreateUpdateSqlDatabaseResponse>
   */
  createUpdateSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    createUpdateSqlDatabaseParameters: Models.SqlDatabaseCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesCreateUpdateSqlDatabaseResponse> {
    return this.beginCreateUpdateSqlDatabase(
      resourceGroupName,
      accountName,
      databaseName,
      createUpdateSqlDatabaseParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesCreateUpdateSqlDatabaseResponse
    >;
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteSqlDatabase(
      resourceGroupName,
      accountName,
      databaseName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account
   * with the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesGetSqlDatabaseThroughputResponse>
   */
  getSqlDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesGetSqlDatabaseThroughputResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param callback The callback
   */
  getSqlDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    callback: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): void;
  getSqlDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.ThroughputSettingsGetResults>,
    callback?: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): Promise<Models.SqlResourcesGetSqlDatabaseThroughputResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        options
      },
      getSqlDatabaseThroughputOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesGetSqlDatabaseThroughputResponse>;
  }

  /**
   * Update RUs per second of an Azure Cosmos DB SQL database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param updateThroughputParameters The parameters to provide for the RUs per second of the
   * current SQL database.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesUpdateSqlDatabaseThroughputResponse>
   */
  updateSqlDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    updateThroughputParameters: Models.ThroughputSettingsUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesUpdateSqlDatabaseThroughputResponse> {
    return this.beginUpdateSqlDatabaseThroughput(
      resourceGroupName,
      accountName,
      databaseName,
      updateThroughputParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesUpdateSqlDatabaseThroughputResponse
    >;
  }

  /**
   * Migrate an Azure Cosmos DB SQL database from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesMigrateSqlDatabaseToAutoscaleResponse>
   */
  migrateSqlDatabaseToAutoscale(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesMigrateSqlDatabaseToAutoscaleResponse> {
    return this.beginMigrateSqlDatabaseToAutoscale(
      resourceGroupName,
      accountName,
      databaseName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesMigrateSqlDatabaseToAutoscaleResponse
    >;
  }

  /**
   * Migrate an Azure Cosmos DB SQL database from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesMigrateSqlDatabaseToManualThroughputResponse>
   */
  migrateSqlDatabaseToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesMigrateSqlDatabaseToManualThroughputResponse> {
    return this.beginMigrateSqlDatabaseToManualThroughput(
      resourceGroupName,
      accountName,
      databaseName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesMigrateSqlDatabaseToManualThroughputResponse
    >;
  }

  /**
   * Lists the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesListSqlContainersResponse>
   */
  listSqlContainers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesListSqlContainersResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param callback The callback
   */
  listSqlContainers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    callback: msRest.ServiceCallback<Models.SqlContainerListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSqlContainers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlContainerListResult>
  ): void;
  listSqlContainers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlContainerListResult>,
    callback?: msRest.ServiceCallback<Models.SqlContainerListResult>
  ): Promise<Models.SqlResourcesListSqlContainersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        options
      },
      listSqlContainersOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesListSqlContainersResponse>;
  }

  /**
   * Gets the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesGetSqlContainerResponse>
   */
  getSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesGetSqlContainerResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param callback The callback
   */
  getSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    callback: msRest.ServiceCallback<Models.SqlContainerGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlContainerGetResults>
  ): void;
  getSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlContainerGetResults>,
    callback?: msRest.ServiceCallback<Models.SqlContainerGetResults>
  ): Promise<Models.SqlResourcesGetSqlContainerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options
      },
      getSqlContainerOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesGetSqlContainerResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL
   * container.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesCreateUpdateSqlContainerResponse>
   */
  createUpdateSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    createUpdateSqlContainerParameters: Models.SqlContainerCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesCreateUpdateSqlContainerResponse> {
    return this.beginCreateUpdateSqlContainer(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      createUpdateSqlContainerParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesCreateUpdateSqlContainerResponse
    >;
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL container.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteSqlContainer(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesGetSqlContainerThroughputResponse>
   */
  getSqlContainerThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesGetSqlContainerThroughputResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param callback The callback
   */
  getSqlContainerThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    callback: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlContainerThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): void;
  getSqlContainerThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.ThroughputSettingsGetResults>,
    callback?: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): Promise<Models.SqlResourcesGetSqlContainerThroughputResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options
      },
      getSqlContainerThroughputOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesGetSqlContainerThroughputResponse>;
  }

  /**
   * Update RUs per second of an Azure Cosmos DB SQL container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param updateThroughputParameters The parameters to provide for the RUs per second of the
   * current SQL container.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesUpdateSqlContainerThroughputResponse>
   */
  updateSqlContainerThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    updateThroughputParameters: Models.ThroughputSettingsUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesUpdateSqlContainerThroughputResponse> {
    return this.beginUpdateSqlContainerThroughput(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      updateThroughputParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesUpdateSqlContainerThroughputResponse
    >;
  }

  /**
   * Migrate an Azure Cosmos DB SQL container from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesMigrateSqlContainerToAutoscaleResponse>
   */
  migrateSqlContainerToAutoscale(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesMigrateSqlContainerToAutoscaleResponse> {
    return this.beginMigrateSqlContainerToAutoscale(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesMigrateSqlContainerToAutoscaleResponse
    >;
  }

  /**
   * Migrate an Azure Cosmos DB SQL container from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesMigrateSqlContainerToManualThroughputResponse>
   */
  migrateSqlContainerToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesMigrateSqlContainerToManualThroughputResponse> {
    return this.beginMigrateSqlContainerToManualThroughput(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesMigrateSqlContainerToManualThroughputResponse
    >;
  }

  /**
   * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesListSqlStoredProceduresResponse>
   */
  listSqlStoredProcedures(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesListSqlStoredProceduresResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param callback The callback
   */
  listSqlStoredProcedures(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    callback: msRest.ServiceCallback<Models.SqlStoredProcedureListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSqlStoredProcedures(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlStoredProcedureListResult>
  ): void;
  listSqlStoredProcedures(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SqlStoredProcedureListResult>,
    callback?: msRest.ServiceCallback<Models.SqlStoredProcedureListResult>
  ): Promise<Models.SqlResourcesListSqlStoredProceduresResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options
      },
      listSqlStoredProceduresOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesListSqlStoredProceduresResponse>;
  }

  /**
   * Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesGetSqlStoredProcedureResponse>
   */
  getSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesGetSqlStoredProcedureResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param callback The callback
   */
  getSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    callback: msRest.ServiceCallback<Models.SqlStoredProcedureGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlStoredProcedureGetResults>
  ): void;
  getSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SqlStoredProcedureGetResults>,
    callback?: msRest.ServiceCallback<Models.SqlStoredProcedureGetResults>
  ): Promise<Models.SqlResourcesGetSqlStoredProcedureResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        storedProcedureName,
        options
      },
      getSqlStoredProcedureOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesGetSqlStoredProcedureResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL storedProcedure
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL
   * storedProcedure.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesCreateUpdateSqlStoredProcedureResponse>
   */
  createUpdateSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    createUpdateSqlStoredProcedureParameters: Models.SqlStoredProcedureCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesCreateUpdateSqlStoredProcedureResponse> {
    return this.beginCreateUpdateSqlStoredProcedure(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      storedProcedureName,
      createUpdateSqlStoredProcedureParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesCreateUpdateSqlStoredProcedureResponse
    >;
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL storedProcedure.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteSqlStoredProcedure(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      storedProcedureName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesListSqlUserDefinedFunctionsResponse>
   */
  listSqlUserDefinedFunctions(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesListSqlUserDefinedFunctionsResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param callback The callback
   */
  listSqlUserDefinedFunctions(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    callback: msRest.ServiceCallback<Models.SqlUserDefinedFunctionListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSqlUserDefinedFunctions(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlUserDefinedFunctionListResult>
  ): void;
  listSqlUserDefinedFunctions(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SqlUserDefinedFunctionListResult>,
    callback?: msRest.ServiceCallback<Models.SqlUserDefinedFunctionListResult>
  ): Promise<Models.SqlResourcesListSqlUserDefinedFunctionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options
      },
      listSqlUserDefinedFunctionsOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesListSqlUserDefinedFunctionsResponse>;
  }

  /**
   * Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesGetSqlUserDefinedFunctionResponse>
   */
  getSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesGetSqlUserDefinedFunctionResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param callback The callback
   */
  getSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    callback: msRest.ServiceCallback<Models.SqlUserDefinedFunctionGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlUserDefinedFunctionGetResults>
  ): void;
  getSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SqlUserDefinedFunctionGetResults>,
    callback?: msRest.ServiceCallback<Models.SqlUserDefinedFunctionGetResults>
  ): Promise<Models.SqlResourcesGetSqlUserDefinedFunctionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        userDefinedFunctionName,
        options
      },
      getSqlUserDefinedFunctionOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesGetSqlUserDefinedFunctionResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL userDefinedFunction
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current
   * SQL userDefinedFunction.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>
   */
  createUpdateSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    createUpdateSqlUserDefinedFunctionParameters: Models.SqlUserDefinedFunctionCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse> {
    return this.beginCreateUpdateSqlUserDefinedFunction(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      userDefinedFunctionName,
      createUpdateSqlUserDefinedFunctionParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse
    >;
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteSqlUserDefinedFunction(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      userDefinedFunctionName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Lists the SQL trigger under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesListSqlTriggersResponse>
   */
  listSqlTriggers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesListSqlTriggersResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param callback The callback
   */
  listSqlTriggers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    callback: msRest.ServiceCallback<Models.SqlTriggerListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSqlTriggers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlTriggerListResult>
  ): void;
  listSqlTriggers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlTriggerListResult>,
    callback?: msRest.ServiceCallback<Models.SqlTriggerListResult>
  ): Promise<Models.SqlResourcesListSqlTriggersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options
      },
      listSqlTriggersOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesListSqlTriggersResponse>;
  }

  /**
   * Gets the SQL trigger under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesGetSqlTriggerResponse>
   */
  getSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesGetSqlTriggerResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param callback The callback
   */
  getSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    callback: msRest.ServiceCallback<Models.SqlTriggerGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlTriggerGetResults>
  ): void;
  getSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlTriggerGetResults>,
    callback?: msRest.ServiceCallback<Models.SqlTriggerGetResults>
  ): Promise<Models.SqlResourcesGetSqlTriggerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        triggerName,
        options
      },
      getSqlTriggerOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesGetSqlTriggerResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL trigger
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesCreateUpdateSqlTriggerResponse>
   */
  createUpdateSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    createUpdateSqlTriggerParameters: Models.SqlTriggerCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesCreateUpdateSqlTriggerResponse> {
    return this.beginCreateUpdateSqlTrigger(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      triggerName,
      createUpdateSqlTriggerParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesCreateUpdateSqlTriggerResponse
    >;
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL trigger.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteSqlTrigger(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      triggerName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Retrieves continuous backup information for a container resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param location The name of the continuous backup restore location.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesRetrieveContinuousBackupInformationResponse>
   */
  retrieveContinuousBackupInformation(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    location: Models.ContinuousBackupRestoreLocation,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesRetrieveContinuousBackupInformationResponse> {
    return this.beginRetrieveContinuousBackupInformation(
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      location,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesRetrieveContinuousBackupInformationResponse
    >;
  }

  /**
   * Retrieves the properties of an existing Azure Cosmos DB SQL Role Definition with the given Id.
   * @param roleDefinitionId The GUID for the Role Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesGetSqlRoleDefinitionResponse>
   */
  getSqlRoleDefinition(
    roleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesGetSqlRoleDefinitionResponse>;
  /**
   * @param roleDefinitionId The GUID for the Role Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  getSqlRoleDefinition(
    roleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<Models.SqlRoleDefinitionGetResults>
  ): void;
  /**
   * @param roleDefinitionId The GUID for the Role Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlRoleDefinition(
    roleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlRoleDefinitionGetResults>
  ): void;
  getSqlRoleDefinition(
    roleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SqlRoleDefinitionGetResults>,
    callback?: msRest.ServiceCallback<Models.SqlRoleDefinitionGetResults>
  ): Promise<Models.SqlResourcesGetSqlRoleDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        roleDefinitionId,
        resourceGroupName,
        accountName,
        options
      },
      getSqlRoleDefinitionOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesGetSqlRoleDefinitionResponse>;
  }

  /**
   * Creates or updates an Azure Cosmos DB SQL Role Definition.
   * @param roleDefinitionId The GUID for the Role Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateSqlRoleDefinitionParameters The properties required to create or update a
   * Role Definition.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesCreateUpdateSqlRoleDefinitionResponse>
   */
  createUpdateSqlRoleDefinition(
    roleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    createUpdateSqlRoleDefinitionParameters: Models.SqlRoleDefinitionCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesCreateUpdateSqlRoleDefinitionResponse> {
    return this.beginCreateUpdateSqlRoleDefinition(
      roleDefinitionId,
      resourceGroupName,
      accountName,
      createUpdateSqlRoleDefinitionParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesCreateUpdateSqlRoleDefinitionResponse
    >;
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL Role Definition.
   * @param roleDefinitionId The GUID for the Role Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSqlRoleDefinition(
    roleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteSqlRoleDefinition(
      roleDefinitionId,
      resourceGroupName,
      accountName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Retrieves the list of all Azure Cosmos DB SQL Role Definitions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesListSqlRoleDefinitionsResponse>
   */
  listSqlRoleDefinitions(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesListSqlRoleDefinitionsResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listSqlRoleDefinitions(
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<Models.SqlRoleDefinitionListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSqlRoleDefinitions(
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlRoleDefinitionListResult>
  ): void;
  listSqlRoleDefinitions(
    resourceGroupName: string,
    accountName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SqlRoleDefinitionListResult>,
    callback?: msRest.ServiceCallback<Models.SqlRoleDefinitionListResult>
  ): Promise<Models.SqlResourcesListSqlRoleDefinitionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listSqlRoleDefinitionsOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesListSqlRoleDefinitionsResponse>;
  }

  /**
   * Retrieves the properties of an existing Azure Cosmos DB SQL Role Assignment with the given Id.
   * @param roleAssignmentId The GUID for the Role Assignment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesGetSqlRoleAssignmentResponse>
   */
  getSqlRoleAssignment(
    roleAssignmentId: string,
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesGetSqlRoleAssignmentResponse>;
  /**
   * @param roleAssignmentId The GUID for the Role Assignment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  getSqlRoleAssignment(
    roleAssignmentId: string,
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<Models.SqlRoleAssignmentGetResults>
  ): void;
  /**
   * @param roleAssignmentId The GUID for the Role Assignment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSqlRoleAssignment(
    roleAssignmentId: string,
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlRoleAssignmentGetResults>
  ): void;
  getSqlRoleAssignment(
    roleAssignmentId: string,
    resourceGroupName: string,
    accountName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SqlRoleAssignmentGetResults>,
    callback?: msRest.ServiceCallback<Models.SqlRoleAssignmentGetResults>
  ): Promise<Models.SqlResourcesGetSqlRoleAssignmentResponse> {
    return this.client.sendOperationRequest(
      {
        roleAssignmentId,
        resourceGroupName,
        accountName,
        options
      },
      getSqlRoleAssignmentOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesGetSqlRoleAssignmentResponse>;
  }

  /**
   * Creates or updates an Azure Cosmos DB SQL Role Assignment.
   * @param roleAssignmentId The GUID for the Role Assignment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateSqlRoleAssignmentParameters The properties required to create or update a
   * Role Assignment.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesCreateUpdateSqlRoleAssignmentResponse>
   */
  createUpdateSqlRoleAssignment(
    roleAssignmentId: string,
    resourceGroupName: string,
    accountName: string,
    createUpdateSqlRoleAssignmentParameters: Models.SqlRoleAssignmentCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesCreateUpdateSqlRoleAssignmentResponse> {
    return this.beginCreateUpdateSqlRoleAssignment(
      roleAssignmentId,
      resourceGroupName,
      accountName,
      createUpdateSqlRoleAssignmentParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SqlResourcesCreateUpdateSqlRoleAssignmentResponse
    >;
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL Role Assignment.
   * @param roleAssignmentId The GUID for the Role Assignment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSqlRoleAssignment(
    roleAssignmentId: string,
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteSqlRoleAssignment(
      roleAssignmentId,
      resourceGroupName,
      accountName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Retrieves the list of all Azure Cosmos DB SQL Role Assignments.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlResourcesListSqlRoleAssignmentsResponse>
   */
  listSqlRoleAssignments(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SqlResourcesListSqlRoleAssignmentsResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listSqlRoleAssignments(
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<Models.SqlRoleAssignmentListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSqlRoleAssignments(
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SqlRoleAssignmentListResult>
  ): void;
  listSqlRoleAssignments(
    resourceGroupName: string,
    accountName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SqlRoleAssignmentListResult>,
    callback?: msRest.ServiceCallback<Models.SqlRoleAssignmentListResult>
  ): Promise<Models.SqlResourcesListSqlRoleAssignmentsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listSqlRoleAssignmentsOperationSpec,
      callback
    ) as Promise<Models.SqlResourcesListSqlRoleAssignmentsResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    createUpdateSqlDatabaseParameters: Models.SqlDatabaseCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        createUpdateSqlDatabaseParameters,
        options
      },
      beginCreateUpdateSqlDatabaseOperationSpec,
      options
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        options
      },
      beginDeleteSqlDatabaseOperationSpec,
      options
    );
  }

  /**
   * Update RUs per second of an Azure Cosmos DB SQL database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param updateThroughputParameters The parameters to provide for the RUs per second of the
   * current SQL database.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdateSqlDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    updateThroughputParameters: Models.ThroughputSettingsUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        updateThroughputParameters,
        options
      },
      beginUpdateSqlDatabaseThroughputOperationSpec,
      options
    );
  }

  /**
   * Migrate an Azure Cosmos DB SQL database from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateSqlDatabaseToAutoscale(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        options
      },
      beginMigrateSqlDatabaseToAutoscaleOperationSpec,
      options
    );
  }

  /**
   * Migrate an Azure Cosmos DB SQL database from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateSqlDatabaseToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        options
      },
      beginMigrateSqlDatabaseToManualThroughputOperationSpec,
      options
    );
  }

  /**
   * Create or update an Azure Cosmos DB SQL container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL
   * container.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    createUpdateSqlContainerParameters: Models.SqlContainerCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        createUpdateSqlContainerParameters,
        options
      },
      beginCreateUpdateSqlContainerOperationSpec,
      options
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL container.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options
      },
      beginDeleteSqlContainerOperationSpec,
      options
    );
  }

  /**
   * Update RUs per second of an Azure Cosmos DB SQL container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param updateThroughputParameters The parameters to provide for the RUs per second of the
   * current SQL container.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdateSqlContainerThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    updateThroughputParameters: Models.ThroughputSettingsUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        updateThroughputParameters,
        options
      },
      beginUpdateSqlContainerThroughputOperationSpec,
      options
    );
  }

  /**
   * Migrate an Azure Cosmos DB SQL container from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateSqlContainerToAutoscale(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options
      },
      beginMigrateSqlContainerToAutoscaleOperationSpec,
      options
    );
  }

  /**
   * Migrate an Azure Cosmos DB SQL container from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateSqlContainerToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options
      },
      beginMigrateSqlContainerToManualThroughputOperationSpec,
      options
    );
  }

  /**
   * Create or update an Azure Cosmos DB SQL storedProcedure
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL
   * storedProcedure.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    createUpdateSqlStoredProcedureParameters: Models.SqlStoredProcedureCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        storedProcedureName,
        createUpdateSqlStoredProcedureParameters,
        options
      },
      beginCreateUpdateSqlStoredProcedureOperationSpec,
      options
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL storedProcedure.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        storedProcedureName,
        options
      },
      beginDeleteSqlStoredProcedureOperationSpec,
      options
    );
  }

  /**
   * Create or update an Azure Cosmos DB SQL userDefinedFunction
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current
   * SQL userDefinedFunction.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    createUpdateSqlUserDefinedFunctionParameters: Models.SqlUserDefinedFunctionCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        userDefinedFunctionName,
        createUpdateSqlUserDefinedFunctionParameters,
        options
      },
      beginCreateUpdateSqlUserDefinedFunctionOperationSpec,
      options
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        userDefinedFunctionName,
        options
      },
      beginDeleteSqlUserDefinedFunctionOperationSpec,
      options
    );
  }

  /**
   * Create or update an Azure Cosmos DB SQL trigger
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    createUpdateSqlTriggerParameters: Models.SqlTriggerCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        triggerName,
        createUpdateSqlTriggerParameters,
        options
      },
      beginCreateUpdateSqlTriggerOperationSpec,
      options
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL trigger.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        triggerName,
        options
      },
      beginDeleteSqlTriggerOperationSpec,
      options
    );
  }

  /**
   * Retrieves continuous backup information for a container resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param location The name of the continuous backup restore location.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRetrieveContinuousBackupInformation(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    location: Models.ContinuousBackupRestoreLocation,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        location,
        options
      },
      beginRetrieveContinuousBackupInformationOperationSpec,
      options
    );
  }

  /**
   * Creates or updates an Azure Cosmos DB SQL Role Definition.
   * @param roleDefinitionId The GUID for the Role Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateSqlRoleDefinitionParameters The properties required to create or update a
   * Role Definition.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateSqlRoleDefinition(
    roleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    createUpdateSqlRoleDefinitionParameters: Models.SqlRoleDefinitionCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        roleDefinitionId,
        resourceGroupName,
        accountName,
        createUpdateSqlRoleDefinitionParameters,
        options
      },
      beginCreateUpdateSqlRoleDefinitionOperationSpec,
      options
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL Role Definition.
   * @param roleDefinitionId The GUID for the Role Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteSqlRoleDefinition(
    roleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        roleDefinitionId,
        resourceGroupName,
        accountName,
        options
      },
      beginDeleteSqlRoleDefinitionOperationSpec,
      options
    );
  }

  /**
   * Creates or updates an Azure Cosmos DB SQL Role Assignment.
   * @param roleAssignmentId The GUID for the Role Assignment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateSqlRoleAssignmentParameters The properties required to create or update a
   * Role Assignment.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateSqlRoleAssignment(
    roleAssignmentId: string,
    resourceGroupName: string,
    accountName: string,
    createUpdateSqlRoleAssignmentParameters: Models.SqlRoleAssignmentCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        roleAssignmentId,
        resourceGroupName,
        accountName,
        createUpdateSqlRoleAssignmentParameters,
        options
      },
      beginCreateUpdateSqlRoleAssignmentOperationSpec,
      options
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL Role Assignment.
   * @param roleAssignmentId The GUID for the Role Assignment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteSqlRoleAssignment(
    roleAssignmentId: string,
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        roleAssignmentId,
        resourceGroupName,
        accountName,
        options
      },
      beginDeleteSqlRoleAssignmentOperationSpec,
      options
    );
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listSqlDatabasesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlDatabaseListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlDatabaseGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlDatabaseThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSqlContainersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlContainerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlContainerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlContainerGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlContainerThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSqlStoredProceduresOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlStoredProcedureListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlStoredProcedureOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.storedProcedureName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlStoredProcedureGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSqlUserDefinedFunctionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlUserDefinedFunctionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlUserDefinedFunctionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.userDefinedFunctionName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSqlTriggersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlTriggerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlTriggerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.triggerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlTriggerGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlRoleDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleDefinitions/{roleDefinitionId}",
  urlParameters: [
    Parameters.roleDefinitionId,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlRoleDefinitionGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSqlRoleDefinitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleDefinitions",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlRoleDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSqlRoleAssignmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleAssignments/{roleAssignmentId}",
  urlParameters: [
    Parameters.roleAssignmentId,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlRoleAssignmentGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSqlRoleAssignmentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleAssignments",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SqlRoleAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateSqlDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "createUpdateSqlDatabaseParameters",
    mapper: {
      ...Mappers.SqlDatabaseCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlDatabaseGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteSqlDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateSqlDatabaseThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "updateThroughputParameters",
    mapper: {
      ...Mappers.ThroughputSettingsUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginMigrateSqlDatabaseToAutoscaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default/migrateToAutoscale",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginMigrateSqlDatabaseToManualThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default/migrateToManualThroughput",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateSqlContainerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "createUpdateSqlContainerParameters",
    mapper: {
      ...Mappers.SqlContainerCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlContainerGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteSqlContainerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateSqlContainerThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "updateThroughputParameters",
    mapper: {
      ...Mappers.ThroughputSettingsUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginMigrateSqlContainerToAutoscaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default/migrateToAutoscale",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginMigrateSqlContainerToManualThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default/migrateToManualThroughput",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateSqlStoredProcedureOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.storedProcedureName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "createUpdateSqlStoredProcedureParameters",
    mapper: {
      ...Mappers.SqlStoredProcedureCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlStoredProcedureGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteSqlStoredProcedureOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.storedProcedureName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateSqlUserDefinedFunctionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.userDefinedFunctionName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "createUpdateSqlUserDefinedFunctionParameters",
    mapper: {
      ...Mappers.SqlUserDefinedFunctionCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteSqlUserDefinedFunctionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.userDefinedFunctionName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateSqlTriggerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.triggerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "createUpdateSqlTriggerParameters",
    mapper: {
      ...Mappers.SqlTriggerCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlTriggerGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteSqlTriggerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.triggerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRetrieveContinuousBackupInformationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/retrieveContinuousBackupInformation",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "location",
    mapper: {
      ...Mappers.ContinuousBackupRestoreLocation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupInformation
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateSqlRoleDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleDefinitions/{roleDefinitionId}",
  urlParameters: [
    Parameters.roleDefinitionId,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "createUpdateSqlRoleDefinitionParameters",
    mapper: {
      ...Mappers.SqlRoleDefinitionCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlRoleDefinitionGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteSqlRoleDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleDefinitions/{roleDefinitionId}",
  urlParameters: [
    Parameters.roleDefinitionId,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateSqlRoleAssignmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleAssignments/{roleAssignmentId}",
  urlParameters: [
    Parameters.roleAssignmentId,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "createUpdateSqlRoleAssignmentParameters",
    mapper: {
      ...Mappers.SqlRoleAssignmentCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlRoleAssignmentGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteSqlRoleAssignmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlRoleAssignments/{roleAssignmentId}",
  urlParameters: [
    Parameters.roleAssignmentId,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
