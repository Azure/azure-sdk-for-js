/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/cassandraResourcesMappers";
import * as Parameters from "../models/parameters";
import { CosmosDBManagementClientContext } from "../cosmosDBManagementClientContext";

/** Class representing a CassandraResources. */
export class CassandraResources {
  private readonly client: CosmosDBManagementClientContext;

  /**
   * Create a CassandraResources.
   * @param {CosmosDBManagementClientContext} client Reference to the service client.
   */
  constructor(client: CosmosDBManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesListCassandraKeyspacesResponse>
   */
  listCassandraKeyspaces(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesListCassandraKeyspacesResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param callback The callback
   */
  listCassandraKeyspaces(
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<Models.CassandraKeyspaceListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCassandraKeyspaces(
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.CassandraKeyspaceListResult>
  ): void;
  listCassandraKeyspaces(
    resourceGroupName: string,
    accountName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.CassandraKeyspaceListResult>,
    callback?: msRest.ServiceCallback<Models.CassandraKeyspaceListResult>
  ): Promise<Models.CassandraResourcesListCassandraKeyspacesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listCassandraKeyspacesOperationSpec,
      callback
    ) as Promise<Models.CassandraResourcesListCassandraKeyspacesResponse>;
  }

  /**
   * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the
   * provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesGetCassandraKeyspaceResponse>
   */
  getCassandraKeyspace(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesGetCassandraKeyspaceResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param callback The callback
   */
  getCassandraKeyspace(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    callback: msRest.ServiceCallback<Models.CassandraKeyspaceGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCassandraKeyspace(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.CassandraKeyspaceGetResults>
  ): void;
  getCassandraKeyspace(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.CassandraKeyspaceGetResults>,
    callback?: msRest.ServiceCallback<Models.CassandraKeyspaceGetResults>
  ): Promise<Models.CassandraResourcesGetCassandraKeyspaceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        options
      },
      getCassandraKeyspaceOperationSpec,
      callback
    ) as Promise<Models.CassandraResourcesGetCassandraKeyspaceResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB Cassandra keyspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current
   * Cassandra keyspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesCreateUpdateCassandraKeyspaceResponse>
   */
  createUpdateCassandraKeyspace(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    createUpdateCassandraKeyspaceParameters: Models.CassandraKeyspaceCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesCreateUpdateCassandraKeyspaceResponse> {
    return this.beginCreateUpdateCassandraKeyspace(
      resourceGroupName,
      accountName,
      keyspaceName,
      createUpdateCassandraKeyspaceParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.CassandraResourcesCreateUpdateCassandraKeyspaceResponse
    >;
  }

  /**
   * Deletes an existing Azure Cosmos DB Cassandra keyspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCassandraKeyspace(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteCassandraKeyspace(
      resourceGroupName,
      accountName,
      keyspaceName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database
   * account with the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesGetCassandraKeyspaceThroughputResponse>
   */
  getCassandraKeyspaceThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesGetCassandraKeyspaceThroughputResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param callback The callback
   */
  getCassandraKeyspaceThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    callback: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCassandraKeyspaceThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): void;
  getCassandraKeyspaceThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.ThroughputSettingsGetResults>,
    callback?: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): Promise<Models.CassandraResourcesGetCassandraKeyspaceThroughputResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        options
      },
      getCassandraKeyspaceThroughputOperationSpec,
      callback
    ) as Promise<Models.CassandraResourcesGetCassandraKeyspaceThroughputResponse>;
  }

  /**
   * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the
   * current Cassandra Keyspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesUpdateCassandraKeyspaceThroughputResponse>
   */
  updateCassandraKeyspaceThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    updateThroughputParameters: Models.ThroughputSettingsUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesUpdateCassandraKeyspaceThroughputResponse> {
    return this.beginUpdateCassandraKeyspaceThroughput(
      resourceGroupName,
      accountName,
      keyspaceName,
      updateThroughputParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.CassandraResourcesUpdateCassandraKeyspaceThroughputResponse
    >;
  }

  /**
   * Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse>
   */
  migrateCassandraKeyspaceToAutoscale(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse> {
    return this.beginMigrateCassandraKeyspaceToAutoscale(
      resourceGroupName,
      accountName,
      keyspaceName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse
    >;
  }

  /**
   * Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse>
   */
  migrateCassandraKeyspaceToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse> {
    return this.beginMigrateCassandraKeyspaceToManualThroughput(
      resourceGroupName,
      accountName,
      keyspaceName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse
    >;
  }

  /**
   * Lists the Cassandra table under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesListCassandraTablesResponse>
   */
  listCassandraTables(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesListCassandraTablesResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param callback The callback
   */
  listCassandraTables(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    callback: msRest.ServiceCallback<Models.CassandraTableListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCassandraTables(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.CassandraTableListResult>
  ): void;
  listCassandraTables(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CassandraTableListResult>,
    callback?: msRest.ServiceCallback<Models.CassandraTableListResult>
  ): Promise<Models.CassandraResourcesListCassandraTablesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        options
      },
      listCassandraTablesOperationSpec,
      callback
    ) as Promise<Models.CassandraResourcesListCassandraTablesResponse>;
  }

  /**
   * Gets the Cassandra table under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesGetCassandraTableResponse>
   */
  getCassandraTable(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesGetCassandraTableResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param callback The callback
   */
  getCassandraTable(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    callback: msRest.ServiceCallback<Models.CassandraTableGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCassandraTable(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.CassandraTableGetResults>
  ): void;
  getCassandraTable(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CassandraTableGetResults>,
    callback?: msRest.ServiceCallback<Models.CassandraTableGetResults>
  ): Promise<Models.CassandraResourcesGetCassandraTableResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        tableName,
        options
      },
      getCassandraTableOperationSpec,
      callback
    ) as Promise<Models.CassandraResourcesGetCassandraTableResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB Cassandra Table
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra
   * Table.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesCreateUpdateCassandraTableResponse>
   */
  createUpdateCassandraTable(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    createUpdateCassandraTableParameters: Models.CassandraTableCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesCreateUpdateCassandraTableResponse> {
    return this.beginCreateUpdateCassandraTable(
      resourceGroupName,
      accountName,
      keyspaceName,
      tableName,
      createUpdateCassandraTableParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.CassandraResourcesCreateUpdateCassandraTableResponse
    >;
  }

  /**
   * Deletes an existing Azure Cosmos DB Cassandra table.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCassandraTable(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteCassandraTable(
      resourceGroupName,
      accountName,
      keyspaceName,
      tableName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database
   * account with the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesGetCassandraTableThroughputResponse>
   */
  getCassandraTableThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesGetCassandraTableThroughputResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param callback The callback
   */
  getCassandraTableThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    callback: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCassandraTableThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): void;
  getCassandraTableThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.ThroughputSettingsGetResults>,
    callback?: msRest.ServiceCallback<Models.ThroughputSettingsGetResults>
  ): Promise<Models.CassandraResourcesGetCassandraTableThroughputResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        tableName,
        options
      },
      getCassandraTableThroughputOperationSpec,
      callback
    ) as Promise<Models.CassandraResourcesGetCassandraTableThroughputResponse>;
  }

  /**
   * Update RUs per second of an Azure Cosmos DB Cassandra table
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the
   * current Cassandra table.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesUpdateCassandraTableThroughputResponse>
   */
  updateCassandraTableThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    updateThroughputParameters: Models.ThroughputSettingsUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesUpdateCassandraTableThroughputResponse> {
    return this.beginUpdateCassandraTableThroughput(
      resourceGroupName,
      accountName,
      keyspaceName,
      tableName,
      updateThroughputParameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.CassandraResourcesUpdateCassandraTableThroughputResponse
    >;
  }

  /**
   * Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesMigrateCassandraTableToAutoscaleResponse>
   */
  migrateCassandraTableToAutoscale(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesMigrateCassandraTableToAutoscaleResponse> {
    return this.beginMigrateCassandraTableToAutoscale(
      resourceGroupName,
      accountName,
      keyspaceName,
      tableName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.CassandraResourcesMigrateCassandraTableToAutoscaleResponse
    >;
  }

  /**
   * Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraResourcesMigrateCassandraTableToManualThroughputResponse>
   */
  migrateCassandraTableToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraResourcesMigrateCassandraTableToManualThroughputResponse> {
    return this.beginMigrateCassandraTableToManualThroughput(
      resourceGroupName,
      accountName,
      keyspaceName,
      tableName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.CassandraResourcesMigrateCassandraTableToManualThroughputResponse
    >;
  }

  /**
   * Create or update an Azure Cosmos DB Cassandra keyspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current
   * Cassandra keyspace.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateCassandraKeyspace(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    createUpdateCassandraKeyspaceParameters: Models.CassandraKeyspaceCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        createUpdateCassandraKeyspaceParameters,
        options
      },
      beginCreateUpdateCassandraKeyspaceOperationSpec,
      options
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB Cassandra keyspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteCassandraKeyspace(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        options
      },
      beginDeleteCassandraKeyspaceOperationSpec,
      options
    );
  }

  /**
   * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the
   * current Cassandra Keyspace.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdateCassandraKeyspaceThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    updateThroughputParameters: Models.ThroughputSettingsUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        updateThroughputParameters,
        options
      },
      beginUpdateCassandraKeyspaceThroughputOperationSpec,
      options
    );
  }

  /**
   * Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateCassandraKeyspaceToAutoscale(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        options
      },
      beginMigrateCassandraKeyspaceToAutoscaleOperationSpec,
      options
    );
  }

  /**
   * Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateCassandraKeyspaceToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        options
      },
      beginMigrateCassandraKeyspaceToManualThroughputOperationSpec,
      options
    );
  }

  /**
   * Create or update an Azure Cosmos DB Cassandra Table
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra
   * Table.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdateCassandraTable(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    createUpdateCassandraTableParameters: Models.CassandraTableCreateUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        tableName,
        createUpdateCassandraTableParameters,
        options
      },
      beginCreateUpdateCassandraTableOperationSpec,
      options
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB Cassandra table.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteCassandraTable(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        tableName,
        options
      },
      beginDeleteCassandraTableOperationSpec,
      options
    );
  }

  /**
   * Update RUs per second of an Azure Cosmos DB Cassandra table
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the
   * current Cassandra table.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdateCassandraTableThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    updateThroughputParameters: Models.ThroughputSettingsUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        tableName,
        updateThroughputParameters,
        options
      },
      beginUpdateCassandraTableThroughputOperationSpec,
      options
    );
  }

  /**
   * Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateCassandraTableToAutoscale(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        tableName,
        options
      },
      beginMigrateCassandraTableToAutoscaleOperationSpec,
      options
    );
  }

  /**
   * Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyspaceName Cosmos DB keyspace name.
   * @param tableName Cosmos DB table name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateCassandraTableToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    keyspaceName: string,
    tableName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        keyspaceName,
        tableName,
        options
      },
      beginMigrateCassandraTableToManualThroughputOperationSpec,
      options
    );
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listCassandraKeyspacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.CassandraKeyspaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCassandraKeyspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.CassandraKeyspaceGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCassandraKeyspaceThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listCassandraTablesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.CassandraTableListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCassandraTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName,
    Parameters.tableName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.CassandraTableGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCassandraTableThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName,
    Parameters.tableName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateCassandraKeyspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "createUpdateCassandraKeyspaceParameters",
    mapper: {
      ...Mappers.CassandraKeyspaceCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CassandraKeyspaceGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteCassandraKeyspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateCassandraKeyspaceThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "updateThroughputParameters",
    mapper: {
      ...Mappers.ThroughputSettingsUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginMigrateCassandraKeyspaceToAutoscaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default/migrateToAutoscale",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginMigrateCassandraKeyspaceToManualThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default/migrateToManualThroughput",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateCassandraTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName,
    Parameters.tableName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "createUpdateCassandraTableParameters",
    mapper: {
      ...Mappers.CassandraTableCreateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CassandraTableGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteCassandraTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName,
    Parameters.tableName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateCassandraTableThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName,
    Parameters.tableName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "updateThroughputParameters",
    mapper: {
      ...Mappers.ThroughputSettingsUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginMigrateCassandraTableToAutoscaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default/migrateToAutoscale",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName,
    Parameters.tableName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginMigrateCassandraTableToManualThroughputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default/migrateToManualThroughput",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.keyspaceName,
    Parameters.tableName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
