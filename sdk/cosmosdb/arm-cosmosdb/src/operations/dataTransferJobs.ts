/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DataTransferJobs } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CosmosDBManagementClient } from "../cosmosDBManagementClient";
import {
  DataTransferJobGetResults,
  DataTransferJobsListByDatabaseAccountNextOptionalParams,
  DataTransferJobsListByDatabaseAccountOptionalParams,
  CreateJobRequest,
  DataTransferJobsCreateOptionalParams,
  DataTransferJobsCreateResponse,
  DataTransferJobsGetOptionalParams,
  DataTransferJobsGetResponse,
  DataTransferJobsPauseOptionalParams,
  DataTransferJobsPauseResponse,
  DataTransferJobsResumeOptionalParams,
  DataTransferJobsResumeResponse,
  DataTransferJobsCancelOptionalParams,
  DataTransferJobsCancelResponse,
  DataTransferJobsListByDatabaseAccountResponse,
  DataTransferJobsListByDatabaseAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DataTransferJobs operations. */
export class DataTransferJobsImpl implements DataTransferJobs {
  private readonly client: CosmosDBManagementClient;

  /**
   * Initialize a new instance of the class DataTransferJobs class.
   * @param client Reference to the service client
   */
  constructor(client: CosmosDBManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of Data Transfer jobs.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  public listByDatabaseAccount(
    resourceGroupName: string,
    accountName: string,
    options?: DataTransferJobsListByDatabaseAccountOptionalParams
  ): PagedAsyncIterableIterator<DataTransferJobGetResults> {
    const iter = this.listByDatabaseAccountPagingAll(
      resourceGroupName,
      accountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByDatabaseAccountPagingPage(
          resourceGroupName,
          accountName,
          options
        );
      }
    };
  }

  private async *listByDatabaseAccountPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: DataTransferJobsListByDatabaseAccountOptionalParams
  ): AsyncIterableIterator<DataTransferJobGetResults[]> {
    let result = await this._listByDatabaseAccount(
      resourceGroupName,
      accountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByDatabaseAccountNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByDatabaseAccountPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: DataTransferJobsListByDatabaseAccountOptionalParams
  ): AsyncIterableIterator<DataTransferJobGetResults> {
    for await (const page of this.listByDatabaseAccountPagingPage(
      resourceGroupName,
      accountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates a Data Transfer Job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param jobName Name of the Data Transfer Job
   * @param jobCreateParameters Parameters to create Data Transfer Job
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    accountName: string,
    jobName: string,
    jobCreateParameters: CreateJobRequest,
    options?: DataTransferJobsCreateOptionalParams
  ): Promise<DataTransferJobsCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, jobName, jobCreateParameters, options },
      createOperationSpec
    );
  }

  /**
   * Get a Data Transfer Job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param jobName Name of the Data Transfer Job
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    jobName: string,
    options?: DataTransferJobsGetOptionalParams
  ): Promise<DataTransferJobsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, jobName, options },
      getOperationSpec
    );
  }

  /**
   * Pause a Data Transfer Job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param jobName Name of the Data Transfer Job
   * @param options The options parameters.
   */
  pause(
    resourceGroupName: string,
    accountName: string,
    jobName: string,
    options?: DataTransferJobsPauseOptionalParams
  ): Promise<DataTransferJobsPauseResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, jobName, options },
      pauseOperationSpec
    );
  }

  /**
   * Resumes a Data Transfer Job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param jobName Name of the Data Transfer Job
   * @param options The options parameters.
   */
  resume(
    resourceGroupName: string,
    accountName: string,
    jobName: string,
    options?: DataTransferJobsResumeOptionalParams
  ): Promise<DataTransferJobsResumeResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, jobName, options },
      resumeOperationSpec
    );
  }

  /**
   * Cancels a Data Transfer Job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param jobName Name of the Data Transfer Job
   * @param options The options parameters.
   */
  cancel(
    resourceGroupName: string,
    accountName: string,
    jobName: string,
    options?: DataTransferJobsCancelOptionalParams
  ): Promise<DataTransferJobsCancelResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, jobName, options },
      cancelOperationSpec
    );
  }

  /**
   * Get a list of Data Transfer jobs.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  private _listByDatabaseAccount(
    resourceGroupName: string,
    accountName: string,
    options?: DataTransferJobsListByDatabaseAccountOptionalParams
  ): Promise<DataTransferJobsListByDatabaseAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listByDatabaseAccountOperationSpec
    );
  }

  /**
   * ListByDatabaseAccountNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param nextLink The nextLink from the previous successful call to the ListByDatabaseAccount method.
   * @param options The options parameters.
   */
  private _listByDatabaseAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: DataTransferJobsListByDatabaseAccountNextOptionalParams
  ): Promise<DataTransferJobsListByDatabaseAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listByDatabaseAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/dataTransferJobs/{jobName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DataTransferJobGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.jobCreateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/dataTransferJobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataTransferJobGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const pauseOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/dataTransferJobs/{jobName}/pause",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DataTransferJobGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resumeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/dataTransferJobs/{jobName}/resume",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DataTransferJobGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/dataTransferJobs/{jobName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DataTransferJobGetResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDatabaseAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/dataTransferJobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataTransferJobFeedResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDatabaseAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataTransferJobFeedResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
