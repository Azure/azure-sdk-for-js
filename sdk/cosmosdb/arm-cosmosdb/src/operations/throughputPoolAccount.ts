/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ThroughputPoolAccount } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CosmosDBManagementClient } from "../cosmosDBManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ThroughputPoolAccountGetOptionalParams,
  ThroughputPoolAccountGetResponse,
  ThroughputPoolAccountResource,
  ThroughputPoolAccountCreateOptionalParams,
  ThroughputPoolAccountCreateResponse,
  ThroughputPoolAccountDeleteOptionalParams,
  ThroughputPoolAccountDeleteResponse,
} from "../models";

/** Class containing ThroughputPoolAccount operations. */
export class ThroughputPoolAccountImpl implements ThroughputPoolAccount {
  private readonly client: CosmosDBManagementClient;

  /**
   * Initialize a new instance of the class ThroughputPoolAccount class.
   * @param client Reference to the service client
   */
  constructor(client: CosmosDBManagementClient) {
    this.client = client;
  }

  /**
   * Retrieves the properties of an existing Azure Cosmos DB Throughput Pool
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param throughputPoolName Cosmos DB Throughput Pool name.
   * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    throughputPoolName: string,
    throughputPoolAccountName: string,
    options?: ThroughputPoolAccountGetOptionalParams,
  ): Promise<ThroughputPoolAccountGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        throughputPoolName,
        throughputPoolAccountName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when
   * performing updates on an account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param throughputPoolName Cosmos DB Throughput Pool name.
   * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool
   * @param body The parameters to provide for the current ThroughputPoolAccount.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    throughputPoolName: string,
    throughputPoolAccountName: string,
    body: ThroughputPoolAccountResource,
    options?: ThroughputPoolAccountCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ThroughputPoolAccountCreateResponse>,
      ThroughputPoolAccountCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ThroughputPoolAccountCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        throughputPoolName,
        throughputPoolAccountName,
        body,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      ThroughputPoolAccountCreateResponse,
      OperationState<ThroughputPoolAccountCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when
   * performing updates on an account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param throughputPoolName Cosmos DB Throughput Pool name.
   * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool
   * @param body The parameters to provide for the current ThroughputPoolAccount.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    throughputPoolName: string,
    throughputPoolAccountName: string,
    body: ThroughputPoolAccountResource,
    options?: ThroughputPoolAccountCreateOptionalParams,
  ): Promise<ThroughputPoolAccountCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      throughputPoolName,
      throughputPoolAccountName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Removes an existing Azure Cosmos DB database account from a throughput pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param throughputPoolName Cosmos DB Throughput Pool name.
   * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    throughputPoolName: string,
    throughputPoolAccountName: string,
    options?: ThroughputPoolAccountDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ThroughputPoolAccountDeleteResponse>,
      ThroughputPoolAccountDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ThroughputPoolAccountDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        throughputPoolName,
        throughputPoolAccountName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ThroughputPoolAccountDeleteResponse,
      OperationState<ThroughputPoolAccountDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Removes an existing Azure Cosmos DB database account from a throughput pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param throughputPoolName Cosmos DB Throughput Pool name.
   * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    throughputPoolName: string,
    throughputPoolAccountName: string,
    options?: ThroughputPoolAccountDeleteOptionalParams,
  ): Promise<ThroughputPoolAccountDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      throughputPoolName,
      throughputPoolAccountName,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputPools/{throughputPoolName}/throughputPoolAccounts/{throughputPoolAccountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputPoolAccountResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.throughputPoolName,
    Parameters.throughputPoolAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputPools/{throughputPoolName}/throughputPoolAccounts/{throughputPoolAccountName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputPoolAccountResource,
    },
    201: {
      bodyMapper: Mappers.ThroughputPoolAccountResource,
    },
    202: {
      bodyMapper: Mappers.ThroughputPoolAccountResource,
    },
    204: {
      bodyMapper: Mappers.ThroughputPoolAccountResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.throughputPoolName,
    Parameters.throughputPoolAccountName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputPools/{throughputPoolName}/throughputPoolAccounts/{throughputPoolAccountName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ThroughputPoolAccountDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ThroughputPoolAccountDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ThroughputPoolAccountDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ThroughputPoolAccountDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.throughputPoolName,
    Parameters.throughputPoolAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
