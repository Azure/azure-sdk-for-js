/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/restorableSqlResourcesMappers";
import * as Parameters from "../models/parameters";
import { CosmosDBManagementClientContext } from "../cosmosDBManagementClientContext";

/** Class representing a RestorableSqlResources. */
export class RestorableSqlResources {
  private readonly client: CosmosDBManagementClientContext;

  /**
   * Create a RestorableSqlResources.
   * @param {CosmosDBManagementClientContext} client Reference to the service client.
   */
  constructor(client: CosmosDBManagementClientContext) {
    this.client = client;
  }

  /**
   * Return a list of database and container combo that exist on the account at the given timestamp
   * and location. This helps in scenarios to validate what resources exist at given timestamp and
   * location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read'
   * permission.
   * @param location Cosmos DB region, with spaces between words and each word capitalized.
   * @param instanceId The instanceId GUID of a restorable database account.
   * @param [options] The optional parameters
   * @returns Promise<Models.RestorableSqlResourcesListResponse>
   */
  list(
    location: string,
    instanceId: string,
    options?: Models.RestorableSqlResourcesListOptionalParams
  ): Promise<Models.RestorableSqlResourcesListResponse>;
  /**
   * @param location Cosmos DB region, with spaces between words and each word capitalized.
   * @param instanceId The instanceId GUID of a restorable database account.
   * @param callback The callback
   */
  list(
    location: string,
    instanceId: string,
    callback: msRest.ServiceCallback<Models.RestorableSqlResourcesListResult>
  ): void;
  /**
   * @param location Cosmos DB region, with spaces between words and each word capitalized.
   * @param instanceId The instanceId GUID of a restorable database account.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(
    location: string,
    instanceId: string,
    options: Models.RestorableSqlResourcesListOptionalParams,
    callback: msRest.ServiceCallback<Models.RestorableSqlResourcesListResult>
  ): void;
  list(
    location: string,
    instanceId: string,
    options?:
      | Models.RestorableSqlResourcesListOptionalParams
      | msRest.ServiceCallback<Models.RestorableSqlResourcesListResult>,
    callback?: msRest.ServiceCallback<Models.RestorableSqlResourcesListResult>
  ): Promise<Models.RestorableSqlResourcesListResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        instanceId,
        options
      },
      listOperationSpec,
      callback
    ) as Promise<Models.RestorableSqlResourcesListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlResources",
  urlParameters: [Parameters.subscriptionId, Parameters.location, Parameters.instanceId],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.restoreLocation,
    Parameters.restoreTimestampInUtc
  ],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.RestorableSqlResourcesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
