/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/cassandraDataCentersMappers";
import * as Parameters from "../models/parameters";
import { CosmosDBManagementClientContext } from "../cosmosDBManagementClientContext";

/** Class representing a CassandraDataCenters. */
export class CassandraDataCenters {
  private readonly client: CosmosDBManagementClientContext;

  /**
   * Create a CassandraDataCenters.
   * @param {CosmosDBManagementClientContext} client Reference to the service client.
   */
  constructor(client: CosmosDBManagementClientContext) {
    this.client = client;
  }

  /**
   * List all data centers in a particular managed Cassandra cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraDataCentersListResponse>
   */
  list(
    resourceGroupName: string,
    clusterName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraDataCentersListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param callback The callback
   */
  list(
    resourceGroupName: string,
    clusterName: string,
    callback: msRest.ServiceCallback<Models.ListDataCenters>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(
    resourceGroupName: string,
    clusterName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ListDataCenters>
  ): void;
  list(
    resourceGroupName: string,
    clusterName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListDataCenters>,
    callback?: msRest.ServiceCallback<Models.ListDataCenters>
  ): Promise<Models.CassandraDataCentersListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        options
      },
      listOperationSpec,
      callback
    ) as Promise<Models.CassandraDataCentersListResponse>;
  }

  /**
   * Get the properties of a managed Cassandra data center.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param dataCenterName Data center name in a managed Cassandra cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraDataCentersGetResponse>
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    dataCenterName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraDataCentersGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param dataCenterName Data center name in a managed Cassandra cluster.
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    dataCenterName: string,
    callback: msRest.ServiceCallback<Models.DataCenterResource>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param dataCenterName Data center name in a managed Cassandra cluster.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    dataCenterName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DataCenterResource>
  ): void;
  get(
    resourceGroupName: string,
    clusterName: string,
    dataCenterName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataCenterResource>,
    callback?: msRest.ServiceCallback<Models.DataCenterResource>
  ): Promise<Models.CassandraDataCentersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        dataCenterName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.CassandraDataCentersGetResponse>;
  }

  /**
   * Delete a managed Cassandra data center.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param dataCenterName Data center name in a managed Cassandra cluster.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(
    resourceGroupName: string,
    clusterName: string,
    dataCenterName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(
      resourceGroupName,
      clusterName,
      dataCenterName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Create or update a managed Cassandra data center. When updating, overwrite all properties. To
   * update only some properties, use PATCH.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param dataCenterName Data center name in a managed Cassandra cluster.
   * @param body Parameters specifying the managed Cassandra data center.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraDataCentersCreateUpdateResponse>
   */
  createUpdate(
    resourceGroupName: string,
    clusterName: string,
    dataCenterName: string,
    body: Models.DataCenterResource,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraDataCentersCreateUpdateResponse> {
    return this.beginCreateUpdate(
      resourceGroupName,
      clusterName,
      dataCenterName,
      body,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.CassandraDataCentersCreateUpdateResponse
    >;
  }

  /**
   * Update some of the properties of a managed Cassandra data center.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param dataCenterName Data center name in a managed Cassandra cluster.
   * @param body Parameters to provide for specifying the managed Cassandra data center.
   * @param [options] The optional parameters
   * @returns Promise<Models.CassandraDataCentersUpdateResponse>
   */
  update(
    resourceGroupName: string,
    clusterName: string,
    dataCenterName: string,
    body: Models.DataCenterResource,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.CassandraDataCentersUpdateResponse> {
    return this.beginUpdate(
      resourceGroupName,
      clusterName,
      dataCenterName,
      body,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.CassandraDataCentersUpdateResponse
    >;
  }

  /**
   * Delete a managed Cassandra data center.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param dataCenterName Data center name in a managed Cassandra cluster.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(
    resourceGroupName: string,
    clusterName: string,
    dataCenterName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        dataCenterName,
        options
      },
      beginDeleteMethodOperationSpec,
      options
    );
  }

  /**
   * Create or update a managed Cassandra data center. When updating, overwrite all properties. To
   * update only some properties, use PATCH.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param dataCenterName Data center name in a managed Cassandra cluster.
   * @param body Parameters specifying the managed Cassandra data center.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateUpdate(
    resourceGroupName: string,
    clusterName: string,
    dataCenterName: string,
    body: Models.DataCenterResource,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        dataCenterName,
        body,
        options
      },
      beginCreateUpdateOperationSpec,
      options
    );
  }

  /**
   * Update some of the properties of a managed Cassandra data center.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param dataCenterName Data center name in a managed Cassandra cluster.
   * @param body Parameters to provide for specifying the managed Cassandra data center.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(
    resourceGroupName: string,
    clusterName: string,
    dataCenterName: string,
    body: Models.DataCenterResource,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        dataCenterName,
        body,
        options
      },
      beginUpdateOperationSpec,
      options
    );
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.clusterName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ListDataCenters
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.dataCenterName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DataCenterResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.dataCenterName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.dataCenterName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DataCenterResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DataCenterResource
    },
    201: {
      bodyMapper: Mappers.DataCenterResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.dataCenterName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DataCenterResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DataCenterResource
    },
    202: {
      bodyMapper: Mappers.DataCenterResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
