/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * The consistency policy for the Cosmos DB database account.
 */
export interface ConsistencyPolicy {
  /**
   * The default consistency level and configuration settings of the Cosmos DB account. Possible
   * values include: 'Eventual', 'Session', 'BoundedStaleness', 'Strong', 'ConsistentPrefix'
   */
  defaultConsistencyLevel: DefaultConsistencyLevel;
  /**
   * When used with the Bounded Staleness consistency level, this value represents the number of
   * stale requests tolerated. Accepted range for this value is 1 â€“ 2,147,483,647. Required when
   * defaultConsistencyPolicy is set to 'BoundedStaleness'.
   */
  maxStalenessPrefix?: number;
  /**
   * When used with the Bounded Staleness consistency level, this value represents the time amount
   * of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when
   * defaultConsistencyPolicy is set to 'BoundedStaleness'.
   */
  maxIntervalInSeconds?: number;
}

/**
 * Cosmos DB capability object
 */
export interface Capability {
  /**
   * Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also
   * include "EnableTable" and "EnableGremlin".
   */
  name?: string;
}

/**
 * A region in which the Azure Cosmos DB database account is deployed.
 */
export interface Location {
  /**
   * The unique identifier of the region within the database account. Example:
   * &lt;accountName&gt;-&lt;locationName&gt;.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the region.
   */
  locationName?: string;
  /**
   * The connection endpoint for the specific region. Example:
   * https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly documentEndpoint?: string;
  provisioningState?: string;
  /**
   * The failover priority of the region. A failover priority of 0 indicates a write region. The
   * maximum value for a failover priority = (total number of regions - 1). Failover priority
   * values must be unique for each of the regions in which the database account exists.
   */
  failoverPriority?: number;
  /**
   * Flag to indicate whether or not this region is an AvailabilityZone region
   */
  isZoneRedundant?: boolean;
}

/**
 * The failover policy for a given region of a database account.
 */
export interface FailoverPolicy {
  /**
   * The unique identifier of the region in which the database account replicates to. Example:
   * &lt;accountName&gt;-&lt;locationName&gt;.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the region in which the database account exists.
   */
  locationName?: string;
  /**
   * The failover priority of the region. A failover priority of 0 indicates a write region. The
   * maximum value for a failover priority = (total number of regions - 1). Failover priority
   * values must be unique for each of the regions in which the database account exists.
   */
  failoverPriority?: number;
}

/**
 * Virtual Network ACL Rule object
 */
export interface VirtualNetworkRule {
  /**
   * Resource ID of a subnet, for example:
   * /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
   */
  id?: string;
  /**
   * Create firewall rule before the virtual network has vnet service endpoint enabled.
   */
  ignoreMissingVNetServiceEndpoint?: boolean;
}

/**
 * The core properties of ARM resources.
 */
export interface Resource extends BaseResource {
  /**
   * The unique resource identifier of the database account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the database account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of Azure resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The location of the resource group to which the resource belongs.
   */
  location?: string;
  tags?: { [propertyName: string]: string };
}

/**
 * An Azure Cosmos DB database account.
 */
export interface DatabaseAccount extends Resource {
  /**
   * Indicates the type of database account. This can only be set at database account creation.
   * Possible values include: 'GlobalDocumentDB', 'MongoDB', 'Parse'. Default value:
   * 'GlobalDocumentDB'.
   */
  kind?: DatabaseAccountKind;
  provisioningState?: string;
  /**
   * The connection endpoint for the Cosmos DB database account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly documentEndpoint?: string;
  /**
   * The offer type for the Cosmos DB database account. Default value: Standard. Possible values
   * include: 'Standard'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseAccountOfferType?: DatabaseAccountOfferType;
  /**
   * Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges
   * in CIDR form to be included as the allowed list of client IPs for a given database account. IP
   * addresses/ranges must be comma separated and must not contain any spaces.
   */
  ipRangeFilter?: string;
  /**
   * Flag to indicate whether to enable/disable Virtual Network ACL rules.
   */
  isVirtualNetworkFilterEnabled?: boolean;
  /**
   * Enables automatic failover of the write region in the rare event that the region is
   * unavailable due to an outage. Automatic failover will result in a new write region for the
   * account and is chosen based on the failover priorities configured for the account.
   */
  enableAutomaticFailover?: boolean;
  /**
   * The consistency policy for the Cosmos DB database account.
   */
  consistencyPolicy?: ConsistencyPolicy;
  /**
   * List of Cosmos DB capabilities for the account
   */
  capabilities?: Capability[];
  /**
   * An array that contains the write location for the Cosmos DB account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly writeLocations?: Location[];
  /**
   * An array that contains of the read locations enabled for the Cosmos DB account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLocations?: Location[];
  /**
   * An array that contains the regions ordered by their failover priorities.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly failoverPolicies?: FailoverPolicy[];
  /**
   * List of Virtual Network ACL rules configured for the Cosmos DB account.
   */
  virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * Enables the account to write in multiple locations
   */
  enableMultipleWriteLocations?: boolean;
}

/**
 * An Azure Cosmos DB SQL database.
 */
export interface SqlDatabase extends Resource {
  /**
   * Name of the Cosmos DB SQL database
   */
  sqlDatabaseId: string;
  /**
   * A system generated property. A unique identifier.
   */
  _rid?: string;
  /**
   * A system generated property that denotes the last updated timestamp of the resource.
   */
  _ts?: any;
  /**
   * A system generated property representing the resource etag required for optimistic concurrency
   * control.
   */
  _etag?: string;
  /**
   * A system generated property that specified the addressable path of the collections resource.
   */
  _colls?: string;
  /**
   * A system generated property that specifies the addressable path of the users resource.
   */
  _users?: string;
}

/**
 * The indexes for the path.
 */
export interface Indexes {
  /**
   * The datatype for which the indexing behavior is applied to. Possible values include: 'String',
   * 'Number', 'Point', 'Polygon', 'LineString', 'MultiPolygon'. Default value: 'String'.
   */
  dataType?: DataType;
  /**
   * The precision of the index. -1 is maximum precision.
   */
  precision?: number;
  /**
   * Indicates the type of index. Possible values include: 'Hash', 'Range', 'Spatial'. Default
   * value: 'Hash'.
   */
  kind?: IndexKind;
}

/**
 * The paths that are included in indexing
 */
export interface IncludedPath {
  /**
   * The path for which the indexing behavior applies to. Index paths typically start with root and
   * end with wildcard (/path/*)
   */
  path?: string;
  /**
   * List of indexes for this path
   */
  indexes?: Indexes[];
}

/**
 * An interface representing ExcludedPath.
 */
export interface ExcludedPath {
  /**
   * The path for which the indexing behavior applies to. Index paths typically start with root and
   * end with wildcard (/path/*)
   */
  path?: string;
}

/**
 * Cosmos DB indexing policy
 */
export interface IndexingPolicy {
  /**
   * Indicates if the indexing policy is automatic
   */
  automatic?: boolean;
  /**
   * Indicates the indexing mode. Possible values include: 'Consistent', 'Lazy', 'None'. Default
   * value: 'Consistent'.
   */
  indexingMode?: IndexingMode;
  /**
   * List of paths to include in the indexing
   */
  includedPaths?: IncludedPath[];
  /**
   * List of paths to exclude from indexing
   */
  excludedPaths?: ExcludedPath[];
}

/**
 * The configuration of the partition key to be used for partitioning data into multiple partitions
 */
export interface ContainerPartitionKey {
  /**
   * List of paths using which data within the container can be partitioned
   */
  paths?: string[];
  /**
   * Indicates the kind of algorithm used for partitioning. Possible values include: 'Hash',
   * 'Range'. Default value: 'Hash'.
   */
  kind?: PartitionKind;
}

/**
 * The unique key on that enforces uniqueness constraint on documents in the collection in the
 * Azure Cosmos DB service.
 */
export interface UniqueKey {
  /**
   * List of paths must be unique for each document in the Azure Cosmos DB service
   */
  paths?: string[];
}

/**
 * The unique key policy configuration for specifying uniqueness constraints on documents in the
 * collection in the Azure Cosmos DB service.
 */
export interface UniqueKeyPolicy {
  /**
   * List of unique keys on that enforces uniqueness constraint on documents in the collection in
   * the Azure Cosmos DB service.
   */
  uniqueKeys?: UniqueKey[];
}

/**
 * The conflict resolution policy for the container.
 */
export interface ConflictResolutionPolicy {
  /**
   * Indicates the conflict resolution mode. Possible values include: 'LastWriterWins', 'Custom'.
   * Default value: 'LastWriterWins'.
   */
  mode?: ConflictResolutionMode;
  /**
   * The conflict resolution path in the case of LastWriterWins mode.
   */
  conflictResolutionPath?: string;
  /**
   * The procedure to resolve conflicts in the case of custom mode.
   */
  conflictResolutionProcedure?: string;
}

/**
 * An Azure Cosmos DB container.
 */
export interface SqlContainer extends Resource {
  /**
   * Name of the Cosmos DB SQL container
   */
  sqlContainerId: string;
  /**
   * The configuration of the indexing policy. By default, the indexing is automatic for all
   * document paths within the container
   */
  indexingPolicy?: IndexingPolicy;
  /**
   * The configuration of the partition key to be used for partitioning data into multiple
   * partitions
   */
  partitionKey?: ContainerPartitionKey;
  /**
   * Default time to live
   */
  defaultTtl?: number;
  /**
   * The unique key policy configuration for specifying uniqueness constraints on documents in the
   * collection in the Azure Cosmos DB service.
   */
  uniqueKeyPolicy?: UniqueKeyPolicy;
  /**
   * The conflict resolution policy for the container.
   */
  conflictResolutionPolicy?: ConflictResolutionPolicy;
  /**
   * A system generated property. A unique identifier.
   */
  _rid?: string;
  /**
   * A system generated property that denotes the last updated timestamp of the resource.
   */
  _ts?: any;
  /**
   * A system generated property representing the resource etag required for optimistic concurrency
   * control.
   */
  _etag?: string;
}

/**
 * An Azure Cosmos DB MongoDB database.
 */
export interface MongoDBDatabase extends Resource {
  /**
   * Name of the Cosmos DB MongoDB database
   */
  mongoDBDatabaseId: string;
}

/**
 * An Azure Cosmos DB MongoDB collection.
 */
export interface MongoDBCollection extends Resource {
  /**
   * Name of the Cosmos DB MongoDB collection
   */
  mongoDBCollectionId: string;
  /**
   * A key-value pair of shard keys to be applied for the request.
   */
  shardKey?: { [propertyName: string]: string };
  /**
   * List of index keys
   */
  indexes?: MongoIndex[];
}

/**
 * An Azure Cosmos DB Table.
 */
export interface Table extends Resource {
  /**
   * Name of the Cosmos DB table
   */
  tableId: string;
}

/**
 * An Azure Cosmos DB Cassandra keyspace.
 */
export interface CassandraKeyspace extends Resource {
  /**
   * Name of the Cosmos DB Cassandra keyspace
   */
  cassandraKeyspaceId: string;
}

/**
 * An Azure Cosmos DB Cassandra table.
 */
export interface CassandraTable extends Resource {
  /**
   * Name of the Cosmos DB Cassandra table
   */
  cassandraTableId: string;
  /**
   * Time to live of the Cosmos DB Cassandra table
   */
  defaultTtl?: number;
  /**
   * Schema of the Cosmos DB Cassandra table
   */
  schema?: CassandraSchema;
}

/**
 * An Azure Cosmos DB Gremlin database.
 */
export interface GremlinDatabase extends Resource {
  /**
   * Name of the Cosmos DB Gremlin database
   */
  gremlinDatabaseId: string;
  /**
   * A system generated property. A unique identifier.
   */
  _rid?: string;
  /**
   * A system generated property that denotes the last updated timestamp of the resource.
   */
  _ts?: any;
  /**
   * A system generated property representing the resource etag required for optimistic concurrency
   * control.
   */
  _etag?: string;
}

/**
 * An Azure Cosmos DB Gremlin graph.
 */
export interface GremlinGraph extends Resource {
  /**
   * Name of the Cosmos DB Gremlin graph
   */
  gremlinGraphId: string;
  /**
   * The configuration of the indexing policy. By default, the indexing is automatic for all
   * document paths within the graph
   */
  indexingPolicy?: IndexingPolicy;
  /**
   * The configuration of the partition key to be used for partitioning data into multiple
   * partitions
   */
  partitionKey?: ContainerPartitionKey;
  /**
   * Default time to live
   */
  defaultTtl?: number;
  /**
   * The unique key policy configuration for specifying uniqueness constraints on documents in the
   * collection in the Azure Cosmos DB service.
   */
  uniqueKeyPolicy?: UniqueKeyPolicy;
  /**
   * The conflict resolution policy for the graph.
   */
  conflictResolutionPolicy?: ConflictResolutionPolicy;
  /**
   * A system generated property. A unique identifier.
   */
  _rid?: string;
  /**
   * A system generated property that denotes the last updated timestamp of the resource.
   */
  _ts?: any;
  /**
   * A system generated property representing the resource etag required for optimistic concurrency
   * control.
   */
  _etag?: string;
}

/**
 * Error Response.
 */
export interface ErrorResponse {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * The list of new failover policies for the failover priority change.
 */
export interface FailoverPolicies {
  /**
   * List of failover policies.
   */
  failoverPolicies: FailoverPolicy[];
}

/**
 * Cosmos DB region to online or offline.
 */
export interface RegionForOnlineOffline {
  /**
   * Cosmos DB region, with spaces between words and each word capitalized.
   */
  region: string;
}

/**
 * The system generated resource properties associated with SQL databases and SQL containers.
 */
export interface ExtendedResourceProperties {
  /**
   * A system generated property. A unique identifier.
   */
  _rid?: string;
  /**
   * A system generated property that denotes the last updated timestamp of the resource.
   */
  _ts?: any;
  /**
   * A system generated property representing the resource etag required for optimistic concurrency
   * control.
   */
  _etag?: string;
}

/**
 * An Azure Cosmos DB resource throughput.
 */
export interface Throughput extends Resource {
  /**
   * Value of the Cosmos DB resource throughput
   */
  throughput: number;
}

/**
 * Parameters to create and update Cosmos DB database accounts.
 */
export interface DatabaseAccountCreateUpdateParameters extends Resource {
  /**
   * Indicates the type of database account. This can only be set at database account creation.
   * Possible values include: 'GlobalDocumentDB', 'MongoDB', 'Parse'. Default value:
   * 'GlobalDocumentDB'.
   */
  kind?: DatabaseAccountKind;
  /**
   * The consistency policy for the Cosmos DB account.
   */
  consistencyPolicy?: ConsistencyPolicy;
  /**
   * An array that contains the georeplication locations enabled for the Cosmos DB account.
   */
  locations: Location[];
  /**
   * Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges
   * in CIDR form to be included as the allowed list of client IPs for a given database account. IP
   * addresses/ranges must be comma separated and must not contain any spaces.
   */
  ipRangeFilter?: string;
  /**
   * Flag to indicate whether to enable/disable Virtual Network ACL rules.
   */
  isVirtualNetworkFilterEnabled?: boolean;
  /**
   * Enables automatic failover of the write region in the rare event that the region is
   * unavailable due to an outage. Automatic failover will result in a new write region for the
   * account and is chosen based on the failover priorities configured for the account.
   */
  enableAutomaticFailover?: boolean;
  /**
   * List of Cosmos DB capabilities for the account
   */
  capabilities?: Capability[];
  /**
   * List of Virtual Network ACL rules configured for the Cosmos DB account.
   */
  virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * Enables the account to write in multiple locations
   */
  enableMultipleWriteLocations?: boolean;
}

/**
 * Parameters for patching Azure Cosmos DB database account properties.
 */
export interface DatabaseAccountPatchParameters {
  tags?: { [propertyName: string]: string };
  /**
   * List of Cosmos DB capabilities for the account
   */
  capabilities?: Capability[];
}

/**
 * The read-only access keys for the given database account.
 */
export interface DatabaseAccountListReadOnlyKeysResult {
  /**
   * Base 64 encoded value of the primary read-only key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryReadonlyMasterKey?: string;
  /**
   * Base 64 encoded value of the secondary read-only key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secondaryReadonlyMasterKey?: string;
}

/**
 * The access keys for the given database account.
 */
export interface DatabaseAccountListKeysResult {
  /**
   * Base 64 encoded value of the primary read-write key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryMasterKey?: string;
  /**
   * Base 64 encoded value of the secondary read-write key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secondaryMasterKey?: string;
  /**
   * Base 64 encoded value of the primary read-only key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryReadonlyMasterKey?: string;
  /**
   * Base 64 encoded value of the secondary read-only key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secondaryReadonlyMasterKey?: string;
}

/**
 * Connection string for the Cosmos DB account
 */
export interface DatabaseAccountConnectionString {
  /**
   * Value of the connection string
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionString?: string;
  /**
   * Description of the connection string
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
}

/**
 * The connection strings for the given database account.
 */
export interface DatabaseAccountListConnectionStringsResult {
  /**
   * An array that contains the connection strings for the Cosmos DB account.
   */
  connectionStrings?: DatabaseAccountConnectionString[];
}

/**
 * Parameters to regenerate the keys within the database account.
 */
export interface DatabaseAccountRegenerateKeyParameters {
  /**
   * The access key to regenerate. Possible values include: 'primary', 'secondary',
   * 'primaryReadonly', 'secondaryReadonly'
   */
  keyKind: KeyKind;
}

/**
 * Cosmos DB resource throughput object
 */
export interface ThroughputResource {
  /**
   * Value of the Cosmos DB resource throughput
   */
  throughput: number;
}

/**
 * Parameters to update Cosmos DB resource throughput.
 */
export interface ThroughputUpdateParameters {
  /**
   * The standard JSON format of a resource throughput
   */
  resource: ThroughputResource;
}

/**
 * Cosmos DB SQL database id object
 */
export interface SqlDatabaseResource {
  /**
   * Name of the Cosmos DB SQL database
   */
  id: string;
}

/**
 * Parameters to create and update Cosmos DB SQL database.
 */
export interface SqlDatabaseCreateUpdateParameters {
  /**
   * The standard JSON format of a SQL database
   */
  resource: SqlDatabaseResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * Cosmos DB SQL container resource object
 */
export interface SqlContainerResource {
  /**
   * Name of the Cosmos DB SQL container
   */
  id: string;
  /**
   * The configuration of the indexing policy. By default, the indexing is automatic for all
   * document paths within the container
   */
  indexingPolicy?: IndexingPolicy;
  /**
   * The configuration of the partition key to be used for partitioning data into multiple
   * partitions
   */
  partitionKey?: ContainerPartitionKey;
  /**
   * Default time to live
   */
  defaultTtl?: number;
  /**
   * The unique key policy configuration for specifying uniqueness constraints on documents in the
   * collection in the Azure Cosmos DB service.
   */
  uniqueKeyPolicy?: UniqueKeyPolicy;
  /**
   * The conflict resolution policy for the container.
   */
  conflictResolutionPolicy?: ConflictResolutionPolicy;
}

/**
 * Parameters to create and update Cosmos DB container.
 */
export interface SqlContainerCreateUpdateParameters {
  /**
   * The standard JSON format of a container
   */
  resource: SqlContainerResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * Cosmos DB MongoDB database id object
 */
export interface MongoDBDatabaseResource {
  /**
   * Name of the Cosmos DB MongoDB database
   */
  id: string;
}

/**
 * Parameters to create and update Cosmos DB MongoDB database.
 */
export interface MongoDBDatabaseCreateUpdateParameters {
  /**
   * The standard JSON format of a MongoDB database
   */
  resource: MongoDBDatabaseResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * Cosmos DB MongoDB collection resource object
 */
export interface MongoIndexKeys {
  /**
   * List of keys for each MongoDB collection in the Azure Cosmos DB service
   */
  keys?: string[];
}

/**
 * Cosmos DB MongoDB collection index options
 */
export interface MongoIndexOptions {
  /**
   * Expire after seconds
   */
  expireAfterSeconds?: number;
  /**
   * Is unique or not
   */
  unique?: boolean;
}

/**
 * Cosmos DB MongoDB collection index key
 */
export interface MongoIndex {
  /**
   * Cosmos DB MongoDB collection index keys
   */
  key?: MongoIndexKeys;
  /**
   * Cosmos DB MongoDB collection index key options
   */
  options?: MongoIndexOptions;
}

/**
 * Cosmos DB MongoDB collection resource object
 */
export interface MongoDBCollectionResource {
  /**
   * Name of the Cosmos DB MongoDB collection
   */
  id: string;
  /**
   * A key-value pair of shard keys to be applied for the request.
   */
  shardKey?: { [propertyName: string]: string };
  /**
   * List of index keys
   */
  indexes?: MongoIndex[];
}

/**
 * Parameters to create and update Cosmos DB MongoDB collection.
 */
export interface MongoDBCollectionCreateUpdateParameters {
  /**
   * The standard JSON format of a MongoDB collection
   */
  resource: MongoDBCollectionResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * Cosmos DB table id object
 */
export interface TableResource {
  /**
   * Name of the Cosmos DB table
   */
  id: string;
}

/**
 * Parameters to create and update Cosmos DB Table.
 */
export interface TableCreateUpdateParameters {
  /**
   * The standard JSON format of a Table
   */
  resource: TableResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * Cosmos DB Cassandra keyspace id object
 */
export interface CassandraKeyspaceResource {
  /**
   * Name of the Cosmos DB Cassandra keyspace
   */
  id: string;
}

/**
 * Parameters to create and update Cosmos DB Cassandra keyspace.
 */
export interface CassandraKeyspaceCreateUpdateParameters {
  /**
   * The standard JSON format of a Cassandra keyspace
   */
  resource: CassandraKeyspaceResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * Cosmos DB Cassandra table column
 */
export interface Column {
  /**
   * Name of the Cosmos DB Cassandra table column
   */
  name?: string;
  /**
   * Type of the Cosmos DB Cassandra table column
   */
  type?: string;
}

/**
 * Cosmos DB Cassandra table partition key
 */
export interface CassandraPartitionKey {
  /**
   * Name of the Cosmos DB Cassandra table partition key
   */
  name?: string;
}

/**
 * Cosmos DB Cassandra table cluster key
 */
export interface ClusterKey {
  /**
   * Name of the Cosmos DB Cassandra table cluster key
   */
  name?: string;
  /**
   * Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
   */
  orderBy?: string;
}

/**
 * Cosmos DB Cassandra table schema
 */
export interface CassandraSchema {
  /**
   * List of Cassandra table columns.
   */
  columns?: Column[];
  /**
   * List of partition key.
   */
  partitionKeys?: CassandraPartitionKey[];
  /**
   * List of cluster key.
   */
  clusterKeys?: ClusterKey[];
}

/**
 * Cosmos DB Cassandra table id object
 */
export interface CassandraTableResource {
  /**
   * Name of the Cosmos DB Cassandra table
   */
  id: string;
  /**
   * Time to live of the Cosmos DB Cassandra table
   */
  defaultTtl?: number;
  /**
   * Schema of the Cosmos DB Cassandra table
   */
  schema?: CassandraSchema;
}

/**
 * Parameters to create and update Cosmos DB Cassandra table.
 */
export interface CassandraTableCreateUpdateParameters {
  /**
   * The standard JSON format of a Cassandra table
   */
  resource: CassandraTableResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * Cosmos DB Gremlin database id object
 */
export interface GremlinDatabaseResource {
  /**
   * Name of the Cosmos DB Gremlin database
   */
  id: string;
}

/**
 * Parameters to create and update Cosmos DB Gremlin database.
 */
export interface GremlinDatabaseCreateUpdateParameters {
  /**
   * The standard JSON format of a Gremlin database
   */
  resource: GremlinDatabaseResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * Cosmos DB Gremlin graph resource object
 */
export interface GremlinGraphResource {
  /**
   * Name of the Cosmos DB Gremlin graph
   */
  id: string;
  /**
   * The configuration of the indexing policy. By default, the indexing is automatic for all
   * document paths within the graph
   */
  indexingPolicy?: IndexingPolicy;
  /**
   * The configuration of the partition key to be used for partitioning data into multiple
   * partitions
   */
  partitionKey?: ContainerPartitionKey;
  /**
   * Default time to live
   */
  defaultTtl?: number;
  /**
   * The unique key policy configuration for specifying uniqueness constraints on documents in the
   * collection in the Azure Cosmos DB service.
   */
  uniqueKeyPolicy?: UniqueKeyPolicy;
  /**
   * The conflict resolution policy for the graph.
   */
  conflictResolutionPolicy?: ConflictResolutionPolicy;
}

/**
 * Parameters to create and update Cosmos DB Gremlin graph.
 */
export interface GremlinGraphCreateUpdateParameters {
  /**
   * The standard JSON format of a Gremlin graph
   */
  resource: GremlinGraphResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers
   * sent with the request.
   */
  options: { [propertyName: string]: string };
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.ResourceProvider
   */
  provider?: string;
  /**
   * Resource on which the operation is performed: Profile, endpoint, etc.
   */
  resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  operation?: string;
  /**
   * Description of operation
   */
  description?: string;
}

/**
 * REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * A metric name.
 */
export interface MetricName {
  /**
   * The name of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
  /**
   * The friendly name of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localizedValue?: string;
}

/**
 * The usage data for a usage request.
 */
export interface Usage {
  /**
   * The unit of the metric. Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
   * 'CountPerSecond', 'BytesPerSecond', 'Milliseconds'
   */
  unit?: UnitType;
  /**
   * The name information for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: MetricName;
  /**
   * The quota period used to summarize the usage values.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly quotaPeriod?: string;
  /**
   * Maximum value for this metric
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * Current value for this metric
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentValue?: number;
}

/**
 * The partition level usage data for a usage request.
 */
export interface PartitionUsage extends Usage {
  /**
   * The partition id (GUID identifier) of the usages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partitionId?: string;
  /**
   * The partition key range id (integer identifier) of the usages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partitionKeyRangeId?: string;
}

/**
 * The availability of the metric.
 */
export interface MetricAvailability {
  /**
   * The time grain to be used to summarize the metric values.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timeGrain?: string;
  /**
   * The retention for the metric values.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly retention?: string;
}

/**
 * The definition of a metric.
 */
export interface MetricDefinition {
  /**
   * The list of metric availabilities for the account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metricAvailabilities?: MetricAvailability[];
  /**
   * The primary aggregation type of the metric. Possible values include: 'None', 'Average',
   * 'Total', 'Minimimum', 'Maximum', 'Last'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryAggregationType?: PrimaryAggregationType;
  /**
   * The unit of the metric. Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
   * 'CountPerSecond', 'BytesPerSecond', 'Milliseconds'
   */
  unit?: UnitType;
  /**
   * The resource uri of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceUri?: string;
  /**
   * The name information for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: MetricName;
}

/**
 * Represents metrics values.
 */
export interface MetricValue {
  /**
   * The number of values for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly _count?: number;
  /**
   * The average value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly average?: number;
  /**
   * The max value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maximum?: number;
  /**
   * The min value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly minimum?: number;
  /**
   * The metric timestamp (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestamp?: Date;
  /**
   * The total value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly total?: number;
}

/**
 * Metric data
 */
export interface Metric {
  /**
   * The start time for the metric (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * The end time for the metric (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: Date;
  /**
   * The time grain to be used to summarize the metric values.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timeGrain?: string;
  /**
   * The unit of the metric. Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
   * 'CountPerSecond', 'BytesPerSecond', 'Milliseconds'
   */
  unit?: UnitType;
  /**
   * The name information for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: MetricName;
  /**
   * The metric values for the specified time window and timestep.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metricValues?: MetricValue[];
}

/**
 * Represents percentile metrics values.
 */
export interface PercentileMetricValue extends MetricValue {
  /**
   * The 10th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly p10?: number;
  /**
   * The 25th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly p25?: number;
  /**
   * The 50th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly p50?: number;
  /**
   * The 75th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly p75?: number;
  /**
   * The 90th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly p90?: number;
  /**
   * The 95th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly p95?: number;
  /**
   * The 99th percentile value for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly p99?: number;
}

/**
 * Percentile Metric data
 */
export interface PercentileMetric {
  /**
   * The start time for the metric (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * The end time for the metric (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: Date;
  /**
   * The time grain to be used to summarize the metric values.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timeGrain?: string;
  /**
   * The unit of the metric. Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
   * 'CountPerSecond', 'BytesPerSecond', 'Milliseconds'
   */
  unit?: UnitType;
  /**
   * The name information for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: MetricName;
  /**
   * The percentile metric values for the specified time window and timestep.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metricValues?: PercentileMetricValue[];
}

/**
 * The metric values for a single partition.
 */
export interface PartitionMetric extends Metric {
  /**
   * The partition id (GUID identifier) of the metric values.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partitionId?: string;
  /**
   * The partition key range id (integer identifier) of the metric values.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partitionKeyRangeId?: string;
}

/**
 * Optional Parameters.
 */
export interface DatabaseAccountsListUsagesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * An OData filter expression that describes a subset of usages to return. The supported
   * parameter is name.value (name of the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface DatabaseListUsagesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * An OData filter expression that describes a subset of usages to return. The supported
   * parameter is name.value (name of the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface CollectionListUsagesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * An OData filter expression that describes a subset of usages to return. The supported
   * parameter is name.value (name of the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface CollectionPartitionListUsagesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * An OData filter expression that describes a subset of usages to return. The supported
   * parameter is name.value (name of the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * An interface representing CosmosDBManagementClientOptions.
 */
export interface CosmosDBManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The List operation response, that contains the database accounts and their properties.
 * @extends Array<DatabaseAccount>
 */
export interface DatabaseAccountsListResult extends Array<DatabaseAccount> {
}

/**
 * @interface
 * The response to a list metrics request.
 * @extends Array<Metric>
 */
export interface MetricListResult extends Array<Metric> {
}

/**
 * @interface
 * The response to a list usage request.
 * @extends Array<Usage>
 */
export interface UsagesResult extends Array<Usage> {
}

/**
 * @interface
 * The response to a list metric definitions request.
 * @extends Array<MetricDefinition>
 */
export interface MetricDefinitionsListResult extends Array<MetricDefinition> {
}

/**
 * @interface
 * The List operation response, that contains the SQL databases and their properties.
 * @extends Array<SqlDatabase>
 */
export interface SqlDatabaseListResult extends Array<SqlDatabase> {
}

/**
 * @interface
 * The List operation response, that contains the containers and their properties.
 * @extends Array<SqlContainer>
 */
export interface SqlContainerListResult extends Array<SqlContainer> {
}

/**
 * @interface
 * The List operation response, that contains the MongoDB databases and their properties.
 * @extends Array<MongoDBDatabase>
 */
export interface MongoDBDatabaseListResult extends Array<MongoDBDatabase> {
}

/**
 * @interface
 * The List operation response, that contains the MongoDB collections and their properties.
 * @extends Array<MongoDBCollection>
 */
export interface MongoDBCollectionListResult extends Array<MongoDBCollection> {
}

/**
 * @interface
 * The List operation response, that contains the Table and their properties.
 * @extends Array<Table>
 */
export interface TableListResult extends Array<Table> {
}

/**
 * @interface
 * The List operation response, that contains the Cassandra keyspaces and their properties.
 * @extends Array<CassandraKeyspace>
 */
export interface CassandraKeyspaceListResult extends Array<CassandraKeyspace> {
}

/**
 * @interface
 * The List operation response, that contains the Cassandra tables and their properties.
 * @extends Array<CassandraTable>
 */
export interface CassandraTableListResult extends Array<CassandraTable> {
}

/**
 * @interface
 * The List operation response, that contains the Gremlin databases and their properties.
 * @extends Array<GremlinDatabase>
 */
export interface GremlinDatabaseListResult extends Array<GremlinDatabase> {
}

/**
 * @interface
 * The List operation response, that contains the graphs and their properties.
 * @extends Array<GremlinGraph>
 */
export interface GremlinGraphListResult extends Array<GremlinGraph> {
}

/**
 * @interface
 * Result of the request to list Resource Provider operations. It contains a list of operations and
 * a URL link to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response to a list percentile metrics request.
 * @extends Array<PercentileMetric>
 */
export interface PercentileMetricListResult extends Array<PercentileMetric> {
}

/**
 * @interface
 * The response to a list partition metrics request.
 * @extends Array<PartitionMetric>
 */
export interface PartitionMetricListResult extends Array<PartitionMetric> {
}

/**
 * @interface
 * The response to a list partition level usage request.
 * @extends Array<PartitionUsage>
 */
export interface PartitionUsagesResult extends Array<PartitionUsage> {
}

/**
 * Defines values for DatabaseAccountKind.
 * Possible values include: 'GlobalDocumentDB', 'MongoDB', 'Parse'
 * @readonly
 * @enum {string}
 */
export type DatabaseAccountKind = 'GlobalDocumentDB' | 'MongoDB' | 'Parse';

/**
 * Defines values for DatabaseAccountOfferType.
 * Possible values include: 'Standard'
 * @readonly
 * @enum {string}
 */
export type DatabaseAccountOfferType = 'Standard';

/**
 * Defines values for DefaultConsistencyLevel.
 * Possible values include: 'Eventual', 'Session', 'BoundedStaleness', 'Strong', 'ConsistentPrefix'
 * @readonly
 * @enum {string}
 */
export type DefaultConsistencyLevel = 'Eventual' | 'Session' | 'BoundedStaleness' | 'Strong' | 'ConsistentPrefix';

/**
 * Defines values for IndexingMode.
 * Possible values include: 'Consistent', 'Lazy', 'None'
 * @readonly
 * @enum {string}
 */
export type IndexingMode = 'Consistent' | 'Lazy' | 'None';

/**
 * Defines values for DataType.
 * Possible values include: 'String', 'Number', 'Point', 'Polygon', 'LineString', 'MultiPolygon'
 * @readonly
 * @enum {string}
 */
export type DataType = 'String' | 'Number' | 'Point' | 'Polygon' | 'LineString' | 'MultiPolygon';

/**
 * Defines values for IndexKind.
 * Possible values include: 'Hash', 'Range', 'Spatial'
 * @readonly
 * @enum {string}
 */
export type IndexKind = 'Hash' | 'Range' | 'Spatial';

/**
 * Defines values for PartitionKind.
 * Possible values include: 'Hash', 'Range'
 * @readonly
 * @enum {string}
 */
export type PartitionKind = 'Hash' | 'Range';

/**
 * Defines values for ConflictResolutionMode.
 * Possible values include: 'LastWriterWins', 'Custom'
 * @readonly
 * @enum {string}
 */
export type ConflictResolutionMode = 'LastWriterWins' | 'Custom';

/**
 * Defines values for KeyKind.
 * Possible values include: 'primary', 'secondary', 'primaryReadonly', 'secondaryReadonly'
 * @readonly
 * @enum {string}
 */
export type KeyKind = 'primary' | 'secondary' | 'primaryReadonly' | 'secondaryReadonly';

/**
 * Defines values for UnitType.
 * Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond',
 * 'BytesPerSecond', 'Milliseconds'
 * @readonly
 * @enum {string}
 */
export type UnitType = 'Count' | 'Bytes' | 'Seconds' | 'Percent' | 'CountPerSecond' | 'BytesPerSecond' | 'Milliseconds';

/**
 * Defines values for PrimaryAggregationType.
 * Possible values include: 'None', 'Average', 'Total', 'Minimimum', 'Maximum', 'Last'
 * @readonly
 * @enum {string}
 */
export type PrimaryAggregationType = 'None' | 'Average' | 'Total' | 'Minimimum' | 'Maximum' | 'Last';

/**
 * Contains response data for the get operation.
 */
export type DatabaseAccountsGetResponse = DatabaseAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccount;
    };
};

/**
 * Contains response data for the patch operation.
 */
export type DatabaseAccountsPatchResponse = DatabaseAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccount;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseAccountsCreateOrUpdateResponse = DatabaseAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccount;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DatabaseAccountsListResponse = DatabaseAccountsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountsListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DatabaseAccountsListByResourceGroupResponse = DatabaseAccountsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountsListResult;
    };
};

/**
 * Contains response data for the listKeys operation.
 */
export type DatabaseAccountsListKeysResponse = DatabaseAccountListKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountListKeysResult;
    };
};

/**
 * Contains response data for the listConnectionStrings operation.
 */
export type DatabaseAccountsListConnectionStringsResponse = DatabaseAccountListConnectionStringsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountListConnectionStringsResult;
    };
};

/**
 * Contains response data for the getReadOnlyKeys operation.
 */
export type DatabaseAccountsGetReadOnlyKeysResponse = DatabaseAccountListReadOnlyKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountListReadOnlyKeysResult;
    };
};

/**
 * Contains response data for the listReadOnlyKeys operation.
 */
export type DatabaseAccountsListReadOnlyKeysResponse = DatabaseAccountListReadOnlyKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccountListReadOnlyKeysResult;
    };
};

/**
 * Contains response data for the checkNameExists operation.
 */
export type DatabaseAccountsCheckNameExistsResponse = {
  /**
   * The parsed response body.
   */
  body: boolean;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: boolean;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabaseAccountsListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listUsages operation.
 */
export type DatabaseAccountsListUsagesResponse = UsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesResult;
    };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type DatabaseAccountsListMetricDefinitionsResponse = MetricDefinitionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricDefinitionsListResult;
    };
};

/**
 * Contains response data for the listSqlDatabases operation.
 */
export type DatabaseAccountsListSqlDatabasesResponse = SqlDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlDatabaseListResult;
    };
};

/**
 * Contains response data for the getSqlDatabase operation.
 */
export type DatabaseAccountsGetSqlDatabaseResponse = SqlDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlDatabase;
    };
};

/**
 * Contains response data for the createUpdateSqlDatabase operation.
 */
export type DatabaseAccountsCreateUpdateSqlDatabaseResponse = SqlDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlDatabase;
    };
};

/**
 * Contains response data for the getSqlDatabaseThroughput operation.
 */
export type DatabaseAccountsGetSqlDatabaseThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the updateSqlDatabaseThroughput operation.
 */
export type DatabaseAccountsUpdateSqlDatabaseThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the listSqlContainers operation.
 */
export type DatabaseAccountsListSqlContainersResponse = SqlContainerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlContainerListResult;
    };
};

/**
 * Contains response data for the getSqlContainer operation.
 */
export type DatabaseAccountsGetSqlContainerResponse = SqlContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlContainer;
    };
};

/**
 * Contains response data for the createUpdateSqlContainer operation.
 */
export type DatabaseAccountsCreateUpdateSqlContainerResponse = SqlContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlContainer;
    };
};

/**
 * Contains response data for the getSqlContainerThroughput operation.
 */
export type DatabaseAccountsGetSqlContainerThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the updateSqlContainerThroughput operation.
 */
export type DatabaseAccountsUpdateSqlContainerThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the listMongoDBDatabases operation.
 */
export type DatabaseAccountsListMongoDBDatabasesResponse = MongoDBDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDBDatabaseListResult;
    };
};

/**
 * Contains response data for the getMongoDBDatabase operation.
 */
export type DatabaseAccountsGetMongoDBDatabaseResponse = MongoDBDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDBDatabase;
    };
};

/**
 * Contains response data for the createUpdateMongoDBDatabase operation.
 */
export type DatabaseAccountsCreateUpdateMongoDBDatabaseResponse = MongoDBDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDBDatabase;
    };
};

/**
 * Contains response data for the getMongoDBDatabaseThroughput operation.
 */
export type DatabaseAccountsGetMongoDBDatabaseThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the updateMongoDBDatabaseThroughput operation.
 */
export type DatabaseAccountsUpdateMongoDBDatabaseThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the listMongoDBCollections operation.
 */
export type DatabaseAccountsListMongoDBCollectionsResponse = MongoDBCollectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDBCollectionListResult;
    };
};

/**
 * Contains response data for the getMongoDBCollection operation.
 */
export type DatabaseAccountsGetMongoDBCollectionResponse = MongoDBCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDBCollection;
    };
};

/**
 * Contains response data for the createUpdateMongoDBCollection operation.
 */
export type DatabaseAccountsCreateUpdateMongoDBCollectionResponse = MongoDBCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDBCollection;
    };
};

/**
 * Contains response data for the getMongoDBCollectionThroughput operation.
 */
export type DatabaseAccountsGetMongoDBCollectionThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the updateMongoDBCollectionThroughput operation.
 */
export type DatabaseAccountsUpdateMongoDBCollectionThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the listTables operation.
 */
export type DatabaseAccountsListTablesResponse = TableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TableListResult;
    };
};

/**
 * Contains response data for the getTable operation.
 */
export type DatabaseAccountsGetTableResponse = Table & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Table;
    };
};

/**
 * Contains response data for the createUpdateTable operation.
 */
export type DatabaseAccountsCreateUpdateTableResponse = Table & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Table;
    };
};

/**
 * Contains response data for the getTableThroughput operation.
 */
export type DatabaseAccountsGetTableThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the updateTableThroughput operation.
 */
export type DatabaseAccountsUpdateTableThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the listCassandraKeyspaces operation.
 */
export type DatabaseAccountsListCassandraKeyspacesResponse = CassandraKeyspaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraKeyspaceListResult;
    };
};

/**
 * Contains response data for the getCassandraKeyspace operation.
 */
export type DatabaseAccountsGetCassandraKeyspaceResponse = CassandraKeyspace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraKeyspace;
    };
};

/**
 * Contains response data for the createUpdateCassandraKeyspace operation.
 */
export type DatabaseAccountsCreateUpdateCassandraKeyspaceResponse = CassandraKeyspace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraKeyspace;
    };
};

/**
 * Contains response data for the getCassandraKeyspaceThroughput operation.
 */
export type DatabaseAccountsGetCassandraKeyspaceThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the updateCassandraKeyspaceThroughput operation.
 */
export type DatabaseAccountsUpdateCassandraKeyspaceThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the listCassandraTables operation.
 */
export type DatabaseAccountsListCassandraTablesResponse = CassandraTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraTableListResult;
    };
};

/**
 * Contains response data for the getCassandraTable operation.
 */
export type DatabaseAccountsGetCassandraTableResponse = CassandraTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraTable;
    };
};

/**
 * Contains response data for the createUpdateCassandraTable operation.
 */
export type DatabaseAccountsCreateUpdateCassandraTableResponse = CassandraTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraTable;
    };
};

/**
 * Contains response data for the getCassandraTableThroughput operation.
 */
export type DatabaseAccountsGetCassandraTableThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the updateCassandraTableThroughput operation.
 */
export type DatabaseAccountsUpdateCassandraTableThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the listGremlinDatabases operation.
 */
export type DatabaseAccountsListGremlinDatabasesResponse = GremlinDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinDatabaseListResult;
    };
};

/**
 * Contains response data for the getGremlinDatabase operation.
 */
export type DatabaseAccountsGetGremlinDatabaseResponse = GremlinDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinDatabase;
    };
};

/**
 * Contains response data for the createUpdateGremlinDatabase operation.
 */
export type DatabaseAccountsCreateUpdateGremlinDatabaseResponse = GremlinDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinDatabase;
    };
};

/**
 * Contains response data for the getGremlinDatabaseThroughput operation.
 */
export type DatabaseAccountsGetGremlinDatabaseThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the updateGremlinDatabaseThroughput operation.
 */
export type DatabaseAccountsUpdateGremlinDatabaseThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the listGremlinGraphs operation.
 */
export type DatabaseAccountsListGremlinGraphsResponse = GremlinGraphListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinGraphListResult;
    };
};

/**
 * Contains response data for the getGremlinGraph operation.
 */
export type DatabaseAccountsGetGremlinGraphResponse = GremlinGraph & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinGraph;
    };
};

/**
 * Contains response data for the createUpdateGremlinGraph operation.
 */
export type DatabaseAccountsCreateUpdateGremlinGraphResponse = GremlinGraph & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinGraph;
    };
};

/**
 * Contains response data for the getGremlinGraphThroughput operation.
 */
export type DatabaseAccountsGetGremlinGraphThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the updateGremlinGraphThroughput operation.
 */
export type DatabaseAccountsUpdateGremlinGraphThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the beginPatch operation.
 */
export type DatabaseAccountsBeginPatchResponse = DatabaseAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccount;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DatabaseAccountsBeginCreateOrUpdateResponse = DatabaseAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseAccount;
    };
};

/**
 * Contains response data for the beginCreateUpdateSqlDatabase operation.
 */
export type DatabaseAccountsBeginCreateUpdateSqlDatabaseResponse = SqlDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlDatabase;
    };
};

/**
 * Contains response data for the beginUpdateSqlDatabaseThroughput operation.
 */
export type DatabaseAccountsBeginUpdateSqlDatabaseThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the beginCreateUpdateSqlContainer operation.
 */
export type DatabaseAccountsBeginCreateUpdateSqlContainerResponse = SqlContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SqlContainer;
    };
};

/**
 * Contains response data for the beginUpdateSqlContainerThroughput operation.
 */
export type DatabaseAccountsBeginUpdateSqlContainerThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the beginCreateUpdateMongoDBDatabase operation.
 */
export type DatabaseAccountsBeginCreateUpdateMongoDBDatabaseResponse = MongoDBDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDBDatabase;
    };
};

/**
 * Contains response data for the beginUpdateMongoDBDatabaseThroughput operation.
 */
export type DatabaseAccountsBeginUpdateMongoDBDatabaseThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the beginCreateUpdateMongoDBCollection operation.
 */
export type DatabaseAccountsBeginCreateUpdateMongoDBCollectionResponse = MongoDBCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MongoDBCollection;
    };
};

/**
 * Contains response data for the beginUpdateMongoDBCollectionThroughput operation.
 */
export type DatabaseAccountsBeginUpdateMongoDBCollectionThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the beginCreateUpdateTable operation.
 */
export type DatabaseAccountsBeginCreateUpdateTableResponse = Table & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Table;
    };
};

/**
 * Contains response data for the beginUpdateTableThroughput operation.
 */
export type DatabaseAccountsBeginUpdateTableThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the beginCreateUpdateCassandraKeyspace operation.
 */
export type DatabaseAccountsBeginCreateUpdateCassandraKeyspaceResponse = CassandraKeyspace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraKeyspace;
    };
};

/**
 * Contains response data for the beginUpdateCassandraKeyspaceThroughput operation.
 */
export type DatabaseAccountsBeginUpdateCassandraKeyspaceThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the beginCreateUpdateCassandraTable operation.
 */
export type DatabaseAccountsBeginCreateUpdateCassandraTableResponse = CassandraTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CassandraTable;
    };
};

/**
 * Contains response data for the beginUpdateCassandraTableThroughput operation.
 */
export type DatabaseAccountsBeginUpdateCassandraTableThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the beginCreateUpdateGremlinDatabase operation.
 */
export type DatabaseAccountsBeginCreateUpdateGremlinDatabaseResponse = GremlinDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinDatabase;
    };
};

/**
 * Contains response data for the beginUpdateGremlinDatabaseThroughput operation.
 */
export type DatabaseAccountsBeginUpdateGremlinDatabaseThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the beginCreateUpdateGremlinGraph operation.
 */
export type DatabaseAccountsBeginCreateUpdateGremlinGraphResponse = GremlinGraph & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GremlinGraph;
    };
};

/**
 * Contains response data for the beginUpdateGremlinGraphThroughput operation.
 */
export type DatabaseAccountsBeginUpdateGremlinGraphThroughputResponse = Throughput & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Throughput;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabaseListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listUsages operation.
 */
export type DatabaseListUsagesResponse = UsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesResult;
    };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type DatabaseListMetricDefinitionsResponse = MetricDefinitionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricDefinitionsListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listUsages operation.
 */
export type CollectionListUsagesResponse = UsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesResult;
    };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type CollectionListMetricDefinitionsResponse = MetricDefinitionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricDefinitionsListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionRegionListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabaseAccountRegionListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PercentileSourceTargetListMetricsResponse = PercentileMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PercentileMetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PercentileTargetListMetricsResponse = PercentileMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PercentileMetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PercentileListMetricsResponse = PercentileMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PercentileMetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionPartitionRegionListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PartitionMetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionPartitionListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PartitionMetricListResult;
    };
};

/**
 * Contains response data for the listUsages operation.
 */
export type CollectionPartitionListUsagesResponse = PartitionUsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PartitionUsagesResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PartitionKeyRangeIdListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PartitionMetricListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PartitionKeyRangeIdRegionListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PartitionMetricListResult;
    };
};
