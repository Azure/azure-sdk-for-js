/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const IpAddressOrRange: msRest.CompositeMapper = {
  serializedName: "IpAddressOrRange",
  type: {
    name: "Composite",
    className: "IpAddressOrRange",
    modelProperties: {
      ipAddressOrRange: {
        serializedName: "ipAddressOrRange",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsistencyPolicy: msRest.CompositeMapper = {
  serializedName: "ConsistencyPolicy",
  type: {
    name: "Composite",
    className: "ConsistencyPolicy",
    modelProperties: {
      defaultConsistencyLevel: {
        required: true,
        serializedName: "defaultConsistencyLevel",
        type: {
          name: "Enum",
          allowedValues: ["Eventual", "Session", "BoundedStaleness", "Strong", "ConsistentPrefix"]
        }
      },
      maxStalenessPrefix: {
        serializedName: "maxStalenessPrefix",
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      maxIntervalInSeconds: {
        serializedName: "maxIntervalInSeconds",
        constraints: {
          InclusiveMaximum: 86400,
          InclusiveMinimum: 5
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Capability: msRest.CompositeMapper = {
  serializedName: "Capability",
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Location: msRest.CompositeMapper = {
  serializedName: "Location",
  type: {
    name: "Composite",
    className: "Location",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      locationName: {
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      documentEndpoint: {
        readOnly: true,
        serializedName: "documentEndpoint",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        serializedName: "failoverPriority",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      isZoneRedundant: {
        serializedName: "isZoneRedundant",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FailoverPolicy: msRest.CompositeMapper = {
  serializedName: "FailoverPolicy",
  type: {
    name: "Composite",
    className: "FailoverPolicy",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      locationName: {
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        serializedName: "failoverPriority",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualNetworkRule: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      ignoreMissingVNetServiceEndpoint: {
        serializedName: "ignoreMissingVNetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PrivateEndpointProperty: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointProperty",
  type: {
    name: "Composite",
    className: "PrivateEndpointProperty",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionStateProperty: msRest.CompositeMapper = {
  serializedName: "PrivateLinkServiceConnectionStateProperty",
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionStateProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        readOnly: true,
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const PrivateEndpointConnection: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionStateProperty"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiProperties: msRest.CompositeMapper = {
  serializedName: "ApiProperties",
  type: {
    name: "Composite",
    className: "ApiProperties",
    modelProperties: {
      serverVersion: {
        serializedName: "serverVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseRestoreResource: msRest.CompositeMapper = {
  serializedName: "DatabaseRestoreResource",
  type: {
    name: "Composite",
    className: "DatabaseRestoreResource",
    modelProperties: {
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      collectionNames: {
        serializedName: "collectionNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RestoreParameters: msRest.CompositeMapper = {
  serializedName: "RestoreParameters",
  type: {
    name: "Composite",
    className: "RestoreParameters",
    modelProperties: {
      restoreMode: {
        serializedName: "restoreMode",
        type: {
          name: "String"
        }
      },
      restoreSource: {
        serializedName: "restoreSource",
        type: {
          name: "String"
        }
      },
      restoreTimestampInUtc: {
        serializedName: "restoreTimestampInUtc",
        type: {
          name: "DateTime"
        }
      },
      databasesToRestore: {
        serializedName: "databasesToRestore",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseRestoreResource"
            }
          }
        }
      }
    }
  }
};

export const BackupPolicy: msRest.CompositeMapper = {
  serializedName: "BackupPolicy",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    uberParent: "BackupPolicy",
    className: "BackupPolicy",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CorsPolicy: msRest.CompositeMapper = {
  serializedName: "CorsPolicy",
  type: {
    name: "Composite",
    className: "CorsPolicy",
    modelProperties: {
      allowedOrigins: {
        required: true,
        serializedName: "allowedOrigins",
        type: {
          name: "String"
        }
      },
      allowedMethods: {
        serializedName: "allowedMethods",
        type: {
          name: "String"
        }
      },
      allowedHeaders: {
        serializedName: "allowedHeaders",
        type: {
          name: "String"
        }
      },
      exposedHeaders: {
        serializedName: "exposedHeaders",
        type: {
          name: "String"
        }
      },
      maxAgeInSeconds: {
        serializedName: "maxAgeInSeconds",
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SystemData: msRest.CompositeMapper = {
  serializedName: "systemData",
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ARMResourceProperties: msRest.CompositeMapper = {
  serializedName: "ARMResourceProperties",
  type: {
    name: "Composite",
    className: "ARMResourceProperties",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const DatabaseAccountGetResults: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountGetResults",
  type: {
    name: "Composite",
    className: "DatabaseAccountGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        defaultValue: "GlobalDocumentDB",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      documentEndpoint: {
        readOnly: true,
        serializedName: "properties.documentEndpoint",
        type: {
          name: "String"
        }
      },
      databaseAccountOfferType: {
        readOnly: true,
        serializedName: "properties.databaseAccountOfferType",
        type: {
          name: "Enum",
          allowedValues: ["Standard"]
        }
      },
      ipRules: {
        serializedName: "properties.ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpAddressOrRange"
            }
          }
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      consistencyPolicy: {
        serializedName: "properties.consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      writeLocations: {
        readOnly: true,
        serializedName: "properties.writeLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      readLocations: {
        readOnly: true,
        serializedName: "properties.readLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      locations: {
        readOnly: true,
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      failoverPolicies: {
        readOnly: true,
        serializedName: "properties.failoverPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverPolicy"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      privateEndpointConnections: {
        readOnly: true,
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      },
      enableCassandraConnector: {
        serializedName: "properties.enableCassandraConnector",
        type: {
          name: "Boolean"
        }
      },
      connectorOffer: {
        serializedName: "properties.connectorOffer",
        type: {
          name: "String"
        }
      },
      disableKeyBasedMetadataWriteAccess: {
        serializedName: "properties.disableKeyBasedMetadataWriteAccess",
        type: {
          name: "Boolean"
        }
      },
      keyVaultKeyUri: {
        serializedName: "properties.keyVaultKeyUri",
        type: {
          name: "String"
        }
      },
      defaultIdentity: {
        serializedName: "properties.defaultIdentity",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      enableFreeTier: {
        serializedName: "properties.enableFreeTier",
        type: {
          name: "Boolean"
        }
      },
      apiProperties: {
        serializedName: "properties.apiProperties",
        type: {
          name: "Composite",
          className: "ApiProperties"
        }
      },
      enableAnalyticalStorage: {
        serializedName: "properties.enableAnalyticalStorage",
        type: {
          name: "Boolean"
        }
      },
      instanceId: {
        readOnly: true,
        serializedName: "properties.instanceId",
        type: {
          name: "String"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        defaultValue: "Default",
        type: {
          name: "String"
        }
      },
      restoreParameters: {
        serializedName: "properties.restoreParameters",
        type: {
          name: "Composite",
          className: "RestoreParameters"
        }
      },
      backupPolicy: {
        serializedName: "properties.backupPolicy",
        type: {
          name: "Composite",
          className: "BackupPolicy"
        }
      },
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsPolicy"
            }
          }
        }
      },
      networkAclBypass: {
        serializedName: "properties.networkAclBypass",
        type: {
          name: "Enum",
          allowedValues: ["None", "AzureServices"]
        }
      },
      networkAclBypassResourceIds: {
        serializedName: "properties.networkAclBypassResourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SqlDatabaseGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "SqlDatabaseGetProperties_resource",
  type: {
    name: "Composite",
    className: "SqlDatabaseGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      },
      _colls: {
        serializedName: "_colls",
        type: {
          name: "String"
        }
      },
      _users: {
        serializedName: "_users",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OptionsResource: msRest.CompositeMapper = {
  serializedName: "OptionsResource",
  type: {
    name: "Composite",
    className: "OptionsResource",
    modelProperties: {
      throughput: {
        serializedName: "throughput",
        type: {
          name: "Number"
        }
      },
      autoscaleSettings: {
        serializedName: "autoscaleSettings",
        type: {
          name: "Composite",
          className: "AutoscaleSettings"
        }
      }
    }
  }
};

export const SqlDatabaseGetPropertiesOptions: msRest.CompositeMapper = {
  serializedName: "SqlDatabaseGetProperties_options",
  type: {
    name: "Composite",
    className: "SqlDatabaseGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const SqlDatabaseGetResults: msRest.CompositeMapper = {
  serializedName: "SqlDatabaseGetResults",
  type: {
    name: "Composite",
    className: "SqlDatabaseGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlDatabaseGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "SqlDatabaseGetPropertiesOptions"
        }
      }
    }
  }
};

export const Indexes: msRest.CompositeMapper = {
  serializedName: "Indexes",
  type: {
    name: "Composite",
    className: "Indexes",
    modelProperties: {
      dataType: {
        serializedName: "dataType",
        defaultValue: "String",
        type: {
          name: "String"
        }
      },
      precision: {
        serializedName: "precision",
        type: {
          name: "Number"
        }
      },
      kind: {
        serializedName: "kind",
        defaultValue: "Hash",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IncludedPath: msRest.CompositeMapper = {
  serializedName: "IncludedPath",
  type: {
    name: "Composite",
    className: "IncludedPath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      indexes: {
        serializedName: "indexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Indexes"
            }
          }
        }
      }
    }
  }
};

export const ExcludedPath: msRest.CompositeMapper = {
  serializedName: "ExcludedPath",
  type: {
    name: "Composite",
    className: "ExcludedPath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CompositePath: msRest.CompositeMapper = {
  serializedName: "CompositePath",
  type: {
    name: "Composite",
    className: "CompositePath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialSpec: msRest.CompositeMapper = {
  serializedName: "SpatialSpec",
  type: {
    name: "Composite",
    className: "SpatialSpec",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      types: {
        serializedName: "types",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IndexingPolicy: msRest.CompositeMapper = {
  serializedName: "IndexingPolicy",
  type: {
    name: "Composite",
    className: "IndexingPolicy",
    modelProperties: {
      automatic: {
        serializedName: "automatic",
        type: {
          name: "Boolean"
        }
      },
      indexingMode: {
        serializedName: "indexingMode",
        defaultValue: "consistent",
        type: {
          name: "String"
        }
      },
      includedPaths: {
        serializedName: "includedPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IncludedPath"
            }
          }
        }
      },
      excludedPaths: {
        serializedName: "excludedPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExcludedPath"
            }
          }
        }
      },
      compositeIndexes: {
        serializedName: "compositeIndexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "CompositePath"
                }
              }
            }
          }
        }
      },
      spatialIndexes: {
        serializedName: "spatialIndexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpatialSpec"
            }
          }
        }
      }
    }
  }
};

export const ContainerPartitionKey: msRest.CompositeMapper = {
  serializedName: "ContainerPartitionKey",
  type: {
    name: "Composite",
    className: "ContainerPartitionKey",
    modelProperties: {
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kind: {
        serializedName: "kind",
        defaultValue: "Hash",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        constraints: {
          InclusiveMaximum: 2,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      systemKey: {
        readOnly: true,
        serializedName: "systemKey",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const UniqueKey: msRest.CompositeMapper = {
  serializedName: "UniqueKey",
  type: {
    name: "Composite",
    className: "UniqueKey",
    modelProperties: {
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UniqueKeyPolicy: msRest.CompositeMapper = {
  serializedName: "UniqueKeyPolicy",
  type: {
    name: "Composite",
    className: "UniqueKeyPolicy",
    modelProperties: {
      uniqueKeys: {
        serializedName: "uniqueKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UniqueKey"
            }
          }
        }
      }
    }
  }
};

export const ConflictResolutionPolicy: msRest.CompositeMapper = {
  serializedName: "ConflictResolutionPolicy",
  type: {
    name: "Composite",
    className: "ConflictResolutionPolicy",
    modelProperties: {
      mode: {
        serializedName: "mode",
        defaultValue: "LastWriterWins",
        type: {
          name: "String"
        }
      },
      conflictResolutionPath: {
        serializedName: "conflictResolutionPath",
        type: {
          name: "String"
        }
      },
      conflictResolutionProcedure: {
        serializedName: "conflictResolutionProcedure",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlContainerGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "SqlContainerGetProperties_resource",
  type: {
    name: "Composite",
    className: "SqlContainerGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlContainerGetPropertiesOptions: msRest.CompositeMapper = {
  serializedName: "SqlContainerGetProperties_options",
  type: {
    name: "Composite",
    className: "SqlContainerGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const SqlContainerGetResults: msRest.CompositeMapper = {
  serializedName: "SqlContainerGetResults",
  type: {
    name: "Composite",
    className: "SqlContainerGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlContainerGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "SqlContainerGetPropertiesOptions"
        }
      }
    }
  }
};

export const SqlStoredProcedureGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "SqlStoredProcedureGetProperties_resource",
  type: {
    name: "Composite",
    className: "SqlStoredProcedureGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlStoredProcedureGetResults: msRest.CompositeMapper = {
  serializedName: "SqlStoredProcedureGetResults",
  type: {
    name: "Composite",
    className: "SqlStoredProcedureGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlStoredProcedureGetPropertiesResource"
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "SqlUserDefinedFunctionGetProperties_resource",
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionGetResults: msRest.CompositeMapper = {
  serializedName: "SqlUserDefinedFunctionGetResults",
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlUserDefinedFunctionGetPropertiesResource"
        }
      }
    }
  }
};

export const SqlTriggerGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "SqlTriggerGetProperties_resource",
  type: {
    name: "Composite",
    className: "SqlTriggerGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      },
      triggerType: {
        serializedName: "triggerType",
        type: {
          name: "String"
        }
      },
      triggerOperation: {
        serializedName: "triggerOperation",
        type: {
          name: "String"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlTriggerGetResults: msRest.CompositeMapper = {
  serializedName: "SqlTriggerGetResults",
  type: {
    name: "Composite",
    className: "SqlTriggerGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlTriggerGetPropertiesResource"
        }
      }
    }
  }
};

export const MongoDBDatabaseGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "MongoDBDatabaseGetProperties_resource",
  type: {
    name: "Composite",
    className: "MongoDBDatabaseGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBDatabaseGetPropertiesOptions: msRest.CompositeMapper = {
  serializedName: "MongoDBDatabaseGetProperties_options",
  type: {
    name: "Composite",
    className: "MongoDBDatabaseGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const MongoDBDatabaseGetResults: msRest.CompositeMapper = {
  serializedName: "MongoDBDatabaseGetResults",
  type: {
    name: "Composite",
    className: "MongoDBDatabaseGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "MongoDBDatabaseGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "MongoDBDatabaseGetPropertiesOptions"
        }
      }
    }
  }
};

export const MongoIndexKeys: msRest.CompositeMapper = {
  serializedName: "MongoIndexKeys",
  type: {
    name: "Composite",
    className: "MongoIndexKeys",
    modelProperties: {
      keys: {
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MongoIndexOptions: msRest.CompositeMapper = {
  serializedName: "MongoIndexOptions",
  type: {
    name: "Composite",
    className: "MongoIndexOptions",
    modelProperties: {
      expireAfterSeconds: {
        serializedName: "expireAfterSeconds",
        type: {
          name: "Number"
        }
      },
      unique: {
        serializedName: "unique",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MongoIndex: msRest.CompositeMapper = {
  serializedName: "MongoIndex",
  type: {
    name: "Composite",
    className: "MongoIndex",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "Composite",
          className: "MongoIndexKeys"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "MongoIndexOptions"
        }
      }
    }
  }
};

export const MongoDBCollectionGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "MongoDBCollectionGetProperties_resource",
  type: {
    name: "Composite",
    className: "MongoDBCollectionGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      shardKey: {
        serializedName: "shardKey",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      indexes: {
        serializedName: "indexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoIndex"
            }
          }
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBCollectionGetPropertiesOptions: msRest.CompositeMapper = {
  serializedName: "MongoDBCollectionGetProperties_options",
  type: {
    name: "Composite",
    className: "MongoDBCollectionGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const MongoDBCollectionGetResults: msRest.CompositeMapper = {
  serializedName: "MongoDBCollectionGetResults",
  type: {
    name: "Composite",
    className: "MongoDBCollectionGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "MongoDBCollectionGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "MongoDBCollectionGetPropertiesOptions"
        }
      }
    }
  }
};

export const TableGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "TableGetProperties_resource",
  type: {
    name: "Composite",
    className: "TableGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableGetPropertiesOptions: msRest.CompositeMapper = {
  serializedName: "TableGetProperties_options",
  type: {
    name: "Composite",
    className: "TableGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const TableGetResults: msRest.CompositeMapper = {
  serializedName: "TableGetResults",
  type: {
    name: "Composite",
    className: "TableGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "TableGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "TableGetPropertiesOptions"
        }
      }
    }
  }
};

export const CassandraKeyspaceGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "CassandraKeyspaceGetProperties_resource",
  type: {
    name: "Composite",
    className: "CassandraKeyspaceGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraKeyspaceGetPropertiesOptions: msRest.CompositeMapper = {
  serializedName: "CassandraKeyspaceGetProperties_options",
  type: {
    name: "Composite",
    className: "CassandraKeyspaceGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const CassandraKeyspaceGetResults: msRest.CompositeMapper = {
  serializedName: "CassandraKeyspaceGetResults",
  type: {
    name: "Composite",
    className: "CassandraKeyspaceGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "CassandraKeyspaceGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CassandraKeyspaceGetPropertiesOptions"
        }
      }
    }
  }
};

export const Column: msRest.CompositeMapper = {
  serializedName: "Column",
  type: {
    name: "Composite",
    className: "Column",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraPartitionKey: msRest.CompositeMapper = {
  serializedName: "CassandraPartitionKey",
  type: {
    name: "Composite",
    className: "CassandraPartitionKey",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterKey: msRest.CompositeMapper = {
  serializedName: "ClusterKey",
  type: {
    name: "Composite",
    className: "ClusterKey",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      orderBy: {
        serializedName: "orderBy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraSchema: msRest.CompositeMapper = {
  serializedName: "CassandraSchema",
  type: {
    name: "Composite",
    className: "CassandraSchema",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Column"
            }
          }
        }
      },
      partitionKeys: {
        serializedName: "partitionKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraPartitionKey"
            }
          }
        }
      },
      clusterKeys: {
        serializedName: "clusterKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterKey"
            }
          }
        }
      }
    }
  }
};

export const CassandraTableGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "CassandraTableGetProperties_resource",
  type: {
    name: "Composite",
    className: "CassandraTableGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      schema: {
        serializedName: "schema",
        type: {
          name: "Composite",
          className: "CassandraSchema"
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraTableGetPropertiesOptions: msRest.CompositeMapper = {
  serializedName: "CassandraTableGetProperties_options",
  type: {
    name: "Composite",
    className: "CassandraTableGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const CassandraTableGetResults: msRest.CompositeMapper = {
  serializedName: "CassandraTableGetResults",
  type: {
    name: "Composite",
    className: "CassandraTableGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "CassandraTableGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CassandraTableGetPropertiesOptions"
        }
      }
    }
  }
};

export const GremlinDatabaseGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "GremlinDatabaseGetProperties_resource",
  type: {
    name: "Composite",
    className: "GremlinDatabaseGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinDatabaseGetPropertiesOptions: msRest.CompositeMapper = {
  serializedName: "GremlinDatabaseGetProperties_options",
  type: {
    name: "Composite",
    className: "GremlinDatabaseGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const GremlinDatabaseGetResults: msRest.CompositeMapper = {
  serializedName: "GremlinDatabaseGetResults",
  type: {
    name: "Composite",
    className: "GremlinDatabaseGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "GremlinDatabaseGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "GremlinDatabaseGetPropertiesOptions"
        }
      }
    }
  }
};

export const GremlinGraphGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "GremlinGraphGetProperties_resource",
  type: {
    name: "Composite",
    className: "GremlinGraphGetPropertiesResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinGraphGetPropertiesOptions: msRest.CompositeMapper = {
  serializedName: "GremlinGraphGetProperties_options",
  type: {
    name: "Composite",
    className: "GremlinGraphGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const GremlinGraphGetResults: msRest.CompositeMapper = {
  serializedName: "GremlinGraphGetResults",
  type: {
    name: "Composite",
    className: "GremlinGraphGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "GremlinGraphGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "GremlinGraphGetPropertiesOptions"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverPolicies: msRest.CompositeMapper = {
  serializedName: "FailoverPolicies",
  type: {
    name: "Composite",
    className: "FailoverPolicies",
    modelProperties: {
      failoverPolicies: {
        required: true,
        serializedName: "failoverPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverPolicy"
            }
          }
        }
      }
    }
  }
};

export const RegionForOnlineOffline: msRest.CompositeMapper = {
  serializedName: "RegionForOnlineOffline",
  type: {
    name: "Composite",
    className: "RegionForOnlineOffline",
    modelProperties: {
      region: {
        required: true,
        serializedName: "region",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentityUserAssignedIdentitiesValue: msRest.CompositeMapper = {
  serializedName: "ManagedServiceIdentity_userAssignedIdentitiesValue",
  type: {
    name: "Composite",
    className: "ManagedServiceIdentityUserAssignedIdentitiesValue",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        readOnly: true,
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedServiceIdentity",
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: ["SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned", "None"]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ManagedServiceIdentityUserAssignedIdentitiesValue"
            }
          }
        }
      }
    }
  }
};

export const ARMProxyResource: msRest.CompositeMapper = {
  serializedName: "ARMProxyResource",
  type: {
    name: "Composite",
    className: "ARMProxyResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedResourceProperties: msRest.CompositeMapper = {
  serializedName: "ExtendedResourceProperties",
  type: {
    name: "Composite",
    className: "ExtendedResourceProperties",
    modelProperties: {
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThroughputPolicyResource: msRest.CompositeMapper = {
  serializedName: "ThroughputPolicyResource",
  type: {
    name: "Composite",
    className: "ThroughputPolicyResource",
    modelProperties: {
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      incrementPercent: {
        serializedName: "incrementPercent",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoUpgradePolicyResource: msRest.CompositeMapper = {
  serializedName: "AutoUpgradePolicyResource",
  type: {
    name: "Composite",
    className: "AutoUpgradePolicyResource",
    modelProperties: {
      throughputPolicy: {
        serializedName: "throughputPolicy",
        type: {
          name: "Composite",
          className: "ThroughputPolicyResource"
        }
      }
    }
  }
};

export const AutoscaleSettingsResource: msRest.CompositeMapper = {
  serializedName: "AutoscaleSettingsResource",
  type: {
    name: "Composite",
    className: "AutoscaleSettingsResource",
    modelProperties: {
      maxThroughput: {
        required: true,
        serializedName: "maxThroughput",
        type: {
          name: "Number"
        }
      },
      autoUpgradePolicy: {
        serializedName: "autoUpgradePolicy",
        type: {
          name: "Composite",
          className: "AutoUpgradePolicyResource"
        }
      },
      targetMaxThroughput: {
        readOnly: true,
        serializedName: "targetMaxThroughput",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ThroughputSettingsGetPropertiesResource: msRest.CompositeMapper = {
  serializedName: "ThroughputSettingsGetProperties_resource",
  type: {
    name: "Composite",
    className: "ThroughputSettingsGetPropertiesResource",
    modelProperties: {
      throughput: {
        serializedName: "throughput",
        type: {
          name: "Number"
        }
      },
      autoscaleSettings: {
        serializedName: "autoscaleSettings",
        type: {
          name: "Composite",
          className: "AutoscaleSettingsResource"
        }
      },
      minimumThroughput: {
        readOnly: true,
        serializedName: "minimumThroughput",
        type: {
          name: "String"
        }
      },
      offerReplacePending: {
        readOnly: true,
        serializedName: "offerReplacePending",
        type: {
          name: "String"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThroughputSettingsGetResults: msRest.CompositeMapper = {
  serializedName: "ThroughputSettingsGetResults",
  type: {
    name: "Composite",
    className: "ThroughputSettingsGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "ThroughputSettingsGetPropertiesResource"
        }
      }
    }
  }
};

export const DatabaseAccountCreateUpdateProperties: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountCreateUpdateProperties",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "createMode",
      clientName: "createMode"
    },
    uberParent: "DatabaseAccountCreateUpdateProperties",
    className: "DatabaseAccountCreateUpdateProperties",
    modelProperties: {
      consistencyPolicy: {
        serializedName: "consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      locations: {
        required: true,
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      databaseAccountOfferType: {
        required: true,
        isConstant: true,
        serializedName: "databaseAccountOfferType",
        defaultValue: "Standard",
        type: {
          name: "String"
        }
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpAddressOrRange"
            }
          }
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      },
      enableCassandraConnector: {
        serializedName: "enableCassandraConnector",
        type: {
          name: "Boolean"
        }
      },
      connectorOffer: {
        serializedName: "connectorOffer",
        type: {
          name: "String"
        }
      },
      disableKeyBasedMetadataWriteAccess: {
        serializedName: "disableKeyBasedMetadataWriteAccess",
        type: {
          name: "Boolean"
        }
      },
      keyVaultKeyUri: {
        serializedName: "keyVaultKeyUri",
        type: {
          name: "String"
        }
      },
      defaultIdentity: {
        serializedName: "defaultIdentity",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      enableFreeTier: {
        serializedName: "enableFreeTier",
        type: {
          name: "Boolean"
        }
      },
      apiProperties: {
        serializedName: "apiProperties",
        type: {
          name: "Composite",
          className: "ApiProperties"
        }
      },
      enableAnalyticalStorage: {
        serializedName: "enableAnalyticalStorage",
        type: {
          name: "Boolean"
        }
      },
      backupPolicy: {
        serializedName: "backupPolicy",
        type: {
          name: "Composite",
          className: "BackupPolicy"
        }
      },
      cors: {
        serializedName: "cors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsPolicy"
            }
          }
        }
      },
      networkAclBypass: {
        serializedName: "networkAclBypass",
        type: {
          name: "Enum",
          allowedValues: ["None", "AzureServices"]
        }
      },
      networkAclBypassResourceIds: {
        serializedName: "networkAclBypassResourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      createMode: {
        required: true,
        serializedName: "createMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DefaultRequestDatabaseAccountCreateUpdateProperties: msRest.CompositeMapper = {
  serializedName: "Default",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DatabaseAccountCreateUpdateProperties.type.polymorphicDiscriminator,
    uberParent: "DatabaseAccountCreateUpdateProperties",
    className: "DefaultRequestDatabaseAccountCreateUpdateProperties",
    modelProperties: {
      ...DatabaseAccountCreateUpdateProperties.type.modelProperties
    }
  }
};

export const RestoreReqeustDatabaseAccountCreateUpdateProperties: msRest.CompositeMapper = {
  serializedName: "Restore",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DatabaseAccountCreateUpdateProperties.type.polymorphicDiscriminator,
    uberParent: "DatabaseAccountCreateUpdateProperties",
    className: "RestoreReqeustDatabaseAccountCreateUpdateProperties",
    modelProperties: {
      ...DatabaseAccountCreateUpdateProperties.type.modelProperties,
      restoreParameters: {
        serializedName: "restoreParameters",
        type: {
          name: "Composite",
          className: "RestoreParameters"
        }
      }
    }
  }
};

export const DatabaseAccountCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "DatabaseAccountCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        defaultValue: "GlobalDocumentDB",
        type: {
          name: "String"
        }
      },
      properties: {
        required: true,
        serializedName: "properties",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "DatabaseAccountCreateUpdateProperties"
        }
      }
    }
  }
};

export const DatabaseAccountUpdateParameters: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountUpdateParameters",
  type: {
    name: "Composite",
    className: "DatabaseAccountUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      consistencyPolicy: {
        serializedName: "properties.consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      locations: {
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      ipRules: {
        serializedName: "properties.ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpAddressOrRange"
            }
          }
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      },
      enableCassandraConnector: {
        serializedName: "properties.enableCassandraConnector",
        type: {
          name: "Boolean"
        }
      },
      connectorOffer: {
        serializedName: "properties.connectorOffer",
        type: {
          name: "String"
        }
      },
      disableKeyBasedMetadataWriteAccess: {
        serializedName: "properties.disableKeyBasedMetadataWriteAccess",
        type: {
          name: "Boolean"
        }
      },
      keyVaultKeyUri: {
        serializedName: "properties.keyVaultKeyUri",
        type: {
          name: "String"
        }
      },
      defaultIdentity: {
        serializedName: "properties.defaultIdentity",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      enableFreeTier: {
        serializedName: "properties.enableFreeTier",
        type: {
          name: "Boolean"
        }
      },
      apiProperties: {
        serializedName: "properties.apiProperties",
        type: {
          name: "Composite",
          className: "ApiProperties"
        }
      },
      enableAnalyticalStorage: {
        serializedName: "properties.enableAnalyticalStorage",
        type: {
          name: "Boolean"
        }
      },
      backupPolicy: {
        serializedName: "properties.backupPolicy",
        type: {
          name: "Composite",
          className: "BackupPolicy"
        }
      },
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsPolicy"
            }
          }
        }
      },
      networkAclBypass: {
        serializedName: "properties.networkAclBypass",
        type: {
          name: "Enum",
          allowedValues: ["None", "AzureServices"]
        }
      },
      networkAclBypassResourceIds: {
        serializedName: "properties.networkAclBypassResourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const DatabaseAccountListReadOnlyKeysResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountListReadOnlyKeysResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountListReadOnlyKeysResult",
    modelProperties: {
      primaryReadonlyMasterKey: {
        readOnly: true,
        serializedName: "primaryReadonlyMasterKey",
        type: {
          name: "String"
        }
      },
      secondaryReadonlyMasterKey: {
        readOnly: true,
        serializedName: "secondaryReadonlyMasterKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountListKeysResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountListKeysResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountListKeysResult",
    modelProperties: {
      ...DatabaseAccountListReadOnlyKeysResult.type.modelProperties,
      primaryMasterKey: {
        readOnly: true,
        serializedName: "primaryMasterKey",
        type: {
          name: "String"
        }
      },
      secondaryMasterKey: {
        readOnly: true,
        serializedName: "secondaryMasterKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountConnectionString: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountConnectionString",
  type: {
    name: "Composite",
    className: "DatabaseAccountConnectionString",
    modelProperties: {
      connectionString: {
        readOnly: true,
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountListConnectionStringsResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountListConnectionStringsResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountListConnectionStringsResult",
    modelProperties: {
      connectionStrings: {
        serializedName: "connectionStrings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseAccountConnectionString"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccountRegenerateKeyParameters: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountRegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "DatabaseAccountRegenerateKeyParameters",
    modelProperties: {
      keyKind: {
        required: true,
        serializedName: "keyKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThroughputSettingsResource: msRest.CompositeMapper = {
  serializedName: "ThroughputSettingsResource",
  type: {
    name: "Composite",
    className: "ThroughputSettingsResource",
    modelProperties: {
      throughput: {
        serializedName: "throughput",
        type: {
          name: "Number"
        }
      },
      autoscaleSettings: {
        serializedName: "autoscaleSettings",
        type: {
          name: "Composite",
          className: "AutoscaleSettingsResource"
        }
      },
      minimumThroughput: {
        readOnly: true,
        serializedName: "minimumThroughput",
        type: {
          name: "String"
        }
      },
      offerReplacePending: {
        readOnly: true,
        serializedName: "offerReplacePending",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThroughputSettingsUpdateParameters: msRest.CompositeMapper = {
  serializedName: "ThroughputSettingsUpdateParameters",
  type: {
    name: "Composite",
    className: "ThroughputSettingsUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "ThroughputSettingsResource"
        }
      }
    }
  }
};

export const SqlDatabaseResource: msRest.CompositeMapper = {
  serializedName: "SqlDatabaseResource",
  type: {
    name: "Composite",
    className: "SqlDatabaseResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoscaleSettings: msRest.CompositeMapper = {
  serializedName: "AutoscaleSettings",
  type: {
    name: "Composite",
    className: "AutoscaleSettings",
    modelProperties: {
      maxThroughput: {
        serializedName: "maxThroughput",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateUpdateOptions: msRest.CompositeMapper = {
  serializedName: "CreateUpdateOptions",
  type: {
    name: "Composite",
    className: "CreateUpdateOptions",
    modelProperties: {
      throughput: {
        serializedName: "throughput",
        type: {
          name: "Number"
        }
      },
      autoscaleSettings: {
        serializedName: "autoscaleSettings",
        type: {
          name: "Composite",
          className: "AutoscaleSettings"
        }
      }
    }
  }
};

export const SqlDatabaseCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "SqlDatabaseCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "SqlDatabaseCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlDatabaseResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const SqlContainerResource: msRest.CompositeMapper = {
  serializedName: "SqlContainerResource",
  type: {
    name: "Composite",
    className: "SqlContainerResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SqlContainerCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "SqlContainerCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "SqlContainerCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlContainerResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const SqlStoredProcedureResource: msRest.CompositeMapper = {
  serializedName: "SqlStoredProcedureResource",
  type: {
    name: "Composite",
    className: "SqlStoredProcedureResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlStoredProcedureCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "SqlStoredProcedureCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "SqlStoredProcedureCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlStoredProcedureResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionResource: msRest.CompositeMapper = {
  serializedName: "SqlUserDefinedFunctionResource",
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "SqlUserDefinedFunctionCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlUserDefinedFunctionResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const SqlTriggerResource: msRest.CompositeMapper = {
  serializedName: "SqlTriggerResource",
  type: {
    name: "Composite",
    className: "SqlTriggerResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      },
      triggerType: {
        serializedName: "triggerType",
        type: {
          name: "String"
        }
      },
      triggerOperation: {
        serializedName: "triggerOperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlTriggerCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "SqlTriggerCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "SqlTriggerCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlTriggerResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const MongoDBDatabaseResource: msRest.CompositeMapper = {
  serializedName: "MongoDBDatabaseResource",
  type: {
    name: "Composite",
    className: "MongoDBDatabaseResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBDatabaseCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "MongoDBDatabaseCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "MongoDBDatabaseCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "MongoDBDatabaseResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const MongoDBCollectionResource: msRest.CompositeMapper = {
  serializedName: "MongoDBCollectionResource",
  type: {
    name: "Composite",
    className: "MongoDBCollectionResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      shardKey: {
        serializedName: "shardKey",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      indexes: {
        serializedName: "indexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoIndex"
            }
          }
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MongoDBCollectionCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "MongoDBCollectionCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "MongoDBCollectionCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "MongoDBCollectionResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const TableResource: msRest.CompositeMapper = {
  serializedName: "TableResource",
  type: {
    name: "Composite",
    className: "TableResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "TableCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "TableCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "TableResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const CassandraKeyspaceResource: msRest.CompositeMapper = {
  serializedName: "CassandraKeyspaceResource",
  type: {
    name: "Composite",
    className: "CassandraKeyspaceResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraKeyspaceCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "CassandraKeyspaceCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "CassandraKeyspaceCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "CassandraKeyspaceResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const CassandraTableResource: msRest.CompositeMapper = {
  serializedName: "CassandraTableResource",
  type: {
    name: "Composite",
    className: "CassandraTableResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      schema: {
        serializedName: "schema",
        type: {
          name: "Composite",
          className: "CassandraSchema"
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CassandraTableCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "CassandraTableCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "CassandraTableCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "CassandraTableResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const GremlinDatabaseResource: msRest.CompositeMapper = {
  serializedName: "GremlinDatabaseResource",
  type: {
    name: "Composite",
    className: "GremlinDatabaseResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinDatabaseCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "GremlinDatabaseCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "GremlinDatabaseCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "GremlinDatabaseResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const GremlinGraphResource: msRest.CompositeMapper = {
  serializedName: "GremlinGraphResource",
  type: {
    name: "Composite",
    className: "GremlinGraphResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      }
    }
  }
};

export const GremlinGraphCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "GremlinGraphCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "GremlinGraphCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "GremlinGraphResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "Provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "Resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "Operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "Description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const MetricName: msRest.CompositeMapper = {
  serializedName: "MetricName",
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      quotaPeriod: {
        readOnly: true,
        serializedName: "quotaPeriod",
        type: {
          name: "String"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PartitionUsage: msRest.CompositeMapper = {
  serializedName: "PartitionUsage",
  type: {
    name: "Composite",
    className: "PartitionUsage",
    modelProperties: {
      ...Usage.type.modelProperties,
      partitionId: {
        readOnly: true,
        serializedName: "partitionId",
        type: {
          name: "String"
        }
      },
      partitionKeyRangeId: {
        readOnly: true,
        serializedName: "partitionKeyRangeId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricAvailability: msRest.CompositeMapper = {
  serializedName: "MetricAvailability",
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      retention: {
        readOnly: true,
        serializedName: "retention",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDefinition: msRest.CompositeMapper = {
  serializedName: "MetricDefinition",
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      metricAvailabilities: {
        readOnly: true,
        serializedName: "metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      primaryAggregationType: {
        readOnly: true,
        serializedName: "primaryAggregationType",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      resourceUri: {
        readOnly: true,
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      }
    }
  }
};

export const MetricValue: msRest.CompositeMapper = {
  serializedName: "MetricValue",
  type: {
    name: "Composite",
    className: "MetricValue",
    modelProperties: {
      _count: {
        readOnly: true,
        serializedName: "_count",
        type: {
          name: "Number"
        }
      },
      average: {
        readOnly: true,
        serializedName: "average",
        type: {
          name: "Number"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      minimum: {
        readOnly: true,
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      timestamp: {
        readOnly: true,
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      total: {
        readOnly: true,
        serializedName: "total",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Metric: msRest.CompositeMapper = {
  serializedName: "Metric",
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        readOnly: true,
        serializedName: "metricValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricValue"
            }
          }
        }
      }
    }
  }
};

export const PercentileMetricValue: msRest.CompositeMapper = {
  serializedName: "PercentileMetricValue",
  type: {
    name: "Composite",
    className: "PercentileMetricValue",
    modelProperties: {
      ...MetricValue.type.modelProperties,
      p10: {
        readOnly: true,
        serializedName: "P10",
        type: {
          name: "Number"
        }
      },
      p25: {
        readOnly: true,
        serializedName: "P25",
        type: {
          name: "Number"
        }
      },
      p50: {
        readOnly: true,
        serializedName: "P50",
        type: {
          name: "Number"
        }
      },
      p75: {
        readOnly: true,
        serializedName: "P75",
        type: {
          name: "Number"
        }
      },
      p90: {
        readOnly: true,
        serializedName: "P90",
        type: {
          name: "Number"
        }
      },
      p95: {
        readOnly: true,
        serializedName: "P95",
        type: {
          name: "Number"
        }
      },
      p99: {
        readOnly: true,
        serializedName: "P99",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PercentileMetric: msRest.CompositeMapper = {
  serializedName: "PercentileMetric",
  type: {
    name: "Composite",
    className: "PercentileMetric",
    modelProperties: {
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        readOnly: true,
        serializedName: "metricValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PercentileMetricValue"
            }
          }
        }
      }
    }
  }
};

export const PartitionMetric: msRest.CompositeMapper = {
  serializedName: "PartitionMetric",
  type: {
    name: "Composite",
    className: "PartitionMetric",
    modelProperties: {
      ...Metric.type.modelProperties,
      partitionId: {
        readOnly: true,
        serializedName: "partitionId",
        type: {
          name: "String"
        }
      },
      partitionKeyRangeId: {
        readOnly: true,
        serializedName: "partitionKeyRangeId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeriodicModeProperties: msRest.CompositeMapper = {
  serializedName: "PeriodicModeProperties",
  type: {
    name: "Composite",
    className: "PeriodicModeProperties",
    modelProperties: {
      backupIntervalInMinutes: {
        serializedName: "backupIntervalInMinutes",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      backupRetentionIntervalInHours: {
        serializedName: "backupRetentionIntervalInHours",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      backupStorageRedundancy: {
        serializedName: "backupStorageRedundancy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeriodicModeBackupPolicy: msRest.CompositeMapper = {
  serializedName: "Periodic",
  type: {
    name: "Composite",
    polymorphicDiscriminator: BackupPolicy.type.polymorphicDiscriminator,
    uberParent: "BackupPolicy",
    className: "PeriodicModeBackupPolicy",
    modelProperties: {
      ...BackupPolicy.type.modelProperties,
      periodicModeProperties: {
        serializedName: "periodicModeProperties",
        type: {
          name: "Composite",
          className: "PeriodicModeProperties"
        }
      }
    }
  }
};

export const ContinuousModeBackupPolicy: msRest.CompositeMapper = {
  serializedName: "Continuous",
  type: {
    name: "Composite",
    polymorphicDiscriminator: BackupPolicy.type.polymorphicDiscriminator,
    uberParent: "BackupPolicy",
    className: "ContinuousModeBackupPolicy",
    modelProperties: {
      ...BackupPolicy.type.modelProperties
    }
  }
};

export const RestorableLocationResource: msRest.CompositeMapper = {
  serializedName: "RestorableLocationResource",
  type: {
    name: "Composite",
    className: "RestorableLocationResource",
    modelProperties: {
      locationName: {
        readOnly: true,
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      regionalDatabaseAccountInstanceId: {
        readOnly: true,
        serializedName: "regionalDatabaseAccountInstanceId",
        type: {
          name: "String"
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      deletionTime: {
        readOnly: true,
        serializedName: "deletionTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RestorableDatabaseAccountGetResult: msRest.CompositeMapper = {
  serializedName: "RestorableDatabaseAccountGetResult",
  type: {
    name: "Composite",
    className: "RestorableDatabaseAccountGetResult",
    modelProperties: {
      accountName: {
        serializedName: "properties.accountName",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      deletionTime: {
        serializedName: "properties.deletionTime",
        type: {
          name: "DateTime"
        }
      },
      apiType: {
        readOnly: true,
        serializedName: "properties.apiType",
        type: {
          name: "String"
        }
      },
      restorableLocations: {
        readOnly: true,
        serializedName: "properties.restorableLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableLocationResource"
            }
          }
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocationProperties: msRest.CompositeMapper = {
  serializedName: "LocationProperties",
  type: {
    name: "Composite",
    className: "LocationProperties",
    modelProperties: {
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      supportsAvailabilityZone: {
        readOnly: true,
        serializedName: "supportsAvailabilityZone",
        type: {
          name: "Boolean"
        }
      },
      isResidencyRestricted: {
        readOnly: true,
        serializedName: "isResidencyRestricted",
        type: {
          name: "Boolean"
        }
      },
      backupStorageRedundancies: {
        readOnly: true,
        serializedName: "backupStorageRedundancies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const LocationGetResult: msRest.CompositeMapper = {
  serializedName: "LocationGetResult",
  type: {
    name: "Composite",
    className: "LocationGetResult",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LocationProperties"
        }
      }
    }
  }
};

export const ContinuousBackupRestoreLocation: msRest.CompositeMapper = {
  serializedName: "ContinuousBackupRestoreLocation",
  type: {
    name: "Composite",
    className: "ContinuousBackupRestoreLocation",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContinuousBackupInformation: msRest.CompositeMapper = {
  serializedName: "ContinuousBackupInformation",
  type: {
    name: "Composite",
    className: "ContinuousBackupInformation",
    modelProperties: {
      latestRestorableTimestamp: {
        serializedName: "latestRestorableTimestamp",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupInformation: msRest.CompositeMapper = {
  serializedName: "BackupInformation",
  type: {
    name: "Composite",
    className: "BackupInformation",
    modelProperties: {
      continuousBackupInformation: {
        serializedName: "continuousBackupInformation",
        type: {
          name: "Composite",
          className: "ContinuousBackupInformation"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEntityResource: msRest.CompositeMapper = {
  serializedName: "AzureEntityResource",
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotebookWorkspaceCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "NotebookWorkspaceCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "NotebookWorkspaceCreateUpdateParameters",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties
    }
  }
};

export const NotebookWorkspace: msRest.CompositeMapper = {
  serializedName: "NotebookWorkspace",
  type: {
    name: "Composite",
    className: "NotebookWorkspace",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      notebookServerEndpoint: {
        readOnly: true,
        serializedName: "properties.notebookServerEndpoint",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotebookWorkspaceConnectionInfoResult: msRest.CompositeMapper = {
  serializedName: "NotebookWorkspaceConnectionInfoResult",
  type: {
    name: "Composite",
    className: "NotebookWorkspaceConnectionInfoResult",
    modelProperties: {
      authToken: {
        readOnly: true,
        serializedName: "authToken",
        type: {
          name: "String"
        }
      },
      notebookServerEndpoint: {
        readOnly: true,
        serializedName: "notebookServerEndpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Permission: msRest.CompositeMapper = {
  serializedName: "Permission",
  type: {
    name: "Composite",
    className: "Permission",
    modelProperties: {
      dataActions: {
        serializedName: "dataActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      notDataActions: {
        serializedName: "notDataActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SqlRoleDefinitionCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "SqlRoleDefinitionCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "SqlRoleDefinitionCreateUpdateParameters",
    modelProperties: {
      roleName: {
        serializedName: "properties.roleName",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "properties.type",
        type: {
          name: "Enum",
          allowedValues: ["BuiltInRole", "CustomRole"]
        }
      },
      assignableScopes: {
        serializedName: "properties.assignableScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      permissions: {
        serializedName: "properties.permissions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Permission"
            }
          }
        }
      }
    }
  }
};

export const SqlRoleDefinitionGetResults: msRest.CompositeMapper = {
  serializedName: "SqlRoleDefinitionGetResults",
  type: {
    name: "Composite",
    className: "SqlRoleDefinitionGetResults",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      roleName: {
        serializedName: "properties.roleName",
        type: {
          name: "String"
        }
      },
      sqlRoleDefinitionGetResultsType: {
        serializedName: "properties.type",
        type: {
          name: "Enum",
          allowedValues: ["BuiltInRole", "CustomRole"]
        }
      },
      assignableScopes: {
        serializedName: "properties.assignableScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      permissions: {
        serializedName: "properties.permissions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Permission"
            }
          }
        }
      }
    }
  }
};

export const SqlRoleAssignmentCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "SqlRoleAssignmentCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "SqlRoleAssignmentCreateUpdateParameters",
    modelProperties: {
      roleDefinitionId: {
        serializedName: "properties.roleDefinitionId",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlRoleAssignmentGetResults: msRest.CompositeMapper = {
  serializedName: "SqlRoleAssignmentGetResults",
  type: {
    name: "Composite",
    className: "SqlRoleAssignmentGetResults",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      roleDefinitionId: {
        serializedName: "properties.roleDefinitionId",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableSqlDatabasePropertiesResourceDatabase: msRest.CompositeMapper = {
  serializedName: "RestorableSqlDatabaseProperties_resource_database",
  type: {
    name: "Composite",
    className: "RestorableSqlDatabasePropertiesResourceDatabase",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      },
      _colls: {
        readOnly: true,
        serializedName: "_colls",
        type: {
          name: "String"
        }
      },
      _users: {
        readOnly: true,
        serializedName: "_users",
        type: {
          name: "String"
        }
      },
      _self: {
        readOnly: true,
        serializedName: "_self",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableSqlDatabasePropertiesResource: msRest.CompositeMapper = {
  serializedName: "RestorableSqlDatabaseProperties_resource",
  type: {
    name: "Composite",
    className: "RestorableSqlDatabasePropertiesResource",
    modelProperties: {
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      operationType: {
        readOnly: true,
        serializedName: "operationType",
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        readOnly: true,
        serializedName: "eventTimestamp",
        type: {
          name: "String"
        }
      },
      ownerId: {
        readOnly: true,
        serializedName: "ownerId",
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        readOnly: true,
        serializedName: "ownerResourceId",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "database",
        type: {
          name: "Composite",
          className: "RestorableSqlDatabasePropertiesResourceDatabase"
        }
      }
    }
  }
};

export const RestorableSqlDatabaseGetResult: msRest.CompositeMapper = {
  serializedName: "RestorableSqlDatabaseGetResult",
  type: {
    name: "Composite",
    className: "RestorableSqlDatabaseGetResult",
    modelProperties: {
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableSqlDatabasePropertiesResource"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableSqlContainerPropertiesResourceContainer: msRest.CompositeMapper = {
  serializedName: "RestorableSqlContainerProperties_resource_container",
  type: {
    name: "Composite",
    className: "RestorableSqlContainerPropertiesResourceContainer",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      },
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        readOnly: true,
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      _etag: {
        readOnly: true,
        serializedName: "_etag",
        type: {
          name: "String"
        }
      },
      _self: {
        readOnly: true,
        serializedName: "_self",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableSqlContainerPropertiesResource: msRest.CompositeMapper = {
  serializedName: "RestorableSqlContainerProperties_resource",
  type: {
    name: "Composite",
    className: "RestorableSqlContainerPropertiesResource",
    modelProperties: {
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      operationType: {
        readOnly: true,
        serializedName: "operationType",
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        readOnly: true,
        serializedName: "eventTimestamp",
        type: {
          name: "String"
        }
      },
      ownerId: {
        readOnly: true,
        serializedName: "ownerId",
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        readOnly: true,
        serializedName: "ownerResourceId",
        type: {
          name: "String"
        }
      },
      container: {
        serializedName: "container",
        type: {
          name: "Composite",
          className: "RestorableSqlContainerPropertiesResourceContainer"
        }
      }
    }
  }
};

export const RestorableSqlContainerGetResult: msRest.CompositeMapper = {
  serializedName: "RestorableSqlContainerGetResult",
  type: {
    name: "Composite",
    className: "RestorableSqlContainerGetResult",
    modelProperties: {
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableSqlContainerPropertiesResource"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableMongodbDatabasePropertiesResource: msRest.CompositeMapper = {
  serializedName: "RestorableMongodbDatabaseProperties_resource",
  type: {
    name: "Composite",
    className: "RestorableMongodbDatabasePropertiesResource",
    modelProperties: {
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      operationType: {
        readOnly: true,
        serializedName: "operationType",
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        readOnly: true,
        serializedName: "eventTimestamp",
        type: {
          name: "String"
        }
      },
      ownerId: {
        readOnly: true,
        serializedName: "ownerId",
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        readOnly: true,
        serializedName: "ownerResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableMongodbDatabaseGetResult: msRest.CompositeMapper = {
  serializedName: "RestorableMongodbDatabaseGetResult",
  type: {
    name: "Composite",
    className: "RestorableMongodbDatabaseGetResult",
    modelProperties: {
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableMongodbDatabasePropertiesResource"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableMongodbCollectionPropertiesResource: msRest.CompositeMapper = {
  serializedName: "RestorableMongodbCollectionProperties_resource",
  type: {
    name: "Composite",
    className: "RestorableMongodbCollectionPropertiesResource",
    modelProperties: {
      _rid: {
        readOnly: true,
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      operationType: {
        readOnly: true,
        serializedName: "operationType",
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        readOnly: true,
        serializedName: "eventTimestamp",
        type: {
          name: "String"
        }
      },
      ownerId: {
        readOnly: true,
        serializedName: "ownerId",
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        readOnly: true,
        serializedName: "ownerResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableMongodbCollectionGetResult: msRest.CompositeMapper = {
  serializedName: "RestorableMongodbCollectionGetResult",
  type: {
    name: "Composite",
    className: "RestorableMongodbCollectionGetResult",
    modelProperties: {
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableMongodbCollectionPropertiesResource"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SeedNode: msRest.CompositeMapper = {
  serializedName: "SeedNode",
  type: {
    name: "Composite",
    className: "SeedNode",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Certificate: msRest.CompositeMapper = {
  serializedName: "Certificate",
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      pem: {
        serializedName: "pem",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterResourceProperties: msRest.CompositeMapper = {
  serializedName: "ClusterResource_properties",
  type: {
    name: "Composite",
    className: "ClusterResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      restoreFromBackupId: {
        serializedName: "restoreFromBackupId",
        type: {
          name: "String"
        }
      },
      delegatedManagementSubnetId: {
        serializedName: "delegatedManagementSubnetId",
        type: {
          name: "String"
        }
      },
      cassandraVersion: {
        serializedName: "cassandraVersion",
        type: {
          name: "String"
        }
      },
      clusterNameOverride: {
        serializedName: "clusterNameOverride",
        type: {
          name: "String"
        }
      },
      authenticationMethod: {
        serializedName: "authenticationMethod",
        type: {
          name: "String"
        }
      },
      initialCassandraAdminPassword: {
        serializedName: "initialCassandraAdminPassword",
        type: {
          name: "String"
        }
      },
      hoursBetweenBackups: {
        serializedName: "hoursBetweenBackups",
        type: {
          name: "Number"
        }
      },
      prometheusEndpoint: {
        serializedName: "prometheusEndpoint",
        type: {
          name: "Composite",
          className: "SeedNode"
        }
      },
      repairEnabled: {
        serializedName: "repairEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertificates: {
        serializedName: "clientCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      externalGossipCertificates: {
        serializedName: "externalGossipCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      gossipCertificates: {
        readOnly: true,
        serializedName: "gossipCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      externalSeedNodes: {
        serializedName: "externalSeedNodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SeedNode"
            }
          }
        }
      },
      seedNodes: {
        readOnly: true,
        serializedName: "seedNodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SeedNode"
            }
          }
        }
      }
    }
  }
};

export const ClusterResource: msRest.CompositeMapper = {
  serializedName: "ClusterResource",
  type: {
    name: "Composite",
    className: "ClusterResource",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterResourceProperties"
        }
      }
    }
  }
};

export const RepairPostBody: msRest.CompositeMapper = {
  serializedName: "RepairPostBody",
  type: {
    name: "Composite",
    className: "RepairPostBody",
    modelProperties: {
      keyspace: {
        required: true,
        serializedName: "keyspace",
        type: {
          name: "String"
        }
      },
      tables: {
        serializedName: "tables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ClusterNodeStatusNodesItem: msRest.CompositeMapper = {
  serializedName: "ClusterNodeStatus_nodesItem",
  type: {
    name: "Composite",
    className: "ClusterNodeStatusNodesItem",
    modelProperties: {
      datacenter: {
        serializedName: "datacenter",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      load: {
        serializedName: "load",
        type: {
          name: "String"
        }
      },
      tokens: {
        serializedName: "tokens",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      owns: {
        serializedName: "owns",
        type: {
          name: "Number"
        }
      },
      hostId: {
        serializedName: "hostId",
        type: {
          name: "String"
        }
      },
      rack: {
        serializedName: "rack",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterNodeStatus: msRest.CompositeMapper = {
  serializedName: "ClusterNodeStatus",
  type: {
    name: "Composite",
    className: "ClusterNodeStatus",
    modelProperties: {
      nodes: {
        serializedName: "nodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterNodeStatusNodesItem"
            }
          }
        }
      }
    }
  }
};

export const BackupResourceProperties: msRest.CompositeMapper = {
  serializedName: "BackupResource_properties",
  type: {
    name: "Composite",
    className: "BackupResourceProperties",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BackupResource: msRest.CompositeMapper = {
  serializedName: "BackupResource",
  type: {
    name: "Composite",
    className: "BackupResource",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BackupResourceProperties"
        }
      }
    }
  }
};

export const DataCenterResourceProperties: msRest.CompositeMapper = {
  serializedName: "DataCenterResource_properties",
  type: {
    name: "Composite",
    className: "DataCenterResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      dataCenterLocation: {
        serializedName: "dataCenterLocation",
        type: {
          name: "String"
        }
      },
      delegatedSubnetId: {
        serializedName: "delegatedSubnetId",
        type: {
          name: "String"
        }
      },
      nodeCount: {
        serializedName: "nodeCount",
        type: {
          name: "Number"
        }
      },
      seedNodes: {
        readOnly: true,
        serializedName: "seedNodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SeedNode"
            }
          }
        }
      },
      base64EncodedCassandraYamlFragment: {
        serializedName: "base64EncodedCassandraYamlFragment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataCenterResource: msRest.CompositeMapper = {
  serializedName: "DataCenterResource",
  type: {
    name: "Composite",
    className: "DataCenterResource",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataCenterResourceProperties"
        }
      }
    }
  }
};

export const PrivateLinkResource: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      groupId: {
        readOnly: true,
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        readOnly: true,
        serializedName: "properties.requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        readOnly: true,
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ServiceResourceProperties: msRest.CompositeMapper = {
  serializedName: "ServiceResourceProperties",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "serviceType",
      clientName: "serviceType"
    },
    uberParent: "ServiceResourceProperties",
    className: "ServiceResourceProperties",
    modelProperties: {
      creationTime: {
        readOnly: true,
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      instanceSize: {
        serializedName: "instanceSize",
        type: {
          name: "String"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      serviceType: {
        required: true,
        serializedName: "serviceType",
        type: {
          name: "String"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const ServiceResource: msRest.CompositeMapper = {
  serializedName: "ServiceResource",
  type: {
    name: "Composite",
    className: "ServiceResource",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServiceResourceProperties",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const RegionalServiceResource: msRest.CompositeMapper = {
  serializedName: "RegionalServiceResource",
  type: {
    name: "Composite",
    className: "RegionalServiceResource",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataTransferRegionalServiceResource: msRest.CompositeMapper = {
  serializedName: "DataTransferRegionalServiceResource",
  type: {
    name: "Composite",
    className: "DataTransferRegionalServiceResource",
    modelProperties: {
      ...RegionalServiceResource.type.modelProperties
    }
  }
};

export const DataTransferServiceResourceProperties: msRest.CompositeMapper = {
  serializedName: "DataTransferServiceResourceProperties",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ServiceResourceProperties.type.polymorphicDiscriminator,
    uberParent: "ServiceResourceProperties",
    className: "DataTransferServiceResourceProperties",
    modelProperties: {
      ...ServiceResourceProperties.type.modelProperties,
      locations: {
        readOnly: true,
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataTransferRegionalServiceResource"
            }
          }
        }
      }
    },
    additionalProperties: ServiceResourceProperties.type.additionalProperties
  }
};

export const DataTransferServiceResource: msRest.CompositeMapper = {
  serializedName: "DataTransferServiceResource",
  type: {
    name: "Composite",
    className: "DataTransferServiceResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataTransferServiceResourceProperties",
          additionalProperties: ServiceResourceProperties.type.additionalProperties
        }
      }
    }
  }
};

export const SqlDedicatedGatewayRegionalServiceResource: msRest.CompositeMapper = {
  serializedName: "SqlDedicatedGatewayRegionalServiceResource",
  type: {
    name: "Composite",
    className: "SqlDedicatedGatewayRegionalServiceResource",
    modelProperties: {
      ...RegionalServiceResource.type.modelProperties,
      sqlDedicatedGatewayEndpoint: {
        readOnly: true,
        serializedName: "sqlDedicatedGatewayEndpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDedicatedGatewayServiceResourceProperties: msRest.CompositeMapper = {
  serializedName: "SqlDedicatedGatewayServiceResourceProperties",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ServiceResourceProperties.type.polymorphicDiscriminator,
    uberParent: "ServiceResourceProperties",
    className: "SqlDedicatedGatewayServiceResourceProperties",
    modelProperties: {
      ...ServiceResourceProperties.type.modelProperties,
      sqlDedicatedGatewayEndpoint: {
        serializedName: "sqlDedicatedGatewayEndpoint",
        type: {
          name: "String"
        }
      },
      locations: {
        readOnly: true,
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlDedicatedGatewayRegionalServiceResource"
            }
          }
        }
      }
    },
    additionalProperties: ServiceResourceProperties.type.additionalProperties
  }
};

export const SqlDedicatedGatewayServiceResource: msRest.CompositeMapper = {
  serializedName: "SqlDedicatedGatewayServiceResource",
  type: {
    name: "Composite",
    className: "SqlDedicatedGatewayServiceResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SqlDedicatedGatewayServiceResourceProperties",
          additionalProperties: ServiceResourceProperties.type.additionalProperties
        }
      }
    }
  }
};

export const DatabaseAccountsListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountsListResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseAccountGetResults"
            }
          }
        }
      }
    }
  }
};

export const MetricListResult: msRest.CompositeMapper = {
  serializedName: "MetricListResult",
  type: {
    name: "Composite",
    className: "MetricListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metric"
            }
          }
        }
      }
    }
  }
};

export const UsagesResult: msRest.CompositeMapper = {
  serializedName: "UsagesResult",
  type: {
    name: "Composite",
    className: "UsagesResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      }
    }
  }
};

export const MetricDefinitionsListResult: msRest.CompositeMapper = {
  serializedName: "MetricDefinitionsListResult",
  type: {
    name: "Composite",
    className: "MetricDefinitionsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDefinition"
            }
          }
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PercentileMetricListResult: msRest.CompositeMapper = {
  serializedName: "PercentileMetricListResult",
  type: {
    name: "Composite",
    className: "PercentileMetricListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PercentileMetric"
            }
          }
        }
      }
    }
  }
};

export const PartitionMetricListResult: msRest.CompositeMapper = {
  serializedName: "PartitionMetricListResult",
  type: {
    name: "Composite",
    className: "PartitionMetricListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionMetric"
            }
          }
        }
      }
    }
  }
};

export const PartitionUsagesResult: msRest.CompositeMapper = {
  serializedName: "PartitionUsagesResult",
  type: {
    name: "Composite",
    className: "PartitionUsagesResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionUsage"
            }
          }
        }
      }
    }
  }
};

export const SqlDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "SqlDatabaseListResult",
  type: {
    name: "Composite",
    className: "SqlDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlDatabaseGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlContainerListResult: msRest.CompositeMapper = {
  serializedName: "SqlContainerListResult",
  type: {
    name: "Composite",
    className: "SqlContainerListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlContainerGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlStoredProcedureListResult: msRest.CompositeMapper = {
  serializedName: "SqlStoredProcedureListResult",
  type: {
    name: "Composite",
    className: "SqlStoredProcedureListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlStoredProcedureGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionListResult: msRest.CompositeMapper = {
  serializedName: "SqlUserDefinedFunctionListResult",
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlUserDefinedFunctionGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlTriggerListResult: msRest.CompositeMapper = {
  serializedName: "SqlTriggerListResult",
  type: {
    name: "Composite",
    className: "SqlTriggerListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlTriggerGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlRoleDefinitionListResult: msRest.CompositeMapper = {
  serializedName: "SqlRoleDefinitionListResult",
  type: {
    name: "Composite",
    className: "SqlRoleDefinitionListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlRoleDefinitionGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlRoleAssignmentListResult: msRest.CompositeMapper = {
  serializedName: "SqlRoleAssignmentListResult",
  type: {
    name: "Composite",
    className: "SqlRoleAssignmentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlRoleAssignmentGetResults"
            }
          }
        }
      }
    }
  }
};

export const MongoDBDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "MongoDBDatabaseListResult",
  type: {
    name: "Composite",
    className: "MongoDBDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoDBDatabaseGetResults"
            }
          }
        }
      }
    }
  }
};

export const MongoDBCollectionListResult: msRest.CompositeMapper = {
  serializedName: "MongoDBCollectionListResult",
  type: {
    name: "Composite",
    className: "MongoDBCollectionListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoDBCollectionGetResults"
            }
          }
        }
      }
    }
  }
};

export const TableListResult: msRest.CompositeMapper = {
  serializedName: "TableListResult",
  type: {
    name: "Composite",
    className: "TableListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TableGetResults"
            }
          }
        }
      }
    }
  }
};

export const CassandraKeyspaceListResult: msRest.CompositeMapper = {
  serializedName: "CassandraKeyspaceListResult",
  type: {
    name: "Composite",
    className: "CassandraKeyspaceListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraKeyspaceGetResults"
            }
          }
        }
      }
    }
  }
};

export const CassandraTableListResult: msRest.CompositeMapper = {
  serializedName: "CassandraTableListResult",
  type: {
    name: "Composite",
    className: "CassandraTableListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraTableGetResults"
            }
          }
        }
      }
    }
  }
};

export const GremlinDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "GremlinDatabaseListResult",
  type: {
    name: "Composite",
    className: "GremlinDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GremlinDatabaseGetResults"
            }
          }
        }
      }
    }
  }
};

export const GremlinGraphListResult: msRest.CompositeMapper = {
  serializedName: "GremlinGraphListResult",
  type: {
    name: "Composite",
    className: "GremlinGraphListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GremlinGraphGetResults"
            }
          }
        }
      }
    }
  }
};

export const RestorableDatabaseAccountsListResult: msRest.CompositeMapper = {
  serializedName: "RestorableDatabaseAccountsListResult",
  type: {
    name: "Composite",
    className: "RestorableDatabaseAccountsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableDatabaseAccountGetResult"
            }
          }
        }
      }
    }
  }
};

export const LocationListResult: msRest.CompositeMapper = {
  serializedName: "LocationListResult",
  type: {
    name: "Composite",
    className: "LocationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LocationGetResult"
            }
          }
        }
      }
    }
  }
};

export const NotebookWorkspaceListResult: msRest.CompositeMapper = {
  serializedName: "NotebookWorkspaceListResult",
  type: {
    name: "Composite",
    className: "NotebookWorkspaceListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NotebookWorkspace"
            }
          }
        }
      }
    }
  }
};

export const RestorableSqlDatabasesListResult: msRest.CompositeMapper = {
  serializedName: "RestorableSqlDatabasesListResult",
  type: {
    name: "Composite",
    className: "RestorableSqlDatabasesListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableSqlDatabaseGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableSqlContainersListResult: msRest.CompositeMapper = {
  serializedName: "RestorableSqlContainersListResult",
  type: {
    name: "Composite",
    className: "RestorableSqlContainersListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableSqlContainerGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableSqlResourcesListResult: msRest.CompositeMapper = {
  serializedName: "RestorableSqlResourcesListResult",
  type: {
    name: "Composite",
    className: "RestorableSqlResourcesListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseRestoreResource"
            }
          }
        }
      }
    }
  }
};

export const RestorableMongodbDatabasesListResult: msRest.CompositeMapper = {
  serializedName: "RestorableMongodbDatabasesListResult",
  type: {
    name: "Composite",
    className: "RestorableMongodbDatabasesListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableMongodbDatabaseGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableMongodbCollectionsListResult: msRest.CompositeMapper = {
  serializedName: "RestorableMongodbCollectionsListResult",
  type: {
    name: "Composite",
    className: "RestorableMongodbCollectionsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableMongodbCollectionGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableMongodbResourcesListResult: msRest.CompositeMapper = {
  serializedName: "RestorableMongodbResourcesListResult",
  type: {
    name: "Composite",
    className: "RestorableMongodbResourcesListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseRestoreResource"
            }
          }
        }
      }
    }
  }
};

export const ListClusters: msRest.CompositeMapper = {
  serializedName: "ListClusters",
  type: {
    name: "Composite",
    className: "ListClusters",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterResource"
            }
          }
        }
      }
    }
  }
};

export const ListBackups: msRest.CompositeMapper = {
  serializedName: "ListBackups",
  type: {
    name: "Composite",
    className: "ListBackups",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupResource"
            }
          }
        }
      }
    }
  }
};

export const ListDataCenters: msRest.CompositeMapper = {
  serializedName: "ListDataCenters",
  type: {
    name: "Composite",
    className: "ListDataCenters",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataCenterResource"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourceListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionListResult",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const ServiceResourceListResult: msRest.CompositeMapper = {
  serializedName: "ServiceResourceListResult",
  type: {
    name: "Composite",
    className: "ServiceResourceListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceResource"
            }
          }
        }
      }
    }
  }
};

export const discriminators = {
  BackupPolicy: BackupPolicy,
  DatabaseAccountCreateUpdateProperties: DatabaseAccountCreateUpdateProperties,
  "DatabaseAccountCreateUpdateProperties.Default": DefaultRequestDatabaseAccountCreateUpdateProperties,
  "DatabaseAccountCreateUpdateProperties.Restore": RestoreReqeustDatabaseAccountCreateUpdateProperties,
  "BackupPolicy.Periodic": PeriodicModeBackupPolicy,
  "BackupPolicy.Continuous": ContinuousModeBackupPolicy,
  ServiceResourceProperties: ServiceResourceProperties,
  "ServiceResourceProperties.DataTransferServiceResourceProperties": DataTransferServiceResourceProperties,
  "ServiceResourceProperties.SqlDedicatedGatewayServiceResourceProperties": SqlDedicatedGatewayServiceResourceProperties
};
