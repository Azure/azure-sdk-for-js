/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned,UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className:
                "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties"
            }
          }
        }
      }
    }
  }
};

export const Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpAddressOrRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpAddressOrRange",
    modelProperties: {
      ipAddressOrRange: {
        serializedName: "ipAddressOrRange",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsistencyPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConsistencyPolicy",
    modelProperties: {
      defaultConsistencyLevel: {
        serializedName: "defaultConsistencyLevel",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Eventual",
            "Session",
            "BoundedStaleness",
            "Strong",
            "ConsistentPrefix"
          ]
        }
      },
      maxStalenessPrefix: {
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        serializedName: "maxStalenessPrefix",
        type: {
          name: "Number"
        }
      },
      maxIntervalInSeconds: {
        constraints: {
          InclusiveMaximum: 86400,
          InclusiveMinimum: 5
        },
        serializedName: "maxIntervalInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Capability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Location: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Location",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locationName: {
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      documentEndpoint: {
        serializedName: "documentEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "failoverPriority",
        type: {
          name: "Number"
        }
      },
      isZoneRedundant: {
        serializedName: "isZoneRedundant",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FailoverPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverPolicy",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locationName: {
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "failoverPriority",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      ignoreMissingVNetServiceEndpoint: {
        serializedName: "ignoreMissingVNetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PrivateEndpointProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointProperty",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionStateProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionStateProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiProperties",
    modelProperties: {
      serverVersion: {
        serializedName: "serverVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyticalStorageConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyticalStorageConfiguration",
    modelProperties: {
      schemaType: {
        serializedName: "schemaType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoreParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestoreParameters",
    modelProperties: {
      restoreMode: {
        serializedName: "restoreMode",
        type: {
          name: "String"
        }
      },
      restoreSource: {
        serializedName: "restoreSource",
        type: {
          name: "String"
        }
      },
      restoreTimestampInUtc: {
        serializedName: "restoreTimestampInUtc",
        type: {
          name: "DateTime"
        }
      },
      databasesToRestore: {
        serializedName: "databasesToRestore",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseRestoreResource"
            }
          }
        }
      },
      gremlinDatabasesToRestore: {
        serializedName: "gremlinDatabasesToRestore",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GremlinDatabaseRestoreResource"
            }
          }
        }
      },
      tablesToRestore: {
        serializedName: "tablesToRestore",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatabaseRestoreResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseRestoreResource",
    modelProperties: {
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      collectionNames: {
        serializedName: "collectionNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GremlinDatabaseRestoreResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseRestoreResource",
    modelProperties: {
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      graphNames: {
        serializedName: "graphNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BackupPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupPolicy",
    uberParent: "BackupPolicy",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      migrationState: {
        serializedName: "migrationState",
        type: {
          name: "Composite",
          className: "BackupPolicyMigrationState"
        }
      }
    }
  }
};

export const BackupPolicyMigrationState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupPolicyMigrationState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      targetType: {
        serializedName: "targetType",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CorsPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CorsPolicy",
    modelProperties: {
      allowedOrigins: {
        serializedName: "allowedOrigins",
        required: true,
        type: {
          name: "String"
        }
      },
      allowedMethods: {
        serializedName: "allowedMethods",
        type: {
          name: "String"
        }
      },
      allowedHeaders: {
        serializedName: "allowedHeaders",
        type: {
          name: "String"
        }
      },
      exposedHeaders: {
        serializedName: "exposedHeaders",
        type: {
          name: "String"
        }
      },
      maxAgeInSeconds: {
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        serializedName: "maxAgeInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Capacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Capacity",
    modelProperties: {
      totalThroughputLimit: {
        constraints: {
          InclusiveMinimum: -1
        },
        serializedName: "totalThroughputLimit",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseAccountKeysMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountKeysMetadata",
    modelProperties: {
      primaryMasterKey: {
        serializedName: "primaryMasterKey",
        type: {
          name: "Composite",
          className: "AccountKeyMetadata"
        }
      },
      secondaryMasterKey: {
        serializedName: "secondaryMasterKey",
        type: {
          name: "Composite",
          className: "AccountKeyMetadata"
        }
      },
      primaryReadonlyMasterKey: {
        serializedName: "primaryReadonlyMasterKey",
        type: {
          name: "Composite",
          className: "AccountKeyMetadata"
        }
      },
      secondaryReadonlyMasterKey: {
        serializedName: "secondaryReadonlyMasterKey",
        type: {
          name: "Composite",
          className: "AccountKeyMetadata"
        }
      }
    }
  }
};

export const AccountKeyMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountKeyMetadata",
    modelProperties: {
      generationTime: {
        serializedName: "generationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ARMResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ARMResourceProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DatabaseAccountUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      consistencyPolicy: {
        serializedName: "properties.consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      locations: {
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      ipRules: {
        serializedName: "properties.ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpAddressOrRange"
            }
          }
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      },
      enableCassandraConnector: {
        serializedName: "properties.enableCassandraConnector",
        type: {
          name: "Boolean"
        }
      },
      connectorOffer: {
        serializedName: "properties.connectorOffer",
        type: {
          name: "String"
        }
      },
      disableKeyBasedMetadataWriteAccess: {
        serializedName: "properties.disableKeyBasedMetadataWriteAccess",
        type: {
          name: "Boolean"
        }
      },
      keyVaultKeyUri: {
        serializedName: "properties.keyVaultKeyUri",
        type: {
          name: "String"
        }
      },
      defaultIdentity: {
        serializedName: "properties.defaultIdentity",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      enableFreeTier: {
        serializedName: "properties.enableFreeTier",
        type: {
          name: "Boolean"
        }
      },
      apiProperties: {
        serializedName: "properties.apiProperties",
        type: {
          name: "Composite",
          className: "ApiProperties"
        }
      },
      enableAnalyticalStorage: {
        serializedName: "properties.enableAnalyticalStorage",
        type: {
          name: "Boolean"
        }
      },
      analyticalStorageConfiguration: {
        serializedName: "properties.analyticalStorageConfiguration",
        type: {
          name: "Composite",
          className: "AnalyticalStorageConfiguration"
        }
      },
      backupPolicy: {
        serializedName: "properties.backupPolicy",
        type: {
          name: "Composite",
          className: "BackupPolicy"
        }
      },
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsPolicy"
            }
          }
        }
      },
      networkAclBypass: {
        serializedName: "properties.networkAclBypass",
        type: {
          name: "Enum",
          allowedValues: ["None", "AzureServices"]
        }
      },
      networkAclBypassResourceIds: {
        serializedName: "properties.networkAclBypassResourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      disableLocalAuth: {
        serializedName: "properties.disableLocalAuth",
        type: {
          name: "Boolean"
        }
      },
      capacity: {
        serializedName: "properties.capacity",
        type: {
          name: "Composite",
          className: "Capacity"
        }
      },
      keysMetadata: {
        serializedName: "properties.keysMetadata",
        type: {
          name: "Composite",
          className: "DatabaseAccountKeysMetadata"
        }
      },
      enablePartitionMerge: {
        serializedName: "properties.enablePartitionMerge",
        type: {
          name: "Boolean"
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverPolicies: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverPolicies",
    modelProperties: {
      failoverPolicies: {
        serializedName: "failoverPolicies",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverPolicy"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccountsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseAccountGetResults"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccountListReadOnlyKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountListReadOnlyKeysResult",
    modelProperties: {
      primaryReadonlyMasterKey: {
        serializedName: "primaryReadonlyMasterKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryReadonlyMasterKey: {
        serializedName: "secondaryReadonlyMasterKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountListConnectionStringsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountListConnectionStringsResult",
    modelProperties: {
      connectionStrings: {
        serializedName: "connectionStrings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseAccountConnectionString"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccountConnectionString: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountConnectionString",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegionForOnlineOffline: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegionForOnlineOffline",
    modelProperties: {
      region: {
        serializedName: "region",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountRegenerateKeyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountRegenerateKeyParameters",
    modelProperties: {
      keyKind: {
        serializedName: "keyKind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "Provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "Resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "Operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "Description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metric"
            }
          }
        }
      }
    }
  }
};

export const Metric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        serializedName: "metricValues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricValue"
            }
          }
        }
      }
    }
  }
};

export const MetricName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricValue",
    modelProperties: {
      count: {
        serializedName: "_count",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      average: {
        serializedName: "average",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minimum: {
        serializedName: "minimum",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      total: {
        serializedName: "total",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PercentileMetricListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PercentileMetricListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PercentileMetric"
            }
          }
        }
      }
    }
  }
};

export const PercentileMetric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PercentileMetric",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        serializedName: "metricValues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PercentileMetricValue"
            }
          }
        }
      }
    }
  }
};

export const PartitionMetricListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionMetricListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionMetric"
            }
          }
        }
      }
    }
  }
};

export const UsagesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      }
    }
  }
};

export const Usage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      quotaPeriod: {
        serializedName: "quotaPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PartitionUsagesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionUsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionUsage"
            }
          }
        }
      }
    }
  }
};

export const MetricDefinitionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDefinitionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDefinition"
            }
          }
        }
      }
    }
  }
};

export const MetricDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      metricAvailabilities: {
        serializedName: "metricAvailabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      primaryAggregationType: {
        serializedName: "primaryAggregationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceUri: {
        serializedName: "resourceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      }
    }
  }
};

export const MetricAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      retention: {
        serializedName: "retention",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlDatabaseGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlDatabaseResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedResourceProperties",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ts: {
        serializedName: "_ts",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      etag: {
        serializedName: "_etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OptionsResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptionsResource",
    modelProperties: {
      throughput: {
        serializedName: "throughput",
        type: {
          name: "Number"
        }
      },
      autoscaleSettings: {
        serializedName: "autoscaleSettings",
        type: {
          name: "Composite",
          className: "AutoscaleSettings"
        }
      }
    }
  }
};

export const AutoscaleSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoscaleSettings",
    modelProperties: {
      maxThroughput: {
        serializedName: "maxThroughput",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateUpdateOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateUpdateOptions",
    modelProperties: {
      throughput: {
        serializedName: "throughput",
        type: {
          name: "Number"
        }
      },
      autoscaleSettings: {
        serializedName: "autoscaleSettings",
        type: {
          name: "Composite",
          className: "AutoscaleSettings"
        }
      }
    }
  }
};

export const ThroughputSettingsResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThroughputSettingsResource",
    modelProperties: {
      throughput: {
        serializedName: "throughput",
        type: {
          name: "Number"
        }
      },
      autoscaleSettings: {
        serializedName: "autoscaleSettings",
        type: {
          name: "Composite",
          className: "AutoscaleSettingsResource"
        }
      },
      minimumThroughput: {
        serializedName: "minimumThroughput",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      offerReplacePending: {
        serializedName: "offerReplacePending",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoscaleSettingsResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoscaleSettingsResource",
    modelProperties: {
      maxThroughput: {
        serializedName: "maxThroughput",
        required: true,
        type: {
          name: "Number"
        }
      },
      autoUpgradePolicy: {
        serializedName: "autoUpgradePolicy",
        type: {
          name: "Composite",
          className: "AutoUpgradePolicyResource"
        }
      },
      targetMaxThroughput: {
        serializedName: "targetMaxThroughput",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoUpgradePolicyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoUpgradePolicyResource",
    modelProperties: {
      throughputPolicy: {
        serializedName: "throughputPolicy",
        type: {
          name: "Composite",
          className: "ThroughputPolicyResource"
        }
      }
    }
  }
};

export const ThroughputPolicyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThroughputPolicyResource",
    modelProperties: {
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      incrementPercent: {
        serializedName: "incrementPercent",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      }
    }
  }
};

export const SqlContainerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlContainerGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlContainerResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      },
      clientEncryptionPolicy: {
        serializedName: "clientEncryptionPolicy",
        type: {
          name: "Composite",
          className: "ClientEncryptionPolicy"
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IndexingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexingPolicy",
    modelProperties: {
      automatic: {
        serializedName: "automatic",
        type: {
          name: "Boolean"
        }
      },
      indexingMode: {
        defaultValue: "consistent",
        serializedName: "indexingMode",
        type: {
          name: "String"
        }
      },
      includedPaths: {
        serializedName: "includedPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IncludedPath"
            }
          }
        }
      },
      excludedPaths: {
        serializedName: "excludedPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExcludedPath"
            }
          }
        }
      },
      compositeIndexes: {
        serializedName: "compositeIndexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "CompositePath"
                }
              }
            }
          }
        }
      },
      spatialIndexes: {
        serializedName: "spatialIndexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpatialSpec"
            }
          }
        }
      }
    }
  }
};

export const IncludedPath: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IncludedPath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      indexes: {
        serializedName: "indexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Indexes"
            }
          }
        }
      }
    }
  }
};

export const Indexes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Indexes",
    modelProperties: {
      dataType: {
        defaultValue: "String",
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      precision: {
        serializedName: "precision",
        type: {
          name: "Number"
        }
      },
      kind: {
        defaultValue: "Hash",
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExcludedPath: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExcludedPath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CompositePath: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CompositePath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialSpec: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialSpec",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      types: {
        serializedName: "types",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ContainerPartitionKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerPartitionKey",
    modelProperties: {
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kind: {
        defaultValue: "Hash",
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      version: {
        constraints: {
          InclusiveMaximum: 2,
          InclusiveMinimum: 1
        },
        serializedName: "version",
        type: {
          name: "Number"
        }
      },
      systemKey: {
        serializedName: "systemKey",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const UniqueKeyPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UniqueKeyPolicy",
    modelProperties: {
      uniqueKeys: {
        serializedName: "uniqueKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UniqueKey"
            }
          }
        }
      }
    }
  }
};

export const UniqueKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UniqueKey",
    modelProperties: {
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ConflictResolutionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConflictResolutionPolicy",
    modelProperties: {
      mode: {
        defaultValue: "LastWriterWins",
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      conflictResolutionPath: {
        serializedName: "conflictResolutionPath",
        type: {
          name: "String"
        }
      },
      conflictResolutionProcedure: {
        serializedName: "conflictResolutionProcedure",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientEncryptionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientEncryptionPolicy",
    modelProperties: {
      includedPaths: {
        serializedName: "includedPaths",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientEncryptionIncludedPath"
            }
          }
        }
      },
      policyFormatVersion: {
        constraints: {
          InclusiveMaximum: 2,
          InclusiveMinimum: 1
        },
        serializedName: "policyFormatVersion",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClientEncryptionIncludedPath: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientEncryptionIncludedPath",
    modelProperties: {
      path: {
        serializedName: "path",
        required: true,
        type: {
          name: "String"
        }
      },
      clientEncryptionKeyId: {
        serializedName: "clientEncryptionKeyId",
        required: true,
        type: {
          name: "String"
        }
      },
      encryptionType: {
        serializedName: "encryptionType",
        required: true,
        type: {
          name: "String"
        }
      },
      encryptionAlgorithm: {
        serializedName: "encryptionAlgorithm",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientEncryptionKeysListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientEncryptionKeysListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientEncryptionKeyGetResults"
            }
          }
        }
      }
    }
  }
};

export const ClientEncryptionKeyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientEncryptionKeyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      encryptionAlgorithm: {
        serializedName: "encryptionAlgorithm",
        type: {
          name: "String"
        }
      },
      wrappedDataEncryptionKey: {
        serializedName: "wrappedDataEncryptionKey",
        type: {
          name: "ByteArray"
        }
      },
      keyWrapMetadata: {
        serializedName: "keyWrapMetadata",
        type: {
          name: "Composite",
          className: "KeyWrapMetadata"
        }
      }
    }
  }
};

export const KeyWrapMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyWrapMetadata",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      algorithm: {
        serializedName: "algorithm",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ARMProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ARMProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientEncryptionKeyCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientEncryptionKeyCreateUpdateParameters",
    modelProperties: {
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "ClientEncryptionKeyResource"
        }
      }
    }
  }
};

export const SqlStoredProcedureListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlStoredProcedureListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlStoredProcedureGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlStoredProcedureResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlStoredProcedureResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlUserDefinedFunctionGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlTriggerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlTriggerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlTriggerGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlTriggerResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlTriggerResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      },
      triggerType: {
        serializedName: "triggerType",
        type: {
          name: "String"
        }
      },
      triggerOperation: {
        serializedName: "triggerOperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBDatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoDBDatabaseGetResults"
            }
          }
        }
      }
    }
  }
};

export const MongoDBDatabaseResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBCollectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoDBCollectionGetResults"
            }
          }
        }
      }
    }
  }
};

export const MongoDBCollectionResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      shardKey: {
        serializedName: "shardKey",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      indexes: {
        serializedName: "indexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoIndex"
            }
          }
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MongoIndex: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoIndex",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "Composite",
          className: "MongoIndexKeys"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "MongoIndexOptions"
        }
      }
    }
  }
};

export const MongoIndexKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoIndexKeys",
    modelProperties: {
      keys: {
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MongoIndexOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoIndexOptions",
    modelProperties: {
      expireAfterSeconds: {
        serializedName: "expireAfterSeconds",
        type: {
          name: "Number"
        }
      },
      unique: {
        serializedName: "unique",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TableListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TableGetResults"
            }
          }
        }
      }
    }
  }
};

export const TableResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraKeyspaceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraKeyspaceGetResults"
            }
          }
        }
      }
    }
  }
};

export const CassandraKeyspaceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraTableListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraTableGetResults"
            }
          }
        }
      }
    }
  }
};

export const CassandraTableResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      schema: {
        serializedName: "schema",
        type: {
          name: "Composite",
          className: "CassandraSchema"
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CassandraSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraSchema",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Column"
            }
          }
        }
      },
      partitionKeys: {
        serializedName: "partitionKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraPartitionKey"
            }
          }
        }
      },
      clusterKeys: {
        serializedName: "clusterKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterKey"
            }
          }
        }
      }
    }
  }
};

export const Column: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Column",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraPartitionKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraPartitionKey",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterKey",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      orderBy: {
        serializedName: "orderBy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinDatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GremlinDatabaseGetResults"
            }
          }
        }
      }
    }
  }
};

export const GremlinDatabaseResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinGraphListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GremlinGraphGetResults"
            }
          }
        }
      }
    }
  }
};

export const GremlinGraphResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      },
      analyticalStorageTtl: {
        serializedName: "analyticalStorageTtl",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LocationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LocationGetResult"
            }
          }
        }
      }
    }
  }
};

export const LocationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocationProperties",
    modelProperties: {
      supportsAvailabilityZone: {
        serializedName: "supportsAvailabilityZone",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isResidencyRestricted: {
        serializedName: "isResidencyRestricted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      backupStorageRedundancies: {
        serializedName: "backupStorageRedundancies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ListClusters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListClusters",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterResource"
            }
          }
        }
      }
    }
  }
};

export const ClusterResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      restoreFromBackupId: {
        serializedName: "restoreFromBackupId",
        type: {
          name: "String"
        }
      },
      delegatedManagementSubnetId: {
        serializedName: "delegatedManagementSubnetId",
        type: {
          name: "String"
        }
      },
      cassandraVersion: {
        serializedName: "cassandraVersion",
        type: {
          name: "String"
        }
      },
      clusterNameOverride: {
        serializedName: "clusterNameOverride",
        type: {
          name: "String"
        }
      },
      authenticationMethod: {
        serializedName: "authenticationMethod",
        type: {
          name: "String"
        }
      },
      initialCassandraAdminPassword: {
        serializedName: "initialCassandraAdminPassword",
        type: {
          name: "String"
        }
      },
      prometheusEndpoint: {
        serializedName: "prometheusEndpoint",
        type: {
          name: "Composite",
          className: "SeedNode"
        }
      },
      repairEnabled: {
        serializedName: "repairEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertificates: {
        serializedName: "clientCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      externalGossipCertificates: {
        serializedName: "externalGossipCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      gossipCertificates: {
        serializedName: "gossipCertificates",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      externalSeedNodes: {
        serializedName: "externalSeedNodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SeedNode"
            }
          }
        }
      },
      seedNodes: {
        serializedName: "seedNodes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SeedNode"
            }
          }
        }
      },
      hoursBetweenBackups: {
        serializedName: "hoursBetweenBackups",
        type: {
          name: "Number"
        }
      },
      deallocated: {
        serializedName: "deallocated",
        type: {
          name: "Boolean"
        }
      },
      cassandraAuditLoggingEnabled: {
        serializedName: "cassandraAuditLoggingEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SeedNode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SeedNode",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Certificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      pem: {
        serializedName: "pem",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedCassandraARMResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedCassandraARMResourceProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedCassandraManagedServiceIdentity"
        }
      }
    }
  }
};

export const ManagedCassandraManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedCassandraManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommandPostBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommandPostBody",
    modelProperties: {
      command: {
        serializedName: "command",
        required: true,
        type: {
          name: "String"
        }
      },
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      host: {
        serializedName: "host",
        required: true,
        type: {
          name: "String"
        }
      },
      cassandraStopStart: {
        serializedName: "cassandra-stop-start",
        type: {
          name: "Boolean"
        }
      },
      readwrite: {
        serializedName: "readwrite",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CommandOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommandOutput",
    modelProperties: {
      commandOutput: {
        serializedName: "commandOutput",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListDataCenters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListDataCenters",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataCenterResource"
            }
          }
        }
      }
    }
  }
};

export const DataCenterResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataCenterResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      dataCenterLocation: {
        serializedName: "dataCenterLocation",
        type: {
          name: "String"
        }
      },
      delegatedSubnetId: {
        serializedName: "delegatedSubnetId",
        type: {
          name: "String"
        }
      },
      nodeCount: {
        serializedName: "nodeCount",
        type: {
          name: "Number"
        }
      },
      seedNodes: {
        serializedName: "seedNodes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SeedNode"
            }
          }
        }
      },
      base64EncodedCassandraYamlFragment: {
        serializedName: "base64EncodedCassandraYamlFragment",
        type: {
          name: "String"
        }
      },
      managedDiskCustomerKeyUri: {
        serializedName: "managedDiskCustomerKeyUri",
        type: {
          name: "String"
        }
      },
      backupStorageCustomerKeyUri: {
        serializedName: "backupStorageCustomerKeyUri",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      diskSku: {
        serializedName: "diskSku",
        type: {
          name: "String"
        }
      },
      diskCapacity: {
        serializedName: "diskCapacity",
        type: {
          name: "Number"
        }
      },
      availabilityZone: {
        serializedName: "availabilityZone",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CassandraClusterPublicStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraClusterPublicStatus",
    modelProperties: {
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      reaperStatus: {
        serializedName: "reaperStatus",
        type: {
          name: "Composite",
          className: "ManagedCassandraReaperStatus"
        }
      },
      connectionErrors: {
        serializedName: "connectionErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionError"
            }
          }
        }
      },
      dataCenters: {
        serializedName: "dataCenters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraClusterPublicStatusDataCentersItem"
            }
          }
        }
      }
    }
  }
};

export const ManagedCassandraReaperStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedCassandraReaperStatus",
    modelProperties: {
      healthy: {
        serializedName: "healthy",
        type: {
          name: "Boolean"
        }
      },
      repairRunIds: {
        serializedName: "repairRunIds",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      repairSchedules: {
        serializedName: "repairSchedules",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ConnectionError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionError",
    modelProperties: {
      connectionState: {
        serializedName: "connectionState",
        type: {
          name: "String"
        }
      },
      iPFrom: {
        serializedName: "iPFrom",
        type: {
          name: "String"
        }
      },
      iPTo: {
        serializedName: "iPTo",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      },
      exception: {
        serializedName: "exception",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraClusterPublicStatusDataCentersItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraClusterPublicStatusDataCentersItem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      seedNodes: {
        serializedName: "seedNodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nodes: {
        serializedName: "nodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems"
            }
          }
        }
      }
    }
  }
};

export const ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      load: {
        serializedName: "load",
        type: {
          name: "String"
        }
      },
      tokens: {
        serializedName: "tokens",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "Number"
        }
      },
      hostID: {
        serializedName: "hostID",
        type: {
          name: "String"
        }
      },
      rack: {
        serializedName: "rack",
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "String"
        }
      },
      diskUsedKB: {
        serializedName: "diskUsedKB",
        type: {
          name: "Number"
        }
      },
      diskFreeKB: {
        serializedName: "diskFreeKB",
        type: {
          name: "Number"
        }
      },
      memoryUsedKB: {
        serializedName: "memoryUsedKB",
        type: {
          name: "Number"
        }
      },
      memoryBuffersAndCachedKB: {
        serializedName: "memoryBuffersAndCachedKB",
        type: {
          name: "Number"
        }
      },
      memoryFreeKB: {
        serializedName: "memoryFreeKB",
        type: {
          name: "Number"
        }
      },
      memoryTotalKB: {
        serializedName: "memoryTotalKB",
        type: {
          name: "Number"
        }
      },
      cpuUsage: {
        serializedName: "cpuUsage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Privilege: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Privilege",
    modelProperties: {
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "PrivilegeResource"
        }
      },
      actions: {
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivilegeResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivilegeResource",
    modelProperties: {
      db: {
        serializedName: "db",
        type: {
          name: "String"
        }
      },
      collection: {
        serializedName: "collection",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Role: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Role",
    modelProperties: {
      db: {
        serializedName: "db",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoRoleDefinitionCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoRoleDefinitionCreateUpdateParameters",
    modelProperties: {
      roleName: {
        serializedName: "properties.roleName",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "properties.type",
        type: {
          name: "Enum",
          allowedValues: ["BuiltInRole", "CustomRole"]
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      privileges: {
        serializedName: "properties.privileges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Privilege"
            }
          }
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Role"
            }
          }
        }
      }
    }
  }
};

export const MongoRoleDefinitionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoRoleDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoRoleDefinitionGetResults"
            }
          }
        }
      }
    }
  }
};

export const MongoUserDefinitionCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoUserDefinitionCreateUpdateParameters",
    modelProperties: {
      userName: {
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      customData: {
        serializedName: "properties.customData",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Role"
            }
          }
        }
      },
      mechanisms: {
        serializedName: "properties.mechanisms",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoUserDefinitionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoUserDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoUserDefinitionGetResults"
            }
          }
        }
      }
    }
  }
};

export const NotebookWorkspaceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookWorkspaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NotebookWorkspace"
            }
          }
        }
      }
    }
  }
};

export const NotebookWorkspaceConnectionInfoResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookWorkspaceConnectionInfoResult",
    modelProperties: {
      authToken: {
        serializedName: "authToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      notebookServerEndpoint: {
        serializedName: "notebookServerEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const Permission: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Permission",
    modelProperties: {
      dataActions: {
        serializedName: "dataActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      notDataActions: {
        serializedName: "notDataActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SqlRoleDefinitionCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlRoleDefinitionCreateUpdateParameters",
    modelProperties: {
      roleName: {
        serializedName: "properties.roleName",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "properties.type",
        type: {
          name: "Enum",
          allowedValues: ["BuiltInRole", "CustomRole"]
        }
      },
      assignableScopes: {
        serializedName: "properties.assignableScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      permissions: {
        serializedName: "properties.permissions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Permission"
            }
          }
        }
      }
    }
  }
};

export const SqlRoleDefinitionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlRoleDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlRoleDefinitionGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlRoleAssignmentCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlRoleAssignmentCreateUpdateParameters",
    modelProperties: {
      roleDefinitionId: {
        serializedName: "properties.roleDefinitionId",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlRoleAssignmentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlRoleAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlRoleAssignmentGetResults"
            }
          }
        }
      }
    }
  }
};

export const RestorableDatabaseAccountsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableDatabaseAccountsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableDatabaseAccountGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableDatabaseAccountGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableDatabaseAccountGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "properties.accountName",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      deletionTime: {
        serializedName: "properties.deletionTime",
        type: {
          name: "DateTime"
        }
      },
      apiType: {
        serializedName: "properties.apiType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restorableLocations: {
        serializedName: "properties.restorableLocations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableLocationResource"
            }
          }
        }
      }
    }
  }
};

export const RestorableLocationResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableLocationResource",
    modelProperties: {
      locationName: {
        serializedName: "locationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      regionalDatabaseAccountInstanceId: {
        serializedName: "regionalDatabaseAccountInstanceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      deletionTime: {
        serializedName: "deletionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ContinuousBackupRestoreLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContinuousBackupRestoreLocation",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInformation",
    modelProperties: {
      continuousBackupInformation: {
        serializedName: "continuousBackupInformation",
        type: {
          name: "Composite",
          className: "ContinuousBackupInformation"
        }
      }
    }
  }
};

export const ContinuousBackupInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContinuousBackupInformation",
    modelProperties: {
      latestRestorableTimestamp: {
        serializedName: "latestRestorableTimestamp",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableSqlDatabasesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableSqlDatabasesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableSqlDatabaseGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableSqlDatabaseGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableSqlDatabaseGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableSqlDatabasePropertiesResource"
        }
      }
    }
  }
};

export const RestorableSqlDatabasePropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableSqlDatabasePropertiesResource",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "operationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        serializedName: "eventTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerId: {
        serializedName: "ownerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        serializedName: "ownerResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "database",
        type: {
          name: "Composite",
          className: "RestorableSqlDatabasePropertiesResourceDatabase"
        }
      }
    }
  }
};

export const RestorableSqlContainersListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableSqlContainersListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableSqlContainerGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableSqlContainerGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableSqlContainerGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableSqlContainerPropertiesResource"
        }
      }
    }
  }
};

export const RestorableSqlContainerPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableSqlContainerPropertiesResource",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "operationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        serializedName: "eventTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerId: {
        serializedName: "ownerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        serializedName: "ownerResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      container: {
        serializedName: "container",
        type: {
          name: "Composite",
          className: "RestorableSqlContainerPropertiesResourceContainer"
        }
      }
    }
  }
};

export const RestorableSqlResourcesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableSqlResourcesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableSqlResourcesGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableSqlResourcesGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableSqlResourcesGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      collectionNames: {
        serializedName: "collectionNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RestorableMongodbDatabasesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableMongodbDatabasesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableMongodbDatabaseGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableMongodbDatabaseGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableMongodbDatabaseGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableMongodbDatabasePropertiesResource"
        }
      }
    }
  }
};

export const RestorableMongodbDatabasePropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableMongodbDatabasePropertiesResource",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "operationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        serializedName: "eventTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerId: {
        serializedName: "ownerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        serializedName: "ownerResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableMongodbCollectionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableMongodbCollectionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableMongodbCollectionGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableMongodbCollectionGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableMongodbCollectionGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableMongodbCollectionPropertiesResource"
        }
      }
    }
  }
};

export const RestorableMongodbCollectionPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableMongodbCollectionPropertiesResource",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "operationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        serializedName: "eventTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerId: {
        serializedName: "ownerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        serializedName: "ownerResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableMongodbResourcesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableMongodbResourcesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableMongodbResourcesGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableMongodbResourcesGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableMongodbResourcesGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      collectionNames: {
        serializedName: "collectionNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RestorableGremlinDatabasesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableGremlinDatabasesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableGremlinDatabaseGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableGremlinDatabaseGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableGremlinDatabaseGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableGremlinDatabasePropertiesResource"
        }
      }
    }
  }
};

export const RestorableGremlinDatabasePropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableGremlinDatabasePropertiesResource",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "operationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        serializedName: "eventTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerId: {
        serializedName: "ownerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        serializedName: "ownerResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableGremlinGraphsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableGremlinGraphsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableGremlinGraphGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableGremlinGraphGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableGremlinGraphGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableGremlinGraphPropertiesResource"
        }
      }
    }
  }
};

export const RestorableGremlinGraphPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableGremlinGraphPropertiesResource",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "operationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        serializedName: "eventTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerId: {
        serializedName: "ownerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        serializedName: "ownerResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableGremlinResourcesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableGremlinResourcesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableGremlinResourcesGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableGremlinResourcesGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableGremlinResourcesGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      graphNames: {
        serializedName: "graphNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RestorableTablesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableTablesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableTableGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableTableGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableTableGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "RestorableTablePropertiesResource"
        }
      }
    }
  }
};

export const RestorableTablePropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableTablePropertiesResource",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "operationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        serializedName: "eventTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerId: {
        serializedName: "ownerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ownerResourceId: {
        serializedName: "ownerResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableTableResourcesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableTableResourcesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableTableResourcesGetResult"
            }
          }
        }
      }
    }
  }
};

export const RestorableTableResourcesGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableTableResourcesGetResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceResource"
            }
          }
        }
      }
    }
  }
};

export const ServiceResourceProperties: coreClient.CompositeMapper = {
  serializedName: "ServiceResourceProperties",
  type: {
    name: "Composite",
    className: "ServiceResourceProperties",
    uberParent: "ServiceResourceProperties",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: {
      serializedName: "serviceType",
      clientName: "serviceType"
    },
    modelProperties: {
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      instanceSize: {
        serializedName: "instanceSize",
        type: {
          name: "String"
        }
      },
      instanceCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "instanceCount",
        type: {
          name: "Number"
        }
      },
      serviceType: {
        serializedName: "serviceType",
        required: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceResourceCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourceCreateUpdateParameters",
    modelProperties: {
      instanceSize: {
        serializedName: "properties.instanceSize",
        type: {
          name: "String"
        }
      },
      instanceCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "properties.instanceCount",
        type: {
          name: "Number"
        }
      },
      serviceType: {
        serializedName: "properties.serviceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeriodicModeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeriodicModeProperties",
    modelProperties: {
      backupIntervalInMinutes: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "backupIntervalInMinutes",
        type: {
          name: "Number"
        }
      },
      backupRetentionIntervalInHours: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "backupRetentionIntervalInHours",
        type: {
          name: "Number"
        }
      },
      backupStorageRedundancy: {
        serializedName: "backupStorageRedundancy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataTransferServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataTransferServiceResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataTransferServiceResourceProperties"
        }
      }
    }
  }
};

export const RegionalServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegionalServiceResource",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDedicatedGatewayServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDedicatedGatewayServiceResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SqlDedicatedGatewayServiceResourceProperties"
        }
      }
    }
  }
};

export const GraphAPIComputeServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GraphAPIComputeServiceResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GraphAPIComputeServiceResourceProperties"
        }
      }
    }
  }
};

export const MaterializedViewsBuilderServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaterializedViewsBuilderServiceResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MaterializedViewsBuilderServiceResourceProperties"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const PeriodicModeBackupPolicy: coreClient.CompositeMapper = {
  serializedName: "Periodic",
  type: {
    name: "Composite",
    className: "PeriodicModeBackupPolicy",
    uberParent: "BackupPolicy",
    polymorphicDiscriminator: BackupPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupPolicy.type.modelProperties,
      periodicModeProperties: {
        serializedName: "periodicModeProperties",
        type: {
          name: "Composite",
          className: "PeriodicModeProperties"
        }
      }
    }
  }
};

export const ContinuousModeBackupPolicy: coreClient.CompositeMapper = {
  serializedName: "Continuous",
  type: {
    name: "Composite",
    className: "ContinuousModeBackupPolicy",
    uberParent: "BackupPolicy",
    polymorphicDiscriminator: BackupPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupPolicy.type.modelProperties
    }
  }
};

export const DatabaseAccountGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      documentEndpoint: {
        serializedName: "properties.documentEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseAccountOfferType: {
        defaultValue: "Standard",
        isConstant: true,
        serializedName: "properties.databaseAccountOfferType",
        type: {
          name: "String"
        }
      },
      ipRules: {
        serializedName: "properties.ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpAddressOrRange"
            }
          }
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      consistencyPolicy: {
        serializedName: "properties.consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      writeLocations: {
        serializedName: "properties.writeLocations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      readLocations: {
        serializedName: "properties.readLocations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      locations: {
        serializedName: "properties.locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      failoverPolicies: {
        serializedName: "properties.failoverPolicies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverPolicy"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      },
      enableCassandraConnector: {
        serializedName: "properties.enableCassandraConnector",
        type: {
          name: "Boolean"
        }
      },
      connectorOffer: {
        serializedName: "properties.connectorOffer",
        type: {
          name: "String"
        }
      },
      disableKeyBasedMetadataWriteAccess: {
        serializedName: "properties.disableKeyBasedMetadataWriteAccess",
        type: {
          name: "Boolean"
        }
      },
      keyVaultKeyUri: {
        serializedName: "properties.keyVaultKeyUri",
        type: {
          name: "String"
        }
      },
      defaultIdentity: {
        serializedName: "properties.defaultIdentity",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      enableFreeTier: {
        serializedName: "properties.enableFreeTier",
        type: {
          name: "Boolean"
        }
      },
      apiProperties: {
        serializedName: "properties.apiProperties",
        type: {
          name: "Composite",
          className: "ApiProperties"
        }
      },
      enableAnalyticalStorage: {
        serializedName: "properties.enableAnalyticalStorage",
        type: {
          name: "Boolean"
        }
      },
      analyticalStorageConfiguration: {
        serializedName: "properties.analyticalStorageConfiguration",
        type: {
          name: "Composite",
          className: "AnalyticalStorageConfiguration"
        }
      },
      instanceId: {
        serializedName: "properties.instanceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createMode: {
        defaultValue: "Default",
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      restoreParameters: {
        serializedName: "properties.restoreParameters",
        type: {
          name: "Composite",
          className: "RestoreParameters"
        }
      },
      backupPolicy: {
        serializedName: "properties.backupPolicy",
        type: {
          name: "Composite",
          className: "BackupPolicy"
        }
      },
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsPolicy"
            }
          }
        }
      },
      networkAclBypass: {
        serializedName: "properties.networkAclBypass",
        type: {
          name: "Enum",
          allowedValues: ["None", "AzureServices"]
        }
      },
      networkAclBypassResourceIds: {
        serializedName: "properties.networkAclBypassResourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      disableLocalAuth: {
        serializedName: "properties.disableLocalAuth",
        type: {
          name: "Boolean"
        }
      },
      capacity: {
        serializedName: "properties.capacity",
        type: {
          name: "Composite",
          className: "Capacity"
        }
      },
      keysMetadata: {
        serializedName: "properties.keysMetadata",
        type: {
          name: "Composite",
          className: "DatabaseAccountKeysMetadata"
        }
      },
      enablePartitionMerge: {
        serializedName: "properties.enablePartitionMerge",
        type: {
          name: "Boolean"
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      consistencyPolicy: {
        serializedName: "properties.consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      locations: {
        serializedName: "properties.locations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      databaseAccountOfferType: {
        defaultValue: "Standard",
        isConstant: true,
        serializedName: "properties.databaseAccountOfferType",
        type: {
          name: "String"
        }
      },
      ipRules: {
        serializedName: "properties.ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpAddressOrRange"
            }
          }
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      },
      enableCassandraConnector: {
        serializedName: "properties.enableCassandraConnector",
        type: {
          name: "Boolean"
        }
      },
      connectorOffer: {
        serializedName: "properties.connectorOffer",
        type: {
          name: "String"
        }
      },
      disableKeyBasedMetadataWriteAccess: {
        serializedName: "properties.disableKeyBasedMetadataWriteAccess",
        type: {
          name: "Boolean"
        }
      },
      keyVaultKeyUri: {
        serializedName: "properties.keyVaultKeyUri",
        type: {
          name: "String"
        }
      },
      defaultIdentity: {
        serializedName: "properties.defaultIdentity",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      enableFreeTier: {
        serializedName: "properties.enableFreeTier",
        type: {
          name: "Boolean"
        }
      },
      apiProperties: {
        serializedName: "properties.apiProperties",
        type: {
          name: "Composite",
          className: "ApiProperties"
        }
      },
      enableAnalyticalStorage: {
        serializedName: "properties.enableAnalyticalStorage",
        type: {
          name: "Boolean"
        }
      },
      analyticalStorageConfiguration: {
        serializedName: "properties.analyticalStorageConfiguration",
        type: {
          name: "Composite",
          className: "AnalyticalStorageConfiguration"
        }
      },
      createMode: {
        defaultValue: "Default",
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      backupPolicy: {
        serializedName: "properties.backupPolicy",
        type: {
          name: "Composite",
          className: "BackupPolicy"
        }
      },
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsPolicy"
            }
          }
        }
      },
      networkAclBypass: {
        serializedName: "properties.networkAclBypass",
        type: {
          name: "Enum",
          allowedValues: ["None", "AzureServices"]
        }
      },
      networkAclBypassResourceIds: {
        serializedName: "properties.networkAclBypassResourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      disableLocalAuth: {
        serializedName: "properties.disableLocalAuth",
        type: {
          name: "Boolean"
        }
      },
      restoreParameters: {
        serializedName: "properties.restoreParameters",
        type: {
          name: "Composite",
          className: "RestoreParameters"
        }
      },
      capacity: {
        serializedName: "properties.capacity",
        type: {
          name: "Composite",
          className: "Capacity"
        }
      },
      keysMetadata: {
        serializedName: "properties.keysMetadata",
        type: {
          name: "Composite",
          className: "DatabaseAccountKeysMetadata"
        }
      },
      enablePartitionMerge: {
        serializedName: "properties.enablePartitionMerge",
        type: {
          name: "Boolean"
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDatabaseGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlDatabaseGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "SqlDatabaseGetPropertiesOptions"
        }
      }
    }
  }
};

export const SqlDatabaseCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlDatabaseResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const ThroughputSettingsGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThroughputSettingsGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "ThroughputSettingsGetPropertiesResource"
        }
      }
    }
  }
};

export const ThroughputSettingsUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThroughputSettingsUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "ThroughputSettingsResource"
        }
      }
    }
  }
};

export const SqlContainerGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlContainerGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "SqlContainerGetPropertiesOptions"
        }
      }
    }
  }
};

export const SqlContainerCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlContainerResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const SqlStoredProcedureGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlStoredProcedureGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlStoredProcedureGetPropertiesResource"
        }
      }
    }
  }
};

export const SqlStoredProcedureCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlStoredProcedureCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlStoredProcedureResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlUserDefinedFunctionGetPropertiesResource"
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlUserDefinedFunctionResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const SqlTriggerGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlTriggerGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlTriggerGetPropertiesResource"
        }
      }
    }
  }
};

export const SqlTriggerCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlTriggerCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlTriggerResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const MongoDBDatabaseGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "MongoDBDatabaseGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "MongoDBDatabaseGetPropertiesOptions"
        }
      }
    }
  }
};

export const MongoDBDatabaseCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "MongoDBDatabaseResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const MongoDBCollectionGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "MongoDBCollectionGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "MongoDBCollectionGetPropertiesOptions"
        }
      }
    }
  }
};

export const MongoDBCollectionCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "MongoDBCollectionResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const TableGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "TableGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "TableGetPropertiesOptions"
        }
      }
    }
  }
};

export const TableCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "TableResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const CassandraKeyspaceGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "CassandraKeyspaceGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CassandraKeyspaceGetPropertiesOptions"
        }
      }
    }
  }
};

export const CassandraKeyspaceCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "CassandraKeyspaceResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const CassandraTableGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "CassandraTableGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CassandraTableGetPropertiesOptions"
        }
      }
    }
  }
};

export const CassandraTableCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "CassandraTableResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const GremlinDatabaseGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "GremlinDatabaseGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "GremlinDatabaseGetPropertiesOptions"
        }
      }
    }
  }
};

export const GremlinDatabaseCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "GremlinDatabaseResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const GremlinGraphGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "GremlinGraphGetPropertiesResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "GremlinGraphGetPropertiesOptions"
        }
      }
    }
  }
};

export const GremlinGraphCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "GremlinGraphResource"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const DatabaseAccountListKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountListKeysResult",
    modelProperties: {
      ...DatabaseAccountListReadOnlyKeysResult.type.modelProperties,
      primaryMasterKey: {
        serializedName: "primaryMasterKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryMasterKey: {
        serializedName: "secondaryMasterKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartitionMetric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionMetric",
    modelProperties: {
      ...Metric.type.modelProperties,
      partitionId: {
        serializedName: "partitionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partitionKeyRangeId: {
        serializedName: "partitionKeyRangeId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PercentileMetricValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PercentileMetricValue",
    modelProperties: {
      ...MetricValue.type.modelProperties,
      p10: {
        serializedName: "P10",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p25: {
        serializedName: "P25",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p50: {
        serializedName: "P50",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p75: {
        serializedName: "P75",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p90: {
        serializedName: "P90",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p95: {
        serializedName: "P95",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p99: {
        serializedName: "P99",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PartitionUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionUsage",
    modelProperties: {
      ...Usage.type.modelProperties,
      partitionId: {
        serializedName: "partitionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partitionKeyRangeId: {
        serializedName: "partitionKeyRangeId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDatabaseGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseGetPropertiesResource",
    modelProperties: {
      ...SqlDatabaseResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties,
      colls: {
        serializedName: "_colls",
        type: {
          name: "String"
        }
      },
      users: {
        serializedName: "_users",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableSqlDatabasePropertiesResourceDatabase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableSqlDatabasePropertiesResourceDatabase",
    modelProperties: {
      ...SqlDatabaseResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties,
      colls: {
        serializedName: "_colls",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      users: {
        serializedName: "_users",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      self: {
        serializedName: "_self",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThroughputSettingsGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThroughputSettingsGetPropertiesResource",
    modelProperties: {
      ...ThroughputSettingsResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const SqlContainerGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerGetPropertiesResource",
    modelProperties: {
      ...SqlContainerResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const ClientEncryptionKeyGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientEncryptionKeyGetPropertiesResource",
    modelProperties: {
      ...ClientEncryptionKeyResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const SqlStoredProcedureGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlStoredProcedureGetPropertiesResource",
    modelProperties: {
      ...SqlStoredProcedureResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const SqlUserDefinedFunctionGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionGetPropertiesResource",
    modelProperties: {
      ...SqlUserDefinedFunctionResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const SqlTriggerGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlTriggerGetPropertiesResource",
    modelProperties: {
      ...SqlTriggerResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const MongoDBDatabaseGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseGetPropertiesResource",
    modelProperties: {
      ...MongoDBDatabaseResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const MongoDBCollectionGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionGetPropertiesResource",
    modelProperties: {
      ...MongoDBCollectionResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const TableGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableGetPropertiesResource",
    modelProperties: {
      ...TableResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const CassandraKeyspaceGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceGetPropertiesResource",
    modelProperties: {
      ...CassandraKeyspaceResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const CassandraTableGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableGetPropertiesResource",
    modelProperties: {
      ...CassandraTableResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const GremlinDatabaseGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseGetPropertiesResource",
    modelProperties: {
      ...GremlinDatabaseResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const GremlinGraphGetPropertiesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphGetPropertiesResource",
    modelProperties: {
      ...GremlinGraphResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const RestorableSqlContainerPropertiesResourceContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableSqlContainerPropertiesResourceContainer",
    modelProperties: {
      ...SqlContainerResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties,
      self: {
        serializedName: "_self",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDatabaseGetPropertiesOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const SqlContainerGetPropertiesOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const MongoDBDatabaseGetPropertiesOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const MongoDBCollectionGetPropertiesOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const TableGetPropertiesOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const CassandraKeyspaceGetPropertiesOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const CassandraTableGetPropertiesOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const GremlinDatabaseGetPropertiesOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const GremlinGraphGetPropertiesOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const ClientEncryptionKeyGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientEncryptionKeyGetResults",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "ClientEncryptionKeyGetPropertiesResource"
        }
      }
    }
  }
};

export const LocationGetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocationGetResult",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LocationProperties"
        }
      }
    }
  }
};

export const DataCenterResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataCenterResource",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataCenterResourceProperties"
        }
      }
    }
  }
};

export const MongoRoleDefinitionGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoRoleDefinitionGetResults",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      roleName: {
        serializedName: "properties.roleName",
        type: {
          name: "String"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "Enum",
          allowedValues: ["BuiltInRole", "CustomRole"]
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      privileges: {
        serializedName: "properties.privileges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Privilege"
            }
          }
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Role"
            }
          }
        }
      }
    }
  }
};

export const MongoUserDefinitionGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoUserDefinitionGetResults",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      userName: {
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      customData: {
        serializedName: "properties.customData",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Role"
            }
          }
        }
      },
      mechanisms: {
        serializedName: "properties.mechanisms",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotebookWorkspace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookWorkspace",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      notebookServerEndpoint: {
        serializedName: "properties.notebookServerEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotebookWorkspaceCreateUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookWorkspaceCreateUpdateParameters",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SqlRoleDefinitionGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlRoleDefinitionGetResults",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      roleName: {
        serializedName: "properties.roleName",
        type: {
          name: "String"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "Enum",
          allowedValues: ["BuiltInRole", "CustomRole"]
        }
      },
      assignableScopes: {
        serializedName: "properties.assignableScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      permissions: {
        serializedName: "properties.permissions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Permission"
            }
          }
        }
      }
    }
  }
};

export const SqlRoleAssignmentGetResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlRoleAssignmentGetResults",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      roleDefinitionId: {
        serializedName: "properties.roleDefinitionId",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResource",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServiceResourceProperties"
        }
      }
    }
  }
};

export const ClusterResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterResource",
    modelProperties: {
      ...ManagedCassandraARMResourceProperties.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterResourceProperties"
        }
      }
    }
  }
};

export const DataTransferServiceResourceProperties: coreClient.CompositeMapper = {
  serializedName: "DataTransfer",
  type: {
    name: "Composite",
    className: "DataTransferServiceResourceProperties",
    uberParent: "ServiceResourceProperties",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator:
      ServiceResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServiceResourceProperties.type.modelProperties,
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataTransferRegionalServiceResource"
            }
          }
        }
      }
    }
  }
};

export const SqlDedicatedGatewayServiceResourceProperties: coreClient.CompositeMapper = {
  serializedName: "SqlDedicatedGateway",
  type: {
    name: "Composite",
    className: "SqlDedicatedGatewayServiceResourceProperties",
    uberParent: "ServiceResourceProperties",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator:
      ServiceResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServiceResourceProperties.type.modelProperties,
      sqlDedicatedGatewayEndpoint: {
        serializedName: "sqlDedicatedGatewayEndpoint",
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlDedicatedGatewayRegionalServiceResource"
            }
          }
        }
      }
    }
  }
};

export const GraphAPIComputeServiceResourceProperties: coreClient.CompositeMapper = {
  serializedName: "GraphAPICompute",
  type: {
    name: "Composite",
    className: "GraphAPIComputeServiceResourceProperties",
    uberParent: "ServiceResourceProperties",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator:
      ServiceResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServiceResourceProperties.type.modelProperties,
      graphApiComputeEndpoint: {
        serializedName: "graphApiComputeEndpoint",
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GraphAPIComputeRegionalServiceResource"
            }
          }
        }
      }
    }
  }
};

export const MaterializedViewsBuilderServiceResourceProperties: coreClient.CompositeMapper = {
  serializedName: "MaterializedViewsBuilder",
  type: {
    name: "Composite",
    className: "MaterializedViewsBuilderServiceResourceProperties",
    uberParent: "ServiceResourceProperties",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator:
      ServiceResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServiceResourceProperties.type.modelProperties,
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaterializedViewsBuilderRegionalServiceResource"
            }
          }
        }
      }
    }
  }
};

export const DataTransferRegionalServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataTransferRegionalServiceResource",
    modelProperties: {
      ...RegionalServiceResource.type.modelProperties
    }
  }
};

export const SqlDedicatedGatewayRegionalServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDedicatedGatewayRegionalServiceResource",
    modelProperties: {
      ...RegionalServiceResource.type.modelProperties,
      sqlDedicatedGatewayEndpoint: {
        serializedName: "sqlDedicatedGatewayEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GraphAPIComputeRegionalServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GraphAPIComputeRegionalServiceResource",
    modelProperties: {
      ...RegionalServiceResource.type.modelProperties,
      graphApiComputeEndpoint: {
        serializedName: "graphApiComputeEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaterializedViewsBuilderRegionalServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaterializedViewsBuilderRegionalServiceResource",
    modelProperties: {
      ...RegionalServiceResource.type.modelProperties
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionStateProperty"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountsFailoverPriorityChangeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountsFailoverPriorityChangeHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountsOfflineRegionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountsOfflineRegionHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountsOnlineRegionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountsOnlineRegionHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountsRegenerateKeyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountsRegenerateKeyHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesCreateUpdateSqlDatabaseHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesCreateUpdateSqlDatabaseHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesDeleteSqlDatabaseHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesDeleteSqlDatabaseHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesUpdateSqlDatabaseThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesUpdateSqlDatabaseThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesMigrateSqlDatabaseToAutoscaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesMigrateSqlDatabaseToAutoscaleHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesMigrateSqlDatabaseToManualThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesMigrateSqlDatabaseToManualThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesCreateUpdateSqlContainerHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesCreateUpdateSqlContainerHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesDeleteSqlContainerHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesDeleteSqlContainerHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesUpdateSqlContainerThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesUpdateSqlContainerThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesMigrateSqlContainerToAutoscaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesMigrateSqlContainerToAutoscaleHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesMigrateSqlContainerToManualThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesMigrateSqlContainerToManualThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesCreateUpdateClientEncryptionKeyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesCreateUpdateClientEncryptionKeyHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesCreateUpdateSqlStoredProcedureHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesCreateUpdateSqlStoredProcedureHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesDeleteSqlStoredProcedureHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesDeleteSqlStoredProcedureHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesCreateUpdateSqlUserDefinedFunctionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesCreateUpdateSqlUserDefinedFunctionHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesDeleteSqlUserDefinedFunctionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesDeleteSqlUserDefinedFunctionHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesCreateUpdateSqlTriggerHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesCreateUpdateSqlTriggerHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlResourcesDeleteSqlTriggerHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlResourcesDeleteSqlTriggerHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBResourcesCreateUpdateMongoDBDatabaseHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBResourcesCreateUpdateMongoDBDatabaseHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBResourcesDeleteMongoDBDatabaseHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBResourcesDeleteMongoDBDatabaseHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBResourcesUpdateMongoDBDatabaseThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBResourcesUpdateMongoDBDatabaseThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBResourcesCreateUpdateMongoDBCollectionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBResourcesCreateUpdateMongoDBCollectionHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBResourcesDeleteMongoDBCollectionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBResourcesDeleteMongoDBCollectionHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBResourcesUpdateMongoDBCollectionThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBResourcesUpdateMongoDBCollectionThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBResourcesMigrateMongoDBCollectionToAutoscaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBResourcesMigrateMongoDBCollectionToAutoscaleHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBResourcesMigrateMongoDBCollectionToManualThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "MongoDBResourcesMigrateMongoDBCollectionToManualThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableResourcesCreateUpdateTableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableResourcesCreateUpdateTableHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableResourcesDeleteTableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableResourcesDeleteTableHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableResourcesUpdateTableThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableResourcesUpdateTableThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableResourcesMigrateTableToAutoscaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableResourcesMigrateTableToAutoscaleHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableResourcesMigrateTableToManualThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableResourcesMigrateTableToManualThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraResourcesCreateUpdateCassandraKeyspaceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraResourcesCreateUpdateCassandraKeyspaceHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraResourcesDeleteCassandraKeyspaceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraResourcesDeleteCassandraKeyspaceHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraResourcesUpdateCassandraKeyspaceThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraResourcesUpdateCassandraKeyspaceThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraResourcesMigrateCassandraKeyspaceToAutoscaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraResourcesMigrateCassandraKeyspaceToAutoscaleHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraResourcesMigrateCassandraKeyspaceToManualThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "CassandraResourcesMigrateCassandraKeyspaceToManualThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraResourcesCreateUpdateCassandraTableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraResourcesCreateUpdateCassandraTableHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraResourcesDeleteCassandraTableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraResourcesDeleteCassandraTableHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraResourcesUpdateCassandraTableThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraResourcesUpdateCassandraTableThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraResourcesMigrateCassandraTableToAutoscaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraResourcesMigrateCassandraTableToAutoscaleHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraResourcesMigrateCassandraTableToManualThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "CassandraResourcesMigrateCassandraTableToManualThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinResourcesCreateUpdateGremlinDatabaseHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinResourcesCreateUpdateGremlinDatabaseHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinResourcesDeleteGremlinDatabaseHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinResourcesDeleteGremlinDatabaseHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinResourcesUpdateGremlinDatabaseThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinResourcesUpdateGremlinDatabaseThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinResourcesMigrateGremlinDatabaseToAutoscaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinResourcesMigrateGremlinDatabaseToAutoscaleHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinResourcesMigrateGremlinDatabaseToManualThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "GremlinResourcesMigrateGremlinDatabaseToManualThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinResourcesCreateUpdateGremlinGraphHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinResourcesCreateUpdateGremlinGraphHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinResourcesDeleteGremlinGraphHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinResourcesDeleteGremlinGraphHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinResourcesUpdateGremlinGraphThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinResourcesUpdateGremlinGraphThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinResourcesMigrateGremlinGraphToAutoscaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinResourcesMigrateGremlinGraphToAutoscaleHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinResourcesMigrateGremlinGraphToManualThroughputHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinResourcesMigrateGremlinGraphToManualThroughputHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  BackupPolicy: BackupPolicy,
  ServiceResourceProperties: ServiceResourceProperties,
  "BackupPolicy.Periodic": PeriodicModeBackupPolicy,
  "BackupPolicy.Continuous": ContinuousModeBackupPolicy,
  "ServiceResourceProperties.DataTransfer": DataTransferServiceResourceProperties,
  "ServiceResourceProperties.SqlDedicatedGateway": SqlDedicatedGatewayServiceResourceProperties,
  "ServiceResourceProperties.GraphAPICompute": GraphAPIComputeServiceResourceProperties,
  "ServiceResourceProperties.MaterializedViewsBuilder": MaterializedViewsBuilderServiceResourceProperties
};
