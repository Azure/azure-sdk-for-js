/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const ConsistencyPolicy: msRest.CompositeMapper = {
  serializedName: "ConsistencyPolicy",
  type: {
    name: "Composite",
    className: "ConsistencyPolicy",
    modelProperties: {
      defaultConsistencyLevel: {
        required: true,
        serializedName: "defaultConsistencyLevel",
        type: {
          name: "Enum",
          allowedValues: [
            "Eventual",
            "Session",
            "BoundedStaleness",
            "Strong",
            "ConsistentPrefix"
          ]
        }
      },
      maxStalenessPrefix: {
        serializedName: "maxStalenessPrefix",
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      maxIntervalInSeconds: {
        serializedName: "maxIntervalInSeconds",
        constraints: {
          InclusiveMaximum: 86400,
          InclusiveMinimum: 5
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Capability: msRest.CompositeMapper = {
  serializedName: "Capability",
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Location: msRest.CompositeMapper = {
  serializedName: "Location",
  type: {
    name: "Composite",
    className: "Location",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      locationName: {
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      documentEndpoint: {
        readOnly: true,
        serializedName: "documentEndpoint",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        serializedName: "failoverPriority",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      isZoneRedundant: {
        serializedName: "isZoneRedundant",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FailoverPolicy: msRest.CompositeMapper = {
  serializedName: "FailoverPolicy",
  type: {
    name: "Composite",
    className: "FailoverPolicy",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      locationName: {
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        serializedName: "failoverPriority",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualNetworkRule: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      ignoreMissingVNetServiceEndpoint: {
        serializedName: "ignoreMissingVNetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccount: msRest.CompositeMapper = {
  serializedName: "DatabaseAccount",
  type: {
    name: "Composite",
    className: "DatabaseAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        defaultValue: 'GlobalDocumentDB',
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      documentEndpoint: {
        readOnly: true,
        serializedName: "properties.documentEndpoint",
        type: {
          name: "String"
        }
      },
      databaseAccountOfferType: {
        readOnly: true,
        serializedName: "properties.databaseAccountOfferType",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard"
          ]
        }
      },
      ipRangeFilter: {
        serializedName: "properties.ipRangeFilter",
        type: {
          name: "String"
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      consistencyPolicy: {
        serializedName: "properties.consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      writeLocations: {
        readOnly: true,
        serializedName: "properties.writeLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      readLocations: {
        readOnly: true,
        serializedName: "properties.readLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      failoverPolicies: {
        readOnly: true,
        serializedName: "properties.failoverPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverPolicy"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SqlDatabase: msRest.CompositeMapper = {
  serializedName: "SqlDatabase",
  type: {
    name: "Composite",
    className: "SqlDatabase",
    modelProperties: {
      ...Resource.type.modelProperties,
      sqlDatabaseId: {
        required: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      _rid: {
        serializedName: "properties._rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        serializedName: "properties._ts",
        type: {
          name: "Object"
        }
      },
      _etag: {
        serializedName: "properties._etag",
        type: {
          name: "String"
        }
      },
      _colls: {
        serializedName: "properties._colls",
        type: {
          name: "String"
        }
      },
      _users: {
        serializedName: "properties._users",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Indexes: msRest.CompositeMapper = {
  serializedName: "Indexes",
  type: {
    name: "Composite",
    className: "Indexes",
    modelProperties: {
      dataType: {
        serializedName: "dataType",
        defaultValue: 'String',
        type: {
          name: "String"
        }
      },
      precision: {
        serializedName: "precision",
        type: {
          name: "Number"
        }
      },
      kind: {
        serializedName: "kind",
        defaultValue: 'Hash',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IncludedPath: msRest.CompositeMapper = {
  serializedName: "IncludedPath",
  type: {
    name: "Composite",
    className: "IncludedPath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      indexes: {
        serializedName: "indexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Indexes"
            }
          }
        }
      }
    }
  }
};

export const ExcludedPath: msRest.CompositeMapper = {
  serializedName: "ExcludedPath",
  type: {
    name: "Composite",
    className: "ExcludedPath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IndexingPolicy: msRest.CompositeMapper = {
  serializedName: "IndexingPolicy",
  type: {
    name: "Composite",
    className: "IndexingPolicy",
    modelProperties: {
      automatic: {
        serializedName: "automatic",
        type: {
          name: "Boolean"
        }
      },
      indexingMode: {
        serializedName: "indexingMode",
        defaultValue: 'Consistent',
        type: {
          name: "String"
        }
      },
      includedPaths: {
        serializedName: "includedPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IncludedPath"
            }
          }
        }
      },
      excludedPaths: {
        serializedName: "excludedPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExcludedPath"
            }
          }
        }
      }
    }
  }
};

export const ContainerPartitionKey: msRest.CompositeMapper = {
  serializedName: "ContainerPartitionKey",
  type: {
    name: "Composite",
    className: "ContainerPartitionKey",
    modelProperties: {
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kind: {
        serializedName: "kind",
        defaultValue: 'Hash',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UniqueKey: msRest.CompositeMapper = {
  serializedName: "UniqueKey",
  type: {
    name: "Composite",
    className: "UniqueKey",
    modelProperties: {
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UniqueKeyPolicy: msRest.CompositeMapper = {
  serializedName: "UniqueKeyPolicy",
  type: {
    name: "Composite",
    className: "UniqueKeyPolicy",
    modelProperties: {
      uniqueKeys: {
        serializedName: "uniqueKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UniqueKey"
            }
          }
        }
      }
    }
  }
};

export const ConflictResolutionPolicy: msRest.CompositeMapper = {
  serializedName: "ConflictResolutionPolicy",
  type: {
    name: "Composite",
    className: "ConflictResolutionPolicy",
    modelProperties: {
      mode: {
        serializedName: "mode",
        defaultValue: 'LastWriterWins',
        type: {
          name: "String"
        }
      },
      conflictResolutionPath: {
        serializedName: "conflictResolutionPath",
        type: {
          name: "String"
        }
      },
      conflictResolutionProcedure: {
        serializedName: "conflictResolutionProcedure",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlContainer: msRest.CompositeMapper = {
  serializedName: "SqlContainer",
  type: {
    name: "Composite",
    className: "SqlContainer",
    modelProperties: {
      ...Resource.type.modelProperties,
      sqlContainerId: {
        required: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "properties.indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "properties.partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "properties.defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "properties.uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "properties.conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      },
      _rid: {
        serializedName: "properties._rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        serializedName: "properties._ts",
        type: {
          name: "Object"
        }
      },
      _etag: {
        serializedName: "properties._etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBDatabase: msRest.CompositeMapper = {
  serializedName: "MongoDBDatabase",
  type: {
    name: "Composite",
    className: "MongoDBDatabase",
    modelProperties: {
      ...Resource.type.modelProperties,
      mongoDBDatabaseId: {
        required: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBCollection: msRest.CompositeMapper = {
  serializedName: "MongoDBCollection",
  type: {
    name: "Composite",
    className: "MongoDBCollection",
    modelProperties: {
      ...Resource.type.modelProperties,
      mongoDBCollectionId: {
        required: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      shardKey: {
        serializedName: "properties.shardKey",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      indexes: {
        serializedName: "properties.indexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoIndex"
            }
          }
        }
      }
    }
  }
};

export const Table: msRest.CompositeMapper = {
  serializedName: "Table",
  type: {
    name: "Composite",
    className: "Table",
    modelProperties: {
      ...Resource.type.modelProperties,
      tableId: {
        required: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraKeyspace: msRest.CompositeMapper = {
  serializedName: "CassandraKeyspace",
  type: {
    name: "Composite",
    className: "CassandraKeyspace",
    modelProperties: {
      ...Resource.type.modelProperties,
      cassandraKeyspaceId: {
        required: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraTable: msRest.CompositeMapper = {
  serializedName: "CassandraTable",
  type: {
    name: "Composite",
    className: "CassandraTable",
    modelProperties: {
      ...Resource.type.modelProperties,
      cassandraTableId: {
        required: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      defaultTtl: {
        serializedName: "properties.defaultTtl",
        type: {
          name: "Number"
        }
      },
      schema: {
        serializedName: "properties.schema",
        type: {
          name: "Composite",
          className: "CassandraSchema"
        }
      }
    }
  }
};

export const GremlinDatabase: msRest.CompositeMapper = {
  serializedName: "GremlinDatabase",
  type: {
    name: "Composite",
    className: "GremlinDatabase",
    modelProperties: {
      ...Resource.type.modelProperties,
      gremlinDatabaseId: {
        required: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      _rid: {
        serializedName: "properties._rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        serializedName: "properties._ts",
        type: {
          name: "Object"
        }
      },
      _etag: {
        serializedName: "properties._etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinGraph: msRest.CompositeMapper = {
  serializedName: "GremlinGraph",
  type: {
    name: "Composite",
    className: "GremlinGraph",
    modelProperties: {
      ...Resource.type.modelProperties,
      gremlinGraphId: {
        required: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "properties.indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "properties.partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "properties.defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "properties.uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "properties.conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      },
      _rid: {
        serializedName: "properties._rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        serializedName: "properties._ts",
        type: {
          name: "Object"
        }
      },
      _etag: {
        serializedName: "properties._etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverPolicies: msRest.CompositeMapper = {
  serializedName: "FailoverPolicies",
  type: {
    name: "Composite",
    className: "FailoverPolicies",
    modelProperties: {
      failoverPolicies: {
        required: true,
        serializedName: "failoverPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverPolicy"
            }
          }
        }
      }
    }
  }
};

export const RegionForOnlineOffline: msRest.CompositeMapper = {
  serializedName: "RegionForOnlineOffline",
  type: {
    name: "Composite",
    className: "RegionForOnlineOffline",
    modelProperties: {
      region: {
        required: true,
        serializedName: "region",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedResourceProperties: msRest.CompositeMapper = {
  serializedName: "ExtendedResourceProperties",
  type: {
    name: "Composite",
    className: "ExtendedResourceProperties",
    modelProperties: {
      _rid: {
        serializedName: "_rid",
        type: {
          name: "String"
        }
      },
      _ts: {
        serializedName: "_ts",
        type: {
          name: "Object"
        }
      },
      _etag: {
        serializedName: "_etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "DatabaseAccountCreateUpdateParameters",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        defaultValue: 'GlobalDocumentDB',
        type: {
          name: "String"
        }
      },
      consistencyPolicy: {
        serializedName: "properties.consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      locations: {
        required: true,
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      databaseAccountOfferType: {
        required: true,
        isConstant: true,
        serializedName: "properties.databaseAccountOfferType",
        defaultValue: 'Standard',
        type: {
          name: "String"
        }
      },
      ipRangeFilter: {
        serializedName: "properties.ipRangeFilter",
        type: {
          name: "String"
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DatabaseAccountPatchParameters: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountPatchParameters",
  type: {
    name: "Composite",
    className: "DatabaseAccountPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccountListReadOnlyKeysResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountListReadOnlyKeysResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountListReadOnlyKeysResult",
    modelProperties: {
      primaryReadonlyMasterKey: {
        readOnly: true,
        serializedName: "primaryReadonlyMasterKey",
        type: {
          name: "String"
        }
      },
      secondaryReadonlyMasterKey: {
        readOnly: true,
        serializedName: "secondaryReadonlyMasterKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountListKeysResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountListKeysResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountListKeysResult",
    modelProperties: {
      primaryMasterKey: {
        readOnly: true,
        serializedName: "primaryMasterKey",
        type: {
          name: "String"
        }
      },
      secondaryMasterKey: {
        readOnly: true,
        serializedName: "secondaryMasterKey",
        type: {
          name: "String"
        }
      },
      primaryReadonlyMasterKey: {
        readOnly: true,
        serializedName: "properties.primaryReadonlyMasterKey",
        type: {
          name: "String"
        }
      },
      secondaryReadonlyMasterKey: {
        readOnly: true,
        serializedName: "properties.secondaryReadonlyMasterKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountConnectionString: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountConnectionString",
  type: {
    name: "Composite",
    className: "DatabaseAccountConnectionString",
    modelProperties: {
      connectionString: {
        readOnly: true,
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountListConnectionStringsResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountListConnectionStringsResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountListConnectionStringsResult",
    modelProperties: {
      connectionStrings: {
        serializedName: "connectionStrings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseAccountConnectionString"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccountRegenerateKeyParameters: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountRegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "DatabaseAccountRegenerateKeyParameters",
    modelProperties: {
      keyKind: {
        required: true,
        serializedName: "keyKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDatabaseResource: msRest.CompositeMapper = {
  serializedName: "SqlDatabaseResource",
  type: {
    name: "Composite",
    className: "SqlDatabaseResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDatabaseCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "SqlDatabaseCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "SqlDatabaseCreateUpdateParameters",
    modelProperties: {
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlDatabaseResource"
        }
      },
      options: {
        required: true,
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SqlContainerResource: msRest.CompositeMapper = {
  serializedName: "SqlContainerResource",
  type: {
    name: "Composite",
    className: "SqlContainerResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      }
    }
  }
};

export const SqlContainerCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "SqlContainerCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "SqlContainerCreateUpdateParameters",
    modelProperties: {
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "SqlContainerResource"
        }
      },
      options: {
        required: true,
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MongoDBDatabaseResource: msRest.CompositeMapper = {
  serializedName: "MongoDBDatabaseResource",
  type: {
    name: "Composite",
    className: "MongoDBDatabaseResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBDatabaseCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "MongoDBDatabaseCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "MongoDBDatabaseCreateUpdateParameters",
    modelProperties: {
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "MongoDBDatabaseResource"
        }
      },
      options: {
        required: true,
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MongoIndexKeys: msRest.CompositeMapper = {
  serializedName: "MongoIndexKeys",
  type: {
    name: "Composite",
    className: "MongoIndexKeys",
    modelProperties: {
      keys: {
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MongoIndexOptions: msRest.CompositeMapper = {
  serializedName: "MongoIndexOptions",
  type: {
    name: "Composite",
    className: "MongoIndexOptions",
    modelProperties: {
      expireAfterSeconds: {
        serializedName: "expireAfterSeconds",
        type: {
          name: "Number"
        }
      },
      unique: {
        serializedName: "unique",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MongoIndex: msRest.CompositeMapper = {
  serializedName: "MongoIndex",
  type: {
    name: "Composite",
    className: "MongoIndex",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "Composite",
          className: "MongoIndexKeys"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "MongoIndexOptions"
        }
      }
    }
  }
};

export const MongoDBCollectionResource: msRest.CompositeMapper = {
  serializedName: "MongoDBCollectionResource",
  type: {
    name: "Composite",
    className: "MongoDBCollectionResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      shardKey: {
        serializedName: "shardKey",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      indexes: {
        serializedName: "indexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoIndex"
            }
          }
        }
      }
    }
  }
};

export const MongoDBCollectionCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "MongoDBCollectionCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "MongoDBCollectionCreateUpdateParameters",
    modelProperties: {
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "MongoDBCollectionResource"
        }
      },
      options: {
        required: true,
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TableResource: msRest.CompositeMapper = {
  serializedName: "TableResource",
  type: {
    name: "Composite",
    className: "TableResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "TableCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "TableCreateUpdateParameters",
    modelProperties: {
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "TableResource"
        }
      },
      options: {
        required: true,
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CassandraKeyspaceResource: msRest.CompositeMapper = {
  serializedName: "CassandraKeyspaceResource",
  type: {
    name: "Composite",
    className: "CassandraKeyspaceResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraKeyspaceCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "CassandraKeyspaceCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "CassandraKeyspaceCreateUpdateParameters",
    modelProperties: {
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "CassandraKeyspaceResource"
        }
      },
      options: {
        required: true,
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Column: msRest.CompositeMapper = {
  serializedName: "Column",
  type: {
    name: "Composite",
    className: "Column",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraPartitionKey: msRest.CompositeMapper = {
  serializedName: "CassandraPartitionKey",
  type: {
    name: "Composite",
    className: "CassandraPartitionKey",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterKey: msRest.CompositeMapper = {
  serializedName: "ClusterKey",
  type: {
    name: "Composite",
    className: "ClusterKey",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      orderBy: {
        serializedName: "orderBy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraSchema: msRest.CompositeMapper = {
  serializedName: "CassandraSchema",
  type: {
    name: "Composite",
    className: "CassandraSchema",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Column"
            }
          }
        }
      },
      partitionKeys: {
        serializedName: "partitionKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraPartitionKey"
            }
          }
        }
      },
      clusterKeys: {
        serializedName: "clusterKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterKey"
            }
          }
        }
      }
    }
  }
};

export const CassandraTableResource: msRest.CompositeMapper = {
  serializedName: "CassandraTableResource",
  type: {
    name: "Composite",
    className: "CassandraTableResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      schema: {
        serializedName: "schema",
        type: {
          name: "Composite",
          className: "CassandraSchema"
        }
      }
    }
  }
};

export const CassandraTableCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "CassandraTableCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "CassandraTableCreateUpdateParameters",
    modelProperties: {
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "CassandraTableResource"
        }
      },
      options: {
        required: true,
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GremlinDatabaseResource: msRest.CompositeMapper = {
  serializedName: "GremlinDatabaseResource",
  type: {
    name: "Composite",
    className: "GremlinDatabaseResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinDatabaseCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "GremlinDatabaseCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "GremlinDatabaseCreateUpdateParameters",
    modelProperties: {
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "GremlinDatabaseResource"
        }
      },
      options: {
        required: true,
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GremlinGraphResource: msRest.CompositeMapper = {
  serializedName: "GremlinGraphResource",
  type: {
    name: "Composite",
    className: "GremlinGraphResource",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      }
    }
  }
};

export const GremlinGraphCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "GremlinGraphCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "GremlinGraphCreateUpdateParameters",
    modelProperties: {
      resource: {
        required: true,
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "GremlinGraphResource"
        }
      },
      options: {
        required: true,
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "Provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "Resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "Operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "Description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const MetricName: msRest.CompositeMapper = {
  serializedName: "MetricName",
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      quotaPeriod: {
        readOnly: true,
        serializedName: "quotaPeriod",
        type: {
          name: "String"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PartitionUsage: msRest.CompositeMapper = {
  serializedName: "PartitionUsage",
  type: {
    name: "Composite",
    className: "PartitionUsage",
    modelProperties: {
      ...Usage.type.modelProperties,
      partitionId: {
        readOnly: true,
        serializedName: "partitionId",
        type: {
          name: "String"
        }
      },
      partitionKeyRangeId: {
        readOnly: true,
        serializedName: "partitionKeyRangeId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricAvailability: msRest.CompositeMapper = {
  serializedName: "MetricAvailability",
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      retention: {
        readOnly: true,
        serializedName: "retention",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDefinition: msRest.CompositeMapper = {
  serializedName: "MetricDefinition",
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      metricAvailabilities: {
        readOnly: true,
        serializedName: "metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      primaryAggregationType: {
        readOnly: true,
        serializedName: "primaryAggregationType",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      resourceUri: {
        readOnly: true,
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      }
    }
  }
};

export const MetricValue: msRest.CompositeMapper = {
  serializedName: "MetricValue",
  type: {
    name: "Composite",
    className: "MetricValue",
    modelProperties: {
      _count: {
        readOnly: true,
        serializedName: "_count",
        type: {
          name: "Number"
        }
      },
      average: {
        readOnly: true,
        serializedName: "average",
        type: {
          name: "Number"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      minimum: {
        readOnly: true,
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      timestamp: {
        readOnly: true,
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      total: {
        readOnly: true,
        serializedName: "total",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Metric: msRest.CompositeMapper = {
  serializedName: "Metric",
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        readOnly: true,
        serializedName: "metricValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricValue"
            }
          }
        }
      }
    }
  }
};

export const PercentileMetricValue: msRest.CompositeMapper = {
  serializedName: "PercentileMetricValue",
  type: {
    name: "Composite",
    className: "PercentileMetricValue",
    modelProperties: {
      ...MetricValue.type.modelProperties,
      p10: {
        readOnly: true,
        serializedName: "P10",
        type: {
          name: "Number"
        }
      },
      p25: {
        readOnly: true,
        serializedName: "P25",
        type: {
          name: "Number"
        }
      },
      p50: {
        readOnly: true,
        serializedName: "P50",
        type: {
          name: "Number"
        }
      },
      p75: {
        readOnly: true,
        serializedName: "P75",
        type: {
          name: "Number"
        }
      },
      p90: {
        readOnly: true,
        serializedName: "P90",
        type: {
          name: "Number"
        }
      },
      p95: {
        readOnly: true,
        serializedName: "P95",
        type: {
          name: "Number"
        }
      },
      p99: {
        readOnly: true,
        serializedName: "P99",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PercentileMetric: msRest.CompositeMapper = {
  serializedName: "PercentileMetric",
  type: {
    name: "Composite",
    className: "PercentileMetric",
    modelProperties: {
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        readOnly: true,
        serializedName: "metricValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PercentileMetricValue"
            }
          }
        }
      }
    }
  }
};

export const PartitionMetric: msRest.CompositeMapper = {
  serializedName: "PartitionMetric",
  type: {
    name: "Composite",
    className: "PartitionMetric",
    modelProperties: {
      ...Metric.type.modelProperties,
      partitionId: {
        readOnly: true,
        serializedName: "partitionId",
        type: {
          name: "String"
        }
      },
      partitionKeyRangeId: {
        readOnly: true,
        serializedName: "partitionKeyRangeId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountsListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountsListResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseAccount"
            }
          }
        }
      }
    }
  }
};

export const MetricListResult: msRest.CompositeMapper = {
  serializedName: "MetricListResult",
  type: {
    name: "Composite",
    className: "MetricListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metric"
            }
          }
        }
      }
    }
  }
};

export const UsagesResult: msRest.CompositeMapper = {
  serializedName: "UsagesResult",
  type: {
    name: "Composite",
    className: "UsagesResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      }
    }
  }
};

export const MetricDefinitionsListResult: msRest.CompositeMapper = {
  serializedName: "MetricDefinitionsListResult",
  type: {
    name: "Composite",
    className: "MetricDefinitionsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDefinition"
            }
          }
        }
      }
    }
  }
};

export const SqlDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "SqlDatabaseListResult",
  type: {
    name: "Composite",
    className: "SqlDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlDatabase"
            }
          }
        }
      }
    }
  }
};

export const SqlContainerListResult: msRest.CompositeMapper = {
  serializedName: "SqlContainerListResult",
  type: {
    name: "Composite",
    className: "SqlContainerListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlContainer"
            }
          }
        }
      }
    }
  }
};

export const MongoDBDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "MongoDBDatabaseListResult",
  type: {
    name: "Composite",
    className: "MongoDBDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoDBDatabase"
            }
          }
        }
      }
    }
  }
};

export const MongoDBCollectionListResult: msRest.CompositeMapper = {
  serializedName: "MongoDBCollectionListResult",
  type: {
    name: "Composite",
    className: "MongoDBCollectionListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoDBCollection"
            }
          }
        }
      }
    }
  }
};

export const TableListResult: msRest.CompositeMapper = {
  serializedName: "TableListResult",
  type: {
    name: "Composite",
    className: "TableListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Table"
            }
          }
        }
      }
    }
  }
};

export const CassandraKeyspaceListResult: msRest.CompositeMapper = {
  serializedName: "CassandraKeyspaceListResult",
  type: {
    name: "Composite",
    className: "CassandraKeyspaceListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraKeyspace"
            }
          }
        }
      }
    }
  }
};

export const CassandraTableListResult: msRest.CompositeMapper = {
  serializedName: "CassandraTableListResult",
  type: {
    name: "Composite",
    className: "CassandraTableListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraTable"
            }
          }
        }
      }
    }
  }
};

export const GremlinDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "GremlinDatabaseListResult",
  type: {
    name: "Composite",
    className: "GremlinDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GremlinDatabase"
            }
          }
        }
      }
    }
  }
};

export const GremlinGraphListResult: msRest.CompositeMapper = {
  serializedName: "GremlinGraphListResult",
  type: {
    name: "Composite",
    className: "GremlinGraphListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GremlinGraph"
            }
          }
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PercentileMetricListResult: msRest.CompositeMapper = {
  serializedName: "PercentileMetricListResult",
  type: {
    name: "Composite",
    className: "PercentileMetricListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PercentileMetric"
            }
          }
        }
      }
    }
  }
};

export const PartitionMetricListResult: msRest.CompositeMapper = {
  serializedName: "PartitionMetricListResult",
  type: {
    name: "Composite",
    className: "PartitionMetricListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionMetric"
            }
          }
        }
      }
    }
  }
};

export const PartitionUsagesResult: msRest.CompositeMapper = {
  serializedName: "PartitionUsagesResult",
  type: {
    name: "Composite",
    className: "PartitionUsagesResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionUsage"
            }
          }
        }
      }
    }
  }
};
