/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  NotebookWorkspace,
  NotebookWorkspacesListByDatabaseAccountOptionalParams,
  NotebookWorkspaceName,
  NotebookWorkspacesGetOptionalParams,
  NotebookWorkspacesGetResponse,
  NotebookWorkspaceCreateUpdateParameters,
  NotebookWorkspacesCreateOrUpdateOptionalParams,
  NotebookWorkspacesCreateOrUpdateResponse,
  NotebookWorkspacesDeleteOptionalParams,
  NotebookWorkspacesListConnectionInfoOptionalParams,
  NotebookWorkspacesListConnectionInfoResponse,
  NotebookWorkspacesRegenerateAuthTokenOptionalParams,
  NotebookWorkspacesStartOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a NotebookWorkspaces. */
export interface NotebookWorkspaces {
  /**
   * Gets the notebook workspace resources of an existing Cosmos DB account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listByDatabaseAccount(
    resourceGroupName: string,
    accountName: string,
    options?: NotebookWorkspacesListByDatabaseAccountOptionalParams
  ): PagedAsyncIterableIterator<NotebookWorkspace>;
  /**
   * Gets the notebook workspace for a Cosmos DB account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param notebookWorkspaceName The name of the notebook workspace resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    notebookWorkspaceName: NotebookWorkspaceName,
    options?: NotebookWorkspacesGetOptionalParams
  ): Promise<NotebookWorkspacesGetResponse>;
  /**
   * Creates the notebook workspace for a Cosmos DB account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param notebookWorkspaceName The name of the notebook workspace resource.
   * @param notebookCreateUpdateParameters The notebook workspace to create for the current database
   *                                       account.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    accountName: string,
    notebookWorkspaceName: NotebookWorkspaceName,
    notebookCreateUpdateParameters: NotebookWorkspaceCreateUpdateParameters,
    options?: NotebookWorkspacesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<NotebookWorkspacesCreateOrUpdateResponse>,
      NotebookWorkspacesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates the notebook workspace for a Cosmos DB account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param notebookWorkspaceName The name of the notebook workspace resource.
   * @param notebookCreateUpdateParameters The notebook workspace to create for the current database
   *                                       account.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    notebookWorkspaceName: NotebookWorkspaceName,
    notebookCreateUpdateParameters: NotebookWorkspaceCreateUpdateParameters,
    options?: NotebookWorkspacesCreateOrUpdateOptionalParams
  ): Promise<NotebookWorkspacesCreateOrUpdateResponse>;
  /**
   * Deletes the notebook workspace for a Cosmos DB account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param notebookWorkspaceName The name of the notebook workspace resource.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    accountName: string,
    notebookWorkspaceName: NotebookWorkspaceName,
    options?: NotebookWorkspacesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the notebook workspace for a Cosmos DB account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param notebookWorkspaceName The name of the notebook workspace resource.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    notebookWorkspaceName: NotebookWorkspaceName,
    options?: NotebookWorkspacesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Retrieves the connection info for the notebook workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param notebookWorkspaceName The name of the notebook workspace resource.
   * @param options The options parameters.
   */
  listConnectionInfo(
    resourceGroupName: string,
    accountName: string,
    notebookWorkspaceName: NotebookWorkspaceName,
    options?: NotebookWorkspacesListConnectionInfoOptionalParams
  ): Promise<NotebookWorkspacesListConnectionInfoResponse>;
  /**
   * Regenerates the auth token for the notebook workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param notebookWorkspaceName The name of the notebook workspace resource.
   * @param options The options parameters.
   */
  beginRegenerateAuthToken(
    resourceGroupName: string,
    accountName: string,
    notebookWorkspaceName: NotebookWorkspaceName,
    options?: NotebookWorkspacesRegenerateAuthTokenOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Regenerates the auth token for the notebook workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param notebookWorkspaceName The name of the notebook workspace resource.
   * @param options The options parameters.
   */
  beginRegenerateAuthTokenAndWait(
    resourceGroupName: string,
    accountName: string,
    notebookWorkspaceName: NotebookWorkspaceName,
    options?: NotebookWorkspacesRegenerateAuthTokenOptionalParams
  ): Promise<void>;
  /**
   * Starts the notebook workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param notebookWorkspaceName The name of the notebook workspace resource.
   * @param options The options parameters.
   */
  beginStart(
    resourceGroupName: string,
    accountName: string,
    notebookWorkspaceName: NotebookWorkspaceName,
    options?: NotebookWorkspacesStartOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Starts the notebook workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param notebookWorkspaceName The name of the notebook workspace resource.
   * @param options The options parameters.
   */
  beginStartAndWait(
    resourceGroupName: string,
    accountName: string,
    notebookWorkspaceName: NotebookWorkspaceName,
    options?: NotebookWorkspacesStartOptionalParams
  ): Promise<void>;
}
