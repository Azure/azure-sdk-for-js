/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  ClusterResource,
  CassandraClustersListBySubscriptionOptionalParams,
  CassandraClustersListByResourceGroupOptionalParams,
  BackupResource,
  CassandraClustersListBackupsOptionalParams,
  CassandraClustersGetOptionalParams,
  CassandraClustersGetResponse,
  CassandraClustersDeleteOptionalParams,
  CassandraClustersCreateUpdateOptionalParams,
  CassandraClustersCreateUpdateResponse,
  CassandraClustersUpdateOptionalParams,
  CassandraClustersUpdateResponse,
  RepairPostBody,
  CassandraClustersRequestRepairOptionalParams,
  CassandraClustersFetchNodeStatusOptionalParams,
  CassandraClustersFetchNodeStatusResponse,
  CassandraClustersGetBackupOptionalParams,
  CassandraClustersGetBackupResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CassandraClusters. */
export interface CassandraClusters {
  /**
   * List all managed Cassandra clusters in this subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: CassandraClustersListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ClusterResource>;
  /**
   * List all managed Cassandra clusters in this resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: CassandraClustersListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ClusterResource>;
  /**
   * List the backups of this cluster that are available to restore.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param options The options parameters.
   */
  listBackups(
    resourceGroupName: string,
    clusterName: string,
    options?: CassandraClustersListBackupsOptionalParams
  ): PagedAsyncIterableIterator<BackupResource>;
  /**
   * Get the properties of a managed Cassandra cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    options?: CassandraClustersGetOptionalParams
  ): Promise<CassandraClustersGetResponse>;
  /**
   * Deletes a managed Cassandra cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    clusterName: string,
    options?: CassandraClustersDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a managed Cassandra cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    clusterName: string,
    options?: CassandraClustersDeleteOptionalParams
  ): Promise<void>;
  /**
   * Create or update a managed Cassandra cluster. When updating, you must specify all writable
   * properties. To update only some properties, use PATCH.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param body The properties specifying the desired state of the managed Cassandra cluster.
   * @param options The options parameters.
   */
  beginCreateUpdate(
    resourceGroupName: string,
    clusterName: string,
    body: ClusterResource,
    options?: CassandraClustersCreateUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CassandraClustersCreateUpdateResponse>,
      CassandraClustersCreateUpdateResponse
    >
  >;
  /**
   * Create or update a managed Cassandra cluster. When updating, you must specify all writable
   * properties. To update only some properties, use PATCH.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param body The properties specifying the desired state of the managed Cassandra cluster.
   * @param options The options parameters.
   */
  beginCreateUpdateAndWait(
    resourceGroupName: string,
    clusterName: string,
    body: ClusterResource,
    options?: CassandraClustersCreateUpdateOptionalParams
  ): Promise<CassandraClustersCreateUpdateResponse>;
  /**
   * Updates some of the properties of a managed Cassandra cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param body Parameters to provide for specifying the managed Cassandra cluster.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    clusterName: string,
    body: ClusterResource,
    options?: CassandraClustersUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CassandraClustersUpdateResponse>,
      CassandraClustersUpdateResponse
    >
  >;
  /**
   * Updates some of the properties of a managed Cassandra cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param body Parameters to provide for specifying the managed Cassandra cluster.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    clusterName: string,
    body: ClusterResource,
    options?: CassandraClustersUpdateOptionalParams
  ): Promise<CassandraClustersUpdateResponse>;
  /**
   * Request that repair begin on this cluster as soon as possible.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param body Specification of what keyspaces and tables to run repair on.
   * @param options The options parameters.
   */
  beginRequestRepair(
    resourceGroupName: string,
    clusterName: string,
    body: RepairPostBody,
    options?: CassandraClustersRequestRepairOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Request that repair begin on this cluster as soon as possible.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param body Specification of what keyspaces and tables to run repair on.
   * @param options The options parameters.
   */
  beginRequestRepairAndWait(
    resourceGroupName: string,
    clusterName: string,
    body: RepairPostBody,
    options?: CassandraClustersRequestRepairOptionalParams
  ): Promise<void>;
  /**
   * Request the status of all nodes in the cluster (as returned by 'nodetool status').
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param options The options parameters.
   */
  beginFetchNodeStatus(
    resourceGroupName: string,
    clusterName: string,
    options?: CassandraClustersFetchNodeStatusOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CassandraClustersFetchNodeStatusResponse>,
      CassandraClustersFetchNodeStatusResponse
    >
  >;
  /**
   * Request the status of all nodes in the cluster (as returned by 'nodetool status').
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param options The options parameters.
   */
  beginFetchNodeStatusAndWait(
    resourceGroupName: string,
    clusterName: string,
    options?: CassandraClustersFetchNodeStatusOptionalParams
  ): Promise<CassandraClustersFetchNodeStatusResponse>;
  /**
   * Get the properties of an individual backup of this cluster that is available to restore.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Managed Cassandra cluster name.
   * @param backupId Id of a restorable backup of a Cassandra cluster.
   * @param options The options parameters.
   */
  getBackup(
    resourceGroupName: string,
    clusterName: string,
    backupId: string,
    options?: CassandraClustersGetBackupOptionalParams
  ): Promise<CassandraClustersGetBackupResponse>;
}
