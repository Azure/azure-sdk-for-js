/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  DatabaseAccountGetResults,
  DatabaseAccountsListOptionalParams,
  DatabaseAccountsListByResourceGroupOptionalParams,
  Metric,
  DatabaseAccountsListMetricsOptionalParams,
  Usage,
  DatabaseAccountsListUsagesOptionalParams,
  MetricDefinition,
  DatabaseAccountsListMetricDefinitionsOptionalParams,
  DatabaseAccountsGetOptionalParams,
  DatabaseAccountsGetResponse,
  DatabaseAccountUpdateParameters,
  DatabaseAccountsUpdateOptionalParams,
  DatabaseAccountsUpdateResponse,
  DatabaseAccountCreateUpdateParameters,
  DatabaseAccountsCreateOrUpdateOptionalParams,
  DatabaseAccountsCreateOrUpdateResponse,
  DatabaseAccountsDeleteOptionalParams,
  DatabaseAccountsDeleteResponse,
  FailoverPolicies,
  DatabaseAccountsFailoverPriorityChangeOptionalParams,
  DatabaseAccountsFailoverPriorityChangeResponse,
  DatabaseAccountsListKeysOptionalParams,
  DatabaseAccountsListKeysResponse,
  DatabaseAccountsListConnectionStringsOptionalParams,
  DatabaseAccountsListConnectionStringsResponse,
  RegionForOnlineOffline,
  DatabaseAccountsOfflineRegionOptionalParams,
  DatabaseAccountsOnlineRegionOptionalParams,
  DatabaseAccountsGetReadOnlyKeysOptionalParams,
  DatabaseAccountsGetReadOnlyKeysResponse,
  DatabaseAccountsListReadOnlyKeysOptionalParams,
  DatabaseAccountsListReadOnlyKeysResponse,
  DatabaseAccountRegenerateKeyParameters,
  DatabaseAccountsRegenerateKeyOptionalParams,
  DatabaseAccountsCheckNameExistsOptionalParams,
  DatabaseAccountsCheckNameExistsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DatabaseAccounts. */
export interface DatabaseAccounts {
  /**
   * Lists all the Azure Cosmos DB database accounts available under the subscription.
   * @param options The options parameters.
   */
  list(
    options?: DatabaseAccountsListOptionalParams
  ): PagedAsyncIterableIterator<DatabaseAccountGetResults>;
  /**
   * Lists all the Azure Cosmos DB database accounts available under the given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: DatabaseAccountsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<DatabaseAccountGetResults>;
  /**
   * Retrieves the metrics determined by the given filter for the given database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param filter An OData filter expression that describes a subset of metrics to return. The
   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
   *               names), startTime, endTime, and timeGrain. The supported operator is eq.
   * @param options The options parameters.
   */
  listMetrics(
    resourceGroupName: string,
    accountName: string,
    filter: string,
    options?: DatabaseAccountsListMetricsOptionalParams
  ): PagedAsyncIterableIterator<Metric>;
  /**
   * Retrieves the usages (most recent data) for the given database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listUsages(
    resourceGroupName: string,
    accountName: string,
    options?: DatabaseAccountsListUsagesOptionalParams
  ): PagedAsyncIterableIterator<Usage>;
  /**
   * Retrieves metric definitions for the given database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listMetricDefinitions(
    resourceGroupName: string,
    accountName: string,
    options?: DatabaseAccountsListMetricDefinitionsOptionalParams
  ): PagedAsyncIterableIterator<MetricDefinition>;
  /**
   * Retrieves the properties of an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    options?: DatabaseAccountsGetOptionalParams
  ): Promise<DatabaseAccountsGetResponse>;
  /**
   * Updates the properties of an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param updateParameters The parameters to provide for the current database account.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    accountName: string,
    updateParameters: DatabaseAccountUpdateParameters,
    options?: DatabaseAccountsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DatabaseAccountsUpdateResponse>,
      DatabaseAccountsUpdateResponse
    >
  >;
  /**
   * Updates the properties of an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param updateParameters The parameters to provide for the current database account.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    updateParameters: DatabaseAccountUpdateParameters,
    options?: DatabaseAccountsUpdateOptionalParams
  ): Promise<DatabaseAccountsUpdateResponse>;
  /**
   * Creates or updates an Azure Cosmos DB database account. The "Update" method is preferred when
   * performing updates on an account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateParameters The parameters to provide for the current database account.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    accountName: string,
    createUpdateParameters: DatabaseAccountCreateUpdateParameters,
    options?: DatabaseAccountsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DatabaseAccountsCreateOrUpdateResponse>,
      DatabaseAccountsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates an Azure Cosmos DB database account. The "Update" method is preferred when
   * performing updates on an account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateParameters The parameters to provide for the current database account.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    createUpdateParameters: DatabaseAccountCreateUpdateParameters,
    options?: DatabaseAccountsCreateOrUpdateOptionalParams
  ): Promise<DatabaseAccountsCreateOrUpdateResponse>;
  /**
   * Deletes an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    accountName: string,
    options?: DatabaseAccountsDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DatabaseAccountsDeleteResponse>,
      DatabaseAccountsDeleteResponse
    >
  >;
  /**
   * Deletes an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    options?: DatabaseAccountsDeleteOptionalParams
  ): Promise<DatabaseAccountsDeleteResponse>;
  /**
   * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0
   * indicates a write region. The maximum value for a failover priority = (total number of regions - 1).
   * Failover priority values must be unique for each of the regions in which the database account
   * exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param failoverParameters The new failover policies for the database account.
   * @param options The options parameters.
   */
  beginFailoverPriorityChange(
    resourceGroupName: string,
    accountName: string,
    failoverParameters: FailoverPolicies,
    options?: DatabaseAccountsFailoverPriorityChangeOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DatabaseAccountsFailoverPriorityChangeResponse>,
      DatabaseAccountsFailoverPriorityChangeResponse
    >
  >;
  /**
   * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0
   * indicates a write region. The maximum value for a failover priority = (total number of regions - 1).
   * Failover priority values must be unique for each of the regions in which the database account
   * exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param failoverParameters The new failover policies for the database account.
   * @param options The options parameters.
   */
  beginFailoverPriorityChangeAndWait(
    resourceGroupName: string,
    accountName: string,
    failoverParameters: FailoverPolicies,
    options?: DatabaseAccountsFailoverPriorityChangeOptionalParams
  ): Promise<DatabaseAccountsFailoverPriorityChangeResponse>;
  /**
   * Lists the access keys for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    accountName: string,
    options?: DatabaseAccountsListKeysOptionalParams
  ): Promise<DatabaseAccountsListKeysResponse>;
  /**
   * Lists the connection strings for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listConnectionStrings(
    resourceGroupName: string,
    accountName: string,
    options?: DatabaseAccountsListConnectionStringsOptionalParams
  ): Promise<DatabaseAccountsListConnectionStringsResponse>;
  /**
   * Offline the specified region for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param regionParameterForOffline Cosmos DB region to offline for the database account.
   * @param options The options parameters.
   */
  beginOfflineRegion(
    resourceGroupName: string,
    accountName: string,
    regionParameterForOffline: RegionForOnlineOffline,
    options?: DatabaseAccountsOfflineRegionOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Offline the specified region for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param regionParameterForOffline Cosmos DB region to offline for the database account.
   * @param options The options parameters.
   */
  beginOfflineRegionAndWait(
    resourceGroupName: string,
    accountName: string,
    regionParameterForOffline: RegionForOnlineOffline,
    options?: DatabaseAccountsOfflineRegionOptionalParams
  ): Promise<void>;
  /**
   * Online the specified region for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param regionParameterForOnline Cosmos DB region to online for the database account.
   * @param options The options parameters.
   */
  beginOnlineRegion(
    resourceGroupName: string,
    accountName: string,
    regionParameterForOnline: RegionForOnlineOffline,
    options?: DatabaseAccountsOnlineRegionOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Online the specified region for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param regionParameterForOnline Cosmos DB region to online for the database account.
   * @param options The options parameters.
   */
  beginOnlineRegionAndWait(
    resourceGroupName: string,
    accountName: string,
    regionParameterForOnline: RegionForOnlineOffline,
    options?: DatabaseAccountsOnlineRegionOptionalParams
  ): Promise<void>;
  /**
   * Lists the read-only access keys for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  getReadOnlyKeys(
    resourceGroupName: string,
    accountName: string,
    options?: DatabaseAccountsGetReadOnlyKeysOptionalParams
  ): Promise<DatabaseAccountsGetReadOnlyKeysResponse>;
  /**
   * Lists the read-only access keys for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listReadOnlyKeys(
    resourceGroupName: string,
    accountName: string,
    options?: DatabaseAccountsListReadOnlyKeysOptionalParams
  ): Promise<DatabaseAccountsListReadOnlyKeysResponse>;
  /**
   * Regenerates an access key for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyToRegenerate The name of the key to regenerate.
   * @param options The options parameters.
   */
  beginRegenerateKey(
    resourceGroupName: string,
    accountName: string,
    keyToRegenerate: DatabaseAccountRegenerateKeyParameters,
    options?: DatabaseAccountsRegenerateKeyOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Regenerates an access key for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyToRegenerate The name of the key to regenerate.
   * @param options The options parameters.
   */
  beginRegenerateKeyAndWait(
    resourceGroupName: string,
    accountName: string,
    keyToRegenerate: DatabaseAccountRegenerateKeyParameters,
    options?: DatabaseAccountsRegenerateKeyOptionalParams
  ): Promise<void>;
  /**
   * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only
   * lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  checkNameExists(
    accountName: string,
    options?: DatabaseAccountsCheckNameExistsOptionalParams
  ): Promise<DatabaseAccountsCheckNameExistsResponse>;
}
