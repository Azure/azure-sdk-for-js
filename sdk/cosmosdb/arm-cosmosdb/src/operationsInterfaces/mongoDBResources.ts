/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  MongoDBDatabaseGetResults,
  MongoDBResourcesListMongoDBDatabasesOptionalParams,
  MongoDBCollectionGetResults,
  MongoDBResourcesListMongoDBCollectionsOptionalParams,
  MongoRoleDefinitionGetResults,
  MongoDBResourcesListMongoRoleDefinitionsOptionalParams,
  MongoUserDefinitionGetResults,
  MongoDBResourcesListMongoUserDefinitionsOptionalParams,
  MongoDBResourcesGetMongoDBDatabaseOptionalParams,
  MongoDBResourcesGetMongoDBDatabaseResponse,
  MongoDBDatabaseCreateUpdateParameters,
  MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams,
  MongoDBResourcesCreateUpdateMongoDBDatabaseResponse,
  MongoDBResourcesDeleteMongoDBDatabaseOptionalParams,
  MongoDBResourcesDeleteMongoDBDatabaseResponse,
  MongoDBResourcesGetMongoDBDatabaseThroughputOptionalParams,
  MongoDBResourcesGetMongoDBDatabaseThroughputResponse,
  ThroughputSettingsUpdateParameters,
  MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams,
  MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse,
  MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams,
  MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse,
  MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams,
  MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse,
  RetrieveThroughputParameters,
  MongoDBResourcesMongoDBDatabaseRetrieveThroughputDistributionOptionalParams,
  MongoDBResourcesMongoDBDatabaseRetrieveThroughputDistributionResponse,
  RedistributeThroughputParameters,
  MongoDBResourcesMongoDBDatabaseRedistributeThroughputOptionalParams,
  MongoDBResourcesMongoDBDatabaseRedistributeThroughputResponse,
  MongoDBResourcesMongoDBContainerRetrieveThroughputDistributionOptionalParams,
  MongoDBResourcesMongoDBContainerRetrieveThroughputDistributionResponse,
  MongoDBResourcesMongoDBContainerRedistributeThroughputOptionalParams,
  MongoDBResourcesMongoDBContainerRedistributeThroughputResponse,
  MongoDBResourcesGetMongoDBCollectionOptionalParams,
  MongoDBResourcesGetMongoDBCollectionResponse,
  MongoDBCollectionCreateUpdateParameters,
  MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams,
  MongoDBResourcesCreateUpdateMongoDBCollectionResponse,
  MongoDBResourcesDeleteMongoDBCollectionOptionalParams,
  MongoDBResourcesDeleteMongoDBCollectionResponse,
  MergeParameters,
  MongoDBResourcesListMongoDBCollectionPartitionMergeOptionalParams,
  MongoDBResourcesListMongoDBCollectionPartitionMergeResponse,
  MongoDBResourcesGetMongoDBCollectionThroughputOptionalParams,
  MongoDBResourcesGetMongoDBCollectionThroughputResponse,
  MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams,
  MongoDBResourcesUpdateMongoDBCollectionThroughputResponse,
  MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams,
  MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse,
  MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams,
  MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse,
  MongoDBResourcesGetMongoRoleDefinitionOptionalParams,
  MongoDBResourcesGetMongoRoleDefinitionResponse,
  MongoRoleDefinitionCreateUpdateParameters,
  MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams,
  MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse,
  MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams,
  MongoDBResourcesGetMongoUserDefinitionOptionalParams,
  MongoDBResourcesGetMongoUserDefinitionResponse,
  MongoUserDefinitionCreateUpdateParameters,
  MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams,
  MongoDBResourcesCreateUpdateMongoUserDefinitionResponse,
  MongoDBResourcesDeleteMongoUserDefinitionOptionalParams,
  ContinuousBackupRestoreLocation,
  MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams,
  MongoDBResourcesRetrieveContinuousBackupInformationResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a MongoDBResources. */
export interface MongoDBResources {
  /**
   * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listMongoDBDatabases(
    resourceGroupName: string,
    accountName: string,
    options?: MongoDBResourcesListMongoDBDatabasesOptionalParams
  ): PagedAsyncIterableIterator<MongoDBDatabaseGetResults>;
  /**
   * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  listMongoDBCollections(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: MongoDBResourcesListMongoDBCollectionsOptionalParams
  ): PagedAsyncIterableIterator<MongoDBCollectionGetResults>;
  /**
   * Retrieves the list of all Azure Cosmos DB Mongo Role Definitions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listMongoRoleDefinitions(
    resourceGroupName: string,
    accountName: string,
    options?: MongoDBResourcesListMongoRoleDefinitionsOptionalParams
  ): PagedAsyncIterableIterator<MongoRoleDefinitionGetResults>;
  /**
   * Retrieves the list of all Azure Cosmos DB Mongo User Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listMongoUserDefinitions(
    resourceGroupName: string,
    accountName: string,
    options?: MongoDBResourcesListMongoUserDefinitionsOptionalParams
  ): PagedAsyncIterableIterator<MongoUserDefinitionGetResults>;
  /**
   * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided
   * name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  getMongoDBDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: MongoDBResourcesGetMongoDBDatabaseOptionalParams
  ): Promise<MongoDBResourcesGetMongoDBDatabaseResponse>;
  /**
   * Create or updates Azure Cosmos DB MongoDB database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB
   *                                              database.
   * @param options The options parameters.
   */
  beginCreateUpdateMongoDBDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    createUpdateMongoDBDatabaseParameters: MongoDBDatabaseCreateUpdateParameters,
    options?: MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MongoDBResourcesCreateUpdateMongoDBDatabaseResponse>,
      MongoDBResourcesCreateUpdateMongoDBDatabaseResponse
    >
  >;
  /**
   * Create or updates Azure Cosmos DB MongoDB database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB
   *                                              database.
   * @param options The options parameters.
   */
  beginCreateUpdateMongoDBDatabaseAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    createUpdateMongoDBDatabaseParameters: MongoDBDatabaseCreateUpdateParameters,
    options?: MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams
  ): Promise<MongoDBResourcesCreateUpdateMongoDBDatabaseResponse>;
  /**
   * Deletes an existing Azure Cosmos DB MongoDB database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  beginDeleteMongoDBDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: MongoDBResourcesDeleteMongoDBDatabaseOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MongoDBResourcesDeleteMongoDBDatabaseResponse>,
      MongoDBResourcesDeleteMongoDBDatabaseResponse
    >
  >;
  /**
   * Deletes an existing Azure Cosmos DB MongoDB database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  beginDeleteMongoDBDatabaseAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: MongoDBResourcesDeleteMongoDBDatabaseOptionalParams
  ): Promise<MongoDBResourcesDeleteMongoDBDatabaseResponse>;
  /**
   * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account
   * with the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  getMongoDBDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: MongoDBResourcesGetMongoDBDatabaseThroughputOptionalParams
  ): Promise<MongoDBResourcesGetMongoDBDatabaseThroughputResponse>;
  /**
   * Update RUs per second of the an Azure Cosmos DB MongoDB database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
   *                                   MongoDB database.
   * @param options The options parameters.
   */
  beginUpdateMongoDBDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse>,
      MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse
    >
  >;
  /**
   * Update RUs per second of the an Azure Cosmos DB MongoDB database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
   *                                   MongoDB database.
   * @param options The options parameters.
   */
  beginUpdateMongoDBDatabaseThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams
  ): Promise<MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse>;
  /**
   * Migrate an Azure Cosmos DB MongoDB database from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  beginMigrateMongoDBDatabaseToAutoscale(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse>,
      MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse
    >
  >;
  /**
   * Migrate an Azure Cosmos DB MongoDB database from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  beginMigrateMongoDBDatabaseToAutoscaleAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams
  ): Promise<MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse>;
  /**
   * Migrate an Azure Cosmos DB MongoDB database from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  beginMigrateMongoDBDatabaseToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse
      >,
      MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse
    >
  >;
  /**
   * Migrate an Azure Cosmos DB MongoDB database from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  beginMigrateMongoDBDatabaseToManualThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams
  ): Promise<MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse>;
  /**
   * Retrieve throughput distribution for an Azure Cosmos DB MongoDB database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param retrieveThroughputParameters The parameters to provide for retrieving throughput distribution
   *                                     for the current MongoDB database.
   * @param options The options parameters.
   */
  beginMongoDBDatabaseRetrieveThroughputDistribution(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    retrieveThroughputParameters: RetrieveThroughputParameters,
    options?: MongoDBResourcesMongoDBDatabaseRetrieveThroughputDistributionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        MongoDBResourcesMongoDBDatabaseRetrieveThroughputDistributionResponse
      >,
      MongoDBResourcesMongoDBDatabaseRetrieveThroughputDistributionResponse
    >
  >;
  /**
   * Retrieve throughput distribution for an Azure Cosmos DB MongoDB database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param retrieveThroughputParameters The parameters to provide for retrieving throughput distribution
   *                                     for the current MongoDB database.
   * @param options The options parameters.
   */
  beginMongoDBDatabaseRetrieveThroughputDistributionAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    retrieveThroughputParameters: RetrieveThroughputParameters,
    options?: MongoDBResourcesMongoDBDatabaseRetrieveThroughputDistributionOptionalParams
  ): Promise<
    MongoDBResourcesMongoDBDatabaseRetrieveThroughputDistributionResponse
  >;
  /**
   * Redistribute throughput for an Azure Cosmos DB MongoDB database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param redistributeThroughputParameters The parameters to provide for redistributing throughput for
   *                                         the current MongoDB database.
   * @param options The options parameters.
   */
  beginMongoDBDatabaseRedistributeThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    redistributeThroughputParameters: RedistributeThroughputParameters,
    options?: MongoDBResourcesMongoDBDatabaseRedistributeThroughputOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        MongoDBResourcesMongoDBDatabaseRedistributeThroughputResponse
      >,
      MongoDBResourcesMongoDBDatabaseRedistributeThroughputResponse
    >
  >;
  /**
   * Redistribute throughput for an Azure Cosmos DB MongoDB database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param redistributeThroughputParameters The parameters to provide for redistributing throughput for
   *                                         the current MongoDB database.
   * @param options The options parameters.
   */
  beginMongoDBDatabaseRedistributeThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    redistributeThroughputParameters: RedistributeThroughputParameters,
    options?: MongoDBResourcesMongoDBDatabaseRedistributeThroughputOptionalParams
  ): Promise<MongoDBResourcesMongoDBDatabaseRedistributeThroughputResponse>;
  /**
   * Retrieve throughput distribution for an Azure Cosmos DB MongoDB container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param retrieveThroughputParameters The parameters to provide for retrieving throughput distribution
   *                                     for the current MongoDB container.
   * @param options The options parameters.
   */
  beginMongoDBContainerRetrieveThroughputDistribution(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    retrieveThroughputParameters: RetrieveThroughputParameters,
    options?: MongoDBResourcesMongoDBContainerRetrieveThroughputDistributionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        MongoDBResourcesMongoDBContainerRetrieveThroughputDistributionResponse
      >,
      MongoDBResourcesMongoDBContainerRetrieveThroughputDistributionResponse
    >
  >;
  /**
   * Retrieve throughput distribution for an Azure Cosmos DB MongoDB container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param retrieveThroughputParameters The parameters to provide for retrieving throughput distribution
   *                                     for the current MongoDB container.
   * @param options The options parameters.
   */
  beginMongoDBContainerRetrieveThroughputDistributionAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    retrieveThroughputParameters: RetrieveThroughputParameters,
    options?: MongoDBResourcesMongoDBContainerRetrieveThroughputDistributionOptionalParams
  ): Promise<
    MongoDBResourcesMongoDBContainerRetrieveThroughputDistributionResponse
  >;
  /**
   * Redistribute throughput for an Azure Cosmos DB MongoDB container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param redistributeThroughputParameters The parameters to provide for redistributing throughput for
   *                                         the current MongoDB container.
   * @param options The options parameters.
   */
  beginMongoDBContainerRedistributeThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    redistributeThroughputParameters: RedistributeThroughputParameters,
    options?: MongoDBResourcesMongoDBContainerRedistributeThroughputOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        MongoDBResourcesMongoDBContainerRedistributeThroughputResponse
      >,
      MongoDBResourcesMongoDBContainerRedistributeThroughputResponse
    >
  >;
  /**
   * Redistribute throughput for an Azure Cosmos DB MongoDB container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param redistributeThroughputParameters The parameters to provide for redistributing throughput for
   *                                         the current MongoDB container.
   * @param options The options parameters.
   */
  beginMongoDBContainerRedistributeThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    redistributeThroughputParameters: RedistributeThroughputParameters,
    options?: MongoDBResourcesMongoDBContainerRedistributeThroughputOptionalParams
  ): Promise<MongoDBResourcesMongoDBContainerRedistributeThroughputResponse>;
  /**
   * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param options The options parameters.
   */
  getMongoDBCollection(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    options?: MongoDBResourcesGetMongoDBCollectionOptionalParams
  ): Promise<MongoDBResourcesGetMongoDBCollectionResponse>;
  /**
   * Create or update an Azure Cosmos DB MongoDB Collection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB
   *                                                Collection.
   * @param options The options parameters.
   */
  beginCreateUpdateMongoDBCollection(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    createUpdateMongoDBCollectionParameters: MongoDBCollectionCreateUpdateParameters,
    options?: MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MongoDBResourcesCreateUpdateMongoDBCollectionResponse>,
      MongoDBResourcesCreateUpdateMongoDBCollectionResponse
    >
  >;
  /**
   * Create or update an Azure Cosmos DB MongoDB Collection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB
   *                                                Collection.
   * @param options The options parameters.
   */
  beginCreateUpdateMongoDBCollectionAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    createUpdateMongoDBCollectionParameters: MongoDBCollectionCreateUpdateParameters,
    options?: MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams
  ): Promise<MongoDBResourcesCreateUpdateMongoDBCollectionResponse>;
  /**
   * Deletes an existing Azure Cosmos DB MongoDB Collection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param options The options parameters.
   */
  beginDeleteMongoDBCollection(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    options?: MongoDBResourcesDeleteMongoDBCollectionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MongoDBResourcesDeleteMongoDBCollectionResponse>,
      MongoDBResourcesDeleteMongoDBCollectionResponse
    >
  >;
  /**
   * Deletes an existing Azure Cosmos DB MongoDB Collection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param options The options parameters.
   */
  beginDeleteMongoDBCollectionAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    options?: MongoDBResourcesDeleteMongoDBCollectionOptionalParams
  ): Promise<MongoDBResourcesDeleteMongoDBCollectionResponse>;
  /**
   * Merges the partitions of a MongoDB Collection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param mergeParameters The parameters for the merge operation.
   * @param options The options parameters.
   */
  beginListMongoDBCollectionPartitionMerge(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    mergeParameters: MergeParameters,
    options?: MongoDBResourcesListMongoDBCollectionPartitionMergeOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        MongoDBResourcesListMongoDBCollectionPartitionMergeResponse
      >,
      MongoDBResourcesListMongoDBCollectionPartitionMergeResponse
    >
  >;
  /**
   * Merges the partitions of a MongoDB Collection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param mergeParameters The parameters for the merge operation.
   * @param options The options parameters.
   */
  beginListMongoDBCollectionPartitionMergeAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    mergeParameters: MergeParameters,
    options?: MongoDBResourcesListMongoDBCollectionPartitionMergeOptionalParams
  ): Promise<MongoDBResourcesListMongoDBCollectionPartitionMergeResponse>;
  /**
   * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account
   * with the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param options The options parameters.
   */
  getMongoDBCollectionThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    options?: MongoDBResourcesGetMongoDBCollectionThroughputOptionalParams
  ): Promise<MongoDBResourcesGetMongoDBCollectionThroughputResponse>;
  /**
   * Update the RUs per second of an Azure Cosmos DB MongoDB collection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
   *                                   MongoDB collection.
   * @param options The options parameters.
   */
  beginUpdateMongoDBCollectionThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MongoDBResourcesUpdateMongoDBCollectionThroughputResponse>,
      MongoDBResourcesUpdateMongoDBCollectionThroughputResponse
    >
  >;
  /**
   * Update the RUs per second of an Azure Cosmos DB MongoDB collection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
   *                                   MongoDB collection.
   * @param options The options parameters.
   */
  beginUpdateMongoDBCollectionThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams
  ): Promise<MongoDBResourcesUpdateMongoDBCollectionThroughputResponse>;
  /**
   * Migrate an Azure Cosmos DB MongoDB collection from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param options The options parameters.
   */
  beginMigrateMongoDBCollectionToAutoscale(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    options?: MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse
      >,
      MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse
    >
  >;
  /**
   * Migrate an Azure Cosmos DB MongoDB collection from manual throughput to autoscale
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param options The options parameters.
   */
  beginMigrateMongoDBCollectionToAutoscaleAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    options?: MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams
  ): Promise<MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse>;
  /**
   * Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param options The options parameters.
   */
  beginMigrateMongoDBCollectionToManualThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    options?: MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse
      >,
      MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse
    >
  >;
  /**
   * Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual throughput
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param options The options parameters.
   */
  beginMigrateMongoDBCollectionToManualThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    options?: MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams
  ): Promise<
    MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse
  >;
  /**
   * Retrieves the properties of an existing Azure Cosmos DB Mongo Role Definition with the given Id.
   * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  getMongoRoleDefinition(
    mongoRoleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options?: MongoDBResourcesGetMongoRoleDefinitionOptionalParams
  ): Promise<MongoDBResourcesGetMongoRoleDefinitionResponse>;
  /**
   * Creates or updates an Azure Cosmos DB Mongo Role Definition.
   * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateMongoRoleDefinitionParameters The properties required to create or update a Role
   *                                                  Definition.
   * @param options The options parameters.
   */
  beginCreateUpdateMongoRoleDefinition(
    mongoRoleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    createUpdateMongoRoleDefinitionParameters: MongoRoleDefinitionCreateUpdateParameters,
    options?: MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse>,
      MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse
    >
  >;
  /**
   * Creates or updates an Azure Cosmos DB Mongo Role Definition.
   * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateMongoRoleDefinitionParameters The properties required to create or update a Role
   *                                                  Definition.
   * @param options The options parameters.
   */
  beginCreateUpdateMongoRoleDefinitionAndWait(
    mongoRoleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    createUpdateMongoRoleDefinitionParameters: MongoRoleDefinitionCreateUpdateParameters,
    options?: MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams
  ): Promise<MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse>;
  /**
   * Deletes an existing Azure Cosmos DB Mongo Role Definition.
   * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  beginDeleteMongoRoleDefinition(
    mongoRoleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options?: MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes an existing Azure Cosmos DB Mongo Role Definition.
   * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  beginDeleteMongoRoleDefinitionAndWait(
    mongoRoleDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options?: MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams
  ): Promise<void>;
  /**
   * Retrieves the properties of an existing Azure Cosmos DB Mongo User Definition with the given Id.
   * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  getMongoUserDefinition(
    mongoUserDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options?: MongoDBResourcesGetMongoUserDefinitionOptionalParams
  ): Promise<MongoDBResourcesGetMongoUserDefinitionResponse>;
  /**
   * Creates or updates an Azure Cosmos DB Mongo User Definition.
   * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateMongoUserDefinitionParameters The properties required to create or update a User
   *                                                  Definition.
   * @param options The options parameters.
   */
  beginCreateUpdateMongoUserDefinition(
    mongoUserDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    createUpdateMongoUserDefinitionParameters: MongoUserDefinitionCreateUpdateParameters,
    options?: MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MongoDBResourcesCreateUpdateMongoUserDefinitionResponse>,
      MongoDBResourcesCreateUpdateMongoUserDefinitionResponse
    >
  >;
  /**
   * Creates or updates an Azure Cosmos DB Mongo User Definition.
   * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateMongoUserDefinitionParameters The properties required to create or update a User
   *                                                  Definition.
   * @param options The options parameters.
   */
  beginCreateUpdateMongoUserDefinitionAndWait(
    mongoUserDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    createUpdateMongoUserDefinitionParameters: MongoUserDefinitionCreateUpdateParameters,
    options?: MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams
  ): Promise<MongoDBResourcesCreateUpdateMongoUserDefinitionResponse>;
  /**
   * Deletes an existing Azure Cosmos DB Mongo User Definition.
   * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  beginDeleteMongoUserDefinition(
    mongoUserDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options?: MongoDBResourcesDeleteMongoUserDefinitionOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes an existing Azure Cosmos DB Mongo User Definition.
   * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  beginDeleteMongoUserDefinitionAndWait(
    mongoUserDefinitionId: string,
    resourceGroupName: string,
    accountName: string,
    options?: MongoDBResourcesDeleteMongoUserDefinitionOptionalParams
  ): Promise<void>;
  /**
   * Retrieves continuous backup information for a Mongodb collection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param location The name of the continuous backup restore location.
   * @param options The options parameters.
   */
  beginRetrieveContinuousBackupInformation(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    location: ContinuousBackupRestoreLocation,
    options?: MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        MongoDBResourcesRetrieveContinuousBackupInformationResponse
      >,
      MongoDBResourcesRetrieveContinuousBackupInformationResponse
    >
  >;
  /**
   * Retrieves continuous backup information for a Mongodb collection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param collectionName Cosmos DB collection name.
   * @param location The name of the continuous backup restore location.
   * @param options The options parameters.
   */
  beginRetrieveContinuousBackupInformationAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    collectionName: string,
    location: ContinuousBackupRestoreLocation,
    options?: MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams
  ): Promise<MongoDBResourcesRetrieveContinuousBackupInformationResponse>;
}
