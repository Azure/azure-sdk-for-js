{"version":3,"file":"ErrorResponse.js","sourceRoot":"","sources":["../../../src/request/ErrorResponse.ts"],"names":[],"mappings":"AAgGA;;GAEG;AACH,MAAM,OAAO,aAAc,SAAQ,KAAK;CAsBvC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics, CosmosHeaders } from \"../index.js\";\n\nexport interface ErrorBody {\n  code: string;\n  message: string;\n  /**\n   * @hidden\n   */\n  additionalErrorInfo?: PartitionedQueryExecutionInfo;\n}\n\n/**\n * @hidden\n */\nexport interface PartitionedQueryExecutionInfo {\n  partitionedQueryExecutionInfoVersion: number;\n  queryInfo?: QueryInfo;\n  /**\n   * Represents hybrid query information.\n   */\n  hybridSearchQueryInfo?: HybridSearchQueryInfo;\n  queryRanges: QueryRange[];\n}\n\n/**\n * @hidden\n */\nexport interface QueryRange {\n  min: string;\n  max: string;\n  isMinInclusive: boolean;\n  isMaxInclusive: boolean;\n}\n\n/**\n * @hidden\n */\nexport interface QueryInfo {\n  top?: any;\n  orderBy?: any[];\n  orderByExpressions?: any[];\n  offset?: number;\n  limit?: number;\n  aggregates?: AggregateType[];\n  groupByExpressions?: GroupByExpressions;\n  groupByAliasToAggregateType: GroupByAliasToAggregateType;\n  rewrittenQuery?: any;\n  distinctType: string;\n  hasSelectValue: boolean;\n  /**\n   * determines whether the query is of non streaming orderby type.\n   */\n  hasNonStreamingOrderBy: boolean;\n}\n\n/**\n * @hidden\n * Represents the hybrid search query information\n */\nexport interface HybridSearchQueryInfo {\n  /**\n   * The query to be used for fetching global statistics\n   */\n  globalStatisticsQuery: string;\n  /**\n   * Query information for the subsequent queries\n   */\n  componentQueryInfos: QueryInfo[];\n  /**\n   * The number of results in the final result set\n   */\n  take: number;\n  /**\n   * The number of results to skip in the final result set\n   */\n  skip: number;\n  /**\n   * Whether the query requires global statistics\n   */\n  requiresGlobalStatistics: boolean;\n  /**\n   * Represents the weights for each component in a hybrid search query.\n   */\n  componentWeights?: number[];\n}\n\nexport type GroupByExpressions = string[];\n\nexport type AggregateType = \"Average\" | \"Count\" | \"Max\" | \"Min\" | \"Sum\" | \"MakeSet\" | \"MakeList\";\n\nexport interface GroupByAliasToAggregateType {\n  [key: string]: AggregateType;\n}\n\n/**\n * Represents an error response returned in operations.\n */\nexport class ErrorResponse extends Error {\n  /** status or error code returned */\n  code?: number | string;\n  /** substatus code returned */\n  substatus?: number;\n  /** body of the error response, typically including error details */\n  body?: ErrorBody;\n  /** HTTP headers */\n  headers?: CosmosHeaders;\n  /** unique identifier for the operation's activity */\n  activityId?: string;\n  /** delay (in milliseconds) before retrying the operation. */\n  retryAfterInMs?: number;\n  /** delay (in milliseconds) before retrying the operation. */\n  /** Note: Use retryAfterInMs instead */\n  retryAfterInMilliseconds?: number;\n  /** any additional property */\n  [key: string]: any;\n  /** Detailed diagnostic information associated with the error.*/\n  diagnostics?: CosmosDiagnostics;\n  /** The request charge of the operation, representing the resource cost incurred.*/\n  requestCharge?: number;\n}\n"]}