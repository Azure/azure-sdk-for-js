{"version":3,"file":"runtimeExecutionTimes.js","sourceRoot":"","sources":["../../../src/queryMetrics/runtimeExecutionTimes.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport QueryMetricsConstants from \"./queryMetricsConstants.js\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils.js\";\nimport { TimeSpan } from \"./timeSpan.js\";\n\nexport class RuntimeExecutionTimes {\n  constructor(\n    public readonly queryEngineExecutionTime: TimeSpan,\n    public readonly systemFunctionExecutionTime: TimeSpan,\n    public readonly userDefinedFunctionExecutionTime: TimeSpan,\n  ) {}\n\n  /**\n   * returns a new RuntimeExecutionTimes instance that is the addition of this and the arguments.\n   */\n  public add(...runtimeExecutionTimesArray: RuntimeExecutionTimes[]): RuntimeExecutionTimes {\n    let queryEngineExecutionTime = this.queryEngineExecutionTime;\n    let systemFunctionExecutionTime = this.systemFunctionExecutionTime;\n    let userDefinedFunctionExecutionTime = this.userDefinedFunctionExecutionTime;\n\n    for (const runtimeExecutionTimes of runtimeExecutionTimesArray) {\n      if (runtimeExecutionTimes == null) {\n        throw new Error(\"runtimeExecutionTimes has null or undefined item(s)\");\n      }\n\n      queryEngineExecutionTime = queryEngineExecutionTime.add(\n        runtimeExecutionTimes.queryEngineExecutionTime,\n      );\n      systemFunctionExecutionTime = systemFunctionExecutionTime.add(\n        runtimeExecutionTimes.systemFunctionExecutionTime,\n      );\n      userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime.add(\n        runtimeExecutionTimes.userDefinedFunctionExecutionTime,\n      );\n    }\n\n    return new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      systemFunctionExecutionTime,\n      userDefinedFunctionExecutionTime,\n    );\n  }\n\n  /**\n   * Output the RuntimeExecutionTimes as a delimited string.\n   */\n  public toDelimitedString(): string {\n    return (\n      `${\n        QueryMetricsConstants.SystemFunctionExecuteTimeInMs\n      }=${this.systemFunctionExecutionTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs\n      }=${this.userDefinedFunctionExecutionTime.totalMilliseconds()}`\n    );\n  }\n\n  public static readonly zero = new RuntimeExecutionTimes(\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n  );\n\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class that is\n   *  the aggregation of an array of RuntimeExecutionTimes.\n   */\n  public static createFromArray(\n    runtimeExecutionTimesArray: RuntimeExecutionTimes[],\n  ): RuntimeExecutionTimes {\n    if (runtimeExecutionTimesArray == null) {\n      throw new Error(\"runtimeExecutionTimesArray is null or undefined item(s)\");\n    }\n\n    return RuntimeExecutionTimes.zero.add(...runtimeExecutionTimesArray);\n  }\n\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(delimitedString: string): RuntimeExecutionTimes {\n    const metrics = parseDelimitedString(delimitedString);\n\n    const vmExecutionTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs);\n    const indexLookupTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs);\n    const documentLoadTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.DocumentLoadTimeInMs,\n    );\n    const documentWriteTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.DocumentWriteTimeInMs,\n    );\n\n    let queryEngineExecutionTime = TimeSpan.zero;\n    queryEngineExecutionTime = queryEngineExecutionTime.add(vmExecutionTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(indexLookupTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentLoadTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentWriteTime);\n    return new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.SystemFunctionExecuteTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs),\n    );\n  }\n}\n"]}