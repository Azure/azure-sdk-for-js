{"version":3,"file":"fixedSizePriorityQueue.js","sourceRoot":"","sources":["../../../src/utils/fixedSizePriorityQueue.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAE5C,MAAM,OAAO,sBAAsB;IAMjC,YAAY,SAAiC,EAAE,SAAiB;QAC9D,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,IAAI,aAAa,CAAI,IAAI,CAAC,SAAS,CAAC,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,OAAO,CAAC,IAAO;QACpB,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC;aAAM,CAAC;YACN,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;YAC/B,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;gBACtC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;gBACd,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACpB,CAAC;QACH,CAAC;IACH,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;IACvB,CAAC;IAEM,IAAI;QACT,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEM,IAAI;QACT,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;IAEM,cAAc;QACnB,MAAM,QAAQ,GAAQ,EAAE,CAAC;QACzB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC;YAC1B,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QAClC,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,8GAA8G;IAC9G,wFAAwF;IACjF,OAAO;QACZ,MAAM,SAAS,GAAG,IAAI,sBAAsB,CAC1C,CAAC,CAAI,EAAE,CAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EACrC,IAAI,CAAC,SAAS,CACf,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC;YAC1B,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QACnC,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport PriorityQueue from \"priorityqueuejs\";\n\nexport class FixedSizePriorityQueue<T> {\n  private pq: PriorityQueue<T>;\n  // The compare function should return a positive number if a is greater than b, a negative number if a is less than b, and 0 if a is equal to b.\n  private compareFn: (a: T, b: T) => number;\n  private pqMaxSize: number;\n\n  constructor(compareFn: (a: T, b: T) => number, pqMaxSize: number) {\n    this.compareFn = compareFn;\n    this.pq = new PriorityQueue<T>(this.compareFn);\n    this.pqMaxSize = pqMaxSize;\n  }\n\n  public enqueue(item: T): void {\n    if (this.pq.size() < this.pqMaxSize) {\n      this.pq.enq(item);\n    } else {\n      const topItem = this.pq.peek();\n      if (this.compareFn(topItem, item) > 0) {\n        this.pq.deq();\n        this.pq.enq(item);\n      }\n    }\n  }\n\n  public dequeue(): T {\n    return this.pq.deq();\n  }\n\n  public size(): number {\n    return this.pq.size();\n  }\n\n  public isEmpty(): boolean {\n    return this.pq.isEmpty();\n  }\n\n  public peek(): T {\n    return this.pq.peek();\n  }\n\n  public getTopElements(): T[] {\n    const elements: T[] = [];\n    while (!this.pq.isEmpty()) {\n      elements.unshift(this.pq.deq());\n    }\n    return elements;\n  }\n\n  // Create a new instance of FixedSizePriorityQueue with a reversed compare function and the same maximum size.\n  // Enqueue all elements from the current priority queue into the reverse priority queue.\n  public reverse(): FixedSizePriorityQueue<T> {\n    const reversePQ = new FixedSizePriorityQueue<T>(\n      (a: T, b: T) => -this.compareFn(a, b),\n      this.pqMaxSize,\n    );\n    while (!this.pq.isEmpty()) {\n      reversePQ.enqueue(this.pq.deq());\n    }\n    return reversePQ;\n  }\n}\n"]}