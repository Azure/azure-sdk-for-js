{"version":3,"file":"v1.js","sourceRoot":"","sources":["../../../../src/utils/hashing/v1.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { doubleToByteArrayBigInt, writeNumberForBinaryEncodingBigInt } from \"./encoding/number.js\";\nimport { writeStringForBinaryEncoding } from \"./encoding/string.js\";\nimport { BytePrefix } from \"./encoding/prefix.js\";\nimport MurmurHash from \"./murmurHash.js\";\nimport type { PrimitivePartitionKeyValue } from \"../../documents/index.js\";\nimport { concatUint8Arrays, hexStringToUint8Array, uint8ArrayToHex } from \"../uint8.js\";\n\nconst MAX_STRING_CHARS = 100;\n\nexport function hashV1PartitionKey(partitionKey: PrimitivePartitionKeyValue[]): string {\n  const key = partitionKey[0];\n  const toHash = prefixKeyByType(key);\n  const hash = MurmurHash.x86.hash32(toHash);\n  const encodedJSBI = writeNumberForBinaryEncodingBigInt(hash);\n  const encodedValue = encodeByType(key);\n  const finalHash = uint8ArrayToHex(concatUint8Arrays([encodedJSBI, encodedValue])).toUpperCase();\n  return finalHash;\n}\n\nfunction prefixKeyByType(key: PrimitivePartitionKeyValue): Uint8Array {\n  let bytes: Uint8Array;\n  switch (typeof key) {\n    case \"string\": {\n      const truncated = key.substr(0, MAX_STRING_CHARS);\n      bytes = concatUint8Arrays([\n        hexStringToUint8Array(BytePrefix.String),\n        new TextEncoder().encode(truncated),\n        hexStringToUint8Array(BytePrefix.Undefined),\n      ]);\n      return bytes;\n    }\n    case \"number\": {\n      const numberBytes = doubleToByteArrayBigInt(key);\n      bytes = concatUint8Arrays([hexStringToUint8Array(BytePrefix.Number), numberBytes]);\n      return bytes;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return hexStringToUint8Array(prefix);\n    }\n    case \"object\": {\n      if (key === null) {\n        return hexStringToUint8Array(BytePrefix.Null);\n      }\n      return hexStringToUint8Array(BytePrefix.Undefined);\n    }\n    case \"undefined\": {\n      return hexStringToUint8Array(BytePrefix.Undefined);\n    }\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n\nfunction encodeByType(key: PrimitivePartitionKeyValue): Uint8Array {\n  switch (typeof key) {\n    case \"string\": {\n      const truncated = key.substring(0, MAX_STRING_CHARS);\n      return writeStringForBinaryEncoding(truncated);\n    }\n    case \"number\": {\n      return writeNumberForBinaryEncodingBigInt(key);\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return hexStringToUint8Array(prefix);\n    }\n    case \"object\":\n      if (key === null) {\n        return hexStringToUint8Array(BytePrefix.Null);\n      }\n      return hexStringToUint8Array(BytePrefix.Undefined);\n    case \"undefined\":\n      return hexStringToUint8Array(BytePrefix.Undefined);\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n"]}