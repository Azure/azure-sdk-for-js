{"version":3,"file":"Database.js","sourceRoot":"","sources":["../../../../src/client/Database/Database.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext.js\";\nimport {\n  createDatabaseUri,\n  getIdFromLink,\n  getPathFromLink,\n  ResourceType,\n} from \"../../common/index.js\";\nimport type { CosmosClient } from \"../../CosmosClient.js\";\nimport { ErrorResponse, type RequestOptions } from \"../../request/index.js\";\nimport { Container, Containers } from \"../Container/index.js\";\nimport { User, Users } from \"../User/index.js\";\nimport type { DatabaseDefinition } from \"./DatabaseDefinition.js\";\nimport { DatabaseResponse } from \"./DatabaseResponse.js\";\nimport type { OfferDefinition } from \"../Offer/index.js\";\nimport { OfferResponse, Offer } from \"../Offer/index.js\";\nimport type { Resource } from \"../Resource.js\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal.js\";\nimport {\n  getEmptyCosmosDiagnostics,\n  withDiagnostics,\n  withMetadataDiagnostics,\n} from \"../../utils/diagnostics.js\";\nimport { MetadataLookUpType } from \"../../CosmosDiagnostics.js\";\nimport type {\n  ClientEncryptionKeyRequest,\n  KeyEncryptionKey,\n  EncryptionKeyWrapMetadata,\n  ClientEncryptionKeyProperties,\n} from \"../../encryption/index.js\";\nimport {\n  ClientEncryptionKeyResponse,\n  EncryptionAlgorithm,\n  KeyEncryptionAlgorithm,\n} from \"../../encryption/index.js\";\nimport type { EncryptionManager } from \"../../encryption/EncryptionManager.js\";\n/**\n * Operations for reading or deleting an existing database.\n *\n * @see {@link Databases} for creating new databases, and reading/querying all databases; use `client.databases`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `database.read()` before every single `item.read()` call, to ensure the database exists;\n * do this once on application start up.\n */\nexport class Database {\n  /**\n   * Used for creating new containers, or querying/reading all containers.\n   *\n   * Use `.database(id)` to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * @example Create a new container\n   * ```ts snippet:DatabaseCreateContainer\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const { body: containerDefinition, container } = await client\n   *   .database(\"<db id>\")\n   *   .containers.create({ id: \"<container id>\" });\n   * ```\n   */\n  public readonly containers: Containers;\n  /**\n   * Used for creating new users, or querying/reading all users.\n   *\n   * Use `.user(id)` to read, replace, or delete a specific, existing {@link User} by id.\n   */\n  public readonly users: Users;\n\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   * @example\n   * ```ts snippet:DatabaseGetUrl\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   *\n   * const url = database.url;\n   * ```\n   */\n  public get url(): string {\n    return createDatabaseUri(this.id);\n  }\n\n  /**\n   * @internal\n   */\n  public _rid: string;\n\n  /** Returns a new {@link Database} instance.\n   *\n   * Note: the intention is to get this object from {@link CosmosClient} via `client.database(id)`, not to instantiate it yourself.\n   * @hidden\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    public readonly id: string,\n    private clientContext: ClientContext,\n    private encryptionManager?: EncryptionManager,\n    _rid?: string,\n  ) {\n    this.containers = new Containers(this, this.clientContext, this.encryptionManager);\n    this.users = new Users(this, this.clientContext);\n    this._rid = _rid;\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * Use `.containers` creating new containers, or querying/reading all containers.\n   *\n   * @example Delete a container\n   * ```ts snippet:DatabaseDeleteContainer\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * await client.database(\"<db id>\").container(\"<container id>\").delete();\n   * ```\n   */\n  public container(id: string): Container {\n    return new Container(this, id, this.clientContext, this.encryptionManager);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link User} by id.\n   *\n   * Use `.users` for creating new users, or querying/reading all users.\n   * @example Delete a user\n   * ```ts snippet:DatabaseDeleteUser\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * await client.database(\"<db id>\").user(\"<user id>\").delete();\n   * ```\n   */\n  public user(id: string): User {\n    return new User(this, id, this.clientContext);\n  }\n\n  /** Read the definition of the given Database.\n   * @example\n   * ```ts snippet:DatabaseRead\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const { resource: database } = await client.database(\"<db id>\").read();\n   * ```\n   */\n  public async read(options?: RequestOptions): Promise<DatabaseResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.readInternal(diagnosticNode, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async readInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    options?: RequestOptions,\n  ): Promise<DatabaseResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<DatabaseDefinition>({\n      path,\n      resourceType: ResourceType.database,\n      resourceId: id,\n      options,\n      diagnosticNode,\n    });\n    return new DatabaseResponse(\n      response.result,\n      response.headers,\n      response.code,\n      this,\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n\n  /** Delete the given Database.\n   * @example\n   * ```ts snippet:CosmosClientDatabaseDelete\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * await client.database(\"<id here>\").delete();\n   * ```\n   */\n  public async delete(options?: RequestOptions): Promise<DatabaseResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<DatabaseDefinition>({\n        path,\n        resourceType: ResourceType.database,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new DatabaseResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets offer on database. If none exists, returns an OfferResponse with undefined.\n   * @example Read the offer on the database\n   * ```ts snippet:DatabaseReadOffer\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const { resource: offer } = await client.database(\"<db id>\").readOffer();\n   * ```\n   */\n  public async readOffer(options: RequestOptions = {}): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const { resource: record } = await withMetadataDiagnostics(\n        async (node: DiagnosticNodeInternal) => {\n          return this.readInternal(node);\n        },\n        diagnosticNode,\n        MetadataLookUpType.DatabaseLookUp,\n      );\n\n      const path = \"/offers\";\n      const url = record._self;\n\n      const response = await this.clientContext.queryFeed<OfferDefinition & Resource[]>({\n        path,\n        resourceId: \"\",\n        resourceType: ResourceType.offer,\n        query: `SELECT * from root where root.resource = \"${url}\"`,\n        resultFn: (result) => result.Offers,\n        options,\n        diagnosticNode,\n      });\n      const offer = response.result[0]\n        ? new Offer(this.client, response.result[0].id, this.clientContext)\n        : undefined;\n      return new OfferResponse(\n        response.result[0],\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        offer,\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Create Encryption key for database account\n   * @example\n   * ```ts snippet:DatabaseCreateClientEncryptionKey\n   * import { ClientSecretCredential } from \"@azure/identity\";\n   * import {\n   *   AzureKeyVaultEncryptionKeyResolver,\n   *   CosmosClient,\n   *   EncryptionKeyWrapMetadata,\n   *   EncryptionKeyResolverName,\n   *   KeyEncryptionAlgorithm,\n   *   EncryptionAlgorithm,\n   * } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const credentials = new ClientSecretCredential(\"<tenant-id>\", \"<client-id>\", \"<app-secret>\");\n   * const keyResolver = new AzureKeyVaultEncryptionKeyResolver(credentials);\n   * const client = new CosmosClient({\n   *   endpoint,\n   *   key,\n   *   clientEncryptionOptions: {\n   *     keyEncryptionKeyResolver: keyResolver,\n   *   },\n   * });\n   * const { database } = await client.databases.createIfNotExists({ id: \"<db id>\" });\n   * const metadata: EncryptionKeyWrapMetadata = {\n   *   type: EncryptionKeyResolverName.AzureKeyVault,\n   *   name: \"<key-name>\",\n   *   value: \"<key-vault-url>\",\n   *   algorithm: KeyEncryptionAlgorithm.RSA_OAEP,\n   * };\n   *\n   * await database.createClientEncryptionKey(\n   *   \"<cek-id>\",\n   *   EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256,\n   *   metadata,\n   * );\n   * ```\n   */\n  public async createClientEncryptionKey(\n    clientEncryptionKeyId: string,\n    encryptionAlgorithm: EncryptionAlgorithm,\n    keyWrapMetadata: EncryptionKeyWrapMetadata,\n  ): Promise<ClientEncryptionKeyResponse> {\n    if (clientEncryptionKeyId == null || !clientEncryptionKeyId.trim()) {\n      throw new Error(\"encryption key id cannot be null or empty\");\n    }\n    if (encryptionAlgorithm !== EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256) {\n      throw new Error(`Invalid encryption algorithm '${encryptionAlgorithm}' passed.`);\n    }\n    if (!keyWrapMetadata) {\n      throw new Error(\"encryptionKeyWrapMetadata cannot be null.\");\n    }\n    if (keyWrapMetadata.algorithm !== KeyEncryptionAlgorithm.RSA_OAEP) {\n      throw new Error(`Invalid key wrap algorithm '${keyWrapMetadata.algorithm}' passed.`);\n    }\n    if (!this.clientContext.enableEncryption) {\n      throw new Error(\n        \"Creating a client encryption key requires the use of an encryption-enabled client.\",\n      );\n    }\n\n    const keyEncryptionKey: KeyEncryptionKey =\n      this.encryptionManager.keyEncryptionKeyCache.getOrCreate(\n        keyWrapMetadata.name,\n        keyWrapMetadata.value,\n        this.encryptionManager.encryptionKeyStoreProvider,\n      );\n\n    const protectedDataEncryptionKey =\n      await this.encryptionManager.protectedDataEncryptionKeyCache.getOrCreate(\n        clientEncryptionKeyId,\n        keyEncryptionKey,\n      );\n\n    const wrappedDataEncryptionKey = protectedDataEncryptionKey.encryptedValue;\n\n    const body: ClientEncryptionKeyRequest = {\n      id: clientEncryptionKeyId,\n      encryptionAlgorithm: encryptionAlgorithm,\n      keyWrapMetadata: keyWrapMetadata,\n      wrappedDataEncryptionKey: wrappedDataEncryptionKey.toString(\"base64\"),\n    };\n\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url, ResourceType.clientencryptionkey);\n      const databaseId = getIdFromLink(this.url);\n      const response = await this.clientContext.create<ClientEncryptionKeyRequest>({\n        body,\n        path: path,\n        resourceType: ResourceType.clientencryptionkey,\n        resourceId: databaseId,\n        diagnosticNode,\n      });\n      const ref: ClientEncryptionKeyProperties = {\n        id: response.result.id,\n        encryptionAlgorithm: response.result.encryptionAlgorithm,\n        etag: response.result._etag,\n        wrappedDataEncryptionKey: new Uint8Array(\n          Buffer.from(response.result.wrappedDataEncryptionKey, \"base64\"),\n        ),\n        encryptionKeyWrapMetadata: response.result.keyWrapMetadata,\n      };\n      return new ClientEncryptionKeyResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Read Encryption key for database account\n   * @example\n   * ```ts snippet:DatabaseReadClientEncryptionKey\n   * import { ClientSecretCredential } from \"@azure/identity\";\n   * import { AzureKeyVaultEncryptionKeyResolver, CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const credentials = new ClientSecretCredential(\"<tenant-id>\", \"<client-id>\", \"<app-secret>\");\n   * const keyResolver = new AzureKeyVaultEncryptionKeyResolver(credentials);\n   * const client = new CosmosClient({\n   *   endpoint,\n   *   key,\n   *   clientEncryptionOptions: {\n   *     keyEncryptionKeyResolver: keyResolver,\n   *   },\n   * });\n   * const { database } = await client.databases.createIfNotExists({ id: \"<db id>\" });\n   *\n   * const { resource: clientEncryptionKey } = await database.readClientEncryptionKey(\"<cek-id>\");\n   * ```\n   */\n  public async readClientEncryptionKey(\n    clientEncryptionKeyId: string,\n  ): Promise<ClientEncryptionKeyResponse> {\n    if (clientEncryptionKeyId == null || !clientEncryptionKeyId.trim()) {\n      throw new ErrorResponse(\"encryption key id cannot be null or empty\");\n    }\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (!this._rid) {\n        const databaseResponse = await this.readInternal(diagnosticNode);\n        if (!databaseResponse || !databaseResponse.resource) {\n          throw new ErrorResponse(`Error reading database with id ${clientEncryptionKeyId}`);\n        }\n        this._rid = databaseResponse.resource._rid;\n      }\n      const path = getPathFromLink(this.url, ResourceType.clientencryptionkey);\n      const resourceid = getIdFromLink(this.url);\n      const response = await this.clientContext.read<ClientEncryptionKeyRequest>({\n        path: path + `/${clientEncryptionKeyId}`,\n        resourceType: ResourceType.clientencryptionkey,\n        resourceId: resourceid + `/${ResourceType.clientencryptionkey}/${clientEncryptionKeyId}`,\n        options: { databaseRid: this._rid },\n        diagnosticNode,\n      });\n      if (!response || !response.result) {\n        throw new ErrorResponse(\n          `Error reading client encryption key with id ${clientEncryptionKeyId}`,\n        );\n      }\n      const ref: ClientEncryptionKeyProperties = {\n        id: response.result.id,\n        encryptionAlgorithm: response.result.encryptionAlgorithm,\n        etag: response.result._etag,\n        wrappedDataEncryptionKey: new Uint8Array(\n          Buffer.from(response.result.wrappedDataEncryptionKey, \"base64\"),\n        ),\n        encryptionKeyWrapMetadata: response.result.keyWrapMetadata,\n      };\n      return new ClientEncryptionKeyResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n  /**\n   * rewraps a client encryption key with new key encryption key\n   * @param id - client encryption key id\n   * @param newKeyWrapMetadata - new encryption key wrap metadata\n   * @returns rewrapped client encryption key with new customer managed key\n   * @example\n   * ```ts snippet:DatabaseRewrapClientEncryptionKey\n   * import { ClientSecretCredential } from \"@azure/identity\";\n   * import {\n   *   AzureKeyVaultEncryptionKeyResolver,\n   *   CosmosClient,\n   *   EncryptionKeyWrapMetadata,\n   *   EncryptionKeyResolverName,\n   *   KeyEncryptionAlgorithm,\n   * } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const credentials = new ClientSecretCredential(\"<tenant-id>\", \"<client-id>\", \"<app-secret>\");\n   * const keyResolver = new AzureKeyVaultEncryptionKeyResolver(credentials);\n   * const client = new CosmosClient({\n   *   endpoint,\n   *   key,\n   *   clientEncryptionOptions: {\n   *     keyEncryptionKeyResolver: keyResolver,\n   *   },\n   * });\n   * const { database } = await client.databases.createIfNotExists({ id: \"<db id>\" });\n   * const newMetadata: EncryptionKeyWrapMetadata = {\n   *   type: EncryptionKeyResolverName.AzureKeyVault,\n   *   name: \"<key-name>\",\n   *   value: \"<key-vault-url>\",\n   *   algorithm: KeyEncryptionAlgorithm.RSA_OAEP,\n   * };\n   *\n   * await database.rewrapClientEncryptionKey(\"<new-cek-id>\", newMetadata);\n   * ```\n   */\n  public async rewrapClientEncryptionKey(\n    clientEncryptionKeyId: string,\n    newKeyWrapMetadata: EncryptionKeyWrapMetadata,\n  ): Promise<ClientEncryptionKeyResponse> {\n    if (clientEncryptionKeyId == null || !clientEncryptionKeyId.trim()) {\n      throw new ErrorResponse(\"encryption key id cannot be null or empty\");\n    }\n    if (!newKeyWrapMetadata) {\n      throw new ErrorResponse(\"encryptionKeyWrapMetadata cannot be null.\");\n    }\n    if (newKeyWrapMetadata.algorithm !== KeyEncryptionAlgorithm.RSA_OAEP) {\n      throw new ErrorResponse(\n        `Invalid key wrap algorithm '${newKeyWrapMetadata.algorithm}' passed.`,\n      );\n    }\n    if (!this.clientContext.enableEncryption) {\n      throw new ErrorResponse(\n        \"Rewrapping a client encryption key requires the use of an encryption-enabled client.\",\n      );\n    }\n\n    const res = await this.readClientEncryptionKey(clientEncryptionKeyId);\n    if (!res || !res.clientEncryptionKeyProperties) {\n      throw new ErrorResponse(\n        `Error reading client encryption key with id ${clientEncryptionKeyId}`,\n      );\n    }\n    let clientEncryptionKeyProperties = res.clientEncryptionKeyProperties;\n\n    let keyEncryptionKey = this.encryptionManager.keyEncryptionKeyCache.getOrCreate(\n      clientEncryptionKeyProperties.encryptionKeyWrapMetadata.name,\n      clientEncryptionKeyProperties.encryptionKeyWrapMetadata.value,\n      this.encryptionManager.encryptionKeyStoreProvider,\n    );\n    const unwrappedKey = await keyEncryptionKey.unwrapEncryptionKey(\n      Buffer.from(clientEncryptionKeyProperties.wrappedDataEncryptionKey),\n    );\n\n    keyEncryptionKey = this.encryptionManager.keyEncryptionKeyCache.getOrCreate(\n      newKeyWrapMetadata.name,\n      newKeyWrapMetadata.value,\n      this.encryptionManager.encryptionKeyStoreProvider,\n    );\n    const rewrappedKey = await keyEncryptionKey.wrapEncryptionKey(unwrappedKey);\n    clientEncryptionKeyProperties = {\n      id: clientEncryptionKeyId,\n      encryptionAlgorithm: clientEncryptionKeyProperties.encryptionAlgorithm,\n      etag: clientEncryptionKeyProperties.etag,\n      wrappedDataEncryptionKey: rewrappedKey,\n      encryptionKeyWrapMetadata: newKeyWrapMetadata,\n    };\n    const body: ClientEncryptionKeyRequest = {\n      id: clientEncryptionKeyId,\n      encryptionAlgorithm: clientEncryptionKeyProperties.encryptionAlgorithm,\n      keyWrapMetadata: newKeyWrapMetadata,\n      wrappedDataEncryptionKey: rewrappedKey.toString(\"base64\"),\n    };\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url, ResourceType.clientencryptionkey);\n      const resourceid = getIdFromLink(this.url);\n      const options = {\n        accessCondition: { type: \"IfMatch\", condition: clientEncryptionKeyProperties.etag },\n      };\n      const response = await this.clientContext.replace<ClientEncryptionKeyRequest>({\n        body,\n        path: path + `/${clientEncryptionKeyId}`,\n        resourceType: ResourceType.clientencryptionkey,\n        resourceId: resourceid + `/${ResourceType.clientencryptionkey}/${clientEncryptionKeyId}`,\n        options,\n        diagnosticNode,\n      });\n\n      if (!response || !response.result) {\n        throw new ErrorResponse(\n          `Error rewrapping client encryption key with id ${clientEncryptionKeyId}`,\n        );\n      }\n\n      const ref: ClientEncryptionKeyProperties = {\n        id: response.result.id,\n        encryptionAlgorithm: response.result.encryptionAlgorithm,\n        etag: response.result._etag,\n        wrappedDataEncryptionKey: new Uint8Array(\n          Buffer.from(response.result.wrappedDataEncryptionKey, \"base64\"),\n        ),\n        encryptionKeyWrapMetadata: response.result.keyWrapMetadata,\n      };\n      return new ClientEncryptionKeyResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"]}