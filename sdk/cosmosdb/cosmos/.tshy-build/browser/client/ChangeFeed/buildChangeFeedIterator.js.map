{"version":3,"file":"buildChangeFeedIterator.js","sourceRoot":"","sources":["../../../../src/client/ChangeFeed/buildChangeFeedIterator.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAEpD,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,4BAA4B,EAAE,MAAM,mCAAmC,CAAC;AACjF,OAAO,EAAE,+BAA+B,EAAE,MAAM,sCAAsC,CAAC;AACvF,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrE,OAAO,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AACvE,OAAO,EAAE,sBAAsB,EAAE,MAAM,sBAAsB,CAAC;AAC9D,OAAO,EAAE,yBAAyB,EAAE,MAAM,gCAAgC,CAAC;AAC3E,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACvD,OAAO,EAAE,qBAAqB,EAAE,MAAM,4BAA4B,CAAC;AACnE,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAChG,OAAO,EACL,8BAA8B,EAC9B,cAAc,EACd,UAAU,EACV,gCAAgC,GACjC,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAE,oBAAoB,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAKjF,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAC3C,SAAoC,EACpC,aAA4B,EAC5B,SAAoB,EACpB,sBAA8C;IAE9C,MAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC;IAC1B,MAAM,IAAI,GAAG,eAAe,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;IACrD,MAAM,EAAE,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;IAE9B,IAAI,mBAAmB,GAAG,SAAS,CAAC,mBAAmB,CAAC;IAExD,IAAI,mBAAmB,KAAK,SAAS,EAAE,CAAC;QACtC,mBAAmB,GAAG,mBAAmB,CAAC,GAAG,EAAE,CAAC;IAClD,CAAC;IAED,IAAI,mBAAmB,YAAY,+BAA+B,EAAE,CAAC;QACnE,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,CAAC;QAClE,MAAM,YAAY,GAAG,mBAAmB,CAAC,eAAe,EAAE,CAAC;QAC3D,MAAM,iBAAiB,GAAG,8BAA8B,CACtD,SAAS,EACT,mBAAmB,CAAC,aAAa,EAAE,CACpC,CAAC;QAEF,IACE,YAAY,KAAK,sBAAsB,CAAC,YAAY;YACpD,cAAc,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAC9C,CAAC;YACD,OAAO,IAAI,yBAAyB,CAClC,aAAa,EACb,SAAS,EACT,EAAE,EACF,IAAI,EACJ,iBAAiB,CAAC,YAAY,EAC9B,iBAAiB,CAClB,CAAC;QACJ,CAAC;aAAM,IAAI,YAAY,KAAK,sBAAsB,CAAC,SAAS,EAAE,CAAC;YAC7D,OAAO,IAAI,qBAAqB,CAC9B,aAAa,EACb,SAAS,EACT,sBAAsB,EACtB,EAAE,EACF,IAAI,EACJ,GAAG,EACH,iBAAiB,EACjB,SAAS,CACV,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,aAAa,CAAC,6BAA6B,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;SAAM,IACL,mBAAmB,YAAY,sBAAsB;QACrD,mBAAmB,YAAY,uBAAuB;QACtD,mBAAmB,YAAY,4BAA4B,EAC3D,CAAC;QACD,MAAM,YAAY,GAAG,mBAAmB,YAAY,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAC1F,MAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;QAEjF,MAAM,iBAAiB,GAAG,8BAA8B,CACtD,SAAS,EACT,SAAS,EACT,SAAS,EACT,YAAY,CACb,CAAC;QACF,MAAM,UAAU,GAAG,mBAAmB,CAAC,aAAa,EAAE,CAAC;QACvD,IAAI,cAAc,CAAC,UAAU,CAAC,EAAE,CAAC;YAC/B,MAAM,YAAY,GAAG,UAA0B,CAAC;YAChD,MAAM,sBAAsB,GAAG,MAAM,SAAS,CAAC,yBAAyB,EAAE,CAAC;YAE3E,IACE,sBAAsB,KAAK,SAAS;gBACpC,oBAAoB,CAAC,YAAY,EAAE,sBAAsB,CAAC,QAAQ,CAAC,EACnE,CAAC;gBACD,MAAM,iBAAiB,GAAG,MAAM,gCAAgC,CAC9D,YAAoC,CACrC,CAAC;gBACF,OAAO,IAAI,qBAAqB,CAC9B,aAAa,EACb,SAAS,EACT,sBAAsB,EACtB,EAAE,EACF,IAAI,EACJ,GAAG,EACH,iBAAiB,EACjB,iBAAiB,CAClB,CAAC;YACJ,CAAC;YAED,OAAO,IAAI,yBAAyB,CAClC,aAAa,EACb,SAAS,EACT,EAAE,EACF,IAAI,EACJ,UAA0B,EAC1B,iBAAiB,CAClB,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,IAAI,kBAA8B,CAAC;YACnC,IAAI,UAAU,KAAK,SAAS,EAAE,CAAC;gBAC7B,kBAAkB,GAAG,IAAI,UAAU,CACjC,SAAS,CAAC,8BAA8B,CAAC,qCAAqC,EAC9E,SAAS,CAAC,8BAA8B,CAAC,qCAAqC,EAC9E,IAAI,EACJ,KAAK,CACN,CAAC;YACJ,CAAC;iBAAM,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;gBAClC,kBAAkB,GAAG,IAAI,UAAU,CAChC,UAAgC,CAAC,YAAY,EAC7C,UAAgC,CAAC,YAAY,EAC9C,IAAI,EACJ,KAAK,CACN,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,aAAa,CAAC,qBAAqB,CAAC,CAAC;YACjD,CAAC;YACD,OAAO,IAAI,qBAAqB,CAC9B,aAAa,EACb,SAAS,EACT,sBAAsB,EACtB,EAAE,EACF,IAAI,EACJ,GAAG,EACH,iBAAiB,EACjB,kBAAkB,CACnB,CAAC;QACJ,CAAC;IACH,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,aAAa,CAAC,qCAAqC,CAAC,CAAC;IACjE,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext.js\";\nimport type { PartitionKey } from \"../../documents/index.js\";\nimport type { PartitionKeyRangeCache } from \"../../routing/index.js\";\nimport { QueryRange } from \"../../routing/index.js\";\nimport type { ChangeFeedIteratorOptions } from \"./ChangeFeedIteratorOptions.js\";\nimport { ChangeFeedStartFrom } from \"./ChangeFeedStartFrom.js\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning.js\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation.js\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow.js\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime.js\";\nimport { ChangeFeedResourceType } from \"./ChangeFeedEnums.js\";\nimport { ChangeFeedForPartitionKey } from \"./ChangeFeedForPartitionKey.js\";\nimport { ErrorResponse } from \"../../request/index.js\";\nimport { ChangeFeedForEpkRange } from \"./ChangeFeedForEpkRange.js\";\nimport { getIdFromLink, getPathFromLink, ResourceType, Constants } from \"../../common/index.js\";\nimport {\n  buildInternalChangeFeedOptions,\n  fetchStartTime,\n  isEpkRange,\n  getEPKRangeForPrefixPartitionKey,\n} from \"./changeFeedUtils.js\";\nimport { isPrefixPartitionKey, isPartitionKey } from \"../../utils/typeChecks.js\";\nimport type { Container } from \"../Container/index.js\";\nimport type { FeedRangeInternal } from \"./FeedRange.js\";\nimport { PartitionKeyInternal } from \"../../documents/PartitionKeyInternal.js\";\n\nexport async function buildChangeFeedIterator(\n  cfOptions: ChangeFeedIteratorOptions,\n  clientContext: ClientContext,\n  container: Container,\n  partitionKeyRangeCache: PartitionKeyRangeCache,\n): Promise<any> {\n  const url = container.url;\n  const path = getPathFromLink(url, ResourceType.item);\n  const id = getIdFromLink(url);\n\n  let changeFeedStartFrom = cfOptions.changeFeedStartFrom;\n\n  if (changeFeedStartFrom === undefined) {\n    changeFeedStartFrom = ChangeFeedStartFrom.Now();\n  }\n\n  if (changeFeedStartFrom instanceof ChangeFeedStartFromContinuation) {\n    const continuationToken = changeFeedStartFrom.getCfResourceJson();\n    const resourceType = changeFeedStartFrom.getResourceType();\n    const internalCfOptions = buildInternalChangeFeedOptions(\n      cfOptions,\n      changeFeedStartFrom.getCfResource(),\n    );\n\n    if (\n      resourceType === ChangeFeedResourceType.PartitionKey &&\n      isPartitionKey(continuationToken.partitionKey)\n    ) {\n      return new ChangeFeedForPartitionKey(\n        clientContext,\n        container,\n        id,\n        path,\n        continuationToken.partitionKey,\n        internalCfOptions,\n      );\n    } else if (resourceType === ChangeFeedResourceType.FeedRange) {\n      return new ChangeFeedForEpkRange(\n        clientContext,\n        container,\n        partitionKeyRangeCache,\n        id,\n        path,\n        url,\n        internalCfOptions,\n        undefined,\n      );\n    } else {\n      throw new ErrorResponse(\"Invalid continuation token.\");\n    }\n  } else if (\n    changeFeedStartFrom instanceof ChangeFeedStartFromNow ||\n    changeFeedStartFrom instanceof ChangeFeedStartFromTime ||\n    changeFeedStartFrom instanceof ChangeFeedStartFromBeginning\n  ) {\n    const startFromNow = changeFeedStartFrom instanceof ChangeFeedStartFromNow ? true : false;\n    const startTime = startFromNow ? undefined : fetchStartTime(changeFeedStartFrom);\n\n    const internalCfOptions = buildInternalChangeFeedOptions(\n      cfOptions,\n      undefined,\n      startTime,\n      startFromNow,\n    );\n    const cfResource = changeFeedStartFrom.getCfResource();\n    if (isPartitionKey(cfResource)) {\n      const partitionKey = cfResource as PartitionKey;\n      const partitionKeyDefinition = await container.getPartitionKeyDefinition();\n\n      if (\n        partitionKeyDefinition !== undefined &&\n        isPrefixPartitionKey(partitionKey, partitionKeyDefinition.resource)\n      ) {\n        const effectiveEPKRange = await getEPKRangeForPrefixPartitionKey(\n          partitionKey as PartitionKeyInternal,\n        );\n        return new ChangeFeedForEpkRange(\n          clientContext,\n          container,\n          partitionKeyRangeCache,\n          id,\n          path,\n          url,\n          internalCfOptions,\n          effectiveEPKRange,\n        );\n      }\n\n      return new ChangeFeedForPartitionKey(\n        clientContext,\n        container,\n        id,\n        path,\n        cfResource as PartitionKey,\n        internalCfOptions,\n      );\n    } else {\n      let internalCfResource: QueryRange;\n      if (cfResource === undefined) {\n        internalCfResource = new QueryRange(\n          Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey,\n          Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey,\n          true,\n          false,\n        );\n      } else if (isEpkRange(cfResource)) {\n        internalCfResource = new QueryRange(\n          (cfResource as FeedRangeInternal).minInclusive,\n          (cfResource as FeedRangeInternal).maxExclusive,\n          true,\n          false,\n        );\n      } else {\n        throw new ErrorResponse(\"Invalid feed range.\");\n      }\n      return new ChangeFeedForEpkRange(\n        clientContext,\n        container,\n        partitionKeyRangeCache,\n        id,\n        path,\n        url,\n        internalCfOptions,\n        internalCfResource,\n      );\n    }\n  } else {\n    throw new ErrorResponse(\"Invalid change feed start location.\");\n  }\n}\n"]}