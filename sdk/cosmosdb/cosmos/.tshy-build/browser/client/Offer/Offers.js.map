{"version":3,"file":"Offers.js","sourceRoot":"","sources":["../../../../src/client/Offer/Offers.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AAGrD,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAKvD;;;;GAIG;AACH,MAAM,OAAO,MAAM;IACjB;;;OAGG;IACH,YACkB,MAAoB,EACnB,aAA4B;QAD7B,WAAM,GAAN,MAAM,CAAc;QACnB,kBAAa,GAAb,aAAa,CAAe;IAC5C,CAAC;IA0BG,KAAK,CAAI,KAAmB,EAAE,OAAqB;QACxD,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,cAAc,EAAE,YAAY,EAAE,EAAE;YAC5F,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAI;gBACrC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE,YAAY,CAAC,KAAK;gBAChC,UAAU,EAAE,EAAE;gBACd,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM;gBACnC,KAAK;gBACL,OAAO,EAAE,YAAY;gBACrB,cAAc;aACf,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;;;OAYG;IACI,OAAO,CAAC,OAAqB;QAClC,OAAO,IAAI,CAAC,KAAK,CAA6B,SAAS,EAAE,OAAO,CAAC,CAAC;IACpE,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext.js\";\nimport { ResourceType } from \"../../common/index.js\";\nimport type { CosmosClient } from \"../../CosmosClient.js\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext/index.js\";\nimport { QueryIterator } from \"../../queryIterator.js\";\nimport type { FeedOptions } from \"../../request/index.js\";\nimport type { Resource } from \"../Resource.js\";\nimport type { OfferDefinition } from \"./OfferDefinition.js\";\n\n/**\n * Use to query or read all Offers.\n *\n * @see {@link Offer} to read or replace an existing {@link Offer} by id.\n */\nexport class Offers {\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the offers.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all offers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @example Read offer for a specific id.\n   * ```ts snippet:OffersQuery\n   * import { CosmosClient, SqlQuerySpec } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const querySpec: SqlQuerySpec = {\n   *   query: `SELECT * FROM root r WHERE r.id = @offer`,\n   *   parameters: [{ name: \"@offer\", value: \"<offer-id>\" }],\n   * };\n   * const { resources: offer } = await client.offers.query(querySpec).fetchAll();\n   * ```\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all offers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed<T>({\n        path: \"/offers\",\n        resourceType: ResourceType.offer,\n        resourceId: \"\",\n        resultFn: (result) => result.Offers,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all offers.\n   * @example Read all offers to array.\n   * ```ts snippet:OffersReadAll\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const { resources: offerList } = await client.offers.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<OfferDefinition & Resource> {\n    return this.query<OfferDefinition & Resource>(undefined, options);\n  }\n}\n"]}