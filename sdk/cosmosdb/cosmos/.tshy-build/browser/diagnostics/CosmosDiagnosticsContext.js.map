{"version":3,"file":"CosmosDiagnosticsContext.js","sourceRoot":"","sources":["../../../src/diagnostics/CosmosDiagnosticsContext.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Constants } from \"../common/index.js\";\nimport type {\n  ClientSideRequestStatistics,\n  EncryptionDiagnostics,\n  FailedRequestAttemptDiagnostic,\n  GatewayStatistics,\n  MetadataLookUpDiagnostic,\n  MetadataLookUpType,\n} from \"../CosmosDiagnostics.js\";\nimport { getCurrentTimestampInMs } from \"../utils/time.js\";\n/**\n * @hidden\n * Internal class to hold CosmosDiagnostic aggregate information all through the lifecycle of a request.\n * This object gathers diagnostic information throughout Client operation which may span across multiple\n * Server call, retries etc.\n * Functions - recordFailedAttempt, recordMetaDataQuery, recordEndpointContactEvent are used to ingest\n * data into the context. At the end of operation, getDiagnostics() is used to\n * get final CosmosDiagnostic object.\n */\nexport class CosmosDiagnosticContext {\n  private requestStartTimeUTCinMs: number;\n  private failedAttempts: FailedRequestAttemptDiagnostic[] = [];\n  private metadataLookups: MetadataLookUpDiagnostic[] = [];\n  private gatewayStatistics: GatewayStatistics[] = [];\n  public locationEndpointsContacted: Set<string> = new Set();\n  encryptionDiagnostics: EncryptionDiagnostics;\n\n  public constructor() {\n    this.requestStartTimeUTCinMs = getCurrentTimestampInMs();\n  }\n\n  public recordFailedAttempt(\n    gatewayStatistics: GatewayStatistics,\n    retryAttemptNumber: number,\n  ): void {\n    const attempt: FailedRequestAttemptDiagnostic = {\n      attemptNumber: retryAttemptNumber,\n      startTimeUTCInMs: gatewayStatistics.startTimeUTCInMs,\n      durationInMs: gatewayStatistics.durationInMs,\n      statusCode: gatewayStatistics.statusCode,\n      substatusCode: gatewayStatistics.subStatusCode,\n      requestPayloadLengthInBytes: gatewayStatistics.requestPayloadLengthInBytes,\n      responsePayloadLengthInBytes: gatewayStatistics.responsePayloadLengthInBytes,\n      activityId: gatewayStatistics.activityId,\n      operationType: gatewayStatistics.operationType,\n      resourceType: gatewayStatistics.resourceType,\n    };\n    this.failedAttempts.push(attempt);\n  }\n\n  public recordNetworkCall(gatewayStatistics: GatewayStatistics): void {\n    this.gatewayStatistics.push(gatewayStatistics);\n  }\n\n  public recordEncryptionDiagnostics(encryptionDiagnostics: EncryptionDiagnostics): void {\n    const { encryptContent, decryptContent } = encryptionDiagnostics;\n    const encryptionDuration = encryptContent[Constants.Encryption.DiagnosticsDuration] ?? 0;\n    const decryptionDuration = decryptContent[Constants.Encryption.DiagnosticsDuration] ?? 0;\n\n    encryptionDiagnostics.processingDurationInMs = encryptionDuration + decryptionDuration;\n    this.encryptionDiagnostics = encryptionDiagnostics;\n  }\n\n  /**\n   * Merge given DiagnosticContext to current node's DiagnosticContext, Treating GatewayRequests of\n   * given DiagnosticContext, as metadata requests.\n   */\n  public mergeDiagnostics(\n    childDiagnostics: CosmosDiagnosticContext,\n    metadataType: MetadataLookUpType,\n  ): void {\n    // Copy Location endpoints contacted.\n    childDiagnostics.locationEndpointsContacted.forEach((endpoint) =>\n      this.locationEndpointsContacted.add(endpoint),\n    );\n\n    // Copy child nodes's GatewayStatistics to parent's metadata lookups.\n    childDiagnostics.gatewayStatistics.forEach((gateway) =>\n      this.metadataLookups.push({\n        activityId: gateway.activityId,\n        requestPayloadLengthInBytes: gateway.requestPayloadLengthInBytes,\n        responsePayloadLengthInBytes: gateway.responsePayloadLengthInBytes,\n        startTimeUTCInMs: gateway.startTimeUTCInMs,\n        operationType: gateway.operationType,\n        resourceType: gateway.resourceType,\n        durationInMs: gateway.durationInMs,\n        metaDataType: metadataType,\n      }),\n    );\n  }\n\n  /**\n   * Merge given DiagnosticContext to current node's DiagnosticContext for bulk\n   */\n  public mergeBulkDiagnostics(childDiagnostics: CosmosDiagnosticContext): void {\n    // Copy Location endpoints contacted.\n    childDiagnostics.locationEndpointsContacted.forEach((endpoint) =>\n      this.locationEndpointsContacted.add(endpoint),\n    );\n\n    // Copy child nodes's GatewayStatistics to parent's gateway statistics.\n    childDiagnostics.gatewayStatistics.forEach((gateway) => this.gatewayStatistics.push(gateway));\n    // merge metadata lookups and failed attempts\n    childDiagnostics.metadataLookups.forEach((lookup) => this.metadataLookups.push(lookup));\n    childDiagnostics.failedAttempts.forEach((lookup) => this.failedAttempts.push(lookup));\n\n    if (!this.encryptionDiagnostics) {\n      this.encryptionDiagnostics = childDiagnostics.encryptionDiagnostics;\n    } else if (childDiagnostics.encryptionDiagnostics) {\n      this.encryptionDiagnostics.decryptContent =\n        childDiagnostics.encryptionDiagnostics.decryptContent;\n      this.encryptionDiagnostics.processingDurationInMs =\n        (this.encryptionDiagnostics.processingDurationInMs || 0) +\n        (childDiagnostics.encryptionDiagnostics.processingDurationInMs || 0);\n    }\n  }\n\n  public getClientSideStats(\n    endTimeUTCInMs: number = getCurrentTimestampInMs(),\n  ): ClientSideRequestStatistics {\n    return {\n      requestStartTimeUTCInMs: this.requestStartTimeUTCinMs,\n      requestDurationInMs: endTimeUTCInMs - this.requestStartTimeUTCinMs,\n      totalRequestPayloadLengthInBytes: this.getTotalRequestPayloadLength(),\n      totalResponsePayloadLengthInBytes: this.getTotalResponsePayloadLength(),\n      locationEndpointsContacted: [...this.locationEndpointsContacted.values()],\n      metadataDiagnostics: {\n        metadataLookups: [...this.metadataLookups],\n      },\n      retryDiagnostics: {\n        failedAttempts: [...this.failedAttempts],\n      },\n      gatewayStatistics: this.gatewayStatistics,\n      encryptionDiagnostics: this.encryptionDiagnostics,\n    };\n  }\n\n  public getTotalRequestPayloadLength(): number {\n    let totalRequestPayloadLength = 0;\n    this.gatewayStatistics.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    this.metadataLookups.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    this.failedAttempts.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    return totalRequestPayloadLength;\n  }\n\n  public getTotalResponsePayloadLength(): number {\n    let totalResponsePayloadLength = 0;\n    this.gatewayStatistics.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    this.metadataLookups.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    this.failedAttempts.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    return totalResponsePayloadLength;\n  }\n\n  public recordEndpointResolution(location: string): void {\n    this.locationEndpointsContacted.add(location);\n  }\n}\n"]}