{"version":3,"file":"GlobalStatisticsAggregator.js","sourceRoot":"","sources":["../../../../src/queryExecutionContext/Aggregators/GlobalStatisticsAggregator.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAKlC,MAAM,OAAO,0BAA0B;IAGrC;QACE,IAAI,CAAC,gBAAgB,GAAG;YACtB,aAAa,EAAE,CAAC;YAChB,kBAAkB,EAAE,EAAE;SACvB,CAAC;IACJ,CAAC;IAEM,SAAS,CAAC,KAAuB;QACtC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO;QACT,CAAC;QACD,2BAA2B;QAC3B,IAAI,CAAC,gBAAgB,CAAC,aAAa,IAAI,KAAK,CAAC,aAAa,CAAC;QAC3D,6CAA6C;QAC7C,IAAI,CAAC,KAAK,CAAC,kBAAkB,IAAI,KAAK,CAAC,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvE,OAAO;QACT,CAAC;QAED,sEAAsE;QACtE,IAAI,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC1D,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBACjF,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,SAAS,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;aAC/B,CAAC,CAAC,CAAC;QACN,CAAC;aAAM,CAAC;YACN,sGAAsG;YACtG,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACzD,MAAM,SAAS,GAAG,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;gBAE9C,sCAAsC;gBACtC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC;oBACjD,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG;wBAC5C,cAAc,EAAE,CAAC;wBACjB,SAAS,EAAE,EAAE;qBACd,CAAC;gBACJ,CAAC;gBAED,qBAAqB;gBACrB,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,cAAc,IAAI,SAAS,CAAC,cAAc,CAAC;gBAEvF,wBAAwB;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACpD,oCAAoC;oBACpC,IAAI,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;wBACtE,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAChE,CAAC;oBACD,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACrF,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { GlobalStatistics } from \"../../request/globalStatistics.js\";\nimport type { Aggregator } from \"./Aggregator.js\";\n\nexport class GlobalStatisticsAggregator implements Aggregator {\n  private globalStatistics: GlobalStatistics;\n\n  constructor() {\n    this.globalStatistics = {\n      documentCount: 0,\n      fullTextStatistics: [],\n    };\n  }\n\n  public aggregate(other: GlobalStatistics): void {\n    if (!other) {\n      return;\n    }\n    // Aggregate document count\n    this.globalStatistics.documentCount += other.documentCount;\n    // Ensure `fullTextStatistics` is initialized\n    if (!other.fullTextStatistics || other.fullTextStatistics.length === 0) {\n      return;\n    }\n\n    // Initialize `this.globalStatistics.fullTextStatistics` if it's empty\n    if (this.globalStatistics.fullTextStatistics.length === 0) {\n      this.globalStatistics.fullTextStatistics = other.fullTextStatistics.map((stat) => ({\n        totalWordCount: stat.totalWordCount,\n        hitCounts: [...stat.hitCounts],\n      }));\n    } else {\n      // Loop through `other.fullTextStatistics` to add values to `this.globalStatistics.fullTextStatistics`\n      for (let i = 0; i < other.fullTextStatistics.length; i++) {\n        const otherStat = other.fullTextStatistics[i];\n\n        // Ensure the index `i` is initialized\n        if (!this.globalStatistics.fullTextStatistics[i]) {\n          this.globalStatistics.fullTextStatistics[i] = {\n            totalWordCount: 0,\n            hitCounts: [],\n          };\n        }\n\n        // Add totalWordCount\n        this.globalStatistics.fullTextStatistics[i].totalWordCount += otherStat.totalWordCount;\n\n        // Aggregate `hitCounts`\n        for (let j = 0; j < otherStat.hitCounts.length; j++) {\n          // Initialize hit count if necessary\n          if (this.globalStatistics.fullTextStatistics[i].hitCounts.length <= j) {\n            this.globalStatistics.fullTextStatistics[i].hitCounts.push(0);\n          }\n          this.globalStatistics.fullTextStatistics[i].hitCounts[j] += otherStat.hitCounts[j];\n        }\n      }\n    }\n  }\n\n  public getResult(): GlobalStatistics {\n    return this.globalStatistics;\n  }\n}\n"]}