{"version":3,"file":"orderByQueryExecutionContext.js","sourceRoot":"","sources":["../../../src/queryExecutionContext/orderByQueryExecutionContext.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,iCAAiC,EAAE,MAAM,wCAAwC,CAAC;AAC3F,OAAO,EAAE,iCAAiC,EAAE,MAAM,wCAAwC,CAAC;AAG3F,cAAc;AACd,MAAM,OAAO,4BACX,SAAQ,iCAAiC;IAIzC;;;;;;;;;;;;OAYG;IACH,YACE,aAA4B,EAC5B,cAAsB,EACtB,KAA4B,EAC5B,OAAoB,EACpB,6BAA4D,EAC5D,oBAA4B;QAE5B,oCAAoC;QACpC,KAAK,CACH,aAAa,EACb,cAAc,EACd,KAAK,EACL,OAAO,EACP,6BAA6B,EAC7B,oBAAoB,CACrB,CAAC;QACF,IAAI,CAAC,iBAAiB,GAAG,IAAI,iCAAiC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAClF,CAAC;IACD,iCAAiC;IAEjC,0EAA0E;IAC1E;;;;OAIG;IACI,0BAA0B,CAAC,QAA0B,EAAE,QAA0B;QACtF,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,SAAS,CAAC,cAAuC;QAC5D,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;YACnD,MAAM,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;YAC3C,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YACrD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../ClientContext.js\";\nimport type { PartitionedQueryExecutionInfo } from \"../request/ErrorResponse.js\";\nimport type { FeedOptions } from \"../request/FeedOptions.js\";\nimport type { DocumentProducer } from \"./documentProducer.js\";\nimport type { ExecutionContext } from \"./ExecutionContext.js\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal.js\";\nimport { OrderByDocumentProducerComparator } from \"./orderByDocumentProducerComparator.js\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase.js\";\nimport type { SqlQuerySpec } from \"./SqlQuerySpec.js\";\n\n/** @hidden */\nexport class OrderByQueryExecutionContext\n  extends ParallelQueryExecutionContextBase\n  implements ExecutionContext\n{\n  private orderByComparator: any;\n  /**\n   * Provides the OrderByQueryExecutionContext.\n   * This class is capable of handling orderby queries and dervives from ParallelQueryExecutionContextBase.\n   *\n   * When handling a parallelized query, it instantiates one instance of\n   * DocumentProcuder per target partition key range and aggregates the result of each.\n   *\n   * @param clientContext - The service endpoint to use to create the client.\n   * @param collectionLink - The Collection Link\n   * @param options - Represents the feed options.\n   * @param partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo\n   * @hidden\n   */\n  constructor(\n    clientContext: ClientContext,\n    collectionLink: string,\n    query: string | SqlQuerySpec,\n    options: FeedOptions,\n    partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo,\n    correlatedActivityId: string,\n  ) {\n    // Calling on base class constructor\n    super(\n      clientContext,\n      collectionLink,\n      query,\n      options,\n      partitionedQueryExecutionInfo,\n      correlatedActivityId,\n    );\n    this.orderByComparator = new OrderByDocumentProducerComparator(this.sortOrders);\n  }\n  // Instance members are inherited\n\n  // Overriding documentProducerComparator for OrderByQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers which respects orderby sort order.\n   * @returns Comparator Function\n   * @hidden\n   */\n  public documentProducerComparator(docProd1: DocumentProducer, docProd2: DocumentProducer): any {\n    return this.orderByComparator.compare(docProd1, docProd2);\n  }\n\n  /**\n   * Fetches more results from the query execution context.\n   * @param diagnosticNode - Optional diagnostic node for tracing.\n   * @returns A promise that resolves to the fetched results.\n   * @hidden\n   */\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<any> {\n    try {\n      await this.bufferDocumentProducers(diagnosticNode);\n      await this.fillBufferFromBufferQueue(true);\n      return this.drainBufferedItems();\n    } catch (error) {\n      console.error(\"Error fetching more results:\", error);\n      throw error;\n    }\n  }\n}\n"]}