{"version":3,"file":"BulkResponse.js","sourceRoot":"","sources":["../../../src/bulk/BulkResponse.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Constants } from \"../common/constants.js\";\nimport { StatusCodes, SubStatusCodes } from \"../common/statusCodes.js\";\nimport type { CosmosDiagnostics, Response } from \"../index.js\";\nimport { ErrorResponse } from \"../index.js\";\nimport type { CosmosHeaders } from \"../queryExecutionContext/headerUtils.js\";\nimport type { StatusCode, SubStatusCode } from \"../request/StatusCodes.js\";\nimport type { ExtendedOperationResponse } from \"../utils/batch.js\";\nimport { isSuccessStatusCode } from \"../utils/batch.js\";\nimport type { ItemOperation } from \"./index.js\";\n\n/**\n * Represents a batch response for bulk request.\n * @hidden\n */\n\nexport class BulkResponse {\n  statusCode: StatusCode;\n  subStatusCode: SubStatusCode;\n  headers: CosmosHeaders;\n  operations: ItemOperation[];\n  results: (ExtendedOperationResponse | ErrorResponse)[] = [];\n  diagnostics: CosmosDiagnostics;\n\n  constructor(\n    statusCode: StatusCode,\n    subStatusCode: SubStatusCode,\n    headers: CosmosHeaders,\n    operations: ItemOperation[],\n  ) {\n    this.statusCode = statusCode;\n    this.subStatusCode = subStatusCode;\n    this.headers = headers;\n    this.operations = operations;\n  }\n\n  /**\n   * Generate empty response object\n   */\n  static createEmptyResponse(\n    operations: ItemOperation[],\n    statusCode: StatusCode,\n    subStatusCode: SubStatusCode,\n    headers: CosmosHeaders,\n  ): BulkResponse {\n    const bulkResponse = new BulkResponse(statusCode, subStatusCode, headers, operations);\n    bulkResponse.createAndPopulateResults(operations, 0, new ErrorResponse());\n    return bulkResponse;\n  }\n\n  /**\n   * static method to create BulkResponse from Response object\n   */\n  static fromResponseMessage(\n    responseMessage: Response<any>,\n    operations: ItemOperation[],\n  ): BulkResponse {\n    // Create and populate the response object\n    let bulkResponse = this.populateFromResponse(responseMessage, operations);\n\n    if (!bulkResponse.results || bulkResponse.results.length !== operations.length) {\n      // Server should be guaranteeing number of results equal to operations when\n      // batch request is successful - so fail as InternalServerError if this is not the case.\n      if (isSuccessStatusCode(responseMessage.code)) {\n        bulkResponse = new BulkResponse(\n          StatusCodes.InternalServerError,\n          SubStatusCodes.Unknown,\n          responseMessage.headers,\n          operations,\n        );\n      }\n\n      // When the overall response status code is TooManyRequests, propagate the RetryAfter into the individual operations.\n      let retryAfterMilliseconds = 0;\n\n      if (responseMessage.code === StatusCodes.TooManyRequests) {\n        const retryAfter = responseMessage.headers?.[Constants.HttpHeaders.RetryAfterInMs];\n        retryAfterMilliseconds = !retryAfter || isNaN(Number(retryAfter)) ? 0 : Number(retryAfter);\n      }\n\n      bulkResponse.createAndPopulateResults(\n        operations,\n        retryAfterMilliseconds,\n        responseMessage as ErrorResponse,\n      );\n    }\n    return bulkResponse;\n  }\n\n  private static populateFromResponse(\n    responseMessage: Response<any>,\n    operations: ItemOperation[],\n  ): BulkResponse {\n    const results: (ExtendedOperationResponse | ErrorResponse)[] = [];\n\n    if (responseMessage.result) {\n      for (let i = 0; i < operations.length; i++) {\n        const itemResponse = responseMessage.result[i];\n\n        if (isSuccessStatusCode(itemResponse?.statusCode)) {\n          const result: ExtendedOperationResponse = {\n            statusCode: itemResponse?.statusCode,\n            eTag: itemResponse?.eTag,\n            activityId: responseMessage.headers?.[Constants.HttpHeaders.ActivityId],\n            sessionToken: responseMessage.headers?.[Constants.HttpHeaders.SessionToken],\n            requestCharge: itemResponse?.requestCharge,\n            resourceBody: itemResponse?.resourceBody,\n            // diagnostics will be filled in Batcher dispatch to capture the complete diagnostics(e.g. decryption)\n            diagnostics: null,\n            headers: responseMessage.headers,\n          };\n          results.push(result);\n        } else {\n          const error: ErrorResponse = new ErrorResponse();\n          error.code = itemResponse?.statusCode;\n          error.substatus = itemResponse?.subStatusCode;\n          error.message = itemResponse?.message;\n          error.requestCharge = itemResponse?.requestCharge;\n          error.body = itemResponse?.resourceBody;\n          error.headers = responseMessage.headers;\n          error.activityId = responseMessage.headers?.[Constants.HttpHeaders.ActivityId];\n          error.retryAfterInMs = itemResponse?.retryAfterMilliseconds;\n          error.diagnostics = responseMessage.diagnostics;\n          results.push(error);\n        }\n      }\n    }\n    let statusCode = responseMessage.code;\n    let subStatusCode = responseMessage.substatus;\n\n    if (responseMessage.code === StatusCodes.MultiStatus) {\n      for (const result of results) {\n        if (\n          result instanceof ErrorResponse &&\n          result.statusCode !== StatusCodes.FailedDependency &&\n          result.statusCode >= StatusCodes.BadRequest\n        ) {\n          statusCode = typeof result.code === \"number\" ? result.code : Number(result.code);\n          subStatusCode = result.substatus;\n          break;\n        }\n      }\n    }\n\n    const bulkResponse = new BulkResponse(\n      statusCode,\n      subStatusCode,\n      responseMessage.headers,\n      operations,\n    );\n    bulkResponse.results = results;\n    return bulkResponse;\n  }\n\n  private createAndPopulateResults(\n    operations: ItemOperation[],\n    retryAfterInMs: number,\n    error: ErrorResponse,\n  ): void {\n    this.results = operations.map(() => {\n      const errorResponse = new ErrorResponse();\n      errorResponse.message = error.message;\n      errorResponse.code = this.statusCode;\n      errorResponse.substatus = this.subStatusCode;\n      errorResponse.retryAfterInMs = retryAfterInMs;\n      errorResponse.activityId = this.headers?.[Constants.HttpHeaders.ActivityId];\n      errorResponse.body = error.body;\n      errorResponse.diagnostics = error.diagnostics;\n      errorResponse.headers = this.headers;\n      errorResponse.requestCharge = error.requestCharge;\n      return errorResponse;\n    });\n  }\n}\n"]}