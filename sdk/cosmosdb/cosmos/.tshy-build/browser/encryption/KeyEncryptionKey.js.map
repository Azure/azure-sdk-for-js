{"version":3,"file":"KeyEncryptionKey.js","sourceRoot":"","sources":["../../../src/encryption/KeyEncryptionKey.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,sBAAsB,EAAE,MAAM,mCAAmC,CAAC;AAE3E;;;GAGG;AACH,MAAM,OAAO,gBAAgB;IAS3B,YAAY,IAAY,EAAE,IAAY,EAAE,gBAA4C;QAClF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,mBAAmB,GAAG,sBAAsB,CAAC,QAAQ,CAAC;IAC7D,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,sBAA8B;QAC3D,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAClC,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,mBAAmB,EACxB,sBAAsB,CACvB,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,mBAAmB,CAAC,oBAA4B;QAC3D,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CACpC,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,mBAAmB,EACxB,oBAAoB,CACrB,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { KeyEncryptionAlgorithm } from \"./enums/KeyEncryptionAlgorithm.js\";\nimport type { EncryptionKeyStoreProvider } from \"./EncryptionKeyStoreProvider.js\";\n/**\n * A wrapper class containing the info about the key-protecting key stored in an external key provider\n * and provides interface to wrap and unwrap the key.\n */\nexport class KeyEncryptionKey {\n  private encryptionAlgorithm: KeyEncryptionAlgorithm;\n\n  public name: string;\n\n  public path: string;\n\n  public keyStoreProvider: EncryptionKeyStoreProvider;\n\n  constructor(name: string, path: string, keyStoreProvider: EncryptionKeyStoreProvider) {\n    this.name = name;\n    this.path = path;\n    this.keyStoreProvider = keyStoreProvider;\n    this.encryptionAlgorithm = KeyEncryptionAlgorithm.RSA_OAEP;\n  }\n\n  public async wrapEncryptionKey(plainTextEncryptionKey: Buffer): Promise<Buffer> {\n    return this.keyStoreProvider.wrapKey(\n      this.path,\n      this.encryptionAlgorithm,\n      plainTextEncryptionKey,\n    );\n  }\n\n  public async unwrapEncryptionKey(wrappedEncryptionKey: Buffer): Promise<Buffer> {\n    return this.keyStoreProvider.unwrapKey(\n      this.path,\n      this.encryptionAlgorithm,\n      wrappedEncryptionKey,\n    );\n  }\n}\n"]}