{"version":3,"file":"FeedResponse.js","sourceRoot":"","sources":["../../../src/request/FeedResponse.ts"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,kCAAkC;AAClC,iDAA+C;AAE/C,4EAGiD;AAGjD,MAAa,YAAY;IACvB,YACkB,SAAsB,EACrB,OAAsB,EACvB,cAAuB,EACvB,WAA8B;QAH9B,cAAS,GAAT,SAAS,CAAa;QACrB,YAAO,GAAP,OAAO,CAAe;QACvB,mBAAc,GAAd,cAAc,CAAS;QACvB,gBAAW,GAAX,WAAW,CAAmB;IAC7C,CAAC;IAEJ,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IACD,IAAW,iBAAiB;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAS,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAC1D,CAAC;IACD,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAS,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAC1D,CAAC;IACD,IAAW,aAAa;QACtB,OAAO,IAAA,sCAAqB,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IACD,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;IACD,IAAW,oBAAoB;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAS,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;IAClE,CAAC;IACD,IAAW,YAAY;QACrB,OAAO,IAAA,yCAAwB,EAAC,IAAI,CAAC,OAAO,CAAC,oBAAS,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC;IACxF,CAAC;CACF;AA7BD,oCA6BC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common/index.js\";\nimport type { CosmosHeaders } from \"../queryExecutionContext/headerUtils.js\";\nimport {\n  decodeAndParseJSONString,\n  getRequestChargeIfAny,\n} from \"../queryExecutionContext/headerUtils.js\";\nimport type { CosmosDiagnostics } from \"../CosmosDiagnostics.js\";\n\nexport class FeedResponse<TResource> {\n  constructor(\n    public readonly resources: TResource[],\n    private readonly headers: CosmosHeaders,\n    public readonly hasMoreResults: boolean,\n    public readonly diagnostics: CosmosDiagnostics,\n  ) {}\n\n  public get continuation(): string {\n    return this.continuationToken;\n  }\n  public get continuationToken(): string {\n    return this.headers[Constants.HttpHeaders.Continuation];\n  }\n  public get queryMetrics(): string {\n    return this.headers[Constants.HttpHeaders.QueryMetrics];\n  }\n  public get requestCharge(): number {\n    return getRequestChargeIfAny(this.headers);\n  }\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n  public get correlatedActivityId(): string {\n    return this.headers[Constants.HttpHeaders.CorrelatedActivityId];\n  }\n  public get indexMetrics(): string {\n    return decodeAndParseJSONString(this.headers[Constants.HttpHeaders.IndexUtilization]);\n  }\n}\n"]}