{"version":3,"file":"ItemOperationContext.js","sourceRoot":"","sources":["../../../src/bulk/ItemOperationContext.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAKlC,gDAAyD;AAEzD;;;GAGG;AACH,MAAa,oBAAoB;IAM/B,YAAY,SAAiB,EAAE,WAAwB,EAAE,cAAsC;QAC7F,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,oBAAoB,GAAG,IAAI,+BAAoB,EAAuB,CAAC;IAC9E,CAAC;IAED,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;IACxC,CAAC;IAED,kBAAkB,CAAC,cAAsC;QACvD,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QAC1F,cAAc,CAAC,eAAe,EAAE,CAAC;IACnC,CAAC;IAED,eAAe,CAAC,SAAiB;QAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,QAAQ,CAAC,MAA2B;QAClC,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED,IAAI,CAAC,KAA0B;QAC7B,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;CACF;AAjCD,oDAiCC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { type DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal.js\";\nimport type { RetryPolicy } from \"../retry/RetryPolicy.js\";\nimport type { BulkOperationResult } from \"../utils/batch.js\";\nimport { TaskCompletionSource } from \"../utils/batch.js\";\n\n/**\n * Context for a particular @see {@link ItemOperation}.\n * @hidden\n */\nexport class ItemOperationContext {\n  pkRangeId: string;\n  retryPolicy: RetryPolicy;\n  diagnosticNode: DiagnosticNodeInternal;\n  private readonly taskCompletionSource: TaskCompletionSource<BulkOperationResult>;\n\n  constructor(pkRangeId: string, retryPolicy: RetryPolicy, diagnosticNode: DiagnosticNodeInternal) {\n    this.pkRangeId = pkRangeId;\n    this.retryPolicy = retryPolicy;\n    this.diagnosticNode = diagnosticNode;\n    this.taskCompletionSource = new TaskCompletionSource<BulkOperationResult>();\n  }\n\n  public get operationPromise(): Promise<BulkOperationResult> {\n    return this.taskCompletionSource.task;\n  }\n\n  addDiagnosticChild(diagnosticNode: DiagnosticNodeInternal): void {\n    this.diagnosticNode.addBulkChildNode(diagnosticNode, this.diagnosticNode.diagnosticLevel);\n    diagnosticNode.updateTimestamp();\n  }\n\n  updatePKRangeId(pkRangeId: string): void {\n    this.pkRangeId = pkRangeId;\n  }\n\n  complete(result: BulkOperationResult): void {\n    this.taskCompletionSource.setResult(result);\n  }\n\n  fail(error: BulkOperationResult): void {\n    this.taskCompletionSource.setException(error.error);\n  }\n}\n"]}