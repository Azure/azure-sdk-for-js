{"version":3,"file":"typeChecks.js","sourceRoot":"","sources":["../../../src/utils/typeChecks.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA2BlC,gDAKC;AAMD,oEAMC;AAMD,wEAEC;AAMD,0DAEC;AAMD,0DAEC;AAKD,wCAEC;AAKD,oDAWC;AAlFD,oDAI+B;AAO/B;;;;;;GAMG;AACH,SAAgB,kBAAkB,CAAI,KAAQ,EAAE,GAAY;IAC1D,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;QACxB,OAAO,KAA0B,CAAC;IACpC,CAAC;IACD,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,0CAA0C,CAAC,CAAC;AACrE,CAAC;AAED;;;GAGG;AACH,SAAgB,4BAA4B,CAAC,KAAc;IACzD,OAAO,CACL,8BAA8B,CAAC,KAAK,CAAC;QACrC,uBAAuB,CAAC,KAAK,CAAC;QAC9B,uBAAuB,CAAC,KAAK,CAAC,CAC/B,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,SAAgB,8BAA8B,CAAC,KAAc;IAC3D,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,SAAS,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC;AAC9F,CAAC;AAED;;;GAGG;AACH,SAAgB,uBAAuB,CAAC,KAAc;IACpD,OAAO,KAAK,KAAK,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,kCAAuB,CAAC,CAAC;AAClG,CAAC;AAED;;;GAGG;AACH,SAAgB,uBAAuB,CAAC,KAAc;IACpD,OAAO,KAAK,KAAK,kCAAuB,CAAC;AAC3C,CAAC;AACD;;;GAGG;AACH,SAAgB,cAAc,CAAC,YAAqB;IAClD,OAAO,4BAA4B,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;AACnF,CAAC;AACD;;;GAGG;AACH,SAAgB,oBAAoB,CAClC,YAA0B,EAC1B,sBAA8C;IAE9C,OAAO,CACL,sBAAsB;QACtB,sBAAsB,CAAC,KAAK;QAC5B,sBAAsB,CAAC,IAAI,KAAK,2BAAgB,CAAC,SAAS;QAC1D,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC;QAC3B,YAAY,CAAC,MAAM,GAAG,sBAAsB,CAAC,KAAK,CAAC,MAAM,CAC1D,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  NonePartitionKeyType,\n  NullPartitionKeyType,\n  PartitionKey,\n  PartitionKeyDefinition,\n  PrimitivePartitionKeyValue,\n} from \"../documents/index.js\";\nimport {\n  NonePartitionKeyLiteral,\n  NullPartitionKeyLiteral,\n  PartitionKeyKind,\n} from \"../documents/index.js\";\n\n/**\n * A type which could be any type but undefined\n */\nexport type NonUndefinable<T> = T extends undefined ? never : T;\n\n/**\n * Utility function to avoid writing boilder plate code while checking for\n * undefined values. It throws Error if the input value is undefined.\n * @param value - Value which is potentially undefined.\n * @param msg - Error Message to throw if value is undefined.\n * @returns\n */\nexport function assertNotUndefined<T>(value: T, msg?: string): NonUndefinable<T> {\n  if (value !== undefined) {\n    return value as NonUndefinable<T>;\n  }\n  throw new Error(msg || \"Unexpected 'undefined' value encountered\");\n}\n\n/**\n * Check for value being PrimitivePartitionKeyValue.\n * @internal\n */\nexport function isPrimitivePartitionKeyValue(value: unknown): value is PrimitivePartitionKeyValue {\n  return (\n    isWellDefinedPartitionKeyValue(value) ||\n    isNonePartitionKeyValue(value) ||\n    isNullPartitionKeyValue(value)\n  );\n}\n\n/**\n * Check for value being string, number or boolean.\n * @internal\n */\nexport function isWellDefinedPartitionKeyValue(value: unknown): value is string | number | boolean {\n  return typeof value === \"string\" || typeof value === \"boolean\" || typeof value === \"number\";\n}\n\n/**\n * Check for value being NonePartitionKeyType.\n * @internal\n */\nexport function isNonePartitionKeyValue(value: unknown): value is NonePartitionKeyType {\n  return value !== undefined && JSON.stringify(value) === JSON.stringify(NonePartitionKeyLiteral);\n}\n\n/**\n * Check for value being NullPartitionKeyType.\n * @internal\n */\nexport function isNullPartitionKeyValue(value: unknown): value is NullPartitionKeyType {\n  return value === NullPartitionKeyLiteral;\n}\n/**\n * Verify validity of partition key.\n * @internal\n */\nexport function isPartitionKey(partitionKey: unknown): boolean {\n  return isPrimitivePartitionKeyValue(partitionKey) || Array.isArray(partitionKey);\n}\n/**\n * Check for value being PrefixPartitionKey.\n * @internal\n */\nexport function isPrefixPartitionKey(\n  partitionKey: PartitionKey,\n  partitionKeyDefinition: PartitionKeyDefinition,\n): boolean {\n  return (\n    partitionKeyDefinition &&\n    partitionKeyDefinition.paths &&\n    partitionKeyDefinition.kind === PartitionKeyKind.MultiHash &&\n    Array.isArray(partitionKey) &&\n    partitionKey.length < partitionKeyDefinition.paths.length\n  );\n}\n"]}