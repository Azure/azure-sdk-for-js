{"version":3,"file":"hash.js","sourceRoot":"","sources":["../../../../src/utils/hashing/hash.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAclC,4CAeC;AA1BD,uDAA2F;AAC3F,iDAA2D;AAC3D,mCAA6C;AAC7C,mCAA6C;AAE7C;;;;;GAKG;AACH,SAAgB,gBAAgB,CAC9B,YAA0C,EAC1C,mBAA2C;IAE3C,MAAM,IAAI,GAAqB,CAAA,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,IAAI,KAAI,2BAAgB,CAAC,IAAI,CAAC,CAAC,iBAAiB;IACpG,MAAM,IAAI,GACR,mBAAmB;QACnB,mBAAmB,CAAC,OAAO;QAC3B,mBAAmB,CAAC,OAAO,KAAK,wCAA6B,CAAC,EAAE,CAAC;IACnE,QAAQ,IAAI,EAAE,CAAC;QACb,KAAK,2BAAgB,CAAC,IAAI;YACxB,OAAO,IAAI,CAAC,CAAC,CAAC,IAAA,0BAAkB,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAA,0BAAkB,EAAC,YAAY,CAAC,CAAC;QACpF,KAAK,2BAAgB,CAAC,SAAS;YAC7B,OAAO,IAAA,wCAAyB,EAAC,YAAY,CAAC,CAAC;IACnD,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PartitionKeyDefinition, PrimitivePartitionKeyValue } from \"../../documents/index.js\";\nimport { PartitionKeyDefinitionVersion, PartitionKeyKind } from \"../../documents/index.js\";\nimport { hashMultiHashPartitionKey } from \"./multiHash.js\";\nimport { hashV1PartitionKey } from \"./v1.js\";\nimport { hashV2PartitionKey } from \"./v2.js\";\n\n/**\n * Generate hash of a PartitonKey based on it PartitionKeyDefinition.\n * @param partitionKey - to be hashed.\n * @param partitionDefinition - container's partitionKey definition\n * @returns\n */\nexport function hashPartitionKey(\n  partitionKey: PrimitivePartitionKeyValue[],\n  partitionDefinition: PartitionKeyDefinition,\n): string {\n  const kind: PartitionKeyKind = partitionDefinition?.kind || PartitionKeyKind.Hash; // Default value.\n  const isV2 =\n    partitionDefinition &&\n    partitionDefinition.version &&\n    partitionDefinition.version === PartitionKeyDefinitionVersion.V2;\n  switch (kind) {\n    case PartitionKeyKind.Hash:\n      return isV2 ? hashV2PartitionKey(partitionKey) : hashV1PartitionKey(partitionKey);\n    case PartitionKeyKind.MultiHash:\n      return hashMultiHashPartitionKey(partitionKey);\n  }\n}\n"]}