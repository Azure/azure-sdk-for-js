{"version":3,"file":"ConnectionPolicy.js","sourceRoot":"","sources":["../../../src/documents/ConnectionPolicy.ts"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,kCAAkC;AAClC,yDAAmD;AAEnD,2DAAqD;AA8BrD;;GAEG;AACU,QAAA,uBAAuB,GAAqB,MAAM,CAAC,MAAM,CAAC;IACrE,cAAc,EAAE,kCAAc,CAAC,OAAO;IACtC,cAAc,EAAE,KAAK;IACrB,uBAAuB,EAAE,IAAI;IAC7B,kBAAkB,EAAE,EAAE;IACtB,YAAY,EAAE;QACZ,oBAAoB,EAAE,wBAAS,CAAC,oCAAoC;QACpE,gCAAgC,EAAE,wBAAS,CAAC,sCAAsC;QAClF,oBAAoB,EAAE,wBAAS,CAAC,oCAAoC;KACrE;IACD,yBAAyB,EAAE,IAAI;IAC/B,uBAAuB,EAAE,MAAM;IAC/B,kCAAkC,EAAE,IAAI;CACzC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common/constants.js\";\nimport type { RetryOptions } from \"../retry/retryOptions.js\";\nimport { ConnectionMode } from \"./ConnectionMode.js\";\n/**\n * Represents the Connection policy associated with a CosmosClient in the Azure Cosmos DB database service.\n */\nexport interface ConnectionPolicy {\n  /** Determines which mode to connect to Cosmos with. (Currently only supports Gateway option) */\n  connectionMode?: ConnectionMode;\n  /** Request timeout (time to wait for response from network peer). Represented in milliseconds. */\n  requestTimeout?: number;\n  /**\n   * Flag to enable/disable automatic redirecting of requests based on read/write operations. Default true.\n   * Required to call client.dispose() when this is set to true after destroying the CosmosClient inside another process or in the browser.\n   */\n  enableEndpointDiscovery?: boolean;\n  /** List of azure regions to be used as preferred locations for read requests. */\n  preferredLocations?: string[];\n  /** RetryOptions object which defines several configurable properties used during retry. */\n  retryOptions?: RetryOptions;\n  /**\n   * The flag that enables writes on any locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service.\n   * Default is `true`.\n   */\n  useMultipleWriteLocations?: boolean;\n  /** Rate in milliseconds at which the client will refresh the endpoints list in the background */\n  endpointRefreshRateInMs?: number;\n  /** Flag to enable/disable background refreshing of endpoints. Defaults to true.\n   * Endpoint discovery using `enableEndpointsDiscovery` will still work for failed requests. */\n  enableBackgroundEndpointRefreshing?: boolean;\n}\n\n/**\n * @hidden\n */\nexport const defaultConnectionPolicy: ConnectionPolicy = Object.freeze({\n  connectionMode: ConnectionMode.Gateway,\n  requestTimeout: 60000,\n  enableEndpointDiscovery: true,\n  preferredLocations: [],\n  retryOptions: {\n    maxRetryAttemptCount: Constants.ThrottledRequestMaxRetryAttemptCount,\n    fixedRetryIntervalInMilliseconds: Constants.ThrottledRequestFixedRetryIntervalInMs,\n    maxWaitTimeInSeconds: Constants.ThrottledRequestMaxWaitTimeInSeconds,\n  },\n  useMultipleWriteLocations: true,\n  endpointRefreshRateInMs: 300000,\n  enableBackgroundEndpointRefreshing: true,\n});\n"]}