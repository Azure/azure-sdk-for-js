{"version":3,"file":"PartitionKeyInternal.js","sourceRoot":"","sources":["../../../src/documents/PartitionKeyInternal.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AA8BlC,sEAIC;AApBD;;;GAGG;AACU,QAAA,uBAAuB,GAAyB,EAAE,CAAC;AAChE;;;GAGG;AACU,QAAA,uBAAuB,GAAyB,IAAI,CAAC;AAClE;;;;;GAKG;AACH,SAAgB,6BAA6B,CAAC,YAA0B;IACtE,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC;QAChC,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,+BAAuB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACxF,CAAC;;QAAM,OAAO,CAAC,YAAY,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  NonePartitionKeyType,\n  NullPartitionKeyType,\n  PartitionKey,\n  PrimitivePartitionKeyValue,\n} from \"./PartitionKey.js\";\n\n/**\n * @hidden\n * Internal Representation Of Partition Key. TODO: Make sure {@link ClientContext} working with only {@link PartitionKeyInternal}\n */\nexport type PartitionKeyInternal = PrimitivePartitionKeyValue[];\n/**\n * @hidden\n * None PartitionKey Literal\n */\nexport const NonePartitionKeyLiteral: NonePartitionKeyType = {};\n/**\n * @hidden\n * Null PartitionKey Literal\n */\nexport const NullPartitionKeyLiteral: NullPartitionKeyType = null;\n/**\n * @hidden\n * Maps PartitionKey to InternalPartitionKey.\n * @param partitionKey - PartitonKey to be converted.\n * @returns PartitionKeyInternal\n */\nexport function convertToInternalPartitionKey(partitionKey: PartitionKey): PartitionKeyInternal {\n  if (Array.isArray(partitionKey)) {\n    return partitionKey.map((key) => (key === undefined ? NonePartitionKeyLiteral : key));\n  } else return [partitionKey];\n}\n"]}