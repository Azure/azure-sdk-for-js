{"version":3,"file":"queryMetrics.js","sourceRoot":"","sources":["../../../src/queryMetrics/queryMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ClientSideMetrics } from \"./clientSideMetrics.js\";\nimport QueryMetricsConstants from \"./queryMetricsConstants.js\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils.js\";\nimport { QueryPreparationTimes } from \"./queryPreparationTime.js\";\nimport { RuntimeExecutionTimes } from \"./runtimeExecutionTimes.js\";\nimport { TimeSpan } from \"./timeSpan.js\";\n\nexport class QueryMetrics {\n  constructor(\n    public readonly retrievedDocumentCount: number,\n    public readonly retrievedDocumentSize: number,\n    public readonly outputDocumentCount: number,\n    public readonly outputDocumentSize: number,\n    public readonly indexHitDocumentCount: number,\n    public readonly totalQueryExecutionTime: TimeSpan,\n    public readonly queryPreparationTimes: QueryPreparationTimes,\n    public readonly indexLookupTime: TimeSpan,\n    public readonly documentLoadTime: TimeSpan,\n    public readonly vmExecutionTime: TimeSpan,\n    public readonly runtimeExecutionTimes: RuntimeExecutionTimes,\n    public readonly documentWriteTime: TimeSpan,\n    public readonly clientSideMetrics: ClientSideMetrics,\n  ) {}\n\n  /**\n   * Gets the IndexHitRatio\n   * @hidden\n   */\n  public get indexHitRatio(): number {\n    return this.retrievedDocumentCount === 0\n      ? 1\n      : this.indexHitDocumentCount / this.retrievedDocumentCount;\n  }\n\n  /**\n   * returns a new QueryMetrics instance that is the addition of this and the arguments.\n   */\n  public add(queryMetricsArray: QueryMetrics[]): QueryMetrics {\n    let retrievedDocumentCount = 0;\n    let retrievedDocumentSize = 0;\n    let outputDocumentCount = 0;\n    let outputDocumentSize = 0;\n    let indexHitDocumentCount = 0;\n    let totalQueryExecutionTime = TimeSpan.zero;\n    const queryPreparationTimesArray = [];\n    let indexLookupTime = TimeSpan.zero;\n    let documentLoadTime = TimeSpan.zero;\n    let vmExecutionTime = TimeSpan.zero;\n    const runtimeExecutionTimesArray = [];\n    let documentWriteTime = TimeSpan.zero;\n    const clientSideQueryMetricsArray = [];\n\n    queryMetricsArray.push(this);\n\n    for (const queryMetrics of queryMetricsArray) {\n      if (queryMetrics) {\n        retrievedDocumentCount += queryMetrics.retrievedDocumentCount;\n        retrievedDocumentSize += queryMetrics.retrievedDocumentSize;\n        outputDocumentCount += queryMetrics.outputDocumentCount;\n        outputDocumentSize += queryMetrics.outputDocumentSize;\n        indexHitDocumentCount += queryMetrics.indexHitDocumentCount;\n        totalQueryExecutionTime = totalQueryExecutionTime.add(queryMetrics.totalQueryExecutionTime);\n        queryPreparationTimesArray.push(queryMetrics.queryPreparationTimes);\n        indexLookupTime = indexLookupTime.add(queryMetrics.indexLookupTime);\n        documentLoadTime = documentLoadTime.add(queryMetrics.documentLoadTime);\n        vmExecutionTime = vmExecutionTime.add(queryMetrics.vmExecutionTime);\n        runtimeExecutionTimesArray.push(queryMetrics.runtimeExecutionTimes);\n        documentWriteTime = documentWriteTime.add(queryMetrics.documentWriteTime);\n        clientSideQueryMetricsArray.push(queryMetrics.clientSideMetrics);\n      }\n    }\n\n    return new QueryMetrics(\n      retrievedDocumentCount,\n      retrievedDocumentSize,\n      outputDocumentCount,\n      outputDocumentSize,\n      indexHitDocumentCount,\n      totalQueryExecutionTime,\n      QueryPreparationTimes.createFromArray(queryPreparationTimesArray),\n      indexLookupTime,\n      documentLoadTime,\n      vmExecutionTime,\n      RuntimeExecutionTimes.createFromArray(runtimeExecutionTimesArray),\n      documentWriteTime,\n      ClientSideMetrics.createFromArray(...clientSideQueryMetricsArray),\n    );\n  }\n\n  /**\n   * Output the QueryMetrics as a delimited string.\n   * @hidden\n   */\n  public toDelimitedString(): string {\n    return (\n      QueryMetricsConstants.RetrievedDocumentCount +\n      \"=\" +\n      this.retrievedDocumentCount +\n      \";\" +\n      QueryMetricsConstants.RetrievedDocumentSize +\n      \"=\" +\n      this.retrievedDocumentSize +\n      \";\" +\n      QueryMetricsConstants.OutputDocumentCount +\n      \"=\" +\n      this.outputDocumentCount +\n      \";\" +\n      QueryMetricsConstants.OutputDocumentSize +\n      \"=\" +\n      this.outputDocumentSize +\n      \";\" +\n      QueryMetricsConstants.IndexHitRatio +\n      \"=\" +\n      this.indexHitRatio +\n      \";\" +\n      QueryMetricsConstants.TotalQueryExecutionTimeInMs +\n      \"=\" +\n      this.totalQueryExecutionTime.totalMilliseconds() +\n      \";\" +\n      this.queryPreparationTimes.toDelimitedString() +\n      \";\" +\n      QueryMetricsConstants.IndexLookupTimeInMs +\n      \"=\" +\n      this.indexLookupTime.totalMilliseconds() +\n      \";\" +\n      QueryMetricsConstants.DocumentLoadTimeInMs +\n      \"=\" +\n      this.documentLoadTime.totalMilliseconds() +\n      \";\" +\n      QueryMetricsConstants.VMExecutionTimeInMs +\n      \"=\" +\n      this.vmExecutionTime.totalMilliseconds() +\n      \";\" +\n      this.runtimeExecutionTimes.toDelimitedString() +\n      \";\" +\n      QueryMetricsConstants.DocumentWriteTimeInMs +\n      \"=\" +\n      this.documentWriteTime.totalMilliseconds()\n    );\n  }\n\n  public static readonly zero = new QueryMetrics(\n    0,\n    0,\n    0,\n    0,\n    0,\n    TimeSpan.zero,\n    QueryPreparationTimes.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    RuntimeExecutionTimes.zero,\n    TimeSpan.zero,\n    ClientSideMetrics.zero,\n  );\n\n  /**\n   * Returns a new instance of the QueryMetrics class that is the aggregation of an array of query metrics.\n   */\n  public static createFromArray(queryMetricsArray: QueryMetrics[]): QueryMetrics {\n    if (!queryMetricsArray) {\n      throw new Error(\"queryMetricsArray is null or undefined item(s)\");\n    }\n\n    return QueryMetrics.zero.add(queryMetricsArray);\n  }\n\n  /**\n   * Returns a new instance of the QueryMetrics class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(\n    delimitedString: string,\n    clientSideMetrics?: ClientSideMetrics,\n  ): QueryMetrics {\n    const metrics = parseDelimitedString(delimitedString);\n\n    const indexHitRatio = metrics[QueryMetricsConstants.IndexHitRatio] || 0;\n    const retrievedDocumentCount = metrics[QueryMetricsConstants.RetrievedDocumentCount] || 0;\n    const indexHitCount = indexHitRatio * retrievedDocumentCount;\n    const outputDocumentCount = metrics[QueryMetricsConstants.OutputDocumentCount] || 0;\n    const outputDocumentSize = metrics[QueryMetricsConstants.OutputDocumentSize] || 0;\n    const retrievedDocumentSize = metrics[QueryMetricsConstants.RetrievedDocumentSize] || 0;\n    const totalQueryExecutionTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.TotalQueryExecutionTimeInMs,\n    );\n    return new QueryMetrics(\n      retrievedDocumentCount,\n      retrievedDocumentSize,\n      outputDocumentCount,\n      outputDocumentSize,\n      indexHitCount,\n      totalQueryExecutionTime,\n      QueryPreparationTimes.createFromDelimitedString(delimitedString),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs),\n      RuntimeExecutionTimes.createFromDelimitedString(delimitedString),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs),\n      clientSideMetrics || ClientSideMetrics.zero,\n    );\n  }\n}\n"]}