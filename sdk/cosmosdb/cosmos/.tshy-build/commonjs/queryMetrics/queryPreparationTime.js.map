{"version":3,"file":"queryPreparationTime.js","sourceRoot":"","sources":["../../../src/queryMetrics/queryPreparationTime.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport QueryMetricsConstants from \"./queryMetricsConstants.js\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils.js\";\nimport { TimeSpan } from \"./timeSpan.js\";\n\nexport class QueryPreparationTimes {\n  constructor(\n    public readonly queryCompilationTime: TimeSpan,\n    public readonly logicalPlanBuildTime: TimeSpan,\n    public readonly physicalPlanBuildTime: TimeSpan,\n    public readonly queryOptimizationTime: TimeSpan,\n  ) {}\n\n  /**\n   * returns a new QueryPreparationTimes instance that is the addition of this and the arguments.\n   */\n  public add(...queryPreparationTimesArray: QueryPreparationTimes[]): QueryPreparationTimes {\n    let queryCompilationTime = this.queryCompilationTime;\n    let logicalPlanBuildTime = this.logicalPlanBuildTime;\n    let physicalPlanBuildTime = this.physicalPlanBuildTime;\n    let queryOptimizationTime = this.queryOptimizationTime;\n\n    for (const queryPreparationTimes of queryPreparationTimesArray) {\n      if (queryPreparationTimes == null) {\n        throw new Error(\"queryPreparationTimesArray has null or undefined item(s)\");\n      }\n\n      queryCompilationTime = queryCompilationTime.add(queryPreparationTimes.queryCompilationTime);\n      logicalPlanBuildTime = logicalPlanBuildTime.add(queryPreparationTimes.logicalPlanBuildTime);\n      physicalPlanBuildTime = physicalPlanBuildTime.add(\n        queryPreparationTimes.physicalPlanBuildTime,\n      );\n      queryOptimizationTime = queryOptimizationTime.add(\n        queryPreparationTimes.queryOptimizationTime,\n      );\n    }\n\n    return new QueryPreparationTimes(\n      queryCompilationTime,\n      logicalPlanBuildTime,\n      physicalPlanBuildTime,\n      queryOptimizationTime,\n    );\n  }\n\n  /**\n   * Output the QueryPreparationTimes as a delimited string.\n   */\n  public toDelimitedString(): string {\n    return (\n      `${\n        QueryMetricsConstants.QueryCompileTimeInMs\n      }=${this.queryCompilationTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.LogicalPlanBuildTimeInMs\n      }=${this.logicalPlanBuildTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.PhysicalPlanBuildTimeInMs\n      }=${this.physicalPlanBuildTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.QueryOptimizationTimeInMs\n      }=${this.queryOptimizationTime.totalMilliseconds()}`\n    );\n  }\n\n  public static readonly zero = new QueryPreparationTimes(\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n  );\n\n  /**\n   * Returns a new instance of the QueryPreparationTimes class that is the\n   * aggregation of an array of QueryPreparationTimes.\n   */\n  public static createFromArray(\n    queryPreparationTimesArray: QueryPreparationTimes[],\n  ): QueryPreparationTimes {\n    if (queryPreparationTimesArray == null) {\n      throw new Error(\"queryPreparationTimesArray is null or undefined item(s)\");\n    }\n\n    return QueryPreparationTimes.zero.add(...queryPreparationTimesArray);\n  }\n\n  /**\n   * Returns a new instance of the QueryPreparationTimes class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(delimitedString: string): QueryPreparationTimes {\n    const metrics = parseDelimitedString(delimitedString);\n\n    return new QueryPreparationTimes(\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryCompileTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.LogicalPlanBuildTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.PhysicalPlanBuildTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryOptimizationTimeInMs),\n    );\n  }\n}\n"]}