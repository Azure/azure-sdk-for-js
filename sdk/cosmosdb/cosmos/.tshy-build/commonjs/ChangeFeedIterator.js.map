{"version":3,"file":"ChangeFeedIterator.js","sourceRoot":"","sources":["../../src/ChangeFeedIterator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/// <reference lib=\"esnext.asynciterable\" />\nimport type { ChangeFeedOptions } from \"./ChangeFeedOptions.js\";\nimport { ChangeFeedResponse } from \"./ChangeFeedResponse.js\";\nimport type { Resource } from \"./client/index.js\";\nimport type { ClientContext } from \"./ClientContext.js\";\nimport { Constants, ResourceType, StatusCodes } from \"./common/index.js\";\nimport type { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal.js\";\nimport type { PartitionKey } from \"./documents/index.js\";\nimport type { FeedOptions } from \"./request/index.js\";\nimport type { Response } from \"./request/index.js\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"./utils/diagnostics.js\";\n\n/**\n * Provides iterator for change feed.\n *\n * Use `Items.changeFeed()` to get an instance of the iterator.\n */\nexport class ChangeFeedIterator<T> {\n  private static readonly IfNoneMatchAllHeaderValue = \"*\";\n  private nextIfNoneMatch: string;\n  private ifModifiedSince: string;\n  private lastStatusCode: number;\n  private isPartitionSpecified: boolean;\n\n  /**\n   * @internal\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private resourceId: string,\n    private resourceLink: string,\n    private partitionKey: PartitionKey,\n    private changeFeedOptions: ChangeFeedOptions,\n  ) {\n    // partition key XOR partition key range id\n    const partitionKeyValid = partitionKey !== undefined;\n    this.isPartitionSpecified = partitionKeyValid;\n\n    let canUseStartFromBeginning = true;\n    if (changeFeedOptions.continuation) {\n      this.nextIfNoneMatch = changeFeedOptions.continuation;\n      canUseStartFromBeginning = false;\n    }\n\n    if (changeFeedOptions.startTime) {\n      // .toUTCString() is platform specific, but most platforms use RFC 1123.\n      // In ECMAScript 2018, this was standardized to RFC 1123.\n      // See for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n      this.ifModifiedSince = changeFeedOptions.startTime.toUTCString();\n      canUseStartFromBeginning = false;\n    }\n\n    if (canUseStartFromBeginning && !changeFeedOptions.startFromBeginning) {\n      this.nextIfNoneMatch = ChangeFeedIterator.IfNoneMatchAllHeaderValue;\n    }\n  }\n\n  /**\n   * Gets a value indicating whether there are potentially additional results that can be retrieved.\n   *\n   * Initially returns true. This value is set based on whether the last execution returned a continuation token.\n   *\n   * @returns Boolean value representing if whether there are potentially additional results that can be retrieved.\n   */\n  get hasMoreResults(): boolean {\n    return this.lastStatusCode !== StatusCodes.NotModified;\n  }\n\n  /**\n   * Gets an async iterator which will yield pages of results from Azure Cosmos DB.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.fetchNext();\n      if (result.count > 0) {\n        yield result;\n      }\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Read feed and retrieves the next page of results in Azure Cosmos DB.\n   */\n  public async fetchNext(): Promise<ChangeFeedResponse<Array<T & Resource>>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const response = await this.getFeedResponse(diagnosticNode);\n      this.lastStatusCode = response.statusCode;\n      this.nextIfNoneMatch = response.headers[Constants.HttpHeaders.ETag];\n      return response;\n    }, this.clientContext);\n  }\n\n  private async getFeedResponse(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ChangeFeedResponse<Array<T & Resource>>> {\n    if (!this.isPartitionSpecified) {\n      throw new Error(\n        \"Container is partitioned, but no partition key or partition key range id was specified.\",\n      );\n    }\n    const feedOptions: FeedOptions = { initialHeaders: {}, useIncrementalFeed: true };\n\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    if (this.nextIfNoneMatch) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: this.nextIfNoneMatch,\n      };\n    }\n\n    if (this.ifModifiedSince) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.ifModifiedSince;\n    }\n\n    const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n      path: this.resourceLink,\n      resourceType: ResourceType.item,\n      resourceId: this.resourceId,\n      resultFn: (result) => (result ? result.Documents : []),\n      query: undefined,\n      options: feedOptions,\n      partitionKey: this.partitionKey,\n      diagnosticNode: diagnosticNode,\n    }) as Promise<any>); // TODO: some funky issues with query feed. Probably need to change it up.\n\n    return new ChangeFeedResponse(\n      response.result,\n      response.result ? response.result.length : 0,\n      response.code,\n      response.headers,\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n}\n"]}