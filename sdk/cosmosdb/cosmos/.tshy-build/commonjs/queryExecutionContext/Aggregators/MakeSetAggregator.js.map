{"version":3,"file":"MakeSetAggregator.js","sourceRoot":"","sources":["../../../../src/queryExecutionContext/Aggregators/MakeSetAggregator.ts"],"names":[],"mappings":";;;AAIA,cAAc;AACd;;GAEG;AACH,MAAa,iBAAiB;IAG5B;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;IACzB,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,KAAY;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;CACF;AAxBD,8CAwBC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Aggregator } from \"./Aggregator.js\";\n\n/** @hidden */\n/**\n * Represents an aggregator that collects unique values into a set.\n */\nexport class MakeSetAggregator implements Aggregator {\n  value: Set<any>;\n\n  constructor() {\n    this.value = new Set();\n  }\n\n  /**\n   * Aggregates the values from another set into the current set.\n   * @param other - The set to aggregate.\n   */\n  public aggregate(other: any[]): void {\n    other.forEach((item) => {\n      this.value.add(item);\n    });\n  }\n\n  /**\n   * Gets the result of the MakeSetAggregator.\n   * @returns A Set containing the unique values collected by the aggregator.\n   */\n  public getResult(): any {\n    return Array.from(this.value);\n  }\n}\n"]}