{"version":3,"file":"DiagnosticNodeInternal.js","sourceRoot":"","sources":["../../../src/diagnostics/DiagnosticNodeInternal.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CosmosDiagnosticContext } from \"./CosmosDiagnosticsContext.js\";\nimport { ErrorResponse, RequestContext } from \"../request/index.js\";\nimport {\n  DiagnosticNode,\n  EncryptionDiagnostics,\n  MetadataLookUpType,\n  ClientConfigDiagnostic,\n} from \"../CosmosDiagnostics.js\";\nimport { CosmosDiagnostics, getRootNode } from \"../CosmosDiagnostics.js\";\nimport { getCurrentTimestampInMs } from \"../utils/time.js\";\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel.js\";\nimport type { CosmosHeaders } from \"../queryExecutionContext/CosmosHeaders.js\";\nimport type { HttpHeaders, PipelineResponse } from \"@azure/core-rest-pipeline\";\nimport type { OperationType, ResourceType } from \"../common/index.js\";\nimport { Constants, prepareURL } from \"../common/index.js\";\nimport { allowTracing } from \"./diagnosticLevelComparator.js\";\nimport { randomUUID } from \"@azure/core-util\";\n\n/**\n * @hidden\n * This is Internal Representation for DiagnosticNode. It contains useful helper functions to collect\n * diagnostic information throughout the lifetime of Diagnostic session.\n * The functions toDiagnosticNode() & toDiagnostic() are given to convert it to public facing counterpart.\n */\nexport class DiagnosticNodeInternal implements DiagnosticNode {\n  public id: string;\n  public nodeType: DiagnosticNodeType;\n  public parent: DiagnosticNodeInternal;\n  public children: DiagnosticNodeInternal[];\n  public data: Partial<DiagnosticDataValue>;\n  public startTimeUTCInMs: number;\n  public durationInMs: number;\n  public diagnosticLevel: CosmosDbDiagnosticLevel;\n  private diagnosticCtx: CosmosDiagnosticContext;\n  private encryptionDiagnostics: EncryptionDiagnostics;\n\n  /**\n   * @internal\n   */\n  constructor(\n    diagnosticLevel: CosmosDbDiagnosticLevel,\n    type: DiagnosticNodeType,\n    parent: DiagnosticNodeInternal,\n    data: Partial<DiagnosticDataValue> = {},\n    startTimeUTCInMs: number = getCurrentTimestampInMs(),\n    ctx: CosmosDiagnosticContext = new CosmosDiagnosticContext(),\n  ) {\n    this.id = randomUUID();\n    this.nodeType = type;\n    this.startTimeUTCInMs = startTimeUTCInMs;\n    this.data = data;\n    this.children = [];\n    this.durationInMs = 0;\n    this.parent = parent;\n    this.diagnosticCtx = ctx;\n    this.diagnosticLevel = diagnosticLevel;\n\n    // Initialize EncryptionDiagnostics\n    this.encryptionDiagnostics = {\n      encryptContent: {},\n      decryptContent: {},\n      processingDurationInMs: 0,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  private addLog(msg: string): void {\n    if (!this.data.log) {\n      this.data.log = [];\n    }\n    this.data.log.push(msg);\n  }\n\n  /**\n   * @internal\n   */\n  private sanitizeHeaders(headers?: CosmosHeaders | HttpHeaders): CosmosHeaders | HttpHeaders {\n    return headers;\n  }\n\n  /**\n   * Updated durationInMs for node, based on endTimeUTCInMs provided.\n   * @internal\n   */\n  public updateTimestamp(endTimeUTCInMs: number = getCurrentTimestampInMs()): void {\n    this.durationInMs = endTimeUTCInMs - this.startTimeUTCInMs;\n  }\n\n  /**\n   * @internal\n   */\n  public recordSuccessfulNetworkCall(\n    startTimeUTCInMs: number,\n    requestContext: RequestContext,\n    pipelineResponse: PipelineResponse,\n    substatus: number,\n    url: string,\n  ): void {\n    const responseHeaders = pipelineResponse.headers.toJSON();\n    const gatewayRequest = {\n      activityId: responseHeaders[Constants.HttpHeaders.ActivityId],\n      correlateActivityId: requestContext.headers[Constants.HttpHeaders.CorrelatedActivityId],\n      startTimeUTCInMs,\n      durationInMs: getCurrentTimestampInMs() - startTimeUTCInMs,\n      statusCode: pipelineResponse.status,\n      subStatusCode: substatus,\n      requestPayloadLengthInBytes: calculateRequestPayloadLength(requestContext),\n      responsePayloadLengthInBytes: calculateResponsePayloadLength(pipelineResponse),\n      operationType: requestContext.operationType,\n      resourceType: requestContext.resourceType,\n      partitionKeyRangeId: requestContext.partitionKeyRangeId,\n    };\n    let requestData: any = {\n      OperationType: gatewayRequest.operationType,\n      resourceType: gatewayRequest.resourceType,\n      requestPayloadLengthInBytes: gatewayRequest.requestPayloadLengthInBytes,\n    };\n\n    if (allowTracing(CosmosDbDiagnosticLevel.debugUnsafe, this.diagnosticLevel)) {\n      requestData = {\n        ...requestData,\n        headers: this.sanitizeHeaders(requestContext.headers),\n        requestBody: requestContext.body,\n        responseBody: pipelineResponse.bodyAsText,\n        url: url,\n      };\n    }\n    this.addData({\n      requestPayloadLengthInBytes: gatewayRequest.requestPayloadLengthInBytes,\n      responsePayloadLengthInBytes: gatewayRequest.responsePayloadLengthInBytes,\n      startTimeUTCInMs: gatewayRequest.startTimeUTCInMs,\n      durationInMs: gatewayRequest.durationInMs,\n      requestData,\n    });\n    this.diagnosticCtx.recordNetworkCall(gatewayRequest);\n  }\n\n  /**\n   * @internal\n   */\n  public recordFailedNetworkCall(\n    startTimeUTCInMs: number,\n    requestContext: RequestContext,\n    retryAttemptNumber: number,\n    statusCode: number,\n    substatusCode: number,\n    responseHeaders: CosmosHeaders,\n  ): void {\n    this.addData({ failedAttempty: true });\n    const requestPayloadLengthInBytes = calculateRequestPayloadLength(requestContext);\n    this.diagnosticCtx.recordFailedAttempt(\n      {\n        activityId: responseHeaders[Constants.HttpHeaders.ActivityId] as string,\n        correlatedActivityId: requestContext.headers[\n          Constants.HttpHeaders.CorrelatedActivityId\n        ] as string,\n        startTimeUTCInMs,\n        durationInMs: getCurrentTimestampInMs() - startTimeUTCInMs,\n        statusCode,\n        subStatusCode: substatusCode,\n        requestPayloadLengthInBytes,\n        responsePayloadLengthInBytes: 0,\n        operationType: requestContext.operationType,\n        resourceType: requestContext.resourceType,\n      },\n      retryAttemptNumber,\n    );\n    let requestData: any = {\n      OperationType: requestContext.operationType,\n      resourceType: requestContext.resourceType,\n      requestPayloadLengthInBytes,\n    };\n    if (allowTracing(CosmosDbDiagnosticLevel.debugUnsafe, this.diagnosticLevel)) {\n      requestData = {\n        ...requestData,\n        headers: this.sanitizeHeaders(requestContext.headers),\n        requestBody: requestContext.body,\n        url: prepareURL(requestContext.endpoint, requestContext.path),\n      };\n    }\n    this.addData({\n      failedAttempty: true,\n      requestData,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public recordEndpointResolution(location: string): void {\n    this.addData({ selectedLocation: location });\n    this.diagnosticCtx.recordEndpointResolution(location);\n  }\n\n  /**\n   * @internal\n   */\n  public addData(\n    data: Partial<DiagnosticDataValue>,\n    msg?: string,\n    level: CosmosDbDiagnosticLevel = this.diagnosticLevel,\n  ): void {\n    if (level !== CosmosDbDiagnosticLevel.info) {\n      this.data = { ...this.data, ...data };\n      if (msg) {\n        this.addLog(msg);\n      }\n    }\n  }\n\n  /**\n   * Merge given DiagnosticNodeInternal's context to current node's DiagnosticContext, Treating GatewayRequests of\n   * given DiagnosticContext, as metadata requests. Given DiagnosticNodeInternal becomes a child of this node.\n   * @internal\n   */\n  public addChildNode(\n    child: DiagnosticNodeInternal,\n    level: CosmosDbDiagnosticLevel,\n    metadataType?: MetadataLookUpType,\n  ): DiagnosticNodeInternal {\n    this.diagnosticCtx.mergeDiagnostics(child.diagnosticCtx, metadataType);\n    if (allowTracing(level, this.diagnosticLevel)) {\n      child.parent = this;\n      this.children.push(child);\n    }\n    return child;\n  }\n\n  /**\n   * Merge given DiagnosticNodeInternal's context to current node's DiagnosticContext for bulk.\n   * Given DiagnosticNodeInternal becomes a child of this node.\n   * @internal\n   */\n  public addBulkChildNode(\n    child: DiagnosticNodeInternal,\n    level: CosmosDbDiagnosticLevel,\n  ): DiagnosticNodeInternal {\n    this.diagnosticCtx.mergeBulkDiagnostics(child.diagnosticCtx);\n    if (allowTracing(level, this.diagnosticLevel)) {\n      child.parent = this;\n      this.children.push(child);\n    }\n    return child;\n  }\n\n  /**\n   * @internal\n   */\n  public initializeChildNode(\n    type: DiagnosticNodeType,\n    level: CosmosDbDiagnosticLevel,\n    data: Partial<DiagnosticDataValue> = {},\n  ): DiagnosticNodeInternal {\n    if (allowTracing(level, this.diagnosticLevel)) {\n      const child = new DiagnosticNodeInternal(\n        this.diagnosticLevel,\n        type,\n        this,\n        data,\n        getCurrentTimestampInMs(),\n        this.diagnosticCtx,\n      );\n      this.children.push(child);\n      return child;\n    } else {\n      return this;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public recordQueryResult(resources: unknown, level: CosmosDbDiagnosticLevel): void {\n    if (allowTracing(level, this.diagnosticLevel)) {\n      const previousCount = this.data.queryRecordsRead ?? 0;\n      if (Array.isArray(resources)) {\n        this.data.queryRecordsRead = previousCount + resources.length;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * record startTime for encryption in an operation\n   */\n  public beginEncryptionDiagnostics(operation: string): void {\n    const startTime = getCurrentTimestampInMs();\n    switch (operation) {\n      case Constants.Encryption.DiagnosticsEncryptOperation:\n        this.encryptionDiagnostics.encryptContent[Constants.Encryption.DiagnosticsStartTime] =\n          startTime;\n        break;\n      case Constants.Encryption.DiagnosticsDecryptOperation:\n        this.encryptionDiagnostics.decryptContent[Constants.Encryption.DiagnosticsStartTime] =\n          startTime;\n        break;\n      default:\n        throw new ErrorResponse(\"Invalid operation type for encryption diagnostics\");\n    }\n  }\n  /**\n   * @internal\n   * record duration from startTime and properties count for encryption in an operation\n   */\n  public endEncryptionDiagnostics(operation: string, propertiesCount?: number): void {\n    const endTime = getCurrentTimestampInMs();\n    let processingDuration = 0;\n    switch (operation) {\n      case Constants.Encryption.DiagnosticsEncryptOperation:\n        processingDuration =\n          endTime -\n          this.encryptionDiagnostics.encryptContent[Constants.Encryption.DiagnosticsStartTime];\n        this.encryptionDiagnostics.encryptContent[Constants.Encryption.DiagnosticsDuration] =\n          processingDuration;\n        // will be undefined in case of bulk/batch\n        if (propertiesCount !== undefined) {\n          this.encryptionDiagnostics.encryptContent[\n            Constants.Encryption.DiagnosticsPropertiesEncryptedCount\n          ] = propertiesCount;\n        }\n        break;\n\n      case Constants.Encryption.DiagnosticsDecryptOperation:\n        processingDuration =\n          endTime -\n          this.encryptionDiagnostics.decryptContent[Constants.Encryption.DiagnosticsStartTime];\n        this.encryptionDiagnostics.decryptContent[Constants.Encryption.DiagnosticsDuration] =\n          processingDuration;\n        if (propertiesCount !== undefined) {\n          this.encryptionDiagnostics.decryptContent[\n            Constants.Encryption.DiagnosticsPropertiesDecryptedCount\n          ] = propertiesCount;\n        }\n        break;\n      default:\n        throw new ErrorResponse(\"Invalid operation type for encryption diagnostics\");\n    }\n    this.diagnosticCtx.recordEncryptionDiagnostics(this.encryptionDiagnostics);\n  }\n\n  /**\n   * Convert DiagnosticNodeInternal (internal representation) to DiagnosticNode (public, sanitized representation)\n   * @internal\n   */\n  public toDiagnosticNode(): DiagnosticNode {\n    return {\n      id: this.id,\n      nodeType: this.nodeType,\n      children: this.children.map((child) => child.toDiagnosticNode()),\n      data: this.data,\n      startTimeUTCInMs: this.startTimeUTCInMs,\n      durationInMs: this.durationInMs,\n    };\n  }\n\n  /**\n   * Convert to CosmosDiagnostics\n   * @internal\n   */\n  public toDiagnostic(clientConfigDiagnostic: ClientConfigDiagnostic): CosmosDiagnostics {\n    const rootNode = getRootNode(this);\n    const diagnostiNode = allowTracing(CosmosDbDiagnosticLevel.debug, this.diagnosticLevel)\n      ? rootNode.toDiagnosticNode()\n      : undefined;\n    const clientConfig = allowTracing(CosmosDbDiagnosticLevel.debug, this.diagnosticLevel)\n      ? clientConfigDiagnostic\n      : undefined;\n    const cosmosDiagnostic = new CosmosDiagnostics(\n      this.diagnosticCtx.getClientSideStats(),\n      diagnostiNode,\n      clientConfig,\n    );\n    return cosmosDiagnostic;\n  }\n}\n\n/**\n * @hidden\n */\nexport type DiagnosticDataValue = {\n  selectedLocation: string;\n  activityId: string;\n  requestAttempNumber: number;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n  responseStatus: number;\n  readFromCache: boolean;\n  operationType: OperationType;\n  metadatOperationType: MetadataLookUpType;\n  resourceType: ResourceType;\n  failedAttempty: boolean;\n  successfulRetryPolicy: string;\n  partitionKeyRangeId: string;\n  stateful: boolean;\n  queryRecordsRead: number;\n  queryMethodIdentifier: string;\n  log: string[];\n  failure: boolean;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  requestData: Partial<{\n    requestPayloadLengthInBytes: number;\n    responsePayloadLengthInBytes: number;\n    operationType: OperationType;\n    resourceType: ResourceType;\n    headers: CosmosHeaders;\n    requestBody: any;\n    responseBody: any;\n    url: string;\n  }>;\n};\n\n/**\n * @hidden\n */\nexport enum DiagnosticNodeType {\n  CLIENT_REQUEST_NODE = \"CLIENT_REQUEST_NODE\", // Top most node representing client operations.\n  METADATA_REQUEST_NODE = \"METADATA_REQUEST_NODE\", // Node representing a metadata request.\n  HTTP_REQUEST = \"HTTP_REQUEST\", // Node representing REST call to backend services.\n  BATCH_REQUEST = \"BATCH_REQUEST\", // Node representing batch request.\n  PARALLEL_QUERY_NODE = \"PARALLEL_QUERY_NODE\", // Node representing parallel query execution.\n  DEFAULT_QUERY_NODE = \"DEFAULT_QUERY_NODE\", // Node representing default query execution.\n  QUERY_REPAIR_NODE = \"QUERY_REPAIR_NODE\", // Node representing query repair.\n  BACKGROUND_REFRESH_THREAD = \"BACKGROUND_REFRESH_THREAD\", // Node representing background refresh.\n  REQUEST_ATTEMPTS = \"REQUEST_ATTEMPTS\", // Node representing request attempts.\n}\n\nfunction calculateResponsePayloadLength(response: PipelineResponse) {\n  return response?.bodyAsText?.length || 0;\n}\n\nfunction calculateRequestPayloadLength(requestContext: RequestContext) {\n  return requestContext.body ? requestContext.body.length : 0;\n}\n"]}