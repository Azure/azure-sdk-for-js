{"version":3,"file":"AzureKeyVaultEncryptionKeyResolver.js","sourceRoot":"","sources":["../../../../src/encryption/EncryptionKeyResolver/AzureKeyVaultEncryptionKeyResolver.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { EncryptionKeyResolver } from \"./EncryptionKeyResolver.js\";\nimport type { KeyWrapAlgorithm } from \"@azure/keyvault-keys\";\nimport { KeyClient } from \"@azure/keyvault-keys\";\nimport { ErrorResponse } from \"../../request/index.js\";\nimport { EncryptionKeyResolverName } from \"../enums/index.js\";\n\n/**\n * Implementation of EncryptionKeyResolver that uses Azure Key Vault for customer managed keys.\n */\nexport class AzureKeyVaultEncryptionKeyResolver implements EncryptionKeyResolver {\n  private credentials: TokenCredential;\n\n  constructor(credentials: TokenCredential) {\n    this.credentials = credentials;\n  }\n  /**\n   * Name of the resolver to use for client side encryption.\n   * Currently only AzureKeyVault implementation is supported.\n   */\n  public encryptionKeyResolverName = EncryptionKeyResolverName.AzureKeyVault;\n  /**\n   * wraps the given key using the specified key encryption key path and algorithm.\n   * @param encryptionKeyId - path to the customer managed key to be used for wrapping. For Azure Key Vault, this is url of the key in the vault.\n   * @param algorithm - algorithm to be used for wrapping.\n   * @param unwrappedKey - dek to be wrapped.\n   * @returns wrapped DEK.\n   */\n  public async wrapKey(\n    encryptionKeyId: string,\n    algorithm: string,\n    unwrappedKey: Uint8Array,\n  ): Promise<Uint8Array> {\n    try {\n      const origin = this.getOrigin(encryptionKeyId);\n      const keyClient = new KeyClient(origin, this.credentials);\n      const [keyName, keyVersion] = this.getKeyDetails(encryptionKeyId);\n      const cryptographyClient = keyClient.getCryptographyClient(keyName, {\n        keyVersion: keyVersion,\n      });\n      const res = await cryptographyClient.wrapKey(algorithm as KeyWrapAlgorithm, unwrappedKey);\n      if (!res || !res.result) {\n        throw new ErrorResponse(`Failed to wrap key: ${res}`);\n      }\n      return res.result;\n    } catch (e) {\n      throw new ErrorResponse(`Failed to wrap key: ${e.message}`);\n    }\n  }\n  /**\n   * Unwraps the given wrapped key using the specified key encryption key path and algorithm.\n   * @param encryptionKeyId - path to the customer managed key to be used for unwrapping. For Azure Key Vault, this is url of the key in the vault.\n   * @param algorithm - algorithm to be used for unwrapping.\n   * @param wrappedKey - wrapped DEK.\n   * @returns unwrapped DEK.\n   */\n  public async unwrapKey(\n    encryptionKeyId: string,\n    algorithm: string,\n    wrappedKey: Uint8Array,\n  ): Promise<Uint8Array> {\n    try {\n      const origin = this.getOrigin(encryptionKeyId);\n      const keyClient = new KeyClient(origin, this.credentials);\n      const [keyName, keyVersion] = this.getKeyDetails(encryptionKeyId);\n      const cryptographyClient = keyClient.getCryptographyClient(keyName, {\n        keyVersion: keyVersion,\n      });\n      const res = await cryptographyClient.unwrapKey(algorithm as KeyWrapAlgorithm, wrappedKey);\n      if (!res || !res.result) {\n        throw new ErrorResponse(`Failed to wrap key: ${res}`);\n      }\n      return res.result;\n    } catch (e) {\n      throw new ErrorResponse(`Failed to unwrap key: ${e.message}`);\n    }\n  }\n  // TODO: improve this method to extract key name and version from the url\n  private getKeyDetails(encryptionKeyId: string): [string, string] {\n    let url;\n    try {\n      url = new URL(encryptionKeyId);\n      const parts = url.pathname.split(\"/\");\n      if (parts.length < 4 || parts.length > 5) {\n        throw new ErrorResponse(\n          `Invalid key url: ${encryptionKeyId}. Key url must be in the format https://<vault>.vault.azure.net/keys/<key-name>/<key-version>`,\n        );\n      }\n      if (parts.length === 4 || parts.length === 5) {\n        return [parts[2], parts[3]];\n      }\n    } catch (e) {\n      throw new ErrorResponse(\n        `Invalid key url: ${encryptionKeyId}. Key url must be in the format https://<vault>.vault.azure.net/keys/<key-name>/<key-version>. Error: ${e.message}`,\n      );\n    }\n  }\n\n  private getOrigin(encryptionKeyId: string): string {\n    try {\n      const url = new URL(encryptionKeyId);\n      return url.origin;\n    } catch (e) {\n      throw new ErrorResponse(\n        `Invalid key url: ${encryptionKeyId}. Key url must be in the format https://<vault>.vault.azure.net/keys/<key-name>/<key-version>. Error: ${e.message}`,\n      );\n    }\n  }\n}\n"]}