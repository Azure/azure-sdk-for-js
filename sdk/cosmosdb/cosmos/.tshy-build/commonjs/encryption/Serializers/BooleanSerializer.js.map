{"version":3,"file":"BooleanSerializer.js","sourceRoot":"","sources":["../../../../src/encryption/Serializers/BooleanSerializer.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAIlC,MAAa,iBAAiB;IAC5B,SAAS,CAAC,KAAc;QACtB,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,WAAW,CAAC,KAAa;QACvB,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;QACD,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC;CACF;AAdD,8CAcC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Serializer } from \"./Serializer.js\";\n\nexport class BooleanSerializer implements Serializer {\n  serialize(value: boolean): Buffer {\n    const numValue = value ? 1 : 0;\n    const buffer = Buffer.alloc(8);\n    buffer.writeBigInt64LE(BigInt(numValue), 0);\n    return buffer;\n  }\n\n  deserialize(bytes: Buffer): boolean {\n    if (!bytes || bytes.length < 1) {\n      throw new Error(\"Invalid byte array for deserialization\");\n    }\n    return !!bytes[0];\n  }\n}\n"]}