{"version":3,"file":"FloatSerializer.js","sourceRoot":"","sources":["../../../../src/encryption/Serializers/FloatSerializer.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAIlC,MAAa,eAAe;IAC1B,WAAW,CAAC,KAAa;QACvB,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAClC,OAAO,GAAG,CAAC;IACb,CAAC;IAED,SAAS,CAAC,KAAa;QACrB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,CAAC;QACD,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC/B,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAjBD,0CAiBC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Serializer } from \"./Serializer.js\";\n\nexport class FloatSerializer implements Serializer {\n  deserialize(bytes: Buffer): number {\n    if (!bytes || bytes.length < 8) {\n      throw new Error(\"Invalid byte array for deserialization\");\n    }\n    const res = bytes.readDoubleLE(0);\n    return res;\n  }\n\n  serialize(value: number): Buffer {\n    if (!Number.isFinite(value)) {\n      throw new Error(\"Value is out of range\");\n    }\n    const buffer = Buffer.alloc(8);\n    buffer.writeDoubleLE(value, 0);\n    return buffer;\n  }\n}\n"]}