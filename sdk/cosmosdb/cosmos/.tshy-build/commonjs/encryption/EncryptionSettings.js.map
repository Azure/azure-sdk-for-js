{"version":3,"file":"EncryptionSettings.js","sourceRoot":"","sources":["../../../src/encryption/EncryptionSettings.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAIlC;;;;GAIG;AACH,MAAa,kBAAkB;IAY7B,kBAAkB;IAClB,YAAmB,EAAU,EAAE,YAAoB,EAAE,iBAA2B;QANzE,mBAAc,GAAa,EAAE,CAAC;QAErC,uBAAuB;QACf,mCAA8B,GAAoD,EAAE,CAAC;QAI3F,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAEM,+BAA+B,CACpC,GAAW,EACX,4BAA0D;QAE1D,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,GAAG,4BAA4B,CAAC;IAC1E,CAAC;IAEM,+BAA+B,CAAC,YAAoB;QACzD,OAAO,IAAI,CAAC,8BAA8B,CAAC,YAAY,CAAC,CAAC;IAC3D,CAAC;CACF;AA7BD,gDA6BC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { EncryptionSettingForProperty } from \"./EncryptionSettingForProperty.js\";\n\n/**\n * stores partitionKeyPaths, all the pathsToEncrypt, and encryption settings (cekId, encryption type, and algorithm) for each property.\n * see {@link EncryptionSettingForProperty}\n * @hidden\n */\nexport class EncryptionSettings {\n  public id: string; // databaseRid + '/' + containerRid\n\n  public containerRid: string;\n\n  public partitionKeyPaths: string[];\n\n  public pathsToEncrypt: string[] = [];\n\n  // key is property path\n  private encryptionSettingForProperties: { [key: string]: EncryptionSettingForProperty } = {};\n\n  // getContainerRid\n  public constructor(id: string, containerRid: string, partitionKeyPaths: string[]) {\n    this.id = id;\n    this.containerRid = containerRid;\n    this.partitionKeyPaths = partitionKeyPaths;\n  }\n\n  public setEncryptionSettingForProperty(\n    key: string,\n    encryptionSettingForProperty: EncryptionSettingForProperty,\n  ): void {\n    this.encryptionSettingForProperties[key] = encryptionSettingForProperty;\n  }\n\n  public getEncryptionSettingForProperty(propertyName: string): EncryptionSettingForProperty {\n    return this.encryptionSettingForProperties[propertyName];\n  }\n}\n"]}