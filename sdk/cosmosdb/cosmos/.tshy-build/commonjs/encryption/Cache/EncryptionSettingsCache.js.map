{"version":3,"file":"EncryptionSettingsCache.js","sourceRoot":"","sources":["../../../../src/encryption/Cache/EncryptionSettingsCache.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAGlC,oEAA8D;AAC9D,wFAAkF;AAClF;;;;GAIG;AACH,MAAa,uBAAuB;IAIlC;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAA8B,CAAC;IACrD,CAAC;IAEM,KAAK,CAAC,MAAM,CACjB,EAAU,EACV,YAAoB,EACpB,iBAA2B,EAC3B,sBAA8C;QAE9C,MAAM,kBAAkB,GAAG,IAAI,0CAAkB,CAAC,EAAE,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;QACvF,IAAI,CAAC,sBAAsB;YAAE,OAAO;QAEpC,KAAK,MAAM,YAAY,IAAI,sBAAsB,CAAC,aAAa,EAAE,CAAC;YAChE,MAAM,4BAA4B,GAAG,IAAI,8DAA4B,CAAC,YAAY,CAAC,CAAC;YACpF,kBAAkB,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC1D,kBAAkB,CAAC,+BAA+B,CAChD,YAAY,CAAC,IAAI,EACjB,4BAA4B,CAC7B,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,kBAAkB,CAAC,CAAC;QACjC,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAEM,GAAG,CAAC,GAAW;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,kBAAsC;QAC5D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC;IAC1C,CAAC;CACF;AApCD,0DAoCC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ClientEncryptionPolicy } from \"../ClientEncryptionPolicy.js\";\nimport { EncryptionSettings } from \"../EncryptionSettings.js\";\nimport { EncryptionSettingForProperty } from \"../EncryptionSettingForProperty.js\";\n/**\n * The cache used to store encryption settings for a container.\n * see {@link EncryptionSettings}\n * @hidden\n */\nexport class EncryptionSettingsCache {\n  // key is databaseRid + '/' + containerRid\n  private cache: Map<string, EncryptionSettings>;\n\n  public constructor() {\n    this.cache = new Map<string, EncryptionSettings>();\n  }\n\n  public async create(\n    id: string,\n    containerRid: string,\n    partitionKeyPaths: string[],\n    clientEncryptionPolicy: ClientEncryptionPolicy,\n  ): Promise<EncryptionSettings> {\n    const encryptionSettings = new EncryptionSettings(id, containerRid, partitionKeyPaths);\n    if (!clientEncryptionPolicy) return;\n\n    for (const includedPath of clientEncryptionPolicy.includedPaths) {\n      const encryptionSettingForProperty = new EncryptionSettingForProperty(includedPath);\n      encryptionSettings.pathsToEncrypt.push(includedPath.path);\n      encryptionSettings.setEncryptionSettingForProperty(\n        includedPath.path,\n        encryptionSettingForProperty,\n      );\n    }\n    this.set(id, encryptionSettings);\n    return encryptionSettings;\n  }\n\n  public get(key: string): EncryptionSettings | undefined {\n    return this.cache.get(key);\n  }\n\n  public set(key: string, encryptionSettings: EncryptionSettings): void {\n    this.cache.set(key, encryptionSettings);\n  }\n}\n"]}