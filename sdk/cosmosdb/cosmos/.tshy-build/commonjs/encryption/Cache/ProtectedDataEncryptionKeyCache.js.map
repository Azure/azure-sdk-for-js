{"version":3,"file":"ProtectedDataEncryptionKeyCache.js","sourceRoot":"","sources":["../../../../src/encryption/Cache/ProtectedDataEncryptionKeyCache.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { randomBytes } from \"node:crypto\";\nimport { ProtectedDataEncryptionKey } from \"../EncryptionKey/ProtectedDataEncryptionKey.js\";\nimport type { KeyEncryptionKey } from \"../KeyEncryptionKey.js\";\nimport { Constants } from \"../../common/index.js\";\n\n/**\n * The cache used to store the protected data encryption key.\n * see {@link ProtectedDataEncryptionKey}\n * @hidden\n */\nexport class ProtectedDataEncryptionKeyCache {\n  // key is JSON.stringify([encryptionKeyId, keyEncryptionKey.name, keyEncryptionKey.path, encryptedValue.toString(\"hex\")])\n  private cache: Map<string, [Date, ProtectedDataEncryptionKey]>;\n  // interval for clear cache to run\n  cacheRefresher: NodeJS.Timeout;\n\n  constructor(private cacheTimeToLive: number) {\n    this.cache = new Map<string, [Date, ProtectedDataEncryptionKey]>();\n    this.clearCacheOnTtlExpiry();\n  }\n\n  public get(key: string): ProtectedDataEncryptionKey | undefined {\n    if (!this.cache.has(key)) {\n      return undefined;\n    }\n    return this.cache.get(key)[1];\n  }\n\n  private set(key: string, protectedDataEncryptionKey: ProtectedDataEncryptionKey): void {\n    if (this.cacheTimeToLive === 0) {\n      return;\n    }\n    this.cache.set(key, [new Date(), protectedDataEncryptionKey]);\n  }\n\n  private async clearCacheOnTtlExpiry(): Promise<void> {\n    this.cacheRefresher = setInterval(() => {\n      const now = new Date();\n      for (const key of this.cache.keys()) {\n        if (now.getTime() - this.cache.get(key)[0].getTime() > this.cacheTimeToLive) {\n          this.cache.delete(key);\n        }\n      }\n    }, Constants.EncryptionCacheRefreshIntervalInMs);\n  }\n\n  private async createProtectedDataEncryptionKey(\n    name: string,\n    keyEncryptionKey: KeyEncryptionKey,\n    encryptedValue?: Buffer,\n  ): Promise<ProtectedDataEncryptionKey> {\n    let rawKey: Buffer;\n    let encryptedKey: Buffer;\n    if (encryptedValue) {\n      rawKey = await keyEncryptionKey.unwrapEncryptionKey(encryptedValue);\n      encryptedKey = encryptedValue;\n    } else {\n      rawKey = this.generateColumnEncryptionKey();\n      encryptedKey = await keyEncryptionKey.wrapEncryptionKey(rawKey);\n    }\n    const newKey = new ProtectedDataEncryptionKey(name, keyEncryptionKey, rawKey, encryptedKey);\n    if (this.cacheTimeToLive !== 0) {\n      const key = JSON.stringify([\n        name,\n        keyEncryptionKey.name,\n        keyEncryptionKey.path,\n        encryptedKey.toString(\"hex\"),\n      ]);\n      this.set(key, newKey);\n    }\n    return newKey;\n  }\n\n  public async getOrCreate(\n    name: string,\n    keyEncryptionKey: KeyEncryptionKey,\n    encryptedValue?: Uint8Array,\n    forceRefresh?: boolean,\n  ): Promise<ProtectedDataEncryptionKey> {\n    const encryptedValueBuffer = encryptedValue ? Buffer.from(encryptedValue) : undefined;\n    if (this.cacheTimeToLive === 0 || forceRefresh) {\n      return this.createProtectedDataEncryptionKey(name, keyEncryptionKey, encryptedValueBuffer);\n    }\n\n    if (encryptedValueBuffer) {\n      const key = JSON.stringify([\n        name,\n        keyEncryptionKey.name,\n        keyEncryptionKey.path,\n        encryptedValueBuffer.toString(\"hex\"),\n      ]);\n      const protectedDataEncryptionKey = this.get(key);\n      if (protectedDataEncryptionKey) {\n        return protectedDataEncryptionKey;\n      }\n    }\n    return this.createProtectedDataEncryptionKey(name, keyEncryptionKey, encryptedValueBuffer);\n  }\n\n  private generateColumnEncryptionKey(): Buffer {\n    return randomBytes(32);\n  }\n}\n"]}