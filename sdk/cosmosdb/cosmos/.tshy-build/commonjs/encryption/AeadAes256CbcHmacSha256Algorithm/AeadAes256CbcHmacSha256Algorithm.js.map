{"version":3,"file":"AeadAes256CbcHmacSha256Algorithm.js","sourceRoot":"","sources":["../../../../src/encryption/AeadAes256CbcHmacSha256Algorithm/AeadAes256CbcHmacSha256Algorithm.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { EncryptionType } from \"../enums/index.js\";\nimport { createCipheriv, randomBytes, createHmac, createDecipheriv } from \"node:crypto\";\nimport { DataEncryptionKey } from \"../EncryptionKey/index.js\";\n\nexport class AeadAes256CbcHmacSha256Algorithm {\n  private algoVersion = 0x1;\n  private blockSizeInBytes = 16;\n  private encryptionType: EncryptionType;\n  private dataEncryptionKey: DataEncryptionKey;\n  private version: Buffer;\n  private versionSize: Buffer;\n  private keySizeInBytes: number;\n  private minimumCipherTextLength: number;\n\n  constructor(dataEncryptionKey: DataEncryptionKey, encryptionType: EncryptionType) {\n    this.dataEncryptionKey = dataEncryptionKey;\n    this.encryptionType = encryptionType;\n    this.version = Buffer.from([this.algoVersion]);\n    this.versionSize = Buffer.from([1]);\n    this.keySizeInBytes = 32;\n    this.minimumCipherTextLength = 1 + 2 * this.blockSizeInBytes + this.keySizeInBytes;\n  }\n\n  public encrypt(plainTextBuffer: Buffer): Buffer {\n    let iv: Buffer;\n    // create initialization vector\n    if (this.encryptionType === EncryptionType.RANDOMIZED) {\n      iv = randomBytes(16);\n    } else {\n      const ivHmac = createHmac(\"sha256\", this.dataEncryptionKey.ivKeyBuffer);\n      ivHmac.update(plainTextBuffer);\n      iv = ivHmac.digest().slice(0, this.blockSizeInBytes);\n    }\n    // create cipher text\n    const cipher = createCipheriv(\"aes-256-cbc\", this.dataEncryptionKey.encryptionKeyBuffer, iv);\n    const cipherTextBuffer = Buffer.concat([cipher.update(plainTextBuffer), cipher.final()]);\n    const authTagBuffer = this.generateAuthenticationTag(iv, cipherTextBuffer);\n    return Buffer.concat([Buffer.from([this.algoVersion]), authTagBuffer, iv, cipherTextBuffer]);\n  }\n\n  public decrypt(cipherTextBuffer: Buffer): Buffer {\n    if (cipherTextBuffer.length < this.minimumCipherTextLength) {\n      throw new Error(\"Invalid cipher text length\");\n    }\n    if (cipherTextBuffer[0] !== this.algoVersion) {\n      throw new Error(\"Invalid cipher text version\");\n    }\n    const authTagStartIndex = 1;\n    const authTagLength = this.keySizeInBytes;\n    const ivStartIndex = authTagStartIndex + authTagLength;\n    const ivLength = this.blockSizeInBytes;\n    const cipherTextStartIndex = ivStartIndex + ivLength;\n    const cipherTextLength = cipherTextBuffer.length - cipherTextStartIndex;\n\n    const authenticationTag = cipherTextBuffer.slice(\n      authTagStartIndex,\n      authTagStartIndex + authTagLength,\n    );\n    const iv = cipherTextBuffer.slice(ivStartIndex, ivStartIndex + ivLength);\n    const cipherText = cipherTextBuffer.slice(\n      cipherTextStartIndex,\n      cipherTextStartIndex + cipherTextLength,\n    );\n\n    this.validateAuthenticationTag(authenticationTag, iv, cipherText);\n\n    const decipher = createDecipheriv(\n      \"aes-256-cbc\",\n      this.dataEncryptionKey.encryptionKeyBuffer,\n      iv,\n    );\n    const decrypted = decipher.update(cipherText);\n    const result = Buffer.concat([decrypted, decipher.final()]);\n    return result;\n  }\n\n  private generateAuthenticationTag(iv: Buffer, cipherTextBuffer: Buffer): Buffer {\n    const hmac = createHmac(\"sha256\", this.dataEncryptionKey.macKeyBuffer);\n    const buffer = Buffer.concat([this.version, iv, cipherTextBuffer, this.versionSize]);\n    return hmac.update(buffer).digest();\n  }\n  private validateAuthenticationTag(authenticationTag: Buffer, iv: Buffer, cipherText: Buffer) {\n    const expectedAuthTag = this.generateAuthenticationTag(iv, cipherText);\n    if (!authenticationTag.equals(expectedAuthTag)) {\n      throw new Error(\"Invalid authentication tag\");\n    }\n  }\n}\n"]}