{"version":3,"file":"EncryptionSettingForProperty.js","sourceRoot":"","sources":["../../../src/encryption/EncryptionSettingForProperty.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAKlC,0EAA+F;AAI/F;;;GAGG;AACH,MAAa,4BAA4B;IAQvC,YAAY,4BAA0D;QACpE,IAAI,CAAC,eAAe,GAAG,4BAA4B,CAAC,qBAAqB,CAAC;QAC1E,IAAI,CAAC,cAAc,GAAG,4BAA4B,CAAC,cAAc,CAAC;QAClE,IAAI,CAAC,mBAAmB,GAAG,4BAA4B,CAAC,mBAAmB,CAAC;IAC9E,CAAC;IAEM,KAAK,CAAC,wBAAwB,CACnC,6BAA4D,EAC5D,iBAAoC,EACpC,YAAsB;QAEtB,MAAM,0BAA0B,GAAG,MAAM,IAAI,CAAC,+BAA+B,CAC3E,6BAA6B,EAC7B,iBAAiB,EACjB,YAAY,CACb,CAAC;QACF,MAAM,mBAAmB,GAAG,IAAI,2CAAgC,CAC9D,0BAA0B,EAC1B,IAAI,CAAC,cAAc,CACpB,CAAC;QAEF,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAEO,KAAK,CAAC,+BAA+B,CAC3C,6BAA4D,EAC5D,iBAAoC,EACpC,YAAsB;QAEtB,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,qBAAqB,CAAC,WAAW,CAC1E,6BAA6B,CAAC,yBAAyB,CAAC,IAAI,EAC5D,6BAA6B,CAAC,yBAAyB,CAAC,KAAK,EAC7D,iBAAiB,CAAC,0BAA0B,CAC7C,CAAC;QACF,MAAM,0BAA0B,GAC9B,MAAM,iBAAiB,CAAC,+BAA+B,CAAC,WAAW,CACjE,IAAI,CAAC,eAAe,EACpB,gBAAgB,EAChB,6BAA6B,CAAC,wBAAwB,EACtD,YAAY,CACb,CAAC;QAEJ,OAAO,0BAA0B,CAAC;IACpC,CAAC;CACF;AApDD,oEAoDC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ClientEncryptionIncludedPath } from \"./ClientEncryptionIncludedPath.js\";\nimport type { ClientEncryptionKeyProperties } from \"./ClientEncryptionKey/index.js\";\nimport type { EncryptionAlgorithm, EncryptionType } from \"./enums/index.js\";\nimport { AeadAes256CbcHmacSha256Algorithm } from \"./AeadAes256CbcHmacSha256Algorithm/index.js\";\nimport type { ProtectedDataEncryptionKey } from \"./EncryptionKey/index.js\";\nimport type { EncryptionManager } from \"./EncryptionManager.js\";\n\n/**\n * Represents the encryption setting for a specific property in an item.\n * @hidden\n */\nexport class EncryptionSettingForProperty {\n  // client encryption key id.\n  encryptionKeyId: string;\n  // encryption type - Deterministic/Randomized.\n  encryptionType: EncryptionType;\n  // encryption algorithm - AEAD_AES_256_CBC_HMAC_SHA256\n  encryptionAlgorithm: EncryptionAlgorithm;\n\n  constructor(clientEncryptionIncludedPath: ClientEncryptionIncludedPath) {\n    this.encryptionKeyId = clientEncryptionIncludedPath.clientEncryptionKeyId;\n    this.encryptionType = clientEncryptionIncludedPath.encryptionType;\n    this.encryptionAlgorithm = clientEncryptionIncludedPath.encryptionAlgorithm;\n  }\n\n  public async buildEncryptionAlgorithm(\n    clientEncryptionKeyProperties: ClientEncryptionKeyProperties,\n    encryptionManager: EncryptionManager,\n    forceRefresh?: boolean,\n  ): Promise<AeadAes256CbcHmacSha256Algorithm> {\n    const protectedDataEncryptionKey = await this.buildProtectedDataEncryptionKey(\n      clientEncryptionKeyProperties,\n      encryptionManager,\n      forceRefresh,\n    );\n    const encryptionAlgorithm = new AeadAes256CbcHmacSha256Algorithm(\n      protectedDataEncryptionKey,\n      this.encryptionType,\n    );\n\n    return encryptionAlgorithm;\n  }\n\n  private async buildProtectedDataEncryptionKey(\n    clientEncryptionKeyProperties: ClientEncryptionKeyProperties,\n    encryptionManager: EncryptionManager,\n    forceRefresh?: boolean,\n  ): Promise<ProtectedDataEncryptionKey> {\n    const keyEncryptionKey = encryptionManager.keyEncryptionKeyCache.getOrCreate(\n      clientEncryptionKeyProperties.encryptionKeyWrapMetadata.name,\n      clientEncryptionKeyProperties.encryptionKeyWrapMetadata.value,\n      encryptionManager.encryptionKeyStoreProvider,\n    );\n    const protectedDataEncryptionKey =\n      await encryptionManager.protectedDataEncryptionKeyCache.getOrCreate(\n        this.encryptionKeyId,\n        keyEncryptionKey,\n        clientEncryptionKeyProperties.wrappedDataEncryptionKey,\n        forceRefresh,\n      );\n\n    return protectedDataEncryptionKey;\n  }\n}\n"]}