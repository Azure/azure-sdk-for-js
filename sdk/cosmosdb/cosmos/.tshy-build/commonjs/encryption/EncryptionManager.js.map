{"version":3,"file":"EncryptionManager.js","sourceRoot":"","sources":["../../../src/encryption/EncryptionManager.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,mGAA6F;AAC7F,+EAAyE;AACzE,mFAA6E;AAC7E,yGAAmG;AACnG,mFAA6E;AAC7E,yDAAmD;AAEnD;;;GAGG;AACH,MAAa,iBAAiB;IAQ5B,YAAY,qBAA4C,EAAE,eAAwB;QAChF,IAAI,CAAC,eAAe;YAClB,eAAe,KAAK,SAAS;gBAC3B,CAAC,CAAC,eAAe;gBACjB,CAAC,CAAC,wBAAS,CAAC,yCAAyC,CAAC;QAC1D,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC5C,IAAI,CAAC,0BAA0B,GAAG,IAAI,0DAA0B,CAC9D,qBAAqB,EACrB,YAAY,CACb,CAAC;QACF,IAAI,CAAC,+BAA+B,GAAG,IAAI,oEAA+B,CAAC,YAAY,CAAC,CAAC;QACzF,IAAI,CAAC,qBAAqB,GAAG,IAAI,gDAAqB,EAAE,CAAC;QACzD,IAAI,CAAC,uBAAuB,GAAG,IAAI,oDAAuB,EAAE,CAAC;QAC7D,IAAI,CAAC,kCAAkC,GAAG,IAAI,0EAAkC,EAAE,CAAC;IACrF,CAAC;IAED;;OAEG;IACK,eAAe;QACrB,MAAM,qBAAqB,GAAG,IAAI,CAAC;QACnC,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,qBAAqB,CAAC,CAAC;IAC9D,CAAC;CACF;AA/BD,8CA+BC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ProtectedDataEncryptionKeyCache } from \"./Cache/ProtectedDataEncryptionKeyCache.js\";\nimport { KeyEncryptionKeyCache } from \"./Cache/KeyEncryptionKeyCache.js\";\nimport { EncryptionSettingsCache } from \"./Cache/EncryptionSettingsCache.js\";\nimport { ClientEncryptionKeyPropertiesCache } from \"./Cache/ClientEncryptionKeyPropertiesCache.js\";\nimport { EncryptionKeyStoreProvider } from \"./EncryptionKeyStoreProvider.js\";\nimport { Constants } from \"../common/constants.js\";\nimport type { EncryptionKeyResolver } from \"./EncryptionKeyResolver/index.js\";\n/**\n * Cache manager for encryption related caches.\n * @hidden\n */\nexport class EncryptionManager {\n  public cacheTimeToLive: number;\n  public encryptionKeyStoreProvider: EncryptionKeyStoreProvider;\n  public protectedDataEncryptionKeyCache: ProtectedDataEncryptionKeyCache;\n  public keyEncryptionKeyCache: KeyEncryptionKeyCache;\n  public encryptionSettingsCache: EncryptionSettingsCache;\n  public clientEncryptionKeyPropertiesCache: ClientEncryptionKeyPropertiesCache;\n\n  constructor(encryptionKeyResolver: EncryptionKeyResolver, cacheTimeToLive?: number) {\n    this.cacheTimeToLive =\n      cacheTimeToLive !== undefined\n        ? cacheTimeToLive\n        : Constants.DefaultEncryptionCacheTimeToLiveInSeconds;\n    const cacheTtlInMs = this.getCacheTTlInMs();\n    this.encryptionKeyStoreProvider = new EncryptionKeyStoreProvider(\n      encryptionKeyResolver,\n      cacheTtlInMs,\n    );\n    this.protectedDataEncryptionKeyCache = new ProtectedDataEncryptionKeyCache(cacheTtlInMs);\n    this.keyEncryptionKeyCache = new KeyEncryptionKeyCache();\n    this.encryptionSettingsCache = new EncryptionSettingsCache();\n    this.clientEncryptionKeyPropertiesCache = new ClientEncryptionKeyPropertiesCache();\n  }\n\n  /**\n   * Converts the EncryptionTimeToLive instance to a number (milliseconds).\n   */\n  private getCacheTTlInMs(): number {\n    const millisecondsPerSecond = 1000;\n    return Number(this.cacheTimeToLive * millisecondsPerSecond);\n  }\n}\n"]}