{"version":3,"file":"Item.js","sourceRoot":"","sources":["../../../../src/client/Item/Item.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext.js\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal.js\";\nimport {\n  Constants,\n  copyObject,\n  createDocumentUri,\n  getIdFromLink,\n  getPathFromLink,\n  isItemResourceValid,\n  ResourceType,\n  StatusCodes,\n} from \"../../common/index.js\";\nimport type { PartitionKey, PartitionKeyInternal } from \"../../documents/index.js\";\nimport { convertToInternalPartitionKey } from \"../../documents/index.js\";\nimport type { RequestOptions, Response } from \"../../request/index.js\";\nimport { ErrorResponse } from \"../../request/index.js\";\nimport type { PatchRequestBody } from \"../../utils/patch.js\";\nimport { PatchOperationType } from \"../../utils/patch.js\";\nimport type { Container } from \"../Container/index.js\";\nimport type { Resource } from \"../Resource.js\";\nimport type { ItemDefinition } from \"./ItemDefinition.js\";\nimport { ItemResponse } from \"./ItemResponse.js\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics.js\";\nimport { setPartitionKeyIfUndefined } from \"../../extractPartitionKey.js\";\n\n/**\n * Used to perform operations on a specific item.\n *\n * @see {@link Items} for operations on all items; see `container.items`.\n */\nexport class Item {\n  private partitionKey: PartitionKeyInternal;\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createDocumentUri(this.container.database.id, this.container.id, this.id);\n  }\n\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Item}.\n   * @param partitionKey - The primary key of the given {@link Item} (only for partitioned containers).\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n    partitionKey?: PartitionKey,\n  ) {\n    this.partitionKey =\n      partitionKey === undefined ? undefined : convertToInternalPartitionKey(partitionKey);\n  }\n\n  /**\n   * Read the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   * If the type, T, is a class, it won't pass `typeof` comparisons, because it won't have a match prototype.\n   * It's recommended to only use interfaces.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options - Additional options for the request\n   *\n   * @example Using custom type for response\n   * ```ts snippet:ItemRead\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   *\n   * const { container } = await database.containers.createIfNotExists({ id: \"Test Container\" });\n   *\n   * interface TodoItem {\n   *   title: string;\n   *   done: boolean;\n   *   id: string;\n   * }\n   *\n   * const { resource: item } = await container.item(\"id\", \"<pkValue>\").read<TodoItem>();\n   * ```\n   */\n  public async read<T extends ItemDefinition = any>(\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      let url = this.url;\n      let partitionKey = this.partitionKey;\n      let response: Response<T & Resource>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          let count = 0;\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          const { partitionKeyList: encryptedPartitionKey, encryptedCount } =\n            await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(\n              this.partitionKey,\n            );\n          partitionKey = encryptedPartitionKey;\n          count += encryptedCount;\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            url = await this.container.encryptionProcessor.getEncryptedUrl(this.url);\n            count++;\n          }\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            count,\n          );\n        }\n        const path = getPathFromLink(url);\n        const id = getIdFromLink(url);\n\n        response = await this.clientContext.read<T>({\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        if (error.code !== StatusCodes.NotFound) {\n          throw error;\n        }\n        response = error;\n      }\n      if (this.clientContext.enableEncryption) {\n        diagnosticNode.beginEncryptionDiagnostics(Constants.Encryption.DiagnosticsDecryptOperation);\n        const { body, propertiesDecryptedCount } = await this.container.encryptionProcessor.decrypt(\n          response.result,\n        );\n        diagnosticNode.endEncryptionDiagnostics(\n          Constants.Encryption.DiagnosticsDecryptOperation,\n          propertiesDecryptedCount,\n        );\n        response.result = body;\n      }\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the item's definition.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - The definition to replace the existing {@link Item}'s definition with.\n   * @param options - Additional options for the request\n   * @example\n   * ```ts snippet:ItemReplaceItemDefinition\n   * import { CosmosClient, ItemDefinition } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   * const { container } = await database.containers.createIfNotExists({ id: \"Test Container\" });\n   *\n   * const item: ItemDefinition = {\n   *   id: \"id\",\n   *   title: \"new_title\",\n   * };\n   *\n   * const { resource: replacedItem } = await container.item(\"id\").replace(item);\n   * ```\n   */\n\n  public replace(\n    body: ItemDefinition,\n    options?: RequestOptions,\n  ): Promise<ItemResponse<ItemDefinition>>;\n  /**\n   * Replace the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - The definition to replace the existing {@link Item}'s definition with.\n   * @param options - Additional options for the request\n   * @example\n   * ```ts snippet:ItemReplace\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   *\n   * const { container } = await database.containers.createIfNotExists({ id: \"Test Container\" });\n   *\n   * interface TodoItem {\n   *   title: string;\n   *   done: boolean;\n   *   id: string;\n   * }\n   *\n   * const { resource: item } = await container.item(\"id\", \"<pkValue>\").read<TodoItem>();\n   *\n   * item.done = true;\n   * const { resource: replacedItem } = await container.item(\"id\").replace<TodoItem>(item);\n   * ```\n   */\n  public replace<T extends ItemDefinition>(\n    body: T,\n    options?: RequestOptions,\n  ): Promise<ItemResponse<T>>;\n  public async replace<T extends ItemDefinition>(\n    body: T,\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      let partitionKey = this.partitionKey;\n      const err = {};\n      if (!isItemResourceValid(body, err)) {\n        throw err;\n      }\n      let url = this.url;\n\n      let response: Response<T & Resource>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          // returns copy to avoid encryption of original body passed\n          body = copyObject(body);\n          options = options || {};\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          let count = 0;\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          const { body: encryptedBody, propertiesEncryptedCount } =\n            await this.container.encryptionProcessor.encrypt(body);\n          body = encryptedBody;\n          count += propertiesEncryptedCount;\n          const { partitionKeyList: encryptedPartitionKeyList, encryptedCount } =\n            await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(\n              this.partitionKey,\n            );\n          partitionKey = encryptedPartitionKeyList;\n          count += encryptedCount;\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            url = await this.container.encryptionProcessor.getEncryptedUrl(this.url);\n            count++;\n          }\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            count,\n          );\n        }\n        const path = getPathFromLink(url);\n        const id = getIdFromLink(url);\n\n        response = await this.clientContext.replace<T>({\n          body,\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        throw error;\n      }\n      if (this.clientContext.enableEncryption) {\n        try {\n          // try block for decrypting response. This is done so that we can throw special error message in case of decryption failure\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n          );\n          const { body: result, propertiesDecryptedCount } =\n            await this.container.encryptionProcessor.decrypt(response.result);\n          response.result = result;\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n            propertiesDecryptedCount,\n          );\n        } catch (error) {\n          const decryptionError = new ErrorResponse(\n            `Item replace operation was successful but response decryption failed: + ${error.message}`,\n          );\n          decryptionError.code = StatusCodes.ServiceUnavailable;\n          throw decryptionError;\n        }\n      }\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options - Additional options for the request\n   * @example\n   * ```ts snippet:ItemDelete\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   *\n   * const { container } = await database.containers.createIfNotExists({ id: \"Test Container\" });\n   *\n   * interface TodoItem {\n   *   title: string;\n   *   done: boolean;\n   *   id: string;\n   * }\n   *\n   * const { resource: item } = await container.item(\"id\", \"<pkValue>\").read<TodoItem>();\n   *\n   * await container.item(\"id\").delete<TodoItem>();\n   * ```\n   */\n  public async delete<T extends ItemDefinition = any>(\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      let partitionKey = this.partitionKey;\n      let url = this.url;\n      let response: Response<T & Resource>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          let count = 0;\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          const { partitionKeyList, encryptedCount } =\n            await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(\n              this.partitionKey,\n            );\n          partitionKey = partitionKeyList;\n          count += encryptedCount;\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            url = await this.container.encryptionProcessor.getEncryptedUrl(this.url);\n            count++;\n          }\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            count,\n          );\n        }\n        const path = getPathFromLink(url);\n        const id = getIdFromLink(url);\n\n        response = await this.clientContext.delete<T>({\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        throw error;\n      }\n\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Perform a JSONPatch on the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options - Additional options for the request\n   * @example\n   * ```ts snippet:ItemPatch\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * interface TodoItem {\n   *   title: string;\n   *   done: boolean;\n   *   id: string;\n   * }\n   *\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   *\n   * const { container } = await database.containers.createIfNotExists({ id: \"Test Container\" });\n   *\n   * const { resource: item } = await container.item(\"id\", \"<pkValue>\").read<TodoItem>();\n   *\n   * const { resource: patchedItem } = await container.item(\"id\").patch<TodoItem>([\n   *   {\n   *     op: \"replace\", // Operation type (can be replace, add, remove, set, incr)\n   *     path: \"/title\", // The path to the property to update\n   *     value: \"new-title\", // New value for the property\n   *   },\n   *   {\n   *     op: \"remove\",\n   *     path: \"/done\",\n   *   },\n   * ]);\n   * ```\n   */\n  public async patch<T extends ItemDefinition = any>(\n    body: PatchRequestBody,\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      let url = this.url;\n      let partitionKey = this.partitionKey;\n      let response: Response<T & Resource>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          // returns copy to avoid encryption of original body passed\n          body = copyObject(body);\n          const operations = Array.isArray(body) ? body : body.operations;\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          let propertiesEncryptedCount = 0;\n          for (const operation of operations) {\n            if (operation.op === PatchOperationType.remove) {\n              continue;\n            }\n            const isPathEncrypted = await this.container.encryptionProcessor.isPathEncrypted(\n              operation.path,\n            );\n            if (!isPathEncrypted) {\n              continue;\n            }\n            if (operation.op === PatchOperationType.incr) {\n              throw new ErrorResponse(\n                `Increment patch operation is not allowed for encrypted path '${operation.path}'`,\n              );\n            }\n            if (\"value\" in operation) {\n              operation.value = await this.container.encryptionProcessor.encryptProperty(\n                operation.path,\n                operation.value,\n              );\n            }\n            propertiesEncryptedCount++;\n          }\n          const { partitionKeyList, encryptedCount } =\n            await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(partitionKey);\n          partitionKey = partitionKeyList;\n          propertiesEncryptedCount += encryptedCount;\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            url = await this.container.encryptionProcessor.getEncryptedUrl(this.url);\n            propertiesEncryptedCount++;\n          }\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            propertiesEncryptedCount,\n          );\n        }\n        const path = getPathFromLink(url);\n        const id = getIdFromLink(url);\n        response = await this.clientContext.patch<T>({\n          body,\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        throw error;\n      }\n      if (this.clientContext.enableEncryption) {\n        try {\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n          );\n          const { body: result, propertiesDecryptedCount } =\n            await this.container.encryptionProcessor.decrypt(response.result);\n          response.result = result;\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n            propertiesDecryptedCount,\n          );\n        } catch (error) {\n          const decryptionError = new ErrorResponse(\n            `Item patch operation was successful but response decryption failed: + ${error.message}`,\n          );\n          decryptionError.code = StatusCodes.ServiceUnavailable;\n          throw decryptionError;\n        }\n      }\n\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"]}