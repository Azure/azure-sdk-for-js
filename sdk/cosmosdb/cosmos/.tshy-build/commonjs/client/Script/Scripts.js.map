{"version":3,"file":"Scripts.js","sourceRoot":"","sources":["../../../../src/client/Script/Scripts.ts"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,kCAAkC;AAClC,0DAAgF;AAChF,kDAAwD;AACxD,8DAA4F;AAI5F,MAAa,OAAO;IAClB;;;OAGG;IACH,YACkB,SAAoB,EACnB,aAA4B;QAD7B,cAAS,GAAT,SAAS,CAAW;QACnB,kBAAa,GAAb,aAAa,CAAe;IAC5C,CAAC;IAEJ;;;;;OAKG;IACI,eAAe,CAAC,EAAU;QAC/B,OAAO,IAAI,0BAAe,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACrE,CAAC;IAED;;;;;OAKG;IACI,OAAO,CAAC,EAAU;QACvB,OAAO,IAAI,kBAAO,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC7D,CAAC;IAED;;;;;OAKG;IACI,mBAAmB,CAAC,EAAU;QACnC,OAAO,IAAI,8BAAmB,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACzE,CAAC;IAGD;;;;OAIG;IACH,IAAW,gBAAgB;QACzB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,IAAI,CAAC,OAAO,GAAG,IAAI,2BAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1E,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAGD;;;;OAIG;IACH,IAAW,QAAQ;QACjB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACpE,CAAC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAGD;;;;OAIG;IACH,IAAW,oBAAoB;QAC7B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,GAAG,IAAI,+BAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5E,CAAC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AA9ED,0BA8EC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { StoredProcedures, StoredProcedure } from \"../StoredProcedure/index.js\";\nimport { Trigger, Triggers } from \"../Trigger/index.js\";\nimport { UserDefinedFunction, UserDefinedFunctions } from \"../UserDefinedFunction/index.js\";\nimport type { ClientContext } from \"../../ClientContext.js\";\nimport type { Container } from \"../Container/Container.js\";\n\nexport class Scripts {\n  /**\n   * @param container - The parent {@link Container}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link StoredProcedure} by id.\n   *\n   * Use `.storedProcedures` for creating new stored procedures, or querying/reading all stored procedures.\n   * @param id - The id of the {@link StoredProcedure}.\n   */\n  public storedProcedure(id: string): StoredProcedure {\n    return new StoredProcedure(this.container, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Trigger} by id.\n   *\n   * Use `.triggers` for creating new triggers, or querying/reading all triggers.\n   * @param id - The id of the {@link Trigger}.\n   */\n  public trigger(id: string): Trigger {\n    return new Trigger(this.container, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link UserDefinedFunction} by id.\n   *\n   * Use `.userDefinedFunctions` for creating new user defined functions, or querying/reading all user defined functions.\n   * @param id - The id of the {@link UserDefinedFunction}.\n   */\n  public userDefinedFunction(id: string): UserDefinedFunction {\n    return new UserDefinedFunction(this.container, id, this.clientContext);\n  }\n\n  private $sprocs: StoredProcedures;\n  /**\n   * Operations for creating new stored procedures, and reading/querying all stored procedures.\n   *\n   * For reading, replacing, or deleting an existing stored procedure, use `.storedProcedure(id)`.\n   */\n  public get storedProcedures(): StoredProcedures {\n    if (!this.$sprocs) {\n      this.$sprocs = new StoredProcedures(this.container, this.clientContext);\n    }\n    return this.$sprocs;\n  }\n\n  private $triggers: Triggers;\n  /**\n   * Operations for creating new triggers, and reading/querying all triggers.\n   *\n   * For reading, replacing, or deleting an existing trigger, use `.trigger(id)`.\n   */\n  public get triggers(): Triggers {\n    if (!this.$triggers) {\n      this.$triggers = new Triggers(this.container, this.clientContext);\n    }\n    return this.$triggers;\n  }\n\n  private $udfs: UserDefinedFunctions;\n  /**\n   * Operations for creating new user defined functions, and reading/querying all user defined functions.\n   *\n   * For reading, replacing, or deleting an existing user defined function, use `.userDefinedFunction(id)`.\n   */\n  public get userDefinedFunctions(): UserDefinedFunctions {\n    if (!this.$udfs) {\n      this.$udfs = new UserDefinedFunctions(this.container, this.clientContext);\n    }\n    return this.$udfs;\n  }\n}\n"]}