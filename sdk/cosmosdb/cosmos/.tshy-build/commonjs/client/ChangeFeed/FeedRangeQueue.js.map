{"version":3,"file":"FeedRangeQueue.js","sourceRoot":"","sources":["../../../../src/client/ChangeFeed/FeedRangeQueue.ts"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,kCAAkC;AAClC,6DAAuD;AACvD;;;GAGG;AACH,MAAa,cAAc;IAGzB;QACE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IAEM,kBAAkB,CAAC,OAAwB;QAChD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;QAC7B,CAAC;IACH,CAAC;IAEM,OAAO,CAAC,IAAqB;QAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;IAEM,IAAI;QACT,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACxD,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC;IACpC,CAAC;IAEM,wBAAwB;QAC7B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IACD;;OAEG;IACI,cAAc;QACnB,MAAM,aAAa,GAAsB,EAAE,CAAC;QAC5C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;YAC5B,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;YACxF,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;YACxF,MAAM,gBAAgB,GAAG,IAAI,oCAAe,CAC1C,YAAY,EACZ,YAAY,EACZ,OAAO,CAAC,iBAAiB,CAC1B,CAAC;YACF,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,OAAO,aAAa,CAAC;IACvB,CAAC;CACF;AAnDD,wCAmDC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ChangeFeedRange } from \"./ChangeFeedRange.js\";\n/**\n * @hidden\n * A queue for iterating over specified Epk ranges and fetch change feed for the given epk ranges.\n */\nexport class FeedRangeQueue<T> {\n  private elements: ChangeFeedRange[];\n\n  constructor() {\n    this.elements = [];\n  }\n\n  public modifyFirstElement(newItem: ChangeFeedRange): void {\n    if (!this.isEmpty()) {\n      this.elements[0] = newItem;\n    }\n  }\n\n  public enqueue(item: ChangeFeedRange): void {\n    this.elements.push(item);\n  }\n\n  public dequeue(): ChangeFeedRange {\n    return this.elements.shift();\n  }\n\n  public peek(): T | ChangeFeedRange {\n    return !this.isEmpty() ? this.elements[0] : undefined;\n  }\n\n  public isEmpty(): boolean {\n    return this.elements.length === 0;\n  }\n\n  public moveFirstElementToTheEnd(): void {\n    if (!this.isEmpty()) {\n      this.elements.push(this.dequeue());\n    }\n  }\n  /**\n   * Returns a snapshot of the queue as an array to be used as Continuation token.\n   */\n  public returnSnapshot(): ChangeFeedRange[] {\n    const allFeedRanges: ChangeFeedRange[] = [];\n    this.elements.map((element) => {\n      const minInclusive = element.epkMinHeader ? element.epkMinHeader : element.minInclusive;\n      const maxExclusive = element.epkMaxHeader ? element.epkMaxHeader : element.maxExclusive;\n      const feedRangeElement = new ChangeFeedRange(\n        minInclusive,\n        maxExclusive,\n        element.continuationToken,\n      );\n      allFeedRanges.push(feedRangeElement);\n    });\n    return allFeedRanges;\n  }\n}\n"]}