{"version":3,"file":"Trigger.js","sourceRoot":"","sources":["../../../../src/client/Trigger/Trigger.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext.js\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal.js\";\nimport {\n  createTriggerUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common/index.js\";\nimport type { RequestOptions } from \"../../request/index.js\";\nimport type { Container } from \"../Container/index.js\";\nimport type { TriggerDefinition } from \"./TriggerDefinition.js\";\nimport { TriggerResponse } from \"./TriggerResponse.js\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics.js\";\n\n/**\n * Operations to read, replace, or delete a {@link Trigger}.\n *\n * Use `container.triggers` to create, upsert, query, or read all.\n */\nexport class Trigger {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createTriggerUri(this.container.database.id, this.container.id, this.id);\n  }\n\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Trigger}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Read the {@link TriggerDefinition} for the given {@link Trigger}.\n   * @example\n   * ```ts snippet:TriggerRead\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   * const { container } = await database.containers.createIfNotExists({ id: \"Test Container\" });\n   *\n   * const { resource: trigger } = await container.scripts.trigger(\"<trigger-id>\").read();\n   * ```\n   */\n  public async read(options?: RequestOptions): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<TriggerDefinition>({\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link Trigger} with the specified {@link TriggerDefinition}.\n   * @param body - The specified {@link TriggerDefinition} to replace the existing definition with.\n   * @example\n   * ```ts snippet:TriggerReplace\n   * import { CosmosClient, TriggerDefinition, TriggerType, TriggerOperation } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   * const { container } = await database.containers.createIfNotExists({ id: \"Test Container\" });\n   *\n   * const triggerDefinition: TriggerDefinition = {\n   *   id: \"sample trigger\",\n   *   body: \"serverScript() { var x = 10; }\",\n   *   triggerType: TriggerType.Pre,\n   *   triggerOperation: TriggerOperation.All,\n   * };\n   *\n   * const { resource: trigger } = await container.scripts.triggers.create(triggerDefinition);\n   *\n   * trigger.body = \"function () { const x = 20; console.log(x); }\";\n   * const { resource: replacedTrigger } = await container.scripts.trigger(trigger.id).replace(trigger);\n   * ```\n   */\n  public async replace(\n    body: TriggerDefinition,\n    options?: RequestOptions,\n  ): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<TriggerDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link Trigger}.\n   * @example\n   * ```ts snippet:TriggerDelete\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   * const { container } = await database.containers.createIfNotExists({ id: \"Test Container\" });\n   *\n   * await container.scripts.trigger(\"<trigger-id>\").delete();\n   * ```\n   */\n  public async delete(options?: RequestOptions): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<TriggerDefinition>({\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"]}