{"version":3,"file":"bulkExecutionRetryPolicy.js","sourceRoot":"","sources":["../../../src/retry/bulkExecutionRetryPolicy.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAKvE;;;GAGG;AACH,MAAM,OAAO,wBAAwB;IAOnC,YAAY,eAA4B;QAJvB,oBAAe,GAAG,EAAE,CAAC;QACrB,2CAAsC,GAAG,IAAI,CAAC;QAI7D,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,WAAW,CACtB,GAAkB,EAClB,cAAsC;QAEtC,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,OAAO,KAAK,CAAC;QACf,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,EAAE,CAAC;YAClC,IAAI,CAAC,YAAY,EAAE,CAAC;YAEpB,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;gBAC7C,OAAO,KAAK,CAAC;YACf,CAAC;YACD,IACE,GAAG,CAAC,SAAS,KAAK,cAAc,CAAC,qBAAqB;gBACtD,GAAG,CAAC,SAAS,KAAK,cAAc,CAAC,eAAe;gBAChD,GAAG,CAAC,SAAS,KAAK,cAAc,CAAC,4BAA4B,EAC7D,CAAC;gBACD,OAAO,IAAI,CAAC;YACd,CAAC;YACD,IAAI,GAAG,CAAC,SAAS,KAAK,cAAc,CAAC,gBAAgB,EAAE,CAAC;gBACtD,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QAED,kEAAkE;QAClE,uHAAuH;QACvH,wCAAwC;QACxC,IACE,GAAG,CAAC,IAAI,KAAK,WAAW,CAAC,qBAAqB;YAC9C,GAAG,CAAC,SAAS,KAAK,IAAI,CAAC,sCAAsC,EAC7D,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,sBAAsB;QACtB,IAAI,sBAAsB,GAAG,KAAK,CAAC;QACnC,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW,CAAC,eAAe,EAAE,CAAC;YAC7C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;YAChF,sBAAsB,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;QACrF,CAAC;QACD,IAAI,sBAAsB,EAAE,CAAC;YAC3B,MAAM,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;QACnD,CAAC;QACD,OAAO,sBAAsB,CAAC;IAChC,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { sleep } from \"../common/helper.js\";\nimport { StatusCodes, SubStatusCodes } from \"../common/statusCodes.js\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal.js\";\nimport type { ErrorResponse } from \"../index.js\";\nimport type { RetryPolicy } from \"./RetryPolicy.js\";\n\n/**\n * This class implements the retry policy for bulk operations.\n * @hidden\n */\nexport class BulkExecutionRetryPolicy implements RetryPolicy {\n  retryAfterInMs: number;\n  private retriesOn410: number;\n  private readonly MaxRetriesOn410 = 10;\n  private readonly SubstatusCodeBatchResponseSizeExceeded = 3402;\n  nextRetryPolicy: RetryPolicy;\n\n  constructor(nextRetryPolicy: RetryPolicy) {\n    this.nextRetryPolicy = nextRetryPolicy;\n    this.retriesOn410 = 0;\n  }\n\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<boolean | [boolean, string]> {\n    if (!err) {\n      return false;\n    }\n    if (err.code === StatusCodes.Gone) {\n      this.retriesOn410++;\n\n      if (this.retriesOn410 > this.MaxRetriesOn410) {\n        return false;\n      }\n      if (\n        err.substatus === SubStatusCodes.PartitionKeyRangeGone ||\n        err.substatus === SubStatusCodes.CompletingSplit ||\n        err.substatus === SubStatusCodes.CompletingPartitionMigration\n      ) {\n        return true;\n      }\n      if (err.substatus === SubStatusCodes.NameCacheIsStale) {\n        return true;\n      }\n    }\n\n    // API can return 413 which means the response is bigger than 4Mb.\n    // Operations that exceed the 4Mb limit are returned as 413/3402, while the operations within the 4Mb limit will be 200\n    // TODO: better way to handle this error\n    if (\n      err.code === StatusCodes.RequestEntityTooLarge &&\n      err.substatus === this.SubstatusCodeBatchResponseSizeExceeded\n    ) {\n      return true;\n    }\n    // check for 429 error\n    let shouldRetryForThrottle = false;\n    if (err.code === StatusCodes.TooManyRequests) {\n      const retryResult = await this.nextRetryPolicy.shouldRetry(err, diagnosticNode);\n      shouldRetryForThrottle = Array.isArray(retryResult) ? retryResult[0] : retryResult;\n    }\n    if (shouldRetryForThrottle) {\n      await sleep(this.nextRetryPolicy.retryAfterInMs);\n    }\n    return shouldRetryForThrottle;\n  }\n}\n"]}