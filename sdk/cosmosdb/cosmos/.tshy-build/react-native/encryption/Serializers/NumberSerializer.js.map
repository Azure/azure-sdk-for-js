{"version":3,"file":"NumberSerializer.js","sourceRoot":"","sources":["../../../../src/encryption/Serializers/NumberSerializer.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,MAAM,OAAO,gBAAgB;IAC3B,WAAW,CAAC,KAAa;QACvB,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,OAAO,GAAG,CAAC;IACb,CAAC;IAED,SAAS,CAAC,KAAa;QACrB,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACpC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Serializer } from \"./Serializer.js\";\n\nexport class NumberSerializer implements Serializer {\n  deserialize(bytes: Buffer): number {\n    if (!bytes || bytes.length < 8) {\n      throw new Error(\"Invalid byte array for deserialization\");\n    }\n    const num = Number(bytes.readBigInt64LE(0));\n    return num;\n  }\n\n  serialize(value: number): Buffer {\n    const newValue = BigInt(value);\n    const buffer = Buffer.alloc(8);\n    buffer.writeBigInt64LE(newValue, 0);\n    return buffer;\n  }\n}\n"]}