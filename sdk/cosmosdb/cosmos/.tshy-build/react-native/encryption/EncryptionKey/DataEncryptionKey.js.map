{"version":3,"file":"DataEncryptionKey.js","sourceRoot":"","sources":["../../../../src/encryption/EncryptionKey/DataEncryptionKey.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAEzC,MAAM,OAAgB,iBAAiB;IAUrC,YAAY,OAAe,EAAE,IAAY;QARjC,kBAAa,GAAG,GAAG,CAAC;QACpB,mBAAc,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QAQ9C,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,cAAc,EAAE,CAAC;YAC3C,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,CAAC;QACD,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,MAAM,iBAAiB,GAAG,kHAAkH,IAAI,CAAC,aAAa,EAAE,CAAC;QACjK,MAAM,UAAU,GAAG,2GAA2G,IAAI,CAAC,aAAa,EAAE,CAAC;QACnJ,MAAM,SAAS,GAAG,0GAA0G,IAAI,CAAC,aAAa,EAAE,CAAC;QAEjJ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACzF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3E,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3E,CAAC;IAEO,iBAAiB,CAAC,SAAiB,EAAE,GAAW;QACtD,MAAM,IAAI,GAAG,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createHmac } from \"node:crypto\";\n\nexport abstract class DataEncryptionKey {\n  private rootKeyBuffer: Buffer;\n  private keySizeInBits = 256;\n  private keySizeInBytes = this.keySizeInBits / 8;\n\n  public encryptionKeyBuffer: Buffer;\n  public macKeyBuffer: Buffer;\n  public ivKeyBuffer: Buffer;\n  public name: string;\n\n  constructor(rootKey: Buffer, name: string) {\n    if (rootKey.length !== this.keySizeInBytes) {\n      throw new Error(\"Invalid root key size\");\n    }\n    this.rootKeyBuffer = rootKey;\n    this.name = name;\n\n    const encryptionKeySalt = `Microsoft SQL Server cell encryption key with encryption algorithm:AEAD_AES_256_CBC_HMAC_SHA256 and key length:${this.keySizeInBits}`;\n    const macKeySalt = `Microsoft SQL Server cell MAC key with encryption algorithm:AEAD_AES_256_CBC_HMAC_SHA256 and key length:${this.keySizeInBits}`;\n    const ivKeySalt = `Microsoft SQL Server cell IV key with encryption algorithm:AEAD_AES_256_CBC_HMAC_SHA256 and key length:${this.keySizeInBits}`;\n\n    this.encryptionKeyBuffer = this.getHmacWithSha256(encryptionKeySalt, this.rootKeyBuffer);\n    this.macKeyBuffer = this.getHmacWithSha256(macKeySalt, this.rootKeyBuffer);\n    this.ivKeyBuffer = this.getHmacWithSha256(ivKeySalt, this.rootKeyBuffer);\n  }\n\n  private getHmacWithSha256(plainText: string, key: Buffer): Buffer {\n    const hmac = createHmac(\"sha256\", key);\n    hmac.update(Buffer.from(plainText, \"utf16le\"));\n    return hmac.digest();\n  }\n}\n"]}