{"version":3,"file":"EncryptionKeyResolver.js","sourceRoot":"","sources":["../../../../src/encryption/EncryptionKeyResolver/EncryptionKeyResolver.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/** Provides an interface for key resolver for different key providers.\n * All resolvers should implement this interface.\n */\nexport interface EncryptionKeyResolver {\n  /** name of the resolver to use for client side encryption.\n   * Currently only AzureKeyVault implementation is supported.\n   */\n  encryptionKeyResolverName: string;\n  /**\n   * Wraps the input key using the key encryption key.\n   * @param encryptionKeyId - Identifier of the customer managed key to be used for wrapping.\n   * @param algorithm - Algorithm to be used for wrapping.\n   * @param key - Data Encryption Key to be wrapped.\n   * @returns Wrapped key.\n   */\n  wrapKey(\n    encryptionKeyId: string,\n    algorithm: string,\n    unwrappedKey: Uint8Array,\n  ): Promise<Uint8Array>;\n  /**\n   * Unwraps the input wrapped key using the key encryption key.\n   * @param encryptionKeyId - Identifier of the customer managed key to be used for unwrapping.\n   * @param algorithm - Algorithm to be used for unwrapping.\n   * @param wrappedKey - wrapped Data Encryption key.\n   * @returns Unwrapped Key.\n   */\n  unwrapKey(\n    encryptionKeyId: string,\n    algorithm: string,\n    wrappedKey: Uint8Array,\n  ): Promise<Uint8Array>;\n}\n"]}