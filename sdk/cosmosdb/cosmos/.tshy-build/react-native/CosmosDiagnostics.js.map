{"version":3,"file":"CosmosDiagnostics.js","sourceRoot":"","sources":["../../src/CosmosDiagnostics.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAOlC;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,OAAO,iBAAiB;IAI5B;;OAEG;IACH,YACE,2BAAwD,EACxD,cAA+B,EAC/B,YAAqC;QAErC,IAAI,CAAC,2BAA2B,GAAG,2BAA2B,CAAC;QAC/D,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;CACF;AAsID;;GAEG;AACH,MAAM,CAAN,IAAY,kBAMX;AAND,WAAY,kBAAkB;IAC5B,6EAAuD,CAAA;IACvD,wEAAkD,CAAA;IAClD,4DAAsC,CAAA;IACtC,yDAAmC,CAAA;IACnC,2DAAqC,CAAA;AACvC,CAAC,EANW,kBAAkB,KAAlB,kBAAkB,QAM7B;AA4CD,MAAM,UAAU,WAAW,CAAC,IAA4B;IACtD,IAAI,IAAI,CAAC,MAAM;QAAE,OAAO,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;QAC5C,OAAO,IAAI,CAAC;AACnB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { OperationType, ResourceType } from \"./common/index.js\";\nimport type { CosmosDbDiagnosticLevel } from \"./diagnostics/CosmosDbDiagnosticLevel.js\";\nimport type { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal.js\";\nimport type { ConsistencyLevel } from \"./documents/index.js\";\n\n/**\n *  * This is a Cosmos Diagnostic type that holds collected diagnostic information during a client operations. ie. Item.read(), Container.create().\n * It has three members -\n * 1. `clientSideRequestStatistics` member contains aggregate diagnostic information, including -\n *   - metadata lookups. Here all the server requests, apart from the final intended resource are considered as metadata calls.\n *    i.e. for item.read(id), if the client makes server call to discover endpoints it would be considered as metadata call.\n *   - retries\n *   - endpoints contacted.\n *   - request, response payload stats.\n *   - gatewayStatistics - Information corresponding to main operation. For example during Item.read(), the client might perform many operations\n *    i.e. metadata lookup etc, but gatewayStatistics represents the diagnostics information for actual read operation.\n *\n * 2. diagnosticNode - Is a tree like structure which captures detailed diagnostic information. By default it is disabled, and is intended to be\n * used only for debugging on non production environments. The kind of details captured in diagnosticNode is controlled by `CosmosDbDiagnosticLevel`.\n * - CosmosDbDiagnosticLevel.info - Is default value. In this level only clientSideRequestStatistics are captured. Is is meant for production environments.\n * - CosmosDbDiagnosticLevel.debug - Captures diagnosticNode and clientConfig. No request and response payloads are captured. Is not meant to be used\n * in production environment.\n * - CosmosDbDiagnosticLevel.debug-unsafe - In addition to data captured in CosmosDbDiagnosticLevel.debug, also captures request and response payloads.\n * Is not meant to be used in production environment.\n * 3. clientConfig - Captures information related to how client was configured during initialization.\n */\nexport class CosmosDiagnostics {\n  public readonly clientSideRequestStatistics: ClientSideRequestStatistics;\n  public readonly diagnosticNode: DiagnosticNode;\n  public readonly clientConfig?: ClientConfigDiagnostic;\n  /**\n   * @internal\n   */\n  constructor(\n    clientSideRequestStatistics: ClientSideRequestStatistics,\n    diagnosticNode?: DiagnosticNode,\n    clientConfig?: ClientConfigDiagnostic,\n  ) {\n    this.clientSideRequestStatistics = clientSideRequestStatistics;\n    this.diagnosticNode = diagnosticNode;\n    this.clientConfig = clientConfig;\n  }\n}\n\n/**\n * This type holds information related to initialization of `CosmosClient`\n */\nexport type ClientConfigDiagnostic = {\n  /**\n   * End point configured during client initialization.\n   */\n  endpoint: string;\n  /**\n   * True if `resourceTokens` was supplied during client initialization.\n   */\n  resourceTokensConfigured: boolean;\n  /**\n   * True if `tokenProvider` was supplied during client initialization.\n   */\n  tokenProviderConfigured: boolean;\n  /**\n   * True if `aadCredentials` was supplied during client initialization.\n   */\n  aadCredentialsConfigured: boolean;\n  /**\n   * True if `connectionPolicy` was supplied during client initialization.\n   */\n  connectionPolicyConfigured: boolean;\n  /**\n   * `consistencyLevel` supplied during client initialization.\n   */\n  consistencyLevel?: keyof typeof ConsistencyLevel;\n  /**\n   * `defaultHeaders` supplied during client initialization.\n   */\n  defaultHeaders?: { [key: string]: any };\n  /**\n   * True if `connectionPolicy` were supplied during client initialization.\n   */\n  agentConfigured: boolean;\n  /**\n   * `userAgentSuffix` supplied during client initialization.\n   */\n  userAgentSuffix: string;\n  /**\n   * `diagnosticLevel` supplied during client initialization.\n   */\n  diagnosticLevel?: CosmosDbDiagnosticLevel;\n  /**\n   * True if `plugins` were supplied during client initialization.\n   */\n  pluginsConfigured: boolean;\n  /**\n   * SDK version\n   */\n  sDKVersion: string;\n};\n\n/**\n * This type contains diagnostic information regarding all metadata request to server during an CosmosDB client operation.\n */\nexport type MetadataLookUpDiagnostics = {\n  metadataLookups: MetadataLookUpDiagnostic[];\n};\n\n/**\n * This type captures diagnostic information regarding retries attempt during an CosmosDB client operation.\n */\nexport type RetryDiagnostics = {\n  failedAttempts: FailedRequestAttemptDiagnostic[];\n};\n\nexport type GatewayStatistics = {\n  /**\n   * This is the activityId for request, made to server for fetching the requested resource. (As opposed to other potential meta data requests)\n   */\n  activityId?: string;\n  /*\n   * The correlated activity ID is added in the header of every request made to the backend for a query. This aids in troubleshooting by linking all\n   * requests associated with a particular query.\n   */\n  correlatedActivityId?: string;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  operationType?: OperationType;\n  resourceType?: ResourceType;\n  statusCode?: number;\n  subStatusCode?: number;\n  requestCharge?: number;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n};\n\n/**\n * This type contains diagnostic information regarding a single metadata request to server.\n */\nexport interface MetadataLookUpDiagnostic {\n  activityId: string;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  operationType?: OperationType;\n  resourceType?: ResourceType;\n  metaDataType: MetadataLookUpType;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n}\n\n/**\n * This type captures diagnostic information regarding a failed request to server api.\n */\nexport interface FailedRequestAttemptDiagnostic {\n  attemptNumber: number;\n  activityId: string;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  operationType?: OperationType;\n  resourceType?: ResourceType;\n  statusCode: number;\n  substatusCode?: number;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n}\n\n/**\n * @hidden\n * Represents the diagnostics information for encryption operations.\n */\nexport interface EncryptionDiagnostics {\n  /** shows start time, duration and properties count for encryption*/\n  encryptContent: Record<string, any>;\n  /** shows start time, duration and properties count for decryption*/\n  decryptContent: Record<string, any>;\n  /** represents total processing duration for encryption/decryption*/\n  processingDurationInMs: number;\n}\n\n/**\n * This is enum for Type of Metadata lookups possible.\n */\nexport enum MetadataLookUpType {\n  PartitionKeyRangeLookUp = \"PARTITION_KEY_RANGE_LOOK_UP\",\n  DatabaseAccountLookUp = \"DATABASE_ACCOUNT_LOOK_UP\",\n  QueryPlanLookUp = \"QUERY_PLAN_LOOK_UP\",\n  DatabaseLookUp = \"DATABASE_LOOK_UP\",\n  ContainerLookUp = \"CONTAINER_LOOK_UP\",\n}\n\n/**\n * This is a collection type for all client side diagnostic information.\n */\nexport type ClientSideRequestStatistics = {\n  /**\n   * This is the UTC timestamp for start of client operation.\n   */\n  requestStartTimeUTCInMs: number;\n  /**\n   * This is the duration in milli seconds taken by client operation.\n   */\n  requestDurationInMs: number;\n  /**\n   * This is the list of Location Endpoints contacted during the client operation.\n   */\n  locationEndpointsContacted: string[];\n  /**\n   * This field captures diagnostic information for retries happened during client operation.\n   */\n  retryDiagnostics: RetryDiagnostics;\n  /**\n   * This field captures diagnostic information for meta data lookups happened during client operation.\n   */\n  metadataDiagnostics: MetadataLookUpDiagnostics;\n  /**\n   * These are the statistics for main point look operation.\n   */\n  gatewayStatistics: GatewayStatistics[];\n  /**\n   * This is the cumulated Request Payload Length n bytes, this includes metadata calls along with the main operation.\n   */\n  totalRequestPayloadLengthInBytes: number;\n  /**\n   * This is the cumulated Response Payload Length n bytes, this includes metadata calls along with the main operation.\n   */\n  totalResponsePayloadLengthInBytes: number;\n  /**\n   * This field captures diagnostic information for encryption/decryption happened during CRUD operation if encryption is enabled.\n   */\n  encryptionDiagnostics?: EncryptionDiagnostics;\n};\n\nexport function getRootNode(node: DiagnosticNodeInternal): DiagnosticNodeInternal {\n  if (node.parent) return getRootNode(node.parent);\n  else return node;\n}\n\n/**\n * Represents a tree like structure, for capturing diagnostic information.\n */\nexport interface DiagnosticNode {\n  id: string;\n  nodeType: string;\n  children: DiagnosticNode[];\n  data: { [key: string]: any };\n  startTimeUTCInMs: number;\n  durationInMs: number;\n}\n"]}