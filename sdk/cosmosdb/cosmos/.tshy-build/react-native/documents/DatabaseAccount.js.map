{"version":3,"file":"DatabaseAccount.js","sourceRoot":"","sources":["../../../src/documents/DatabaseAccount.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAEzD;;GAEG;AACH,MAAM,OAAO,eAAe;IAK1B;;;OAGG;IACH,IAAW,aAAa;QACtB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAGD;;;OAGG;IACH,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAGD;;;OAGG;IACH,IAAW,wBAAwB;QACjC,OAAO,IAAI,CAAC,wBAAwB,CAAC;IACvC,CAAC;IAGD;;;;;;;OAOG;IACH,IAAW,4BAA4B;QACrC,OAAO,IAAI,CAAC,4BAA4B,CAAC;IAC3C,CAAC;IAQD;;;OAGG;IACH,IAAW,iBAAiB;QAC1B,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAKD,mBAAmB;IACnB,YAAmB,IAA4B,EAAE,OAAsB;QA7DvE,4EAA4E;QAC5D,sBAAiB,GAAe,EAAE,CAAC;QACnD,4EAA4E;QAC5D,sBAAiB,GAAe,EAAE,CAAC;QA2DjD,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC;QACxF,IAAI,CAAC,4BAA4B,GAAG,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;QAChG,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,qBAAqB;YACjD,CAAC,CAAE,IAAI,CAAC,qBAAqB,CAAC,uBAA4C;YAC1E,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC;QAC7B,IAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,EAAE,KAAK,WAAW,EAAE,CAAC;YACjE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAe,CAAC;QAC3E,CAAC;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,EAAE,KAAK,WAAW,EAAE,CAAC;YACjE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAe,CAAC;QAC3E,CAAC;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,kCAAkC,CAAC,EAAE,CAAC;YACvD,IAAI,CAAC,+BAA+B;gBAClC,IAAI,CAAC,SAAS,CAAC,kCAAkC,CAAC,KAAK,IAAI;oBAC3D,IAAI,CAAC,SAAS,CAAC,kCAAkC,CAAC,KAAK,MAAM,CAAC;QAClE,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common/index.js\";\nimport type { CosmosHeaders } from \"../queryExecutionContext/index.js\";\nimport { ConsistencyLevel } from \"./ConsistencyLevel.js\";\n\n/**\n * Represents a DatabaseAccount in the Azure Cosmos DB database service.\n */\nexport class DatabaseAccount {\n  /** The list of writable locations for a geo-replicated database account. */\n  public readonly writableLocations: Location[] = [];\n  /** The list of readable locations for a geo-replicated database account. */\n  public readonly readableLocations: Location[] = [];\n  /**\n   * The self-link for Databases in the databaseAccount.\n   * @deprecated Use `databasesLink`\n   */\n  public get DatabasesLink(): string {\n    return this.databasesLink;\n  }\n  /** The self-link for Databases in the databaseAccount. */\n  public readonly databasesLink: string;\n  /**\n   * The self-link for Media in the databaseAccount.\n   * @deprecated Use `mediaLink`\n   */\n  public get MediaLink(): string {\n    return this.mediaLink;\n  }\n  /** The self-link for Media in the databaseAccount. */\n  public readonly mediaLink: string;\n  /**\n   * Attachment content (media) storage quota in MBs ( Retrieved from gateway ).\n   * @deprecated use `maxMediaStorageUsageInMB`\n   */\n  public get MaxMediaStorageUsageInMB(): number {\n    return this.maxMediaStorageUsageInMB;\n  }\n  /** Attachment content (media) storage quota in MBs ( Retrieved from gateway ). */\n  public readonly maxMediaStorageUsageInMB: number;\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   *\n   * @deprecated use `currentMediaStorageUsageInMB`\n   */\n  public get CurrentMediaStorageUsageInMB(): number {\n    return this.currentMediaStorageUsageInMB;\n  }\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   */\n  public readonly currentMediaStorageUsageInMB: number;\n  /**\n   * Gets the UserConsistencyPolicy settings.\n   * @deprecated use `consistencyPolicy`\n   */\n  public get ConsistencyPolicy(): ConsistencyLevel {\n    return this.consistencyPolicy;\n  }\n  /** Gets the UserConsistencyPolicy settings. */\n  public readonly consistencyPolicy: ConsistencyLevel;\n  public readonly enableMultipleWritableLocations: boolean;\n\n  // TODO: body - any\n  public constructor(body: { [key: string]: any }, headers: CosmosHeaders) {\n    this.databasesLink = \"/dbs/\";\n    this.mediaLink = \"/media/\";\n    this.maxMediaStorageUsageInMB = headers[Constants.HttpHeaders.MaxMediaStorageUsageInMB];\n    this.currentMediaStorageUsageInMB = headers[Constants.HttpHeaders.CurrentMediaStorageUsageInMB];\n    this.consistencyPolicy = body.userConsistencyPolicy\n      ? (body.userConsistencyPolicy.defaultConsistencyLevel as ConsistencyLevel)\n      : ConsistencyLevel.Session;\n    if (body[Constants.WritableLocations] && body.id !== \"localhost\") {\n      this.writableLocations = body[Constants.WritableLocations] as Location[];\n    }\n    if (body[Constants.ReadableLocations] && body.id !== \"localhost\") {\n      this.readableLocations = body[Constants.ReadableLocations] as Location[];\n    }\n    if (body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS]) {\n      this.enableMultipleWritableLocations =\n        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === true ||\n        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === \"true\";\n    }\n  }\n}\n\n/**\n * Used to specify the locations that are available, read is index 1 and write is index 0.\n */\nexport interface Location {\n  name: string;\n  databaseAccountEndpoint: string;\n  unavailable?: boolean;\n  lastUnavailabilityTimestampInMs?: number;\n}\n"]}