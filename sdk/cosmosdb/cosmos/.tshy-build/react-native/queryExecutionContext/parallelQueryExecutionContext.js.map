{"version":3,"file":"parallelQueryExecutionContext.js","sourceRoot":"","sources":["../../../src/queryExecutionContext/parallelQueryExecutionContext.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,iCAAiC,EAAE,MAAM,wCAAwC,CAAC;AAI3F;;;;GAIG;AACH,MAAM,OAAO,6BACX,SAAQ,iCAAiC;IAGzC,iCAAiC;IAEjC,2EAA2E;IAC3E;;;;OAIG;IACI,0BAA0B,CAC/B,QAA0B,EAC1B,QAA0B;QAE1B,OAAO,QAAQ,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,SAAS,CAAC,cAAuC;QAC5D,IAAI,CAAC;YACH,2DAA2D;YAC3D,MAAM,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;YACnD,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC;YAEvC,uBAAuB;YACvB,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,+CAA+C;YAC/C,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { DocumentProducer } from \"./documentProducer.js\";\nimport type { ExecutionContext } from \"./ExecutionContext.js\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase.js\";\nimport { Response } from \"../request/index.js\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal.js\";\n\n/**\n * Provides the ParallelQueryExecutionContext.\n * This class is capable of handling parallelized queries and derives from ParallelQueryExecutionContextBase.\n * @hidden\n */\nexport class ParallelQueryExecutionContext\n  extends ParallelQueryExecutionContextBase\n  implements ExecutionContext\n{\n  // Instance members are inherited\n\n  // Overriding documentProducerComparator for ParallelQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers using the min value of the corresponding target partition.\n   * @returns Comparator Function\n   * @hidden\n   */\n  public documentProducerComparator(\n    docProd1: DocumentProducer,\n    docProd2: DocumentProducer,\n  ): number {\n    return docProd1.generation - docProd2.generation;\n  }\n\n  /**\n   * Fetches more results from the query execution context.\n   * @param diagnosticNode - Optional diagnostic node for tracing.\n   * @returns A promise that resolves to the fetched results.\n   * @hidden\n   */\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    try {\n      // Buffer document producers and fill buffer from the queue\n      await this.bufferDocumentProducers(diagnosticNode);\n      await this.fillBufferFromBufferQueue();\n\n      // Drain buffered items\n      return this.drainBufferedItems();\n    } catch (error) {\n      // Handle any errors that occur during fetching\n      console.error(\"Error fetching more documents:\", error);\n      throw error;\n    }\n  }\n}\n"]}