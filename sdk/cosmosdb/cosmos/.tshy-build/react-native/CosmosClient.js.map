{"version":3,"file":"CosmosClient.js","sourceRoot":"","sources":["../../src/CosmosClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Database, Databases } from \"./client/Database/index.js\";\nimport { Offer, Offers } from \"./client/Offer/index.js\";\nimport { ClientContext } from \"./ClientContext.js\";\nimport { parseConnectionString } from \"./common/index.js\";\nimport { Constants } from \"./common/constants.js\";\nimport { getUserAgent } from \"./common/platform.js\";\nimport type { CosmosClientOptions } from \"./CosmosClientOptions.js\";\nimport type { ClientConfigDiagnostic } from \"./CosmosDiagnostics.js\";\nimport {\n  determineDiagnosticLevel,\n  getDiagnosticLevelFromEnvironment,\n} from \"./diagnostics/index.js\";\nimport type { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal.js\";\nimport { DiagnosticNodeType } from \"./diagnostics/DiagnosticNodeInternal.js\";\nimport type { DatabaseAccount } from \"./documents/index.js\";\nimport { defaultConnectionPolicy } from \"./documents/index.js\";\nimport { EncryptionManager } from \"./encryption/EncryptionManager.js\";\nimport { GlobalEndpointManager } from \"./globalEndpointManager.js\";\nimport type { RequestOptions } from \"./request/index.js\";\nimport { ResourceResponse } from \"./request/index.js\";\nimport { checkURL } from \"./utils/checkURL.js\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"./utils/diagnostics.js\";\n\n/**\n * Provides a client-side logical representation of the Azure Cosmos DB database account.\n * This client is used to configure and execute requests in the Azure Cosmos DB database service.\n * @example Instantiate a client and create a new database\n * ```ts snippet:CosmosClientCreate\n * import { CosmosClient } from \"@azure/cosmos\";\n *\n * const endpoint = \"https://your-account.documents.azure.com\";\n * const key = \"<database account masterkey>\";\n * const client = new CosmosClient({ endpoint, key });\n * ```\n * @example Instantiate a client with custom Connection Policy\n * ```ts snippet:CosmosClientWithConnectionPolicy\n * import { CosmosClient } from \"@azure/cosmos\";\n *\n * const endpoint = \"https://your-account.documents.azure.com\";\n * const key = \"<database account masterkey>\";\n * const client = new CosmosClient({\n *   endpoint,\n *   key,\n *   connectionPolicy: {\n *     requestTimeout: 10000,\n *   },\n * });\n * ```\n */\nexport class CosmosClient {\n  /**\n   * Used for creating new databases, or querying/reading all databases.\n   *\n   * Use `.database(id)` to read, replace, or delete a specific, existing database by id.\n   *\n   * @example Create a new database\n   * ```ts snippet:CosmosClientDatabases\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * const { resource: databaseDefinition, database } = await client.databases.create({\n   *   id: \"<name here>\",\n   * });\n   * ```\n   */\n  public readonly databases: Databases;\n  /**\n   * Used for querying & reading all offers.\n   *\n   * Use `.offer(id)` to read, or replace existing offers.\n   */\n  public readonly offers: Offers;\n  private clientContext: ClientContext;\n  private endpointRefresher: NodeJS.Timeout;\n  /**\n   * @internal\n   */\n  private encryptionManager: EncryptionManager;\n  /**\n   * Creates a new {@link CosmosClient} object from a connection string. Your database connection string can be found in the Azure Portal\n   */\n  constructor(connectionString: string);\n  /**\n   * Creates a new {@link CosmosClient} object. See {@link CosmosClientOptions} for more details on what options you can use.\n   * @param options - bag of options; require at least endpoint and auth to be configured\n   */\n  constructor(options: CosmosClientOptions);\n  constructor(optionsOrConnectionString: string | CosmosClientOptions) {\n    if (typeof optionsOrConnectionString === \"string\") {\n      optionsOrConnectionString = parseConnectionString(optionsOrConnectionString);\n    } else if (optionsOrConnectionString.connectionString) {\n      const { endpoint, key } = parseConnectionString(optionsOrConnectionString.connectionString);\n      optionsOrConnectionString.endpoint = endpoint;\n      optionsOrConnectionString.key = key;\n    }\n\n    const endpoint = checkURL(optionsOrConnectionString.endpoint);\n    if (!endpoint) {\n      throw new Error(\"Invalid endpoint specified\");\n    }\n\n    if (optionsOrConnectionString.clientEncryptionOptions) {\n      if (!optionsOrConnectionString.clientEncryptionOptions.keyEncryptionKeyResolver) {\n        throw new Error(\n          \"KeyEncryptionKeyResolver needs to be provided to enable client-side encryption.\",\n        );\n      }\n      if (\n        optionsOrConnectionString.clientEncryptionOptions.encryptionKeyTimeToLiveInSeconds &&\n        optionsOrConnectionString.clientEncryptionOptions.encryptionKeyTimeToLiveInSeconds < 60\n      ) {\n        throw new Error(\"EncryptionKeyTimeToLiveInSeconds needs to be >= 60 seconds.\");\n      }\n      this.encryptionManager = new EncryptionManager(\n        optionsOrConnectionString.clientEncryptionOptions.keyEncryptionKeyResolver,\n        optionsOrConnectionString.clientEncryptionOptions.encryptionKeyTimeToLiveInSeconds,\n      );\n    }\n\n    const clientConfig: ClientConfigDiagnostic =\n      this.initializeClientConfigDiagnostic(optionsOrConnectionString);\n\n    optionsOrConnectionString.connectionPolicy = Object.assign(\n      {},\n      defaultConnectionPolicy,\n      optionsOrConnectionString.connectionPolicy,\n    );\n\n    optionsOrConnectionString.defaultHeaders = optionsOrConnectionString.defaultHeaders || {};\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.CacheControl] = \"no-cache\";\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.Version] =\n      Constants.CurrentVersion;\n    if (optionsOrConnectionString.consistencyLevel !== undefined) {\n      optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.ConsistencyLevel] =\n        optionsOrConnectionString.consistencyLevel;\n    }\n\n    if (optionsOrConnectionString.throughputBucket !== undefined) {\n      optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.ThroughputBucket] =\n        optionsOrConnectionString.throughputBucket;\n    }\n\n    const userAgent = getUserAgent(optionsOrConnectionString.userAgentSuffix);\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.UserAgent] = userAgent;\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.CustomUserAgent] = userAgent;\n\n    const globalEndpointManager = new GlobalEndpointManager(\n      optionsOrConnectionString,\n      async (diagnosticNode: DiagnosticNodeInternal, opts: RequestOptions) =>\n        this.getDatabaseAccountInternal(diagnosticNode, opts),\n    );\n\n    this.clientContext = new ClientContext(\n      optionsOrConnectionString,\n      globalEndpointManager,\n      clientConfig,\n      determineDiagnosticLevel(\n        optionsOrConnectionString.diagnosticLevel,\n        getDiagnosticLevelFromEnvironment(),\n      ),\n    );\n    if (\n      optionsOrConnectionString.connectionPolicy?.enableEndpointDiscovery &&\n      optionsOrConnectionString.connectionPolicy?.enableBackgroundEndpointRefreshing\n    ) {\n      this.backgroundRefreshEndpointList(\n        globalEndpointManager,\n        optionsOrConnectionString.connectionPolicy.endpointRefreshRateInMs ||\n          defaultConnectionPolicy.endpointRefreshRateInMs,\n      );\n    }\n\n    this.databases = new Databases(this, this.clientContext, this.encryptionManager);\n    this.offers = new Offers(this, this.clientContext);\n  }\n\n  private initializeClientConfigDiagnostic(\n    optionsOrConnectionString: CosmosClientOptions,\n  ): ClientConfigDiagnostic {\n    return {\n      endpoint: optionsOrConnectionString.endpoint,\n      resourceTokensConfigured: optionsOrConnectionString.resourceTokens !== undefined,\n      tokenProviderConfigured: optionsOrConnectionString.tokenProvider !== undefined,\n      aadCredentialsConfigured: optionsOrConnectionString.aadCredentials !== undefined,\n      connectionPolicyConfigured: optionsOrConnectionString.connectionPolicy !== undefined,\n      consistencyLevel: optionsOrConnectionString.consistencyLevel,\n      defaultHeaders: optionsOrConnectionString.defaultHeaders,\n      agentConfigured: optionsOrConnectionString.agent !== undefined,\n      userAgentSuffix: optionsOrConnectionString.userAgentSuffix,\n      diagnosticLevel: optionsOrConnectionString.diagnosticLevel,\n      pluginsConfigured: optionsOrConnectionString.plugins !== undefined,\n      sDKVersion: Constants.SDKVersion,\n    };\n  }\n\n  /**\n   * Get information about the current {@link DatabaseAccount} (including which regions are supported, etc.)\n   */\n  public async getDatabaseAccount(\n    options?: RequestOptions,\n  ): Promise<ResourceResponse<DatabaseAccount>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.getDatabaseAccountInternal(diagnosticNode, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async getDatabaseAccountInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    options?: RequestOptions,\n  ): Promise<ResourceResponse<DatabaseAccount>> {\n    const response = await this.clientContext.getDatabaseAccount(diagnosticNode, options);\n    return new ResourceResponse<DatabaseAccount>(\n      response.result,\n      response.headers,\n      response.code,\n      getEmptyCosmosDiagnostics(),\n      response.substatus,\n    );\n  }\n\n  /**\n   * Gets the currently used write endpoint url. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public async getWriteEndpoint(): Promise<string> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.clientContext.getWriteEndpoint(diagnosticNode);\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets the currently used read endpoint. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public async getReadEndpoint(): Promise<string> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.clientContext.getReadEndpoint(diagnosticNode);\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets the known write endpoints. Useful for troubleshooting purposes.\n   *\n   * The urls may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public getWriteEndpoints(): Promise<readonly string[]> {\n    return this.clientContext.getWriteEndpoints();\n  }\n\n  /**\n   * Gets the currently used read endpoint. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public getReadEndpoints(): Promise<readonly string[]> {\n    return this.clientContext.getReadEndpoints();\n  }\n\n  /**\n   * Used for reading, updating, or deleting a existing database by id or accessing containers belonging to that database.\n   *\n   * This does not make a network call. Use `.read` to get info about the database after getting the {@link Database} object.\n   *\n   * @param id - The id of the database.\n   * @example Create a new container off of an existing database\n   * ```ts snippet:CosmosClientDatabaseCreateContainer\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * const container = client.database(\"<database id>\").containers.create({\n   *   id: \"<name here>\",\n   * });\n   * ```\n   *\n   * @example Delete an existing database\n   * ```ts snippet:CosmosClientDatabaseDelete\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * await client.database(\"<id here>\").delete();\n   * ```\n   */\n  public database(id: string): Database {\n    return new Database(this, id, this.clientContext, this.encryptionManager);\n  }\n\n  /**\n   * Used for reading, or updating a existing offer by id.\n   * @param id - The id of the offer.\n   */\n  public offer(id: string): Offer {\n    return new Offer(this, id, this.clientContext);\n  }\n\n  /**\n   * Clears background endpoint refresher. Use client.dispose() when destroying the CosmosClient within another process.\n   */\n  public dispose(): void {\n    clearTimeout(this.endpointRefresher);\n    if (this.clientContext.enableEncryption) {\n      clearTimeout(this.encryptionManager.encryptionKeyStoreProvider.cacheRefresher);\n      clearTimeout(this.encryptionManager.protectedDataEncryptionKeyCache.cacheRefresher);\n    }\n  }\n\n  private async backgroundRefreshEndpointList(\n    globalEndpointManager: GlobalEndpointManager,\n    refreshRate: number,\n  ) {\n    this.endpointRefresher = setInterval(() => {\n      try {\n        return withDiagnostics(\n          async (diagnosticNode: DiagnosticNodeInternal) => {\n            return globalEndpointManager.refreshEndpointList(diagnosticNode);\n          },\n          this.clientContext,\n          DiagnosticNodeType.BACKGROUND_REFRESH_THREAD,\n        );\n      } catch (e: any) {\n        console.warn(\"Failed to refresh endpoints\", e);\n      }\n    }, refreshRate);\n    if (this.endpointRefresher.unref && typeof this.endpointRefresher.unref === \"function\") {\n      this.endpointRefresher.unref();\n    }\n  }\n\n  /**\n   * Update the host framework. If provided host framework will be used to generate the defualt SDK user agent.\n   * @param hostFramework - A custom string.\n   * @internal\n   */\n  public async updateHostFramework(hostFramework: string): Promise<void> {\n    this.clientContext.refreshUserAgent(hostFramework);\n  }\n}\n"]}