{"version":3,"file":"SharedOptions.js","sourceRoot":"","sources":["../../../src/request/SharedOptions.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/// <reference lib=\"dom\" />\nimport type { PriorityLevel } from \"../documents/PriorityLevel.js\";\nimport type { CosmosHeaders } from \"../index.js\";\n\n/**\n * Options that can be specified for a requested issued to the Azure Cosmos DB servers.=\n */\nexport interface SharedOptions {\n  /** Enables/disables getting document container quota related stats for document container read requests. */\n  sessionToken?: string;\n  /** (Advanced use case) Initial headers to start with when sending requests to Cosmos */\n  initialHeaders?: CosmosHeaders;\n  /**\n   * abortSignal to pass to all underlying network requests created by this method call. See https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n   * @example Cancel a read request\n   * ```ts snippet:SharedOptionsAbortSignal\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   *\n   * const { container } = await database.containers.createIfNotExists({ id: \"Test Container\" });\n   *\n   * const controller = new AbortController();\n   * const results = container.items.query(\"SELECT * from c\", {\n   *   abortSignal: controller.signal,\n   * });\n   * ```\n   */\n  abortSignal?: AbortSignal;\n  /**\n   * Sets the staleness value associated with the request in the Azure CosmosDB service. For requests where the {@link\n   * com.azure.cosmos.ConsistencyLevel} is {@link com.azure.cosmos.ConsistencyLevel#EVENTUAL}  or {@link com.azure.cosmos.ConsistencyLevel#SESSION}, responses from the\n   * integrated cache are guaranteed to be no staler than value indicated by this maxIntegratedCacheStaleness. When the\n   * consistency level is not set, this property is ignored.\n   *\n   * <p>Default value is null</p>\n   *\n   * <p>Cache Staleness is supported in milliseconds granularity. Anything smaller than milliseconds will be ignored.</p>\n   */\n  maxIntegratedCacheStalenessInMs?: number;\n\n  /**\n   * Sets if integrated cache should be bypassed or enabled for the request in Azure CosmosDB service.\n   *\n   * <p>Default value is false. By default integrated cache is enabled</p>\n   */\n  bypassIntegratedCache?: boolean;\n\n  /**\n   * Priority Level (Low/High) for each request.\n   * Low priority requests are always throttled before any high priority requests.\n   *\n   * <p>Default value is null. By default all requests are of High priority</p>\n   */\n  priorityLevel?: PriorityLevel;\n\n  /**\n   * Throughput Bucket for a request.\n   *\n   * <p>Default value is null. In this case, the request can use 100% of the partition throughput. </p>\n   * For more information, visit [Cosmos DB throughput Bucketing](https://aka.ms/cosmsodb-bucketing).\n   */\n  throughputBucket?: number;\n\n  /** Consistency level required by the client. */\n  consistencyLevel?: string;\n\n  /**\n   * DisableRUPerMinuteUsage is used to enable/disable Request Units(RUs)/minute capacity\n   * to serve the request if regular provisioned RUs/second is exhausted.\n   */\n  disableRUPerMinuteUsage?: boolean;\n}\n"]}