{"version":3,"file":"QueryRange.js","sourceRoot":"","sources":["../../../src/routing/QueryRange.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAG/C,cAAc;AACd,MAAM,OAAO,UAAU;IAMrB;;;;;;;;OAQG;IACH,YACE,QAAgB,EAChB,QAAgB,EAChB,cAAuB,EACvB,cAAuB;QAEvB,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC;QACpB,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC;QACpB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IACM,QAAQ,CAAC,KAAiB;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,uDAAuD;QAC5E,MAAM,MAAM,GAAG,KAAK,CAAC;QACrB,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACjD,OAAO,KAAK,CAAC;QACf,CAAC;QACD,IAAI,MAAM,CAAC,OAAO,EAAE,IAAI,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC;YACzC,OAAO,KAAK,CAAC;QACf,CAAC;QAED,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;YACzD,IACE,CAAC,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC;gBAChF,CAAC,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC,EAChF,CAAC;gBACD,OAAO,KAAK,CAAC;YACf,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,WAAW;QAChB,OAAO,CACL,IAAI,CAAC,GAAG,KAAK,SAAS,CAAC,8BAA8B,CAAC,qCAAqC;YAC3F,IAAI,CAAC,GAAG,KAAK,SAAS,CAAC,8BAA8B,CAAC,qCAAqC;YAC3F,IAAI,CAAC,cAAc,KAAK,IAAI;YAC5B,IAAI,CAAC,cAAc,KAAK,KAAK,CAC9B,CAAC;IACJ,CAAC;IAEM,OAAO;QACZ,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC;IAChF,CAAC;IACD;;;;OAIG;IACI,MAAM,CAAC,sBAAsB,CAAC,iBAAoC;QACvE,OAAO,IAAI,UAAU,CACnB,iBAAiB,CAAC,SAAS,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAC3D,iBAAiB,CAAC,SAAS,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAC3D,IAAI,EACJ,KAAK,CACN,CAAC;IACJ,CAAC;IACD;;;;OAIG;IACI,MAAM,CAAC,aAAa,CAAC,cAAkC;QAC5D,OAAO,IAAI,UAAU,CACnB,cAAc,CAAC,GAAG,EAClB,cAAc,CAAC,GAAG,EAClB,cAAc,CAAC,cAAc,EAC7B,cAAc,CAAC,cAAc,CAC9B,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PartitionKeyRange } from \"../client/Container/PartitionKeyRange.js\";\nimport { Constants } from \"../common/index.js\";\nimport type { QueryRange as ResponseQueryRange } from \"../request/ErrorResponse.js\";\n\n/** @hidden */\nexport class QueryRange {\n  public min: string;\n  public max: string;\n  public isMinInclusive: boolean;\n  public isMaxInclusive: boolean;\n\n  /**\n   * Represents a QueryRange.\n   *\n   * @param rangeMin                - min\n   * @param rangeMin                - max\n   * @param isMinInclusive         - isMinInclusive\n   * @param isMaxInclusive         - isMaxInclusive\n   * @hidden\n   */\n  constructor(\n    rangeMin: string,\n    rangeMax: string,\n    isMinInclusive: boolean,\n    isMaxInclusive: boolean,\n  ) {\n    this.min = rangeMin;\n    this.max = rangeMax;\n    this.isMinInclusive = isMinInclusive;\n    this.isMaxInclusive = isMaxInclusive;\n  }\n  public overlaps(other: QueryRange): boolean {\n    const range1 = this; // eslint-disable-line @typescript-eslint/no-this-alias\n    const range2 = other;\n    if (range1 === undefined || range2 === undefined) {\n      return false;\n    }\n    if (range1.isEmpty() || range2.isEmpty()) {\n      return false;\n    }\n\n    if (range1.min <= range2.max || range2.min <= range1.max) {\n      if (\n        (range1.min === range2.max && !(range1.isMinInclusive && range2.isMaxInclusive)) ||\n        (range2.min === range1.max && !(range2.isMinInclusive && range1.isMaxInclusive))\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  public isFullRange(): boolean {\n    return (\n      this.min === Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey &&\n      this.max === Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey &&\n      this.isMinInclusive === true &&\n      this.isMaxInclusive === false\n    );\n  }\n\n  public isEmpty(): boolean {\n    return !(this.isMinInclusive && this.isMaxInclusive) && this.min === this.max;\n  }\n  /**\n   * Parse a QueryRange from a partitionKeyRange\n   * @returns QueryRange\n   * @hidden\n   */\n  public static parsePartitionKeyRange(partitionKeyRange: PartitionKeyRange): QueryRange {\n    return new QueryRange(\n      partitionKeyRange[Constants.PartitionKeyRange.MinInclusive],\n      partitionKeyRange[Constants.PartitionKeyRange.MaxExclusive],\n      true,\n      false,\n    );\n  }\n  /**\n   * Parse a QueryRange from a dictionary\n   * @returns QueryRange\n   * @hidden\n   */\n  public static parseFromDict(queryRangeDict: ResponseQueryRange): QueryRange {\n    return new QueryRange(\n      queryRangeDict.min,\n      queryRangeDict.max,\n      queryRangeDict.isMinInclusive,\n      queryRangeDict.isMaxInclusive,\n    );\n  }\n}\n"]}