{"version":3,"file":"Permissions.js","sourceRoot":"","sources":["../../../../src/client/Permission/Permissions.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext.js\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal.js\";\nimport {\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common/index.js\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext/index.js\";\nimport { QueryIterator } from \"../../queryIterator.js\";\nimport type { FeedOptions, RequestOptions } from \"../../request/index.js\";\nimport type { Resource } from \"../Resource.js\";\nimport type { User } from \"../User/index.js\";\nimport { Permission } from \"./Permission.js\";\nimport type { PermissionBody } from \"./PermissionBody.js\";\nimport type { PermissionDefinition } from \"./PermissionDefinition.js\";\nimport { PermissionResponse } from \"./PermissionResponse.js\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics.js\";\n\n/**\n * Use to create, replace, query, and read all Permissions.\n *\n * @see {@link Permission} to read, replace, or delete a specific permission by id.\n */\nexport class Permissions {\n  /**\n   * @hidden\n   * @param user - The parent {@link User}.\n   */\n  constructor(\n    public readonly user: User,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all permissions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @example Query permission with id.\n   * ```ts snippet:PermissionsQuery\n   * import { CosmosClient, SqlQuerySpec } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   *\n   * const querySpec: SqlQuerySpec = {\n   *   query: `SELECT * FROM root r WHERE r.id = @permission`,\n   *   parameters: [{ name: \"@permission\", value: \"<permission-id>\" }],\n   * };\n   * const { resources: permisssion } = await database\n   *   .user(\"<user-id>\")\n   *   .permissions.query(querySpec)\n   *   .fetchAll();\n   * ```\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all permissions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        resultFn: (result) => result.Permissions,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all permissions.\n   * @example Read all permissions to array.\n   * ```ts snippet:PermissionsReadAll\n   * import { CosmosClient } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   *\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   *\n   * const { resources: permissionList } = await database.user(\"user1\").permissions.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<PermissionDefinition & Resource> {\n    return this.query(undefined, options);\n  }\n\n  /**\n   * Create a permission.\n   *\n   * A permission represents a per-User Permission to access a specific resource\n   * e.g. Item or Container.\n   * @param body - Represents the body of the permission.\n   * @example\n   * ```ts snippet:PermissionsCreate\n   * import { CosmosClient, PermissionDefinition, PermissionMode } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   * const { user } = await database.users.create({ id: \"<user-id>\" });\n   *\n   * const permissionDefinition: PermissionDefinition = {\n   *   id: \"<permission-id>\",\n   *   permissionMode: PermissionMode.Read,\n   *   resource: \"<resource-url>\",\n   * };\n   * await user.permissions.create(permissionDefinition);\n   * ```\n   */\n  public async create(\n    body: PermissionDefinition,\n    options?: RequestOptions,\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n\n      const response = await this.clientContext.create<PermissionDefinition, PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        diagnosticNode,\n        options,\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Upsert a permission.\n   * A permission represents a per-User Permission to access a\n   * specific resource e.g. Item or Container.\n   * @example\n   * ```ts snippet:PermissionsUpsert\n   * import { CosmosClient, PermissionDefinition, PermissionMode } from \"@azure/cosmos\";\n   *\n   * const endpoint = \"https://your-account.documents.azure.com\";\n   * const key = \"<database account masterkey>\";\n   * const client = new CosmosClient({ endpoint, key });\n   * const { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\n   * const user = database.user(\"<user-id>\");\n   * const permissionDefinitionToUpsert: PermissionDefinition = {\n   *   id: \"<permission-id>\",\n   *   permissionMode: PermissionMode.Read,\n   *   resource: \"<resource-url>\",\n   * };\n   *\n   * await user.permissions.upsert(permissionDefinitionToUpsert);\n   * ```\n   */\n  public async upsert(\n    body: PermissionDefinition,\n    options?: RequestOptions,\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n\n      const response = await this.clientContext.upsert<PermissionDefinition, PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"]}