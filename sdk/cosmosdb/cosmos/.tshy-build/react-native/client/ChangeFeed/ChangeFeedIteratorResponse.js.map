{"version":3,"file":"ChangeFeedIteratorResponse.js","sourceRoot":"","sources":["../../../../src/client/ChangeFeed/ChangeFeedIteratorResponse.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAGlD;;GAEG;AACH,MAAM,OAAO,0BAA0B;IACrC;;OAEG;IACH;IACE;;OAEG;IACa,MAAS;IACzB;;OAEG;IACa,KAAa;IAC7B;;OAEG;IACa,UAAkB;IAClC;;OAEG;IACH,OAAsB;IACtB;;OAEG;IACa,WAA8B;IAC9C;;OAEG;IACa,aAAsB;QApBtB,WAAM,GAAN,MAAM,CAAG;QAIT,UAAK,GAAL,KAAK,CAAQ;QAIb,eAAU,GAAV,UAAU,CAAQ;QAQlB,gBAAW,GAAX,WAAW,CAAmB;QAI9B,kBAAa,GAAb,aAAa,CAAS;QAEtC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,IAAW,aAAa;QACtB,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAC9D,OAAO,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACH,IAAW,iBAAiB;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;IAC/D,CAAC;IACD;;OAEG;IACH,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAC1D,CAAC;CAKF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics.js\";\nimport { Constants } from \"../../common/index.js\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext/index.js\";\n\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\nexport class ChangeFeedIteratorResponse<T> {\n  /**\n   * @internal\n   */\n  constructor(\n    /**\n     * Gets the items returned in the response from Azure Cosmos DB\n     */\n    public readonly result: T,\n    /**\n     * Gets the number of items returned in the response from Azure Cosmos DB\n     */\n    public readonly count: number,\n    /**\n     * Gets the status code of the response from Azure Cosmos DB\n     */\n    public readonly statusCode: number,\n    /**\n     * Headers related to cosmos DB and change feed.\n     */\n    headers: CosmosHeaders,\n    /**\n     * Cosmos Diagnostic Object.\n     */\n    public readonly diagnostics: CosmosDiagnostics,\n    /**\n     * Gets the subStatusCodes of the response from Azure Cosmos DB. Useful in partition split or partition gone.\n     */\n    public readonly subStatusCode?: number,\n  ) {\n    this.headers = headers;\n  }\n\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n  public get requestCharge(): number {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   */\n  public get continuationToken(): string {\n    return this.headers[Constants.HttpHeaders.ContinuationToken];\n  }\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n  public get sessionToken(): string {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n  /**\n   * Response headers of the response from Azure Cosmos DB\n   */\n  public headers: CosmosHeaders;\n}\n"]}