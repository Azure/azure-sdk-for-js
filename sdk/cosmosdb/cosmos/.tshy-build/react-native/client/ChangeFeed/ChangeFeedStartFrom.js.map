{"version":3,"file":"ChangeFeedStartFrom.js","sourceRoot":"","sources":["../../../../src/client/ChangeFeed/ChangeFeedStartFrom.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrE,OAAO,EAAE,4BAA4B,EAAE,MAAM,mCAAmC,CAAC;AACjF,OAAO,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AACvE,OAAO,EAAE,+BAA+B,EAAE,MAAM,sCAAsC,CAAC;AACvF,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;AAC/D,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAErD;;GAEG;AACH,2DAA2D;AAC3D,MAAM,OAAgB,mBAAmB;IACvC;;;OAGG;IACI,MAAM,CAAC,SAAS,CAAC,UAAqC;QAC3D,OAAO,IAAI,4BAA4B,CAAC,UAAU,CAAC,CAAC;IACtD,CAAC;IACD;;;QAGI;IACG,MAAM,CAAC,GAAG,CAAC,UAAqC;QACrD,OAAO,IAAI,sBAAsB,CAAC,UAAU,CAAC,CAAC;IAChD,CAAC;IACD;;;;OAIG;IACI,MAAM,CAAC,IAAI,CAChB,SAAe,EACf,UAAqC;QAErC,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,aAAa,CAAC,2BAA2B,CAAC,CAAC;QACvD,CAAC;QACD,IAAI,SAAS,YAAY,IAAI,KAAK,IAAI,EAAE,CAAC;YACvC,OAAO,IAAI,uBAAuB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAC5D,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,aAAa,CAAC,kCAAkC,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IACD;;;OAGG;IACI,MAAM,CAAC,YAAY,CAAC,iBAAyB;QAClD,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvB,MAAM,IAAI,aAAa,CAAC,uCAAuC,CAAC,CAAC;QACnE,CAAC;QACD,IAAI,aAAa,CAAC,iBAAiB,CAAC,EAAE,CAAC;YACrC,MAAM,IAAI,aAAa,CAAC,wDAAwD,CAAC,CAAC;QACpF,CAAC;QACD,OAAO,IAAI,+BAA+B,CAAC,iBAAiB,CAAC,CAAC;IAChE,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PartitionKey } from \"../../documents/index.js\";\nimport type { FeedRange } from \"./FeedRange.js\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow.js\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning.js\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime.js\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation.js\";\nimport { ErrorResponse } from \"../../request/ErrorResponse.js\";\nimport { isNullOrEmpty } from \"./changeFeedUtils.js\";\n\n/**\n * Base class for where to start a ChangeFeedIterator.\n */\n/* eslint-disable @typescript-eslint/no-extraneous-class */\nexport abstract class ChangeFeedStartFrom {\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start from the beginning of time.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   */\n  public static Beginning(cfResource?: PartitionKey | FeedRange): ChangeFeedStartFromBeginning {\n    return new ChangeFeedStartFromBeginning(cfResource);\n  }\n  /**\n   *  Returns an object that tells the ChangeFeedIterator to start reading changes from this moment onward.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   **/\n  public static Now(cfResource?: PartitionKey | FeedRange): ChangeFeedStartFromNow {\n    return new ChangeFeedStartFromNow(cfResource);\n  }\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start reading changes from some point in time onward.\n   * @param startTime - Date object specfiying the time to start reading changes from.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   */\n  public static Time(\n    startTime: Date,\n    cfResource?: PartitionKey | FeedRange,\n  ): ChangeFeedStartFromTime {\n    if (!startTime) {\n      throw new ErrorResponse(\"startTime must be present\");\n    }\n    if (startTime instanceof Date === true) {\n      return new ChangeFeedStartFromTime(startTime, cfResource);\n    } else {\n      throw new ErrorResponse(\"startTime must be a Date object.\");\n    }\n  }\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start reading changes from a save point.\n   * @param continuation - The continuation to resume from.\n   */\n  public static Continuation(continuationToken: string): ChangeFeedStartFromContinuation {\n    if (!continuationToken) {\n      throw new ErrorResponse(\"Argument continuation must be passed.\");\n    }\n    if (isNullOrEmpty(continuationToken)) {\n      throw new ErrorResponse(\"Argument continuationToken must be a non-empty string.\");\n    }\n    return new ChangeFeedStartFromContinuation(continuationToken);\n  }\n}\n"]}