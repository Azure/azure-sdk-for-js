{"version":3,"file":"ChangeFeedIteratorBuilder.js","sourceRoot":"","sources":["../../../../src/client/ChangeFeed/ChangeFeedIteratorBuilder.ts"],"names":[],"mappings":";AAOA,OAAO,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AAEvE,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAEvD;;;;;GAKG;AAEH,MAAM,OAAO,yBAAyB;IAGpC;;OAEG;IACH,YACU,SAAoC,EACpC,aAA4B,EAC5B,SAAoB,EACpB,sBAA8C;QAH9C,cAAS,GAAT,SAAS,CAA2B;QACpC,kBAAa,GAAb,aAAa,CAAe;QAC5B,cAAS,GAAT,SAAS,CAAW;QACpB,2BAAsB,GAAtB,sBAAsB,CAAwB;QAEtD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACW,gBAAgB;;YAC5B,cAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA,CAAC;YAChC,GAAG,CAAC;gBACF,MAAM,MAAM,GAAG,cAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA,CAAC;gBAC9C,oBAAM,MAAM,CAAA,CAAC;YACf,CAAC,QAAQ,IAAI,CAAC,cAAc,EAAE;QAChC,CAAC;KAAA;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAChC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAClC,CAAC;IAEO,KAAK,CAAC,kBAAkB;QAC9B,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,IAAI,CAAC;gBACH,MAAM,QAAQ,GAAG,MAAM,uBAAuB,CAC5C,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,sBAAsB,CAC5B,CAAC;gBACF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC3B,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM,IAAI,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACvC,CAAC;QACH,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse.js\";\nimport type { Container, Resource } from \"../../client/index.js\";\nimport type { ClientContext } from \"../../ClientContext.js\";\nimport type { ChangeFeedPullModelIterator } from \"./ChangeFeedPullModelIterator.js\";\nimport type { ChangeFeedIteratorOptions } from \"./ChangeFeedIteratorOptions.js\";\nimport { buildChangeFeedIterator } from \"./buildChangeFeedIterator.js\";\nimport type { PartitionKeyRangeCache } from \"../../routing/index.js\";\nimport { ErrorResponse } from \"../../request/index.js\";\n\n/**\n * @hidden\n * Provides iterator for change feed.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\n\nexport class ChangeFeedIteratorBuilder<T> implements ChangeFeedPullModelIterator<T> {\n  private iterator: ChangeFeedPullModelIterator<T>;\n  private isInitialized: boolean;\n  /**\n   * @internal\n   */\n  constructor(\n    private cfOptions: ChangeFeedIteratorOptions,\n    private clientContext: ClientContext,\n    private container: Container,\n    private partitionKeyRangeCache: PartitionKeyRangeCache,\n  ) {\n    this.isInitialized = false;\n  }\n\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults(): boolean {\n    return true;\n  }\n\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    await this.initializeIterator();\n    do {\n      const result = await this.iterator.readNext();\n      yield result;\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Returns the result of change feed from Azure Cosmos DB.\n   */\n  public async readNext(): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    await this.initializeIterator();\n    return this.iterator.readNext();\n  }\n\n  private async initializeIterator(): Promise<void> {\n    if (!this.isInitialized) {\n      try {\n        const iterator = await buildChangeFeedIterator(\n          this.cfOptions,\n          this.clientContext,\n          this.container,\n          this.partitionKeyRangeCache,\n        );\n        this.isInitialized = true;\n        this.iterator = iterator;\n      } catch (err) {\n        throw new ErrorResponse(err.message);\n      }\n    }\n  }\n}\n"]}