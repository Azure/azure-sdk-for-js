{"version":3,"file":"ClientContext.js","sourceRoot":"","sources":["../../src/ClientContext.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { HttpClient, Pipeline } from \"@azure/core-rest-pipeline\";\nimport { bearerTokenAuthenticationPolicy, createEmptyPipeline } from \"@azure/core-rest-pipeline\";\nimport type { PartitionKeyRange } from \"./client/Container/PartitionKeyRange.js\";\nimport type { Resource } from \"./client/Resource.js\";\nimport { Constants, HTTPMethod, OperationType, ResourceType } from \"./common/constants.js\";\nimport { getIdFromLink, getPathFromLink, parseLink } from \"./common/helper.js\";\nimport { StatusCodes, SubStatusCodes } from \"./common/statusCodes.js\";\nimport type { Agent, CosmosClientOptions } from \"./CosmosClientOptions.js\";\nimport type { ConnectionPolicy, PartitionKey } from \"./documents/index.js\";\nimport {\n  ConsistencyLevel,\n  DatabaseAccount,\n  convertToInternalPartitionKey,\n} from \"./documents/index.js\";\nimport type { GlobalEndpointManager } from \"./globalEndpointManager.js\";\nimport type { PluginConfig } from \"./plugins/Plugin.js\";\nimport { PluginOn, executePlugins } from \"./plugins/Plugin.js\";\nimport type { FetchFunctionCallback, SqlQuerySpec } from \"./queryExecutionContext/index.js\";\nimport type { CosmosHeaders } from \"./queryExecutionContext/CosmosHeaders.js\";\nimport { QueryIterator } from \"./queryIterator.js\";\nimport type { ErrorResponse } from \"./request/index.js\";\nimport type { FeedOptions, RequestOptions, Response } from \"./request/index.js\";\nimport type { PartitionedQueryExecutionInfo } from \"./request/ErrorResponse.js\";\nimport { getHeaders } from \"./request/request.js\";\nimport type { RequestContext } from \"./request/RequestContext.js\";\nimport { RequestHandler } from \"./request/RequestHandler.js\";\nimport { SessionContainer } from \"./session/sessionContainer.js\";\nimport type { SessionContext } from \"./session/SessionContext.js\";\nimport type { BulkOptions } from \"./utils/batch.js\";\nimport { sanitizeEndpoint } from \"./utils/checkURL.js\";\nimport { supportedQueryFeaturesBuilder } from \"./utils/supportedQueryFeaturesBuilder.js\";\nimport type { AzureLogger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\nimport type { ClientConfigDiagnostic, CosmosDiagnostics } from \"./CosmosDiagnostics.js\";\nimport type { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal.js\";\nimport type { DiagnosticWriter } from \"./diagnostics/DiagnosticWriter.js\";\nimport { LogDiagnosticWriter, NoOpDiagnosticWriter } from \"./diagnostics/DiagnosticWriter.js\";\nimport type { DiagnosticFormatter } from \"./diagnostics/DiagnosticFormatter.js\";\nimport { DefaultDiagnosticFormatter } from \"./diagnostics/DiagnosticFormatter.js\";\nimport { CosmosDbDiagnosticLevel } from \"./diagnostics/CosmosDbDiagnosticLevel.js\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { getUserAgent } from \"./common/platform.js\";\nimport type { RetryOptions } from \"./retry/retryOptions.js\";\nconst logger: AzureLogger = createClientLogger(\"ClientContext\");\n\nconst QueryJsonContentType = \"application/query+json\";\nconst HttpHeaders = Constants.HttpHeaders;\n/**\n * @hidden\n * @hidden\n */\nexport class ClientContext {\n  private readonly sessionContainer: SessionContainer;\n  private connectionPolicy: ConnectionPolicy;\n  private pipeline: Pipeline;\n  private diagnosticWriter: DiagnosticWriter;\n  private diagnosticFormatter: DiagnosticFormatter;\n  public partitionKeyDefinitionCache: { [containerUrl: string]: any }; // TODO: PartitionKeyDefinitionCache\n  /** boolean flag to support operations with client-side encryption */\n  public enableEncryption: boolean = false;\n\n  public constructor(\n    private cosmosClientOptions: CosmosClientOptions,\n    private globalEndpointManager: GlobalEndpointManager,\n    private clientConfig: ClientConfigDiagnostic,\n    public diagnosticLevel: CosmosDbDiagnosticLevel,\n  ) {\n    if (cosmosClientOptions.clientEncryptionOptions) {\n      this.enableEncryption = true;\n    }\n    this.connectionPolicy = cosmosClientOptions.connectionPolicy;\n    this.sessionContainer = new SessionContainer();\n    this.partitionKeyDefinitionCache = {};\n    this.pipeline = null;\n    if (cosmosClientOptions.aadCredentials) {\n      this.pipeline = createEmptyPipeline();\n      const hrefEndpoint = sanitizeEndpoint(cosmosClientOptions.endpoint);\n      const scope = `${hrefEndpoint}/.default`;\n      this.pipeline.addPolicy(\n        bearerTokenAuthenticationPolicy({\n          credential: cosmosClientOptions.aadCredentials,\n          scopes: scope,\n          challengeCallbacks: {\n            async authorizeRequest({ request, getAccessToken }) {\n              const tokenResponse = await getAccessToken([scope], {});\n              const AUTH_PREFIX = `type=aad&ver=1.0&sig=`;\n              const authorizationToken = `${AUTH_PREFIX}${tokenResponse.token}`;\n              request.headers.set(\"Authorization\", authorizationToken);\n            },\n          },\n        }),\n      );\n    }\n    this.initializeDiagnosticSettings(diagnosticLevel);\n  }\n\n  /** @hidden */\n  public async read<T>({\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.get,\n        path,\n        operationType: OperationType.Read,\n        resourceId,\n        options,\n        resourceType,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Read,\n        resourceType,\n      });\n\n      request.headers = await this.buildHeaders(request);\n      if (resourceType === ResourceType.clientencryptionkey) {\n        request.headers[HttpHeaders.AllowCachedReadsHeader] = true;\n        if (options.databaseRid) {\n          request.headers[HttpHeaders.DatabaseRidHeader] = options.databaseRid;\n        }\n      }\n      this.applySessionToken(request);\n\n      // read will use ReadEndpoint since it uses GET operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Read, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async queryFeed<T>({\n    path,\n    resourceType,\n    resourceId,\n    resultFn,\n    query,\n    options,\n    diagnosticNode,\n    partitionKeyRangeId,\n    partitionKey,\n    startEpk,\n    endEpk,\n    correlatedActivityId,\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    resultFn: (result: { [key: string]: any }) => any[];\n    query: SqlQuerySpec | string;\n    options: FeedOptions;\n    diagnosticNode: DiagnosticNodeInternal;\n    partitionKeyRangeId?: string;\n    partitionKey?: PartitionKey;\n    startEpk?: string | undefined;\n    endEpk?: string | undefined;\n    correlatedActivityId?: string;\n  }): Promise<Response<T & Resource>> {\n    // Query operations will use ReadEndpoint even though it uses\n    // GET(for queryFeed) and POST(for regular query operations)\n\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      method: HTTPMethod.get,\n      path,\n      operationType: OperationType.Query,\n      partitionKeyRangeId,\n      resourceId,\n      resourceType,\n      options,\n      body: query,\n      partitionKey,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Query,\n      resourceType,\n    });\n    const requestId = randomUUID();\n    if (query !== undefined) {\n      request.method = HTTPMethod.post;\n    }\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      diagnosticNode,\n      request.resourceType,\n      request.operationType,\n    );\n    request.headers = await this.buildHeaders(request);\n\n    if (startEpk !== undefined && endEpk !== undefined) {\n      request.headers[HttpHeaders.StartEpk] = startEpk;\n      request.headers[HttpHeaders.EndEpk] = endEpk;\n      request.headers[HttpHeaders.ReadFeedKeyType] = \"EffectivePartitionKeyRange\";\n    }\n\n    if (query !== undefined) {\n      if (correlatedActivityId !== undefined) {\n        request.headers[HttpHeaders.CorrelatedActivityId] = correlatedActivityId;\n      }\n      request.headers[HttpHeaders.IsQuery] = \"true\";\n      request.headers[HttpHeaders.ContentType] = QueryJsonContentType;\n      if (typeof query === \"string\") {\n        request.body = { query }; // Converts query text to query object.\n      }\n    }\n    this.applySessionToken(request);\n    logger.info(\n      \"query \" +\n        requestId +\n        \" started\" +\n        (request.partitionKeyRangeId ? \" pkrid: \" + request.partitionKeyRangeId : \"\"),\n    );\n    logger.verbose(request);\n    const start = Date.now();\n    const response = await RequestHandler.request(request, diagnosticNode);\n    logger.info(\"query \" + requestId + \" finished - \" + (Date.now() - start) + \"ms\");\n    this.captureSessionToken(undefined, path, OperationType.Query, response.headers);\n    return this.processQueryFeedResponse(response, !!query, resultFn);\n  }\n\n  public async getQueryPlan(\n    path: string,\n    resourceType: ResourceType,\n    resourceId: string,\n    query: SqlQuerySpec | string,\n    options: FeedOptions = {},\n    diagnosticNode: DiagnosticNodeInternal,\n    correlatedActivityId?: string,\n  ): Promise<Response<PartitionedQueryExecutionInfo>> {\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      method: HTTPMethod.post,\n      path,\n      operationType: OperationType.Read,\n      resourceId,\n      resourceType,\n      options,\n      body: query,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Read,\n      resourceType,\n    });\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      diagnosticNode,\n      request.resourceType,\n      request.operationType,\n    );\n    request.headers = await this.buildHeaders(request);\n    if (correlatedActivityId !== undefined) {\n      request.headers[HttpHeaders.CorrelatedActivityId] = correlatedActivityId;\n    }\n    request.headers[HttpHeaders.IsQueryPlan] = \"True\";\n    request.headers[HttpHeaders.QueryVersion] = \"1.4\";\n    request.headers[HttpHeaders.ContentType] = QueryJsonContentType;\n    request.headers[HttpHeaders.SupportedQueryFeatures] = supportedQueryFeaturesBuilder(options);\n\n    if (typeof query === \"string\") {\n      request.body = { query }; // Converts query text to query object.\n    }\n\n    this.applySessionToken(request);\n    const response = await RequestHandler.request(request, diagnosticNode);\n    this.captureSessionToken(undefined, path, OperationType.Query, response.headers);\n    return response as any;\n  }\n\n  public queryPartitionKeyRanges(\n    collectionLink: string,\n    query?: string | SqlQuerySpec,\n    options?: FeedOptions,\n  ): QueryIterator<PartitionKeyRange> {\n    const path = getPathFromLink(collectionLink, ResourceType.pkranges);\n    const id = getIdFromLink(collectionLink);\n    const cb: FetchFunctionCallback = async (diagNode, innerOptions) => {\n      const response = await this.queryFeed({\n        path,\n        resourceType: ResourceType.pkranges,\n        resourceId: id,\n        resultFn: (result) => result.PartitionKeyRanges,\n        query,\n        options: innerOptions,\n        diagnosticNode: diagNode,\n      });\n      return response;\n    };\n    return new QueryIterator<PartitionKeyRange>(this, query, options, cb);\n  }\n\n  public async delete<T>({\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    method = HTTPMethod.delete,\n    diagnosticNode,\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    method?: HTTPMethod;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: method,\n        operationType: OperationType.Delete,\n        path,\n        resourceType,\n        options,\n        resourceId,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Delete,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n      // deleteResource will use WriteEndpoint since it uses DELETE operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      if (parseLink(path).type !== \"colls\") {\n        this.captureSessionToken(undefined, path, OperationType.Delete, response.headers);\n      } else {\n        this.clearSessionToken(path);\n      }\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async patch<T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    body: any;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.patch,\n        operationType: OperationType.Patch,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Patch,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n\n      // patch will use WriteEndpoint\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Patch, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async create<T, U = T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    diagnosticNode,\n    options = {},\n    partitionKey,\n  }: {\n    body: T;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    diagnosticNode: DiagnosticNodeInternal;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n  }): Promise<Response<T & U & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Create,\n        path,\n        resourceType,\n        resourceId,\n        body,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Create,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      // create will use WriteEndpoint since it uses POST operation\n      this.applySessionToken(request);\n\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Create, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  private processQueryFeedResponse(\n    res: Response<any>,\n    isQuery: boolean,\n    resultFn: (result: { [key: string]: any }) => any[],\n  ): Response<any> {\n    if (isQuery) {\n      return {\n        result: resultFn(res.result),\n        headers: res.headers,\n        code: res.code,\n      };\n    } else {\n      const newResult = resultFn(res.result).map((body: any) => body);\n      return {\n        result: newResult,\n        headers: res.headers,\n        code: res.code,\n      };\n    }\n  }\n\n  private applySessionToken(requestContext: RequestContext): void {\n    const request = this.getSessionParams(requestContext.path);\n\n    if (requestContext.headers && requestContext.headers[HttpHeaders.SessionToken]) {\n      return;\n    }\n\n    const sessionConsistency: ConsistencyLevel = requestContext.headers[\n      HttpHeaders.ConsistencyLevel\n    ] as ConsistencyLevel;\n    if (!sessionConsistency) {\n      return;\n    }\n\n    if (sessionConsistency !== ConsistencyLevel.Session) {\n      return;\n    }\n\n    if (request.resourceAddress) {\n      const sessionToken = this.sessionContainer.get(request);\n      if (sessionToken) {\n        requestContext.headers[HttpHeaders.SessionToken] = sessionToken;\n      }\n    }\n  }\n\n  public async replace<T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    body: any;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.put,\n        operationType: OperationType.Replace,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Replace,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n\n      // replace will use WriteEndpoint since it uses PUT operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Replace, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async upsert<T, U = T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    body: T;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & U & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Upsert,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Upsert,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      request.headers[HttpHeaders.IsUpsert] = true;\n      this.applySessionToken(request);\n\n      // upsert will use WriteEndpoint since it uses POST operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Upsert, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async execute<T>({\n    sprocLink,\n    params,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    sprocLink: string;\n    params?: any[];\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T>> {\n    // Accept a single parameter or an array of parameters.\n    // Didn't add type annotation for this because we should legacy this behavior\n    if (params !== null && params !== undefined && !Array.isArray(params)) {\n      params = [params];\n    }\n    const path = getPathFromLink(sprocLink);\n    const id = getIdFromLink(sprocLink);\n\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      method: HTTPMethod.post,\n      operationType: OperationType.Execute,\n      path,\n      resourceType: ResourceType.sproc,\n      options,\n      resourceId: id,\n      body: params,\n      partitionKey,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Execute,\n      resourceType: ResourceType.sproc,\n    });\n    request.headers = await this.buildHeaders(request);\n    // executeStoredProcedure will use WriteEndpoint since it uses POST operation\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      diagnosticNode,\n      request.resourceType,\n      request.operationType,\n    );\n    const response = await executePlugins(\n      diagnosticNode,\n      request,\n      RequestHandler.request,\n      PluginOn.operation,\n    );\n    return response;\n  }\n\n  /**\n   * Gets the Database account information.\n   * @param options - `urlConnection` in the options is the endpoint url whose database account needs to be retrieved.\n   * If not present, current client's url will be used.\n   */\n  public async getDatabaseAccount(\n    diagnosticNode: DiagnosticNodeInternal,\n    options: RequestOptions = {},\n  ): Promise<Response<DatabaseAccount>> {\n    const endpoint = options.urlConnection || this.cosmosClientOptions.endpoint;\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      endpoint,\n      method: HTTPMethod.get,\n      operationType: OperationType.Read,\n      path: \"\",\n      resourceType: ResourceType.none,\n      options,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Read,\n      resourceType: ResourceType.none,\n    });\n    request.headers = await this.buildHeaders(request);\n    // await options.beforeOperation({ endpoint, request, headers: requestHeaders });\n    const { result, headers, code, substatus, diagnostics } = await executePlugins(\n      diagnosticNode,\n      request,\n      RequestHandler.request,\n      PluginOn.operation,\n    );\n\n    const databaseAccount = new DatabaseAccount(result, headers);\n    return {\n      result: databaseAccount,\n      headers,\n      diagnostics,\n      code: code,\n      substatus: substatus,\n    };\n  }\n\n  public getWriteEndpoint(diagnosticNode: DiagnosticNodeInternal): Promise<string> {\n    return this.globalEndpointManager.getWriteEndpoint(diagnosticNode);\n  }\n\n  public getReadEndpoint(diagnosticNode: DiagnosticNodeInternal): Promise<string> {\n    return this.globalEndpointManager.getReadEndpoint(diagnosticNode);\n  }\n\n  public getWriteEndpoints(): Promise<readonly string[]> {\n    return this.globalEndpointManager.getWriteEndpoints();\n  }\n\n  public getReadEndpoints(): Promise<readonly string[]> {\n    return this.globalEndpointManager.getReadEndpoints();\n  }\n\n  public async batch<T>({\n    body,\n    path,\n    partitionKey,\n    resourceId,\n    options = {},\n    diagnosticNode,\n  }: {\n    body: T;\n    path: string;\n    partitionKey: PartitionKey;\n    resourceId: string;\n    options?: RequestOptions;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<any>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Batch,\n        path,\n        body,\n        resourceType: ResourceType.item,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Batch,\n        resourceType: ResourceType.item,\n      });\n      request.headers = await this.buildHeaders(request);\n      request.headers[HttpHeaders.IsBatchRequest] = true;\n      request.headers[HttpHeaders.IsBatchAtomic] = true;\n\n      this.applySessionToken(request);\n\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Batch, response.headers);\n      response.diagnostics = diagnosticNode.toDiagnostic(this.getClientConfig());\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async bulk<T>({\n    body,\n    path,\n    partitionKeyRangeId,\n    resourceId,\n    bulkOptions = {},\n    options = {},\n    diagnosticNode,\n  }: {\n    body: T;\n    path: string;\n    partitionKeyRangeId: string;\n    resourceId: string;\n    bulkOptions?: BulkOptions;\n    options?: RequestOptions;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<any>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Batch,\n        path,\n        body,\n        resourceType: ResourceType.item,\n        resourceId,\n        options,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Batch,\n        resourceType: ResourceType.item,\n      });\n      request.headers = await this.buildHeaders(request);\n      request.headers[HttpHeaders.IsBatchRequest] = true;\n      request.headers[HttpHeaders.PartitionKeyRangeID] = partitionKeyRangeId;\n      request.headers[HttpHeaders.IsBatchAtomic] = false;\n      request.headers[HttpHeaders.BatchContinueOnError] = bulkOptions.continueOnError ?? true;\n      this.applySessionToken(request);\n\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Batch, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  private captureSessionToken(\n    err: ErrorResponse,\n    path: string,\n    operationType: OperationType,\n    resHeaders: CosmosHeaders,\n  ): void {\n    const request = this.getSessionParams(path);\n    request.operationType = operationType;\n    if (\n      !err ||\n      (!this.isMasterResource(request.resourceType) &&\n        (err.code === StatusCodes.PreconditionFailed ||\n          err.code === StatusCodes.Conflict ||\n          (err.code === StatusCodes.NotFound &&\n            err.substatus !== SubStatusCodes.ReadSessionNotAvailable)))\n    ) {\n      this.sessionContainer.set(request, resHeaders);\n    }\n  }\n\n  public clearSessionToken(path: string): void {\n    const request = this.getSessionParams(path);\n    this.sessionContainer.remove(request);\n  }\n\n  public recordDiagnostics(diagnostic: CosmosDiagnostics): void {\n    const formatted = this.diagnosticFormatter.format(diagnostic);\n    this.diagnosticWriter.write(formatted);\n  }\n\n  public initializeDiagnosticSettings(diagnosticLevel: CosmosDbDiagnosticLevel): void {\n    this.diagnosticFormatter = new DefaultDiagnosticFormatter();\n    switch (diagnosticLevel) {\n      case CosmosDbDiagnosticLevel.info:\n        this.diagnosticWriter = new NoOpDiagnosticWriter();\n        break;\n      default:\n        this.diagnosticWriter = new LogDiagnosticWriter();\n    }\n  }\n\n  // TODO: move\n  private getSessionParams(resourceLink: string): SessionContext {\n    const resourceId: string = null;\n    let resourceAddress: string = null;\n    const parserOutput = parseLink(resourceLink);\n\n    resourceAddress = parserOutput.objectBody.self;\n\n    const resourceType = parserOutput.type;\n    return {\n      resourceId,\n      resourceAddress,\n      resourceType,\n      isNameBased: true,\n    };\n  }\n\n  private isMasterResource(resourceType: string): boolean {\n    if (\n      resourceType === Constants.Path.OffersPathSegment ||\n      resourceType === Constants.Path.DatabasesPathSegment ||\n      resourceType === Constants.Path.UsersPathSegment ||\n      resourceType === Constants.Path.PermissionsPathSegment ||\n      resourceType === Constants.Path.TopologyPathSegment ||\n      resourceType === Constants.Path.DatabaseAccountPathSegment ||\n      resourceType === Constants.Path.PartitionKeyRangesPathSegment ||\n      resourceType === Constants.Path.CollectionsPathSegment\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private buildHeaders(requestContext: RequestContext): Promise<CosmosHeaders> {\n    return getHeaders({\n      clientOptions: this.cosmosClientOptions,\n      defaultHeaders: {\n        ...this.cosmosClientOptions.defaultHeaders,\n        ...requestContext.options.initialHeaders,\n      },\n      verb: requestContext.method,\n      path: requestContext.path,\n      resourceId: requestContext.resourceId,\n      resourceType: requestContext.resourceType,\n      options: requestContext.options,\n      partitionKeyRangeId: requestContext.partitionKeyRangeId,\n      useMultipleWriteLocations: this.connectionPolicy.useMultipleWriteLocations,\n      partitionKey:\n        requestContext.partitionKey !== undefined\n          ? convertToInternalPartitionKey(requestContext.partitionKey)\n          : undefined, // TODO: Move this check from here to PartitionKey\n      operationType: requestContext.operationType,\n    });\n  }\n\n  /**\n   * Returns collection of properties which are derived from the context for Request Creation.\n   * These properties have client wide scope, as opposed to request specific scope.\n   * @returns\n   */\n  private getContextDerivedPropsForRequestCreation(): {\n    globalEndpointManager: GlobalEndpointManager;\n    connectionPolicy: ConnectionPolicy;\n    requestAgent: Agent;\n    client?: ClientContext;\n    pipeline?: Pipeline;\n    plugins: PluginConfig[];\n    httpClient?: HttpClient;\n  } {\n    return {\n      globalEndpointManager: this.globalEndpointManager,\n      requestAgent: this.cosmosClientOptions.agent,\n      connectionPolicy: this.connectionPolicy,\n      client: this,\n      plugins: this.cosmosClientOptions.plugins,\n      pipeline: this.pipeline,\n      httpClient: this.cosmosClientOptions.httpClient,\n    };\n  }\n\n  public getClientConfig(): ClientConfigDiagnostic {\n    return this.clientConfig;\n  }\n\n  /**\n   * @internal\n   */\n  public refreshUserAgent(hostFramework: string): void {\n    const updatedUserAgent = getUserAgent(this.cosmosClientOptions.userAgentSuffix, hostFramework);\n    this.cosmosClientOptions.defaultHeaders[Constants.HttpHeaders.UserAgent] = updatedUserAgent;\n    this.cosmosClientOptions.defaultHeaders[Constants.HttpHeaders.CustomUserAgent] =\n      updatedUserAgent;\n  }\n\n  /**\n   * @internal\n   */\n  public getRetryOptions(): RetryOptions {\n    return this.connectionPolicy.retryOptions;\n  }\n}\n"]}