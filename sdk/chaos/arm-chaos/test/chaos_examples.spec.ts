/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { RecorderStartOptions } from "@azure-tools/test-recorder";
import { env, Recorder, isPlaybackMode } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { ChaosManagementClient } from "../src/chaosManagementClient.js";
import { CosmosDBManagementClient } from "@azure/arm-cosmosdb";
import { describe, it, assert, beforeEach, afterEach } from "vitest";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "88888888-8888-8888-8888-888888888888",
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Chaos test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: ChaosManagementClient;
  let location: string;
  let resourceGroup: string;
  let experimentName: string;
  let cos_client: CosmosDBManagementClient;
  let cosmosdbName: string;
  let targetid: string;
  let parentProviderNamespace: string;
  let parentResourceType: string;
  let targetName: string;

  beforeEach(async (ctx) => {
    recorder = new Recorder(ctx);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new ChaosManagementClient(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
    cos_client = new CosmosDBManagementClient(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
    location = "eastus";
    resourceGroup = "myjstest";
    experimentName = "exampleExperiment11";
    cosmosdbName = "test-123aaa";
    parentProviderNamespace = "Microsoft.DocumentDB";
    parentResourceType = "databaseAccounts";
    targetName = "Microsoft-CosmosDB";
  });

  afterEach(async () => {
    await recorder.stop();
  });

  it("chaos dependence create", async () => {
    const cosmosdb_res = await cos_client.databaseAccounts.beginCreateOrUpdateAndWait(
      resourceGroup,
      cosmosdbName,
      {
        databaseAccountOfferType: "Standard",
        locations: [
          // {
          //   failoverPriority: 2,
          //   locationName: "southcentralus",
          //   isZoneRedundant: false
          // },
          {
            locationName: "eastus",
            failoverPriority: 1,
          },
          {
            locationName: "westus",
            failoverPriority: 0,
          },
        ],
        location: location,
        createMode: "Default",
      },
      testPollingOptions,
    );
    assert.equal(cosmosdb_res.name, cosmosdbName);
    targetid = String(cosmosdb_res.id);
  });

  it("target create test", async () => {
    const res = await client.targets.createOrUpdate(
      resourceGroup,
      parentProviderNamespace,
      parentResourceType,
      cosmosdbName,
      targetName,
      {
        location,
        properties: {
          identities: [{ type: "CertificateSubjectIssuer", subject: "CN=example.subject" }],
        },
      },
    );
    assert.equal(res.name, targetName);
  });

  it("experiment create test", async () => {
    const res = await client.experiments.beginCreateOrUpdateAndWait(
      resourceGroup,
      experimentName,
      {
        identity: { type: "SystemAssigned" },
        location: "eastus",
        selectors: [
          {
            type: "List",
            id: "f15dd483-3281-4e95-bcbe-cbf535d0de98",
            targets: [
              {
                type: "ChaosTarget",
                id: targetid,
              },
            ],
          },
        ],
        steps: [
          {
            name: "step1",
            branches: [
              {
                name: "branch1",
                actions: [
                  {
                    type: "continuous",
                    selectorId: "f15dd483-3281-4e95-bcbe-cbf535d0de98",
                    duration: "PT10M",
                    parameters: [
                      {
                        key: "readRegion",
                        value: "East US",
                      },
                    ],
                    name: "urn:csci:microsoft:cosmosDB:failover/1.0",
                  },
                ],
              },
            ],
          },
        ],
      },
      testPollingOptions,
    );
    assert.equal(res.name, experimentName);
  });

  it("experiment get test", async () => {
    const res = await client.experiments.get(resourceGroup, experimentName);
    assert.equal(res.name, experimentName);
  });

  it("targets get test", async () => {
    const res = await client.targets.get(
      resourceGroup,
      parentProviderNamespace,
      parentResourceType,
      cosmosdbName,
      targetName,
    );
    assert.equal(res.name, targetName);
  });

  it("experiment list test", async () => {
    const resArray = new Array();
    for await (const item of client.experiments.list(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("targets list test", async () => {
    const resArray = new Array();
    for await (const item of client.targets.list(
      resourceGroup,
      parentProviderNamespace,
      parentResourceType,
      cosmosdbName,
    )) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("experiment delete test", async () => {
    const resArray = new Array();
    await client.experiments.beginDeleteAndWait(resourceGroup, experimentName, testPollingOptions);
    for await (const item of client.experiments.list(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("target delete test", async () => {
    const resArray = new Array();
    await client.targets.delete(
      resourceGroup,
      parentProviderNamespace,
      parentResourceType,
      cosmosdbName,
      targetName,
    );
    for await (const item of client.targets.list(
      resourceGroup,
      parentProviderNamespace,
      parentResourceType,
      cosmosdbName,
    )) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("chaos dependence delete test", async () => {
    const resArray = new Array();
    await cos_client.databaseAccounts.beginDeleteAndWait(
      resourceGroup,
      cosmosdbName,
      testPollingOptions,
    );
    for await (const item of cos_client.databaseAccounts.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
});
