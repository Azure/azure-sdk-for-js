/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { ChaosManagementClient } from "../src/chaosManagementClient";
import { CosmosDBManagementClient } from "@azure/arm-cosmosdb"

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Chaos test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: ChaosManagementClient;
  let location: string;
  let resourceGroup: string;
  let experimentName: string;
  let cos_client: CosmosDBManagementClient;
  let cosmosdbName: string;
  let targetid: string;
  let parentProviderNamespace: string;
  let parentResourceType: string;
  let targetName: string;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new ChaosManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    cos_client = new CosmosDBManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    experimentName = "exampleExperiment";
    cosmosdbName = "test-123aa"
    parentProviderNamespace = "Microsoft.DocumentDB";
    parentResourceType = "databaseAccounts";
    targetName = "Microsoft-CosmosDB";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("chaos dependence create", async function () {
    const cosmosdb_res = await cos_client.databaseAccounts.beginCreateOrUpdateAndWait(resourceGroup, cosmosdbName, {
      databaseAccountOfferType: "Standard",
      locations: [
        {
          failoverPriority: 2,
          locationName: "southcentralus",
          isZoneRedundant: false
        },
        {
          locationName: "eastus",
          failoverPriority: 1
        },
        {
          locationName: "westus",
          failoverPriority: 0
        }
      ],
      location: location,
      createMode: "Default"
    }, testPollingOptions);
    assert.equal(cosmosdb_res.name, cosmosdbName);
    targetid = String(cosmosdb_res.id);
  });

  it("target create test", async function () {
    const res = await client.targets.createOrUpdate(
      resourceGroup,
      parentProviderNamespace,
      parentResourceType,
      cosmosdbName,
      targetName,
      {
        location,
        properties: {
          identities: [
            { type: "CertificateSubjectIssuer", subject: "CN=example.subject" }
          ]
        }
      }
    );
  });

  it("experiment create test", async function () {
    const res = await client.experiments.createOrUpdate(resourceGroup, experimentName, {
      identity: { type: "SystemAssigned" },
      location: "eastus",
      selectors: [
        {
          type: "List",
          id: "f15dd483-3281-4e95-bcbe-cbf535d0de98",
          targets: [
            {
              type: "ChaosTarget",
              id: targetid
            }
          ]
        }
      ],
      steps: [
        {
          name: "step1",
          branches: [
            {
              name: "branch1",
              actions: [
                {
                  type: "continuous",
                  selectorId: "f15dd483-3281-4e95-bcbe-cbf535d0de98",
                  duration: "PT10M",
                  parameters: [
                    {
                      key: "readRegion",
                      value: "East US"
                    }
                  ],
                  "name": "urn:csci:microsoft:cosmosDB:failover/1.0"
                }
              ]
            }
          ]
        }
      ]
    });
    assert.equal(res.name, experimentName);
  });

  it("experiment get test", async function () {
    const res = await client.experiments.get(resourceGroup, experimentName);
    assert.equal(res.name, experimentName);
  });

  it("targets get test", async function () {
    const res = await client.targets.get(resourceGroup,
      parentProviderNamespace,
      parentResourceType,
      cosmosdbName,
      targetName
    );
    assert.equal(res.name, targetName);
  });

  it("experiment list test", async function () {
    const resArray = new Array();
    for await (let item of client.experiments.list(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("targets list test", async function () {
    const resArray = new Array();
    for await (let item of client.targets.list(resourceGroup,
      parentProviderNamespace,
      parentResourceType,
      cosmosdbName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("experiment delete test", async function () {
    const resArray = new Array();
    const res = await client.experiments.delete(resourceGroup, experimentName)
    for await (let item of client.experiments.list(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("target delete test", async function () {
    const resArray = new Array();
    const res = await client.targets.delete(resourceGroup,
      parentProviderNamespace,
      parentResourceType,
      cosmosdbName,
      targetName)
    for await (let item of client.targets.list(resourceGroup,
      parentProviderNamespace,
      parentResourceType,
      cosmosdbName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("chaos dependence delete test", async function () {
    const resArray = new Array();
    const res = await cos_client.databaseAccounts.beginDeleteAndWait(resourceGroup, cosmosdbName)
    for await (let item of cos_client.databaseAccounts.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  }).timeout(3600000);
});
