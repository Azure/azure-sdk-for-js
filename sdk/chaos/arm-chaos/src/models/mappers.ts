/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const CapabilityListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      nextLink: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const CapabilityTypeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilityTypeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CapabilityType"
            }
          }
        }
      },
      nextLink: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilityTypePropertiesRuntimeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilityTypePropertiesRuntimeProperties",
    modelProperties: {
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Experiment"
            }
          }
        }
      },
      nextLink: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["None", "SystemAssigned"]
        }
      },
      principalId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          )
        },
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          )
        },
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Step: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Step",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      branches: {
        constraints: {
          MinItems: 1
        },
        serializedName: "branches",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Branch"
            }
          }
        }
      }
    }
  }
};

export const Branch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Branch",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      actions: {
        constraints: {
          MinItems: 1
        },
        serializedName: "actions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Action"
            }
          }
        }
      }
    }
  }
};

export const Action: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Action",
    uberParent: "Action",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Selector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Selector",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Percent", "Random", "Tag", "List"]
        }
      },
      id: {
        constraints: {
          MinLength: 1
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      targets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "targets",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetReference"
            }
          }
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "Filter"
        }
      }
    }
  }
};

export const TargetReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetReference",
    modelProperties: {
      type: {
        defaultValue: "ChaosTarget",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[Ss][Uu][Bb][Ss][Cc][Rr][Ii][Pp][Tt][Ii][Oo][Nn][Ss]\\/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\/[Rr][Ee][Ss][Oo][Uu][Rr][Cc][Ee][Gg][Rr][Oo][Uu][Pp][Ss]\\/[a-zA-Z0-9_\\-\\.\\(\\)]*[a-zA-Z0-9_\\-\\(\\)]\\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\\/[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\/[a-zA-Z0-9_\\-\\.]+\\/[a-zA-Z0-9_\\-\\.]+\\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\\/[Mm][Ii][Cc][Rr][Oo][Ss][Oo][Ff][Tt]\\.[Cc][Hh][Aa][Oo][Ss]\\/[Tt][Aa][Rr][Gg][Ee][Tt][Ss]\\/[a-zA-Z0-9_\\-\\.]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Filter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Filter",
    uberParent: "Filter",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentCancelOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentCancelOperationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusUrl: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "statusUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentStartOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentStartOperationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusUrl: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "statusUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentStatusListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentStatusListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExperimentStatus"
            }
          }
        }
      },
      nextLink: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentStatus",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdDateUtc: {
        serializedName: "properties.createdDateUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endDateUtc: {
        serializedName: "properties.endDateUtc",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ExperimentExecutionDetailsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentExecutionDetailsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExperimentExecutionDetails"
            }
          }
        }
      },
      nextLink: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentExecutionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentExecutionDetails",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      experimentId: {
        serializedName: "properties.experimentId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      failureReason: {
        serializedName: "properties.failureReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        serializedName: "properties.createdDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        serializedName: "properties.lastActionDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      startDateTime: {
        serializedName: "properties.startDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      stopDateTime: {
        serializedName: "properties.stopDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      runInformation: {
        serializedName: "properties.runInformation",
        type: {
          name: "Composite",
          className: "ExperimentExecutionDetailsPropertiesRunInformation"
        }
      }
    }
  }
};

export const ExperimentExecutionDetailsPropertiesRunInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentExecutionDetailsPropertiesRunInformation",
    modelProperties: {
      steps: {
        serializedName: "steps",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StepStatus"
            }
          }
        }
      }
    }
  }
};

export const StepStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StepStatus",
    modelProperties: {
      stepName: {
        serializedName: "stepName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stepId: {
        serializedName: "stepId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      branches: {
        serializedName: "branches",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BranchStatus"
            }
          }
        }
      }
    }
  }
};

export const BranchStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BranchStatus",
    modelProperties: {
      branchName: {
        serializedName: "branchName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      branchId: {
        serializedName: "branchId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "actions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActionStatus"
            }
          }
        }
      }
    }
  }
};

export const ActionStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionStatus",
    modelProperties: {
      actionName: {
        serializedName: "actionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionId: {
        serializedName: "actionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      targets: {
        serializedName: "targets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExperimentExecutionActionTargetDetailsProperties"
            }
          }
        }
      }
    }
  }
};

export const ExperimentExecutionActionTargetDetailsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentExecutionActionTargetDetailsProperties",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetFailedTime: {
        serializedName: "targetFailedTime",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      targetCompletedTime: {
        serializedName: "targetCompletedTime",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ExperimentExecutionActionTargetDetailsError"
        }
      }
    }
  }
};

export const ExperimentExecutionActionTargetDetailsError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentExecutionActionTargetDetailsError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetTypeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetTypeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetType"
            }
          }
        }
      },
      nextLink: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Target"
            }
          }
        }
      },
      nextLink: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyValuePair: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyValuePair",
    modelProperties: {
      key: {
        constraints: {
          MinLength: 1
        },
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          MinLength: 1
        },
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimpleFilterParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimpleFilterParameters",
    modelProperties: {
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Capability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      publisher: {
        serializedName: "properties.publisher",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetType: {
        serializedName: "properties.targetType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parametersSchema: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "properties.parametersSchema",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      urn: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "properties.urn",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilityType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilityType",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "properties.publisher",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetType: {
        serializedName: "properties.targetType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parametersSchema: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "properties.parametersSchema",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      urn: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "properties.urn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "properties.kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runtimeProperties: {
        serializedName: "properties.runtimeProperties",
        type: {
          name: "Composite",
          className: "CapabilityTypePropertiesRuntimeProperties"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetType",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      propertiesSchema: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "properties.propertiesSchema",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceTypes: {
        serializedName: "properties.resourceTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Target: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Target",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const DelayAction: coreClient.CompositeMapper = {
  serializedName: "delay",
  type: {
    name: "Composite",
    className: "DelayAction",
    uberParent: "Action",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    modelProperties: {
      ...Action.type.modelProperties,
      duration: {
        constraints: {
          Pattern: new RegExp(
            "^P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d+)?S)?)?$"
          )
        },
        serializedName: "duration",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiscreteAction: coreClient.CompositeMapper = {
  serializedName: "discrete",
  type: {
    name: "Composite",
    className: "DiscreteAction",
    uberParent: "Action",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    modelProperties: {
      ...Action.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyValuePair"
            }
          }
        }
      },
      selectorId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "selectorId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContinuousAction: coreClient.CompositeMapper = {
  serializedName: "continuous",
  type: {
    name: "Composite",
    className: "ContinuousAction",
    uberParent: "Action",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    modelProperties: {
      ...Action.type.modelProperties,
      duration: {
        constraints: {
          Pattern: new RegExp(
            "^P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d+)?S)?)?$"
          )
        },
        serializedName: "duration",
        required: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyValuePair"
            }
          }
        }
      },
      selectorId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "selectorId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimpleFilter: coreClient.CompositeMapper = {
  serializedName: "Simple",
  type: {
    name: "Composite",
    className: "SimpleFilter",
    uberParent: "Filter",
    polymorphicDiscriminator: Filter.type.polymorphicDiscriminator,
    modelProperties: {
      ...Filter.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "SimpleFilterParameters"
        }
      }
    }
  }
};

export const Experiment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Experiment",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      steps: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.steps",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Step"
            }
          }
        }
      },
      selectors: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.selectors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Selector"
            }
          }
        }
      },
      startOnCreation: {
        serializedName: "properties.startOnCreation",
        nullable: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export let discriminators = {
  Action: Action,
  Filter: Filter,
  "Action.delay": DelayAction,
  "Action.discrete": DiscreteAction,
  "Action.continuous": ContinuousAction,
  "Filter.Simple": SimpleFilter
};
