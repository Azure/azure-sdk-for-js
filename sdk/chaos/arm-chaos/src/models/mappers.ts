/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const ErrorAdditionalInfo: msRest.CompositeMapper = {
  serializedName: "ErrorAdditionalInfo",
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      info: {
        readOnly: true,
        serializedName: "info",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const ErrorDetail: msRest.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        readOnly: true,
        serializedName: "additionalInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const SystemData: msRest.CompositeMapper = {
  serializedName: "systemData",
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEntityResource: msRest.CompositeMapper = {
  serializedName: "AzureEntityResource",
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Capability: msRest.CompositeMapper = {
  serializedName: "capability",
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      publisher: {
        readOnly: true,
        serializedName: "properties.publisher",
        type: {
          name: "String"
        }
      },
      targetType: {
        readOnly: true,
        serializedName: "properties.targetType",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      parametersSchema: {
        readOnly: true,
        serializedName: "properties.parametersSchema",
        type: {
          name: "String"
        }
      },
      urn: {
        readOnly: true,
        serializedName: "properties.urn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentExecutionActionTargetDetailsError: msRest.CompositeMapper = {
  serializedName: "experimentExecutionActionTargetDetailsError",
  type: {
    name: "Composite",
    className: "ExperimentExecutionActionTargetDetailsError",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentExecutionActionTargetDetailsProperties: msRest.CompositeMapper = {
  serializedName: "experimentExecutionActionTargetDetailsProperties",
  type: {
    name: "Composite",
    className: "ExperimentExecutionActionTargetDetailsProperties",
    modelProperties: {
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      failedDateUtc: {
        nullable: true,
        readOnly: true,
        serializedName: "failedDateUtc",
        type: {
          name: "DateTime"
        }
      },
      completedDateUtc: {
        nullable: true,
        readOnly: true,
        serializedName: "completedDateUtc",
        type: {
          name: "DateTime"
        }
      },
      error: {
        nullable: true,
        readOnly: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ExperimentExecutionActionTargetDetailsError"
        }
      }
    }
  }
};

export const ActionStatus: msRest.CompositeMapper = {
  serializedName: "actionStatus",
  type: {
    name: "Composite",
    className: "ActionStatus",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      targets: {
        readOnly: true,
        serializedName: "targets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExperimentExecutionActionTargetDetailsProperties"
            }
          }
        }
      }
    }
  }
};

export const BranchStatus: msRest.CompositeMapper = {
  serializedName: "branchStatus",
  type: {
    name: "Composite",
    className: "BranchStatus",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      actions: {
        readOnly: true,
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActionStatus"
            }
          }
        }
      }
    }
  }
};

export const StepStatus: msRest.CompositeMapper = {
  serializedName: "stepStatus",
  type: {
    name: "Composite",
    className: "StepStatus",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      branches: {
        readOnly: true,
        serializedName: "branches",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BranchStatus"
            }
          }
        }
      }
    }
  }
};

export const ExperimentExecutionDetailsPropertiesRunInformation: msRest.CompositeMapper = {
  serializedName: "experimentExecutionDetailsProperties_runInformation",
  type: {
    name: "Composite",
    className: "ExperimentExecutionDetailsPropertiesRunInformation",
    modelProperties: {
      steps: {
        readOnly: true,
        serializedName: "steps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StepStatus"
            }
          }
        }
      }
    }
  }
};

export const ExperimentExecutionDetails: msRest.CompositeMapper = {
  serializedName: "experimentExecutionDetails",
  type: {
    name: "Composite",
    className: "ExperimentExecutionDetails",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      experimentId: {
        readOnly: true,
        serializedName: "properties.experimentId",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      failureReason: {
        readOnly: true,
        serializedName: "properties.failureReason",
        type: {
          name: "String"
        }
      },
      createdDateUtc: {
        readOnly: true,
        serializedName: "properties.createdDateUtc",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateUtc: {
        readOnly: true,
        serializedName: "properties.lastActionDateUtc",
        type: {
          name: "DateTime"
        }
      },
      startDateUtc: {
        readOnly: true,
        serializedName: "properties.startDateUtc",
        type: {
          name: "DateTime"
        }
      },
      stopDateUtc: {
        readOnly: true,
        serializedName: "properties.stopDateUtc",
        type: {
          name: "DateTime"
        }
      },
      runInformation: {
        readOnly: true,
        serializedName: "properties.runInformation",
        type: {
          name: "Composite",
          className: "ExperimentExecutionDetailsPropertiesRunInformation"
        }
      }
    }
  }
};

export const ExperimentStatus: msRest.CompositeMapper = {
  serializedName: "experimentStatus",
  type: {
    name: "Composite",
    className: "ExperimentStatus",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      createdDateUtc: {
        readOnly: true,
        serializedName: "properties.createdDateUtc",
        type: {
          name: "DateTime"
        }
      },
      endDateUtc: {
        nullable: true,
        readOnly: true,
        serializedName: "properties.endDateUtc",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ExperimentStartOperationResult: msRest.CompositeMapper = {
  serializedName: "experimentStartOperationResult",
  type: {
    name: "Composite",
    className: "ExperimentStartOperationResult",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      statusUrl: {
        readOnly: true,
        serializedName: "statusUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentCancelOperationResult: msRest.CompositeMapper = {
  serializedName: "experimentCancelOperationResult",
  type: {
    name: "Composite",
    className: "ExperimentCancelOperationResult",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      statusUrl: {
        readOnly: true,
        serializedName: "statusUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetReference: msRest.CompositeMapper = {
  serializedName: "targetReference",
  type: {
    name: "Composite",
    className: "TargetReference",
    modelProperties: {
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'ResourceId',
        type: {
          name: "String"
        }
      },
      id: {
        required: true,
        serializedName: "id",
        constraints: {
          Pattern: /^\/[Ss][Uu][Bb][Ss][Cc][Rr][Ii][Pp][Tt][Ii][Oo][Nn][Ss]\/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\/[Rr][Ee][Ss][Oo][Uu][Rr][Cc][Ee][Gg][Rr][Oo][Uu][Pp][Ss]\/[a-zA-Z0-9_\-\.\(\)]*[a-zA-Z0-9_\-\(\)]\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\/[a-zA-Z0-9]+\.[a-zA-Z0-9]+\/[a-zA-Z0-9_\-\.]+\/[a-zA-Z0-9_\-\.]+\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\/[Mm][Ii][Cc][Rr][Oo][Ss][Oo][Ff][Tt]\.[Cc][Hh][Aa][Oo][Ss]\/[Tt][Aa][Rr][Gg][Ee][Tt][Ss]\/[a-zA-Z0-9_\-\.]+$/
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Selector: msRest.CompositeMapper = {
  serializedName: "selector",
  type: {
    name: "Composite",
    className: "Selector",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "Percent",
            "Random",
            "Tag",
            "List"
          ]
        }
      },
      id: {
        required: true,
        serializedName: "id",
        constraints: {
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      targets: {
        required: true,
        serializedName: "targets",
        constraints: {
          MinItems: 1
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetReference"
            }
          }
        }
      }
    }
  }
};

export const KeyValuePair: msRest.CompositeMapper = {
  serializedName: "keyValuePair",
  type: {
    name: "Composite",
    className: "KeyValuePair",
    modelProperties: {
      key: {
        required: true,
        serializedName: "key",
        constraints: {
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        constraints: {
          MinLength: 1
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Action: msRest.CompositeMapper = {
  serializedName: "action",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    uberParent: "Action",
    className: "Action",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContinuousAction: msRest.CompositeMapper = {
  serializedName: "continuous",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    uberParent: "Action",
    className: "ContinuousAction",
    modelProperties: {
      ...Action.type.modelProperties,
      duration: {
        required: true,
        serializedName: "duration",
        constraints: {
          Pattern: /^P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+(\.\d+)?S)?)?$/
        },
        type: {
          name: "String"
        }
      },
      parameters: {
        required: true,
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyValuePair"
            }
          }
        }
      },
      selectorId: {
        required: true,
        serializedName: "selectorId",
        constraints: {
          MinLength: 1
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiscreteAction: msRest.CompositeMapper = {
  serializedName: "discrete",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    uberParent: "Action",
    className: "DiscreteAction",
    modelProperties: {
      ...Action.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyValuePair"
            }
          }
        }
      },
      selectorId: {
        required: true,
        serializedName: "selectorId",
        constraints: {
          MinLength: 1
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DelayAction: msRest.CompositeMapper = {
  serializedName: "delay",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    uberParent: "Action",
    className: "DelayAction",
    modelProperties: {
      ...Action.type.modelProperties,
      duration: {
        required: true,
        serializedName: "duration",
        constraints: {
          Pattern: /^P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+(\.\d+)?S)?)?$/
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Branch: msRest.CompositeMapper = {
  serializedName: "branch",
  type: {
    name: "Composite",
    className: "Branch",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      actions: {
        required: true,
        serializedName: "actions",
        constraints: {
          MinItems: 1
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Action"
            }
          }
        }
      }
    }
  }
};

export const Step: msRest.CompositeMapper = {
  serializedName: "step",
  type: {
    name: "Composite",
    className: "Step",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      branches: {
        required: true,
        serializedName: "branches",
        constraints: {
          MinItems: 1
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Branch"
            }
          }
        }
      }
    }
  }
};

export const ResourceIdentity: msRest.CompositeMapper = {
  serializedName: "resourceIdentity",
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "SystemAssigned"
          ]
        }
      },
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        constraints: {
          Pattern: /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/
        },
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        constraints: {
          Pattern: /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Experiment: msRest.CompositeMapper = {
  serializedName: "experiment",
  type: {
    name: "Composite",
    className: "Experiment",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      steps: {
        required: true,
        serializedName: "properties.steps",
        constraints: {
          MinItems: 1
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Step"
            }
          }
        }
      },
      selectors: {
        required: true,
        serializedName: "properties.selectors",
        constraints: {
          MinItems: 1
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Selector"
            }
          }
        }
      },
      startOnCreation: {
        nullable: true,
        serializedName: "properties.startOnCreation",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        readOnly: true,
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        readOnly: true,
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      actionType: {
        readOnly: true,
        serializedName: "actionType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Target: msRest.CompositeMapper = {
  serializedName: "target",
  type: {
    name: "Composite",
    className: "Target",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      properties: {
        required: true,
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const TargetType: msRest.CompositeMapper = {
  serializedName: "targetType",
  type: {
    name: "Composite",
    className: "TargetType",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      propertiesSchema: {
        readOnly: true,
        serializedName: "properties.propertiesSchema",
        type: {
          name: "String"
        }
      },
      resourceTypes: {
        readOnly: true,
        serializedName: "properties.resourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CapabilityType: msRest.CompositeMapper = {
  serializedName: "capabilityType",
  type: {
    name: "Composite",
    className: "CapabilityType",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      publisher: {
        readOnly: true,
        serializedName: "properties.publisher",
        type: {
          name: "String"
        }
      },
      targetType: {
        readOnly: true,
        serializedName: "properties.targetType",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      parametersSchema: {
        readOnly: true,
        serializedName: "properties.parametersSchema",
        type: {
          name: "String"
        }
      },
      urn: {
        readOnly: true,
        serializedName: "properties.urn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilityListResult: msRest.CompositeMapper = {
  serializedName: "capabilityListResult",
  type: {
    name: "Composite",
    className: "CapabilityListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentListResult: msRest.CompositeMapper = {
  serializedName: "experimentListResult",
  type: {
    name: "Composite",
    className: "ExperimentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Experiment"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentStatusListResult: msRest.CompositeMapper = {
  serializedName: "experimentStatusListResult",
  type: {
    name: "Composite",
    className: "ExperimentStatusListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExperimentStatus"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentExecutionDetailsListResult: msRest.CompositeMapper = {
  serializedName: "experimentExecutionDetailsListResult",
  type: {
    name: "Composite",
    className: "ExperimentExecutionDetailsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExperimentExecutionDetails"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetListResult: msRest.CompositeMapper = {
  serializedName: "targetListResult",
  type: {
    name: "Composite",
    className: "TargetListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Target"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetTypeListResult: msRest.CompositeMapper = {
  serializedName: "targetTypeListResult",
  type: {
    name: "Composite",
    className: "TargetTypeListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetType"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilityTypeListResult: msRest.CompositeMapper = {
  serializedName: "capabilityTypeListResult",
  type: {
    name: "Composite",
    className: "CapabilityTypeListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CapabilityType"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'Action.continuous' : ContinuousAction,
  'Action.discrete' : DiscreteAction,
  'Action.delay' : DelayAction,
  'action' : Action

};
