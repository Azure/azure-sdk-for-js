/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Targets } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ChaosManagementClient } from "../chaosManagementClient";
import {
  Target,
  TargetsListNextOptionalParams,
  TargetsListOptionalParams,
  TargetsListResponse,
  TargetsGetOptionalParams,
  TargetsGetResponse,
  TargetsDeleteOptionalParams,
  TargetsCreateOrUpdateOptionalParams,
  TargetsCreateOrUpdateResponse,
  TargetsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Targets operations. */
export class TargetsImpl implements Targets {
  private readonly client: ChaosManagementClient;

  /**
   * Initialize a new instance of the class Targets class.
   * @param client Reference to the service client
   */
  constructor(client: ChaosManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of Target resources that extend a tracked regional resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param parentProviderNamespace String that represents a resource provider namespace.
   * @param parentResourceType String that represents a resource type.
   * @param parentResourceName String that represents a resource name.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    options?: TargetsListOptionalParams
  ): PagedAsyncIterableIterator<Target> {
    const iter = this.listPagingAll(
      resourceGroupName,
      parentProviderNamespace,
      parentResourceType,
      parentResourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          resourceGroupName,
          parentProviderNamespace,
          parentResourceType,
          parentResourceName,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    options?: TargetsListOptionalParams
  ): AsyncIterableIterator<Target[]> {
    let result = await this._list(
      resourceGroupName,
      parentProviderNamespace,
      parentResourceType,
      parentResourceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    options?: TargetsListOptionalParams
  ): AsyncIterableIterator<Target> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      parentProviderNamespace,
      parentResourceType,
      parentResourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of Target resources that extend a tracked regional resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param parentProviderNamespace String that represents a resource provider namespace.
   * @param parentResourceType String that represents a resource type.
   * @param parentResourceName String that represents a resource name.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    options?: TargetsListOptionalParams
  ): Promise<TargetsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        options
      },
      listOperationSpec
    );
  }

  /**
   * Get a Target resource that extends a tracked regional resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param parentProviderNamespace String that represents a resource provider namespace.
   * @param parentResourceType String that represents a resource type.
   * @param parentResourceName String that represents a resource name.
   * @param targetName String that represents a Target resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    targetName: string,
    options?: TargetsGetOptionalParams
  ): Promise<TargetsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Delete a Target resource that extends a tracked regional resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param parentProviderNamespace String that represents a resource provider namespace.
   * @param parentResourceType String that represents a resource type.
   * @param parentResourceName String that represents a resource name.
   * @param targetName String that represents a Target resource name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    targetName: string,
    options?: TargetsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Create or update a Target resource that extends a tracked regional resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param parentProviderNamespace String that represents a resource provider namespace.
   * @param parentResourceType String that represents a resource type.
   * @param parentResourceName String that represents a resource name.
   * @param targetName String that represents a Target resource name.
   * @param target Target resource to be created or updated.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    targetName: string,
    target: Target,
    options?: TargetsCreateOrUpdateOptionalParams
  ): Promise<TargetsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName,
        target,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName String that represents an Azure resource group.
   * @param parentProviderNamespace String that represents a resource provider namespace.
   * @param parentResourceType String that represents a resource type.
   * @param parentResourceName String that represents a resource name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    nextLink: string,
    options?: TargetsListNextOptionalParams
  ): Promise<TargetsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        nextLink,
        options
      },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TargetListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Target
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.targetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.targetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Target
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.target,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.targetName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TargetListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
