/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/experimentsMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftAzureChaosContext } from "../microsoftAzureChaosContext";

/** Class representing a Experiments. */
export class Experiments {
  private readonly client: MicrosoftAzureChaosContext;

  /**
   * Create a Experiments.
   * @param {MicrosoftAzureChaosContext} client Reference to the service client.
   */
  constructor(client: MicrosoftAzureChaosContext) {
    this.client = client;
  }

  /**
   * Get a list of Experiment resources in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsListAllResponse>
   */
  listAll(options?: Models.ExperimentsListAllOptionalParams): Promise<Models.ExperimentsListAllResponse>;
  /**
   * @param callback The callback
   */
  listAll(callback: msRest.ServiceCallback<Models.ExperimentListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAll(options: Models.ExperimentsListAllOptionalParams, callback: msRest.ServiceCallback<Models.ExperimentListResult>): void;
  listAll(options?: Models.ExperimentsListAllOptionalParams | msRest.ServiceCallback<Models.ExperimentListResult>, callback?: msRest.ServiceCallback<Models.ExperimentListResult>): Promise<Models.ExperimentsListAllResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllOperationSpec,
      callback) as Promise<Models.ExperimentsListAllResponse>;
  }

  /**
   * Get a list of Experiment resources in a resource group.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsListResponse>
   */
  list(resourceGroupName: string, options?: Models.ExperimentsListOptionalParams): Promise<Models.ExperimentsListResponse>;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ExperimentListResult>): void;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: Models.ExperimentsListOptionalParams, callback: msRest.ServiceCallback<Models.ExperimentListResult>): void;
  list(resourceGroupName: string, options?: Models.ExperimentsListOptionalParams | msRest.ServiceCallback<Models.ExperimentListResult>, callback?: msRest.ServiceCallback<Models.ExperimentListResult>): Promise<Models.ExperimentsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ExperimentsListResponse>;
  }

  /**
   * Delete a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, experimentName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, experimentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        experimentName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Get a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsGetResponse>
   */
  get(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExperimentsGetResponse>;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param callback The callback
   */
  get(resourceGroupName: string, experimentName: string, callback: msRest.ServiceCallback<Models.Experiment>): void;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, experimentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Experiment>): void;
  get(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Experiment>, callback?: msRest.ServiceCallback<Models.Experiment>): Promise<Models.ExperimentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        experimentName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ExperimentsGetResponse>;
  }

  /**
   * Create or update a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param experiment Experiment resource to be created or updated.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, experimentName: string, experiment: Models.Experiment, options?: msRest.RequestOptionsBase): Promise<Models.ExperimentsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,experimentName,experiment,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ExperimentsCreateOrUpdateResponse>;
  }

  /**
   * Cancel a running Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsCancelResponse>
   */
  cancel(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExperimentsCancelResponse> {
    return this.beginCancel(resourceGroupName,experimentName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ExperimentsCancelResponse>;
  }

  /**
   * Start a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsStartResponse>
   */
  start(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExperimentsStartResponse>;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param callback The callback
   */
  start(resourceGroupName: string, experimentName: string, callback: msRest.ServiceCallback<Models.ExperimentStartOperationResult>): void;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  start(resourceGroupName: string, experimentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExperimentStartOperationResult>): void;
  start(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExperimentStartOperationResult>, callback?: msRest.ServiceCallback<Models.ExperimentStartOperationResult>): Promise<Models.ExperimentsStartResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        experimentName,
        options
      },
      startOperationSpec,
      callback) as Promise<Models.ExperimentsStartResponse>;
  }

  /**
   * Get a list of statuses of a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsListAllStatusesResponse>
   */
  listAllStatuses(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExperimentsListAllStatusesResponse>;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param callback The callback
   */
  listAllStatuses(resourceGroupName: string, experimentName: string, callback: msRest.ServiceCallback<Models.ExperimentStatusListResult>): void;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAllStatuses(resourceGroupName: string, experimentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExperimentStatusListResult>): void;
  listAllStatuses(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExperimentStatusListResult>, callback?: msRest.ServiceCallback<Models.ExperimentStatusListResult>): Promise<Models.ExperimentsListAllStatusesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        experimentName,
        options
      },
      listAllStatusesOperationSpec,
      callback) as Promise<Models.ExperimentsListAllStatusesResponse>;
  }

  /**
   * Get a status of a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param statusId GUID that represents a Experiment status.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsGetStatusResponse>
   */
  getStatus(resourceGroupName: string, experimentName: string, statusId: string, options?: msRest.RequestOptionsBase): Promise<Models.ExperimentsGetStatusResponse>;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param statusId GUID that represents a Experiment status.
   * @param callback The callback
   */
  getStatus(resourceGroupName: string, experimentName: string, statusId: string, callback: msRest.ServiceCallback<Models.ExperimentStatus>): void;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param statusId GUID that represents a Experiment status.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStatus(resourceGroupName: string, experimentName: string, statusId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExperimentStatus>): void;
  getStatus(resourceGroupName: string, experimentName: string, statusId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExperimentStatus>, callback?: msRest.ServiceCallback<Models.ExperimentStatus>): Promise<Models.ExperimentsGetStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        experimentName,
        statusId,
        options
      },
      getStatusOperationSpec,
      callback) as Promise<Models.ExperimentsGetStatusResponse>;
  }

  /**
   * Get a list of execution details of a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsListExecutionDetailsResponse>
   */
  listExecutionDetails(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExperimentsListExecutionDetailsResponse>;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param callback The callback
   */
  listExecutionDetails(resourceGroupName: string, experimentName: string, callback: msRest.ServiceCallback<Models.ExperimentExecutionDetailsListResult>): void;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listExecutionDetails(resourceGroupName: string, experimentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExperimentExecutionDetailsListResult>): void;
  listExecutionDetails(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExperimentExecutionDetailsListResult>, callback?: msRest.ServiceCallback<Models.ExperimentExecutionDetailsListResult>): Promise<Models.ExperimentsListExecutionDetailsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        experimentName,
        options
      },
      listExecutionDetailsOperationSpec,
      callback) as Promise<Models.ExperimentsListExecutionDetailsResponse>;
  }

  /**
   * Get an execution detail of a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param executionDetailsId GUID that represents a Experiment execution detail.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsGetExecutionDetailsResponse>
   */
  getExecutionDetails(resourceGroupName: string, experimentName: string, executionDetailsId: string, options?: msRest.RequestOptionsBase): Promise<Models.ExperimentsGetExecutionDetailsResponse>;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param executionDetailsId GUID that represents a Experiment execution detail.
   * @param callback The callback
   */
  getExecutionDetails(resourceGroupName: string, experimentName: string, executionDetailsId: string, callback: msRest.ServiceCallback<Models.ExperimentExecutionDetails>): void;
  /**
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param executionDetailsId GUID that represents a Experiment execution detail.
   * @param options The optional parameters
   * @param callback The callback
   */
  getExecutionDetails(resourceGroupName: string, experimentName: string, executionDetailsId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExperimentExecutionDetails>): void;
  getExecutionDetails(resourceGroupName: string, experimentName: string, executionDetailsId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExperimentExecutionDetails>, callback?: msRest.ServiceCallback<Models.ExperimentExecutionDetails>): Promise<Models.ExperimentsGetExecutionDetailsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        experimentName,
        executionDetailsId,
        options
      },
      getExecutionDetailsOperationSpec,
      callback) as Promise<Models.ExperimentsGetExecutionDetailsResponse>;
  }

  /**
   * Create or update a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param experiment Experiment resource to be created or updated.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, experimentName: string, experiment: Models.Experiment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        experimentName,
        experiment,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Cancel a running Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCancel(resourceGroupName: string, experimentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        experimentName,
        options
      },
      beginCancelOperationSpec,
      options);
  }

  /**
   * Get a list of Experiment resources in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsListAllNextResponse>
   */
  listAllNext(nextPageLink: string, options?: Models.ExperimentsListAllNextOptionalParams): Promise<Models.ExperimentsListAllNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAllNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExperimentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAllNext(nextPageLink: string, options: Models.ExperimentsListAllNextOptionalParams, callback: msRest.ServiceCallback<Models.ExperimentListResult>): void;
  listAllNext(nextPageLink: string, options?: Models.ExperimentsListAllNextOptionalParams | msRest.ServiceCallback<Models.ExperimentListResult>, callback?: msRest.ServiceCallback<Models.ExperimentListResult>): Promise<Models.ExperimentsListAllNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAllNextOperationSpec,
      callback) as Promise<Models.ExperimentsListAllNextResponse>;
  }

  /**
   * Get a list of Experiment resources in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.ExperimentsListNextOptionalParams): Promise<Models.ExperimentsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExperimentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.ExperimentsListNextOptionalParams, callback: msRest.ServiceCallback<Models.ExperimentListResult>): void;
  listNext(nextPageLink: string, options?: Models.ExperimentsListNextOptionalParams | msRest.ServiceCallback<Models.ExperimentListResult>, callback?: msRest.ServiceCallback<Models.ExperimentListResult>): Promise<Models.ExperimentsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ExperimentsListNextResponse>;
  }

  /**
   * Get a list of statuses of a Experiment resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsListAllStatusesNextResponse>
   */
  listAllStatusesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExperimentsListAllStatusesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAllStatusesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExperimentStatusListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAllStatusesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExperimentStatusListResult>): void;
  listAllStatusesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExperimentStatusListResult>, callback?: msRest.ServiceCallback<Models.ExperimentStatusListResult>): Promise<Models.ExperimentsListAllStatusesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAllStatusesNextOperationSpec,
      callback) as Promise<Models.ExperimentsListAllStatusesNextResponse>;
  }

  /**
   * Get a list of execution details of a Experiment resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExperimentsListExecutionDetailsNextResponse>
   */
  listExecutionDetailsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExperimentsListExecutionDetailsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listExecutionDetailsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExperimentExecutionDetailsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listExecutionDetailsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExperimentExecutionDetailsListResult>): void;
  listExecutionDetailsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExperimentExecutionDetailsListResult>, callback?: msRest.ServiceCallback<Models.ExperimentExecutionDetailsListResult>): Promise<Models.ExperimentsListExecutionDetailsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listExecutionDetailsNextOperationSpec,
      callback) as Promise<Models.ExperimentsListExecutionDetailsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Chaos/experiments",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.running,
    Parameters.continuationToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.running,
    Parameters.continuationToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Experiment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const startOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/start",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      bodyMapper: Mappers.ExperimentStartOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAllStatusesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/statuses",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentStatusListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/statuses/{statusId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
    Parameters.statusId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listExecutionDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executionDetails",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getExecutionDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executionDetails/{executionDetailsId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
    Parameters.executionDetailsId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "experiment",
    mapper: {
      ...Mappers.Experiment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Experiment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCancelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/cancel",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      bodyMapper: Mappers.ExperimentCancelOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAllNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.running,
    Parameters.continuationToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.running,
    Parameters.continuationToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAllStatusesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentStatusListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listExecutionDetailsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
