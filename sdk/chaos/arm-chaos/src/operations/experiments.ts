/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Experiments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ChaosManagementClient } from "../chaosManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Experiment,
  ExperimentsListAllNextOptionalParams,
  ExperimentsListAllOptionalParams,
  ExperimentsListAllResponse,
  ExperimentsListNextOptionalParams,
  ExperimentsListOptionalParams,
  ExperimentsListResponse,
  ExperimentExecution,
  ExperimentsListAllExecutionsNextOptionalParams,
  ExperimentsListAllExecutionsOptionalParams,
  ExperimentsListAllExecutionsResponse,
  ExperimentsDeleteOptionalParams,
  ExperimentsGetOptionalParams,
  ExperimentsGetResponse,
  ExperimentsCreateOrUpdateOptionalParams,
  ExperimentsCreateOrUpdateResponse,
  ExperimentUpdate,
  ExperimentsUpdateOptionalParams,
  ExperimentsUpdateResponse,
  ExperimentsCancelOptionalParams,
  ExperimentsStartOptionalParams,
  ExperimentsGetExecutionOptionalParams,
  ExperimentsGetExecutionResponse,
  ExperimentsExecutionDetailsOptionalParams,
  ExperimentsExecutionDetailsResponse,
  ExperimentsListAllNextResponse,
  ExperimentsListNextResponse,
  ExperimentsListAllExecutionsNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Experiments operations. */
export class ExperimentsImpl implements Experiments {
  private readonly client: ChaosManagementClient;

  /**
   * Initialize a new instance of the class Experiments class.
   * @param client Reference to the service client
   */
  constructor(client: ChaosManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of Experiment resources in a subscription.
   * @param options The options parameters.
   */
  public listAll(
    options?: ExperimentsListAllOptionalParams,
  ): PagedAsyncIterableIterator<Experiment> {
    const iter = this.listAllPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAllPagingPage(options, settings);
      },
    };
  }

  private async *listAllPagingPage(
    options?: ExperimentsListAllOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Experiment[]> {
    let result: ExperimentsListAllResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAll(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAllNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAllPagingAll(
    options?: ExperimentsListAllOptionalParams,
  ): AsyncIterableIterator<Experiment> {
    for await (const page of this.listAllPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of Experiment resources in a resource group.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: ExperimentsListOptionalParams,
  ): PagedAsyncIterableIterator<Experiment> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: ExperimentsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Experiment[]> {
    let result: ExperimentsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: ExperimentsListOptionalParams,
  ): AsyncIterableIterator<Experiment> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Get a list of executions of an Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  public listAllExecutions(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListAllExecutionsOptionalParams,
  ): PagedAsyncIterableIterator<ExperimentExecution> {
    const iter = this.listAllExecutionsPagingAll(
      resourceGroupName,
      experimentName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAllExecutionsPagingPage(
          resourceGroupName,
          experimentName,
          options,
          settings,
        );
      },
    };
  }

  private async *listAllExecutionsPagingPage(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListAllExecutionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ExperimentExecution[]> {
    let result: ExperimentsListAllExecutionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAllExecutions(
        resourceGroupName,
        experimentName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAllExecutionsNext(
        resourceGroupName,
        experimentName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAllExecutionsPagingAll(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListAllExecutionsOptionalParams,
  ): AsyncIterableIterator<ExperimentExecution> {
    for await (const page of this.listAllExecutionsPagingPage(
      resourceGroupName,
      experimentName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of Experiment resources in a subscription.
   * @param options The options parameters.
   */
  private _listAll(
    options?: ExperimentsListAllOptionalParams,
  ): Promise<ExperimentsListAllResponse> {
    return this.client.sendOperationRequest({ options }, listAllOperationSpec);
  }

  /**
   * Get a list of Experiment resources in a resource group.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: ExperimentsListOptionalParams,
  ): Promise<ExperimentsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec,
    );
  }

  /**
   * Delete a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, experimentName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      experimentName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Get a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsGetOptionalParams,
  ): Promise<ExperimentsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param experiment Experiment resource to be created or updated.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    experimentName: string,
    experiment: Experiment,
    options?: ExperimentsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExperimentsCreateOrUpdateResponse>,
      ExperimentsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExperimentsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, experimentName, experiment, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ExperimentsCreateOrUpdateResponse,
      OperationState<ExperimentsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param experiment Experiment resource to be created or updated.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    experimentName: string,
    experiment: Experiment,
    options?: ExperimentsCreateOrUpdateOptionalParams,
  ): Promise<ExperimentsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      experimentName,
      experiment,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to update an experiment.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param experiment Parameters supplied to the Update experiment operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    experimentName: string,
    experiment: ExperimentUpdate,
    options?: ExperimentsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExperimentsUpdateResponse>,
      ExperimentsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExperimentsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, experimentName, experiment, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ExperimentsUpdateResponse,
      OperationState<ExperimentsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to update an experiment.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param experiment Parameters supplied to the Update experiment operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    experimentName: string,
    experiment: ExperimentUpdate,
    options?: ExperimentsUpdateOptionalParams,
  ): Promise<ExperimentsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      experimentName,
      experiment,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Cancel a running Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  async beginCancel(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsCancelOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, experimentName, options },
      spec: cancelOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Cancel a running Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  async beginCancelAndWait(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsCancelOptionalParams,
  ): Promise<void> {
    const poller = await this.beginCancel(
      resourceGroupName,
      experimentName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Start a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  async beginStart(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsStartOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, experimentName, options },
      spec: startOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Start a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  async beginStartAndWait(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsStartOptionalParams,
  ): Promise<void> {
    const poller = await this.beginStart(
      resourceGroupName,
      experimentName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Get a list of executions of an Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  private _listAllExecutions(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListAllExecutionsOptionalParams,
  ): Promise<ExperimentsListAllExecutionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, options },
      listAllExecutionsOperationSpec,
    );
  }

  /**
   * Get an execution of an Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param executionId GUID that represents a Experiment execution detail.
   * @param options The options parameters.
   */
  getExecution(
    resourceGroupName: string,
    experimentName: string,
    executionId: string,
    options?: ExperimentsGetExecutionOptionalParams,
  ): Promise<ExperimentsGetExecutionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, executionId, options },
      getExecutionOperationSpec,
    );
  }

  /**
   * Execution details of an experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param executionId GUID that represents a Experiment execution detail.
   * @param options The options parameters.
   */
  executionDetails(
    resourceGroupName: string,
    experimentName: string,
    executionId: string,
    options?: ExperimentsExecutionDetailsOptionalParams,
  ): Promise<ExperimentsExecutionDetailsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, executionId, options },
      executionDetailsOperationSpec,
    );
  }

  /**
   * ListAllNext
   * @param nextLink The nextLink from the previous successful call to the ListAll method.
   * @param options The options parameters.
   */
  private _listAllNext(
    nextLink: string,
    options?: ExperimentsListAllNextOptionalParams,
  ): Promise<ExperimentsListAllNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAllNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName String that represents an Azure resource group.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ExperimentsListNextOptionalParams,
  ): Promise<ExperimentsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListAllExecutionsNext
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param nextLink The nextLink from the previous successful call to the ListAllExecutions method.
   * @param options The options parameters.
   */
  private _listAllExecutionsNext(
    resourceGroupName: string,
    experimentName: string,
    nextLink: string,
    options?: ExperimentsListAllExecutionsNextOptionalParams,
  ): Promise<ExperimentsListAllExecutionsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, nextLink, options },
      listAllExecutionsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAllOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/experiments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.continuationToken,
    Parameters.running,
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.continuationToken,
    Parameters.running,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Experiment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Experiment,
    },
    201: {
      bodyMapper: Mappers.Experiment,
    },
    202: {
      bodyMapper: Mappers.Experiment,
    },
    204: {
      bodyMapper: Mappers.Experiment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.experiment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Experiment,
    },
    201: {
      bodyMapper: Mappers.Experiment,
    },
    202: {
      bodyMapper: Mappers.Experiment,
    },
    204: {
      bodyMapper: Mappers.Experiment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.experiment1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const startOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAllExecutionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getExecutionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions/{executionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecution,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
    Parameters.executionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const executionDetailsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions/{executionId}/getExecutionDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionDetails,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
    Parameters.executionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAllNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAllExecutionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.experimentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
