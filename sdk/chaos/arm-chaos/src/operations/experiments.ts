/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Experiments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ChaosManagementClient } from "../chaosManagementClient";
import {
  Experiment,
  ExperimentsListAllNextOptionalParams,
  ExperimentsListAllOptionalParams,
  ExperimentsListAllResponse,
  ExperimentsListNextOptionalParams,
  ExperimentsListOptionalParams,
  ExperimentsListResponse,
  ExperimentStatus,
  ExperimentsListAllStatusesNextOptionalParams,
  ExperimentsListAllStatusesOptionalParams,
  ExperimentsListAllStatusesResponse,
  ExperimentExecutionDetails,
  ExperimentsListExecutionDetailsNextOptionalParams,
  ExperimentsListExecutionDetailsOptionalParams,
  ExperimentsListExecutionDetailsResponse,
  ExperimentsDeleteOptionalParams,
  ExperimentsGetOptionalParams,
  ExperimentsGetResponse,
  ExperimentsCreateOrUpdateOptionalParams,
  ExperimentsCreateOrUpdateResponse,
  ExperimentsCancelOptionalParams,
  ExperimentsCancelResponse,
  ExperimentsStartOptionalParams,
  ExperimentsStartResponse,
  ExperimentsGetStatusOptionalParams,
  ExperimentsGetStatusResponse,
  ExperimentsGetExecutionDetailsOptionalParams,
  ExperimentsGetExecutionDetailsResponse,
  ExperimentsListAllNextResponse,
  ExperimentsListNextResponse,
  ExperimentsListAllStatusesNextResponse,
  ExperimentsListExecutionDetailsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Experiments operations. */
export class ExperimentsImpl implements Experiments {
  private readonly client: ChaosManagementClient;

  /**
   * Initialize a new instance of the class Experiments class.
   * @param client Reference to the service client
   */
  constructor(client: ChaosManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of Experiment resources in a subscription.
   * @param options The options parameters.
   */
  public listAll(
    options?: ExperimentsListAllOptionalParams
  ): PagedAsyncIterableIterator<Experiment> {
    const iter = this.listAllPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAllPagingPage(options, settings);
      }
    };
  }

  private async *listAllPagingPage(
    options?: ExperimentsListAllOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Experiment[]> {
    let result: ExperimentsListAllResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAll(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAllNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAllPagingAll(
    options?: ExperimentsListAllOptionalParams
  ): AsyncIterableIterator<Experiment> {
    for await (const page of this.listAllPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of Experiment resources in a resource group.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: ExperimentsListOptionalParams
  ): PagedAsyncIterableIterator<Experiment> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: ExperimentsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Experiment[]> {
    let result: ExperimentsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: ExperimentsListOptionalParams
  ): AsyncIterableIterator<Experiment> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Get a list of statuses of a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  public listAllStatuses(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListAllStatusesOptionalParams
  ): PagedAsyncIterableIterator<ExperimentStatus> {
    const iter = this.listAllStatusesPagingAll(
      resourceGroupName,
      experimentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAllStatusesPagingPage(
          resourceGroupName,
          experimentName,
          options,
          settings
        );
      }
    };
  }

  private async *listAllStatusesPagingPage(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListAllStatusesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ExperimentStatus[]> {
    let result: ExperimentsListAllStatusesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAllStatuses(
        resourceGroupName,
        experimentName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAllStatusesNext(
        resourceGroupName,
        experimentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAllStatusesPagingAll(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListAllStatusesOptionalParams
  ): AsyncIterableIterator<ExperimentStatus> {
    for await (const page of this.listAllStatusesPagingPage(
      resourceGroupName,
      experimentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of execution details of a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  public listExecutionDetails(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListExecutionDetailsOptionalParams
  ): PagedAsyncIterableIterator<ExperimentExecutionDetails> {
    const iter = this.listExecutionDetailsPagingAll(
      resourceGroupName,
      experimentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listExecutionDetailsPagingPage(
          resourceGroupName,
          experimentName,
          options,
          settings
        );
      }
    };
  }

  private async *listExecutionDetailsPagingPage(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListExecutionDetailsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ExperimentExecutionDetails[]> {
    let result: ExperimentsListExecutionDetailsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listExecutionDetails(
        resourceGroupName,
        experimentName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listExecutionDetailsNext(
        resourceGroupName,
        experimentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listExecutionDetailsPagingAll(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListExecutionDetailsOptionalParams
  ): AsyncIterableIterator<ExperimentExecutionDetails> {
    for await (const page of this.listExecutionDetailsPagingPage(
      resourceGroupName,
      experimentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of Experiment resources in a subscription.
   * @param options The options parameters.
   */
  private _listAll(
    options?: ExperimentsListAllOptionalParams
  ): Promise<ExperimentsListAllResponse> {
    return this.client.sendOperationRequest({ options }, listAllOperationSpec);
  }

  /**
   * Get a list of Experiment resources in a resource group.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: ExperimentsListOptionalParams
  ): Promise<ExperimentsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * Delete a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, options },
      deleteOperationSpec
    );
  }

  /**
   * Get a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsGetOptionalParams
  ): Promise<ExperimentsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param experiment Experiment resource to be created or updated.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    experimentName: string,
    experiment: Experiment,
    options?: ExperimentsCreateOrUpdateOptionalParams
  ): Promise<ExperimentsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, experiment, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Cancel a running Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  cancel(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsCancelOptionalParams
  ): Promise<ExperimentsCancelResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, options },
      cancelOperationSpec
    );
  }

  /**
   * Start a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  start(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsStartOptionalParams
  ): Promise<ExperimentsStartResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, options },
      startOperationSpec
    );
  }

  /**
   * Get a list of statuses of a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  private _listAllStatuses(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListAllStatusesOptionalParams
  ): Promise<ExperimentsListAllStatusesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, options },
      listAllStatusesOperationSpec
    );
  }

  /**
   * Get a status of a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param statusId GUID that represents a Experiment status.
   * @param options The options parameters.
   */
  getStatus(
    resourceGroupName: string,
    experimentName: string,
    statusId: string,
    options?: ExperimentsGetStatusOptionalParams
  ): Promise<ExperimentsGetStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, statusId, options },
      getStatusOperationSpec
    );
  }

  /**
   * Get a list of execution details of a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  private _listExecutionDetails(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentsListExecutionDetailsOptionalParams
  ): Promise<ExperimentsListExecutionDetailsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, options },
      listExecutionDetailsOperationSpec
    );
  }

  /**
   * Get an execution detail of a Experiment resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param executionDetailsId GUID that represents a Experiment execution detail.
   * @param options The options parameters.
   */
  getExecutionDetails(
    resourceGroupName: string,
    experimentName: string,
    executionDetailsId: string,
    options?: ExperimentsGetExecutionDetailsOptionalParams
  ): Promise<ExperimentsGetExecutionDetailsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, executionDetailsId, options },
      getExecutionDetailsOperationSpec
    );
  }

  /**
   * ListAllNext
   * @param nextLink The nextLink from the previous successful call to the ListAll method.
   * @param options The options parameters.
   */
  private _listAllNext(
    nextLink: string,
    options?: ExperimentsListAllNextOptionalParams
  ): Promise<ExperimentsListAllNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAllNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName String that represents an Azure resource group.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ExperimentsListNextOptionalParams
  ): Promise<ExperimentsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListAllStatusesNext
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param nextLink The nextLink from the previous successful call to the ListAllStatuses method.
   * @param options The options parameters.
   */
  private _listAllStatusesNext(
    resourceGroupName: string,
    experimentName: string,
    nextLink: string,
    options?: ExperimentsListAllStatusesNextOptionalParams
  ): Promise<ExperimentsListAllStatusesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, nextLink, options },
      listAllStatusesNextOperationSpec
    );
  }

  /**
   * ListExecutionDetailsNext
   * @param resourceGroupName String that represents an Azure resource group.
   * @param experimentName String that represents a Experiment resource name.
   * @param nextLink The nextLink from the previous successful call to the ListExecutionDetails method.
   * @param options The options parameters.
   */
  private _listExecutionDetailsNext(
    resourceGroupName: string,
    experimentName: string,
    nextLink: string,
    options?: ExperimentsListExecutionDetailsNextOptionalParams
  ): Promise<ExperimentsListExecutionDetailsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, nextLink, options },
      listExecutionDetailsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAllOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/experiments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.continuationToken,
    Parameters.running
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.continuationToken,
    Parameters.running
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Experiment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Experiment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.experiment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/cancel",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.ExperimentCancelOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const startOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/start",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.ExperimentStartOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAllStatusesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/statuses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentStatusListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStatusOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/statuses/{statusId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
    Parameters.statusId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listExecutionDetailsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executionDetails",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getExecutionDetailsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executionDetails/{executionDetailsId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
    Parameters.executionDetailsId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAllNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAllStatusesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentStatusListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listExecutionDetailsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
