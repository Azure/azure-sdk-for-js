/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
const { ChaosManagementClient } = require("@azure/arm-chaos");
const { DefaultAzureCredential } = require("@azure/identity");
require("dotenv").config();

/**
 * This sample demonstrates how to Create or update a Experiment resource.
 *
 * @summary Create or update a Experiment resource.
 * x-ms-original-file: specification/chaos/resource-manager/Microsoft.Chaos/preview/2022-10-01-preview/examples/CreateOrUpdateAExperiment.json
 */
async function createOrUpdateAExperimentInAResourceGroup() {
  const subscriptionId =
    process.env["CHAOS_SUBSCRIPTION_ID"] || "6b052e15-03d3-4f17-b2e1-be7f07588291";
  const resourceGroupName = process.env["CHAOS_RESOURCE_GROUP"] || "exampleRG";
  const experimentName = "exampleExperiment";
  const experiment = {
    identity: { type: "SystemAssigned" },
    location: "eastus2euap",
    selectors: [
      {
        type: "List",
        id: "selector1",
        targets: [
          {
            type: "ChaosTarget",
            id: "/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-VirtualMachine",
          },
        ],
      },
    ],
    steps: [
      {
        name: "step1",
        branches: [
          {
            name: "branch1",
            actions: [
              {
                name: "urn:csci:microsoft:virtualMachine:shutdown/1.0",
                type: "continuous",
                duration: "PT10M",
                parameters: [{ key: "abruptShutdown", value: "false" }],
                selectorId: "selector1",
              },
            ],
          },
        ],
      },
    ],
  };
  const credential = new DefaultAzureCredential();
  const client = new ChaosManagementClient(credential, subscriptionId);
  const result = await client.experiments.createOrUpdate(
    resourceGroupName,
    experimentName,
    experiment
  );
  console.log(result);
}

async function main() {
  createOrUpdateAExperimentInAResourceGroup();
}

main().catch(console.error);
