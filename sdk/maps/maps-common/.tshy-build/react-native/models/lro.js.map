{"version":3,"file":"lro.js","sourceRoot":"","sources":["../../../src/models/lro.ts"],"names":[],"mappings":"AAUA;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc,CAClC,WAAsD,EACtD,OAAiB;IAEjB,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;IACrC,IAAI,WAAkC,CAAC;IACvC,MAAM,YAAY,GAAG,MAAM,WAAW,iCACjC,OAAO,KACV,UAAU,EAAE,CAAC,QAAQ,EAAE,iBAAiB,EAAE,EAAE;YAC1C,WAAW,GAAG,QAAQ,CAAC;YACvB,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAC5C,CAAC,IACD,CAAC;IACH,OAAO;QACL,YAAY;QACZ,WAAW,EAAE;YACX,UAAU,EAAE,WAAY,CAAC,MAAM;YAC/B,OAAO,EAAE,WAAY,CAAC,OAAO,CAAC,MAAM,EAAE;YACtC,IAAI,EAAE,WAAY,CAAC,UAAU;SAC9B;KACF,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,qBAAqB,CAGnC,QAID;IACC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;IAC3C,OAAO,KAAK,EAAE,IAAY,EAAE,EAAE,CAC5B,cAAc,CACZ,CAAC,YAAY,EAAE,EAAE,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,kBAAI,IAAI,IAAK,IAAI,EAAG,EAC3F,OAAO,CACR,CAAC;AACN,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ServiceClient } from \"@azure/core-client\";\nimport {\n  type FullOperationResponse,\n  type OperationOptions,\n  type OperationSpec,\n} from \"@azure/core-client\";\nimport type { LroResponse } from \"@azure/core-lro\";\n\n/**\n * Extract several fields of the response to the rawResponse\n *\n * @param getResponse - A async function that actually call the backend API.\n * @param options - The options for the getResponse callback\n * @returns A promise for the API call.\n */\nexport async function getRawResponse<TOptions extends OperationOptions, TResponse>(\n  getResponse: (options: TOptions) => Promise<TResponse>,\n  options: TOptions,\n): Promise<LroResponse<TResponse>> {\n  const { onResponse } = options || {};\n  let rawResponse: FullOperationResponse;\n  const flatResponse = await getResponse({\n    ...options,\n    onResponse: (response, flatResponseParam) => {\n      rawResponse = response;\n      onResponse?.(response, flatResponseParam);\n    },\n  });\n  return {\n    flatResponse,\n    rawResponse: {\n      statusCode: rawResponse!.status,\n      headers: rawResponse!.headers.toJSON(),\n      body: rawResponse!.parsedBody,\n    },\n  };\n}\n\n/**\n * Helper function to create a method that can be passed to sendPollRequest in createHttpPoller.\n *\n * @param settings - The settings of the poll request, including client, options and the spec\n * @returns A callback that accept the path as input and return the promise of Lro response.\n */\nexport function createSendPollRequest<\n  TOptions extends OperationOptions,\n  TClient extends ServiceClient,\n>(settings: {\n  client: TClient;\n  options: TOptions;\n  spec: OperationSpec;\n}): (path: string) => Promise<LroResponse<unknown>> {\n  const { client, options, spec } = settings;\n  return async (path: string) =>\n    getRawResponse(\n      (paramOptions) => client.sendOperationRequest({ options: paramOptions }, { path, ...spec }),\n      options,\n    );\n}\n"]}