/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Search } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClientContext } from "../generatedClientContext";
import {
  JsonFormat,
  SearchListPolygonsOptionalParams,
  SearchListPolygonsResponse,
  ResponseFormat,
  SearchFuzzySearchOptionalParams,
  SearchFuzzySearchResponse,
  SearchSearchPointOfInterestOptionalParams,
  SearchSearchPointOfInterestResponse,
  SearchSearchNearbyPointOfInterestOptionalParams,
  SearchSearchNearbyPointOfInterestResponse,
  SearchSearchPointOfInterestCategoryOptionalParams,
  SearchSearchPointOfInterestCategoryResponse,
  SearchGetPointOfInterestCategoryTreeOptionalParams,
  SearchGetPointOfInterestCategoryTreeResponse,
  SearchSearchAddressOptionalParams,
  SearchSearchAddressResponse,
  SearchReverseSearchAddressOptionalParams,
  SearchReverseSearchAddressResponse,
  SearchReverseSearchCrossStreetAddressOptionalParams,
  SearchReverseSearchCrossStreetAddressResponse,
  SearchSearchStructuredAddressOptionalParams,
  SearchSearchStructuredAddressResponse,
  SearchInsideGeometryRequest,
  SearchSearchInsideGeometryOptionalParams,
  SearchSearchInsideGeometryResponse,
  SearchAlongRouteRequest,
  SearchSearchAlongRouteOptionalParams,
  SearchSearchAlongRouteResponse,
  BatchRequest,
  SearchFuzzySearchBatchSyncOptionalParams,
  SearchFuzzySearchBatchSyncResponse,
  SearchFuzzySearchBatchOptionalParams,
  SearchFuzzySearchBatchResponse,
  SearchGetFuzzySearchBatchOptionalParams,
  SearchGetFuzzySearchBatchResponse,
  SearchSearchAddressBatchSyncOptionalParams,
  SearchSearchAddressBatchSyncResponse,
  SearchSearchAddressBatchOptionalParams,
  SearchSearchAddressBatchResponse,
  SearchGetSearchAddressBatchOptionalParams,
  SearchGetSearchAddressBatchResponse,
  SearchReverseSearchAddressBatchSyncOptionalParams,
  SearchReverseSearchAddressBatchSyncResponse,
  SearchReverseSearchAddressBatchOptionalParams,
  SearchReverseSearchAddressBatchResponse,
  SearchGetReverseSearchAddressBatchOptionalParams,
  SearchGetReverseSearchAddressBatchResponse
} from "../models";

/** Class containing Search operations. */
export class SearchImpl implements Search {
  private readonly client: GeneratedClientContext;

  /**
   * Initialize a new instance of the class Search class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClientContext) {
    this.client = client;
  }

  /**
   * **Get Polygon**
   *
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Get Polygon service allows you to request the geometry data such as a city or country  outline
   * for a set of entities, previously retrieved from an Online Search request in GeoJSON format. The
   * geometry ID is returned in the sourceGeometry object under "geometry" and "id" in either a Search
   * Address or Search Fuzzy call.
   *
   * Please note that any geometry ID retrieved from an Online Search endpoint has a limited lifetime.
   * The client  should not store geometry IDs in persistent storage for later referral, as the stability
   * of these identifiers is  not guaranteed for a long period of time. It is expected that a request to
   * the Polygon method is made within a  few minutes of the request to the Online Search method that
   * provided the ID. The service allows for batch  requests up to 20 identifiers.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param geometryIds Comma separated list of geometry UUIDs, previously retrieved from an Online
   *                    Search request.
   * @param options The options parameters.
   */
  listPolygons(
    format: JsonFormat,
    geometryIds: string[],
    options?: SearchListPolygonsOptionalParams
  ): Promise<SearchListPolygonsResponse> {
    return this.client.sendOperationRequest(
      { format, geometryIds, options },
      listPolygonsOperationSpec
    );
  }

  /**
   * **Free Form Search**
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The basic default API is Free Form Search which handles the most fuzzy of inputs handling any
   * combination of address or POI tokens. This search API is the canonical 'single line search'. The
   * Free Form Search API is a seamless combination of POI search and geocoding. The API can also be
   * weighted with a contextual position (lat./lon. pair), or fully constrained by a coordinate and
   * radius, or it can be executed more generally without any geo biasing anchor point.<br><br>We
   * strongly advise you to use the 'countrySet' parameter to specify only the countries for which your
   * application needs coverage, as the default behavior will be to search the entire world, potentially
   * returning unnecessary results.<br><br> E.g.: `countrySet`=US,FR <br><br>Please see [Search
   * Coverage](https://docs.microsoft.com/azure/location-based-services/geocoding-coverage) for a
   * complete list of all the supported countries.<br><br>Most Search queries default to
   * `maxFuzzyLevel`=2 to gain performance and also reduce unusual results. This new default can be
   * overridden as needed per request by passing in the query param `maxFuzzyLevel`=3 or 4.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param query The applicable query string (e.g., "seattle", "pizza"). Can _also_ be specified as a
   *              comma separated string composed by latitude followed by longitude (e.g., "47.641268, -122.125679").
   *              Must be properly URL encoded.
   * @param options The options parameters.
   */
  fuzzySearch(
    format: ResponseFormat,
    query: string,
    options?: SearchFuzzySearchOptionalParams
  ): Promise<SearchFuzzySearchResponse> {
    return this.client.sendOperationRequest(
      { format, query, options },
      fuzzySearchOperationSpec
    );
  }

  /**
   * **Get POI by Name**
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * Points of Interest (POI) Search allows you to request POI results by name.  Search supports
   * additional query parameters such as language and filtering results by area of interest driven by
   * country or bounding box.  Endpoint will return only POI results matching the query string. Response
   * includes POI details such as address, coordinate location and category.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param query The POI name to search for (e.g., "statue of liberty", "starbucks"), must be properly
   *              URL encoded.
   * @param options The options parameters.
   */
  searchPointOfInterest(
    format: ResponseFormat,
    query: string,
    options?: SearchSearchPointOfInterestOptionalParams
  ): Promise<SearchSearchPointOfInterestResponse> {
    return this.client.sendOperationRequest(
      { format, query, options },
      searchPointOfInterestOperationSpec
    );
  }

  /**
   * **Nearby Search**
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * If you have a use case for only retrieving POI results around a specific location, the nearby search
   * method may be the right choice. This endpoint will only return POI results, and does not take in a
   * search query parameter.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param lat Latitude where results should be biased. E.g. 37.337.
   * @param lon Longitude where results should be biased. E.g. -121.89.
   * @param options The options parameters.
   */
  searchNearbyPointOfInterest(
    format: ResponseFormat,
    lat: number,
    lon: number,
    options?: SearchSearchNearbyPointOfInterestOptionalParams
  ): Promise<SearchSearchNearbyPointOfInterestResponse> {
    return this.client.sendOperationRequest(
      { format, lat, lon, options },
      searchNearbyPointOfInterestOperationSpec
    );
  }

  /**
   * **Get POI by Category**
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * Points of Interest (POI) Category Search allows you to request POI results from given category.
   * Search allows to query POIs from one category at a time.  Endpoint will only return POI results
   * which are categorized as specified.  Response includes POI details such as address, coordinate
   * location and classification.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param query The POI category to search for (e.g., "AIRPORT", "RESTAURANT"), must be properly URL
   *              encoded. Supported main categories can be requested by calling [Get Search POI Category Tree
   *              API](https://aka.ms/AzureMapsPOICategoryTree). List of available categories can also be found
   *              [here](https://docs.microsoft.com/azure/azure-maps/supported-search-categories). We recommend to use
   *              POI Search Category Tree API to request the supported categories.
   * @param options The options parameters.
   */
  searchPointOfInterestCategory(
    format: ResponseFormat,
    query: string,
    options?: SearchSearchPointOfInterestCategoryOptionalParams
  ): Promise<SearchSearchPointOfInterestCategoryResponse> {
    return this.client.sendOperationRequest(
      { format, query, options },
      searchPointOfInterestCategoryOperationSpec
    );
  }

  /**
   * **Get POI Category Tree**
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * POI Category API provides a full list of supported Points of Interest (POI) categories and
   * subcategories together with their translations and synonyms. The returned content can be used to
   * provide more meaningful results through other Search Service APIs, like [Get Search
   * POI](https://docs.microsoft.com/rest/api/maps/search/getsearchpoi).
   * @param format Desired format of the response. Only `json` format is supported.
   * @param options The options parameters.
   */
  getPointOfInterestCategoryTree(
    format: JsonFormat,
    options?: SearchGetPointOfInterestCategoryTreeOptionalParams
  ): Promise<SearchGetPointOfInterestCategoryTreeResponse> {
    return this.client.sendOperationRequest(
      { format, options },
      getPointOfInterestCategoryTreeOperationSpec
    );
  }

  /**
   * **Address Geocoding**
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * In many cases, the complete search service might be too much, for instance if you are only
   * interested in traditional geocoding. Search can also be accessed for address look up exclusively.
   * The geocoding is performed by hitting the geocode endpoint with just the address or partial address
   * in question. The geocoding search index will be queried for everything above the street level data.
   * No POIs will be returned. Note that the geocoder is very tolerant of typos and incomplete addresses.
   * It will also handle everything from exact street addresses or street or intersections as well as
   * higher level geographies such as city centers, counties, states etc.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param query The address to search for (e.g., "1 Microsoft way, Redmond, WA"), must be properly URL
   *              encoded.
   * @param options The options parameters.
   */
  searchAddress(
    format: ResponseFormat,
    query: string,
    options?: SearchSearchAddressOptionalParams
  ): Promise<SearchSearchAddressResponse> {
    return this.client.sendOperationRequest(
      { format, query, options },
      searchAddressOperationSpec
    );
  }

  /**
   * **Reverse Geocode to an Address**
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * There may be times when you need to translate a  coordinate (example: 37.786505, -122.3862) into a
   * human understandable street address. Most often  this is needed in tracking applications where you
   * receive a GPS feed from the device or asset and  wish to know what address where the coordinate is
   * located. This endpoint will return address  information for a given coordinate.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param query The applicable query specified as a comma separated string composed by latitude
   *              followed by longitude e.g. "47.641268,-122.125679".
   * @param options The options parameters.
   */
  reverseSearchAddress(
    format: ResponseFormat,
    query: number[],
    options?: SearchReverseSearchAddressOptionalParams
  ): Promise<SearchReverseSearchAddressResponse> {
    return this.client.sendOperationRequest(
      { format, query, options },
      reverseSearchAddressOperationSpec
    );
  }

  /**
   * **Reverse Geocode to a Cross Street**
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * There may be times when you need to translate a  coordinate (example: 37.786505, -122.3862) into a
   * human understandable cross street. Most often this  is needed in tracking applications where you
   * receive a GPS feed from the device or asset and wish to know what address where the coordinate is
   * located.
   * This endpoint will return cross street information  for a given coordinate.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param query The applicable query specified as a comma separated string composed by latitude
   *              followed by longitude e.g. "47.641268,-122.125679".
   * @param options The options parameters.
   */
  reverseSearchCrossStreetAddress(
    format: ResponseFormat,
    query: number[],
    options?: SearchReverseSearchCrossStreetAddressOptionalParams
  ): Promise<SearchReverseSearchCrossStreetAddressResponse> {
    return this.client.sendOperationRequest(
      { format, query, options },
      reverseSearchCrossStreetAddressOperationSpec
    );
  }

  /**
   * **Structured Address Geocoding**
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * Azure Address Geocoding can also be accessed for  structured address look up exclusively. The
   * geocoding search index will be queried for everything above the  street level data. No POIs will be
   * returned. Note that the geocoder is very tolerant of typos and incomplete  addresses. It will also
   * handle everything from exact  street addresses or street or intersections as well as higher level
   * geographies such as city centers,  counties, states etc.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param countryCode The 2 or 3 letter [ISO3166-1](https://www.iso.org/iso-3166-country-codes.html)
   *                    country code portion of an address. E.g. US.
   * @param options The options parameters.
   */
  searchStructuredAddress(
    format: ResponseFormat,
    countryCode: string,
    options?: SearchSearchStructuredAddressOptionalParams
  ): Promise<SearchSearchStructuredAddressResponse> {
    return this.client.sendOperationRequest(
      { format, countryCode, options },
      searchStructuredAddressOperationSpec
    );
  }

  /**
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Geometry endpoint allows you to perform a free form search inside a single geometry or
   * many of them. The search results that fall inside the geometry/geometries will be
   * returned.<br><br>To send the geometry you will use a `POST` request where the request body will
   * contain the `geometry` object represented as a `GeoJSON` type and the `Content-Type` header will be
   * set to `application/json`. The geographical features to be searched can be modeled as Polygon and/or
   * Circle geometries represented using any one of the following `GeoJSON` types:<ul><li>**GeoJSON
   * FeatureCollection** <br>The `geometry` can be represented as a `GeoJSON FeatureCollection` object.
   * This is the recommended option if the geometry contains both Polygons and Circles. The
   * `FeatureCollection` can contain a max of 50 `GeoJSON Feature` objects. Each `Feature` object should
   * represent either a Polygon or a Circle with the following conditions:<ul
   * style="list-style-type:none"><li>A `Feature` object for the Polygon geometry can have a max of 50
   * coordinates and it's properties must be empty.</li><li>A `Feature` object for the Circle geometry is
   * composed of a _center_ represented using a `GeoJSON Point` type and a _radius_ value (in meters)
   * which must be specified in the object's properties along with the _subType_ property whose value
   * should be 'Circle'.</li></ul><br> Please see the Examples section below for a sample
   * `FeatureCollection` representation.<br><br></li><li>**GeoJSON GeometryCollection**<br>The `geometry`
   * can be represented as a `GeoJSON GeometryCollection` object. This is the recommended option if the
   * geometry contains a list of Polygons only. The `GeometryCollection` can contain a max of 50 `GeoJSON
   * Polygon` objects. Each `Polygon` object can have a max of 50 coordinates. Please see the Examples
   * section below for a sample `GeometryCollection` representation.<br><br></li><li>**GeoJSON
   * Polygon**<br>The `geometry` can be represented as a `GeoJSON Polygon` object. This is the
   * recommended option if the geometry contains a single Polygon. The `Polygon` object can have a max of
   * 50 coordinates. Please see the Examples section below for a sample `Polygon`
   * representation.<br><br></li></ul>.<br><br>
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param query The POI name to search for (e.g., "statue of liberty", "starbucks", "pizza"). Must be
   *              properly URL encoded.
   * @param geometry This represents the geometry for one or more geographical features (parks, state
   *                 boundary etc.) to search in and should be a GeoJSON compliant type. Please refer to [RFC
   *                 7946](https://tools.ietf.org/html/rfc7946) for details.
   * @param options The options parameters.
   */
  searchInsideGeometry(
    format: ResponseFormat,
    query: string,
    geometry: SearchInsideGeometryRequest,
    options?: SearchSearchInsideGeometryOptionalParams
  ): Promise<SearchSearchInsideGeometryResponse> {
    return this.client.sendOperationRequest(
      { format, query, geometry, options },
      searchInsideGeometryOperationSpec
    );
  }

  /**
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Along Route endpoint allows you to perform a fuzzy search for POIs along a specified
   * route. This search is constrained by specifying the `maxDetourTime` limiting measure.<br><br>To send
   * the route-points you will use a `POST` request where the request body will contain the `route`
   * object represented as a `GeoJSON LineString` type and the `Content-Type` header will be set to
   * `application/json`. Each route-point in `route` is represented as a `GeoJSON Position` type i.e. an
   * array where the _longitude_ value is followed by the _latitude_ value and the _altitude_ value is
   * ignored. The `route` should contain at least 2 route-points.<br><br>It is possible that original
   * route will be altered, some of it's points may be skipped. If the route that passes through the
   * found point is faster than the original one, the `detourTime` value in the response is negative.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param query The POI name to search for (e.g., "statue of liberty", "starbucks", "pizza"). Must be
   *              properly URL encoded.
   * @param maxDetourTime Maximum detour time of the point of interest in seconds. Max value is 3600
   *                      seconds
   * @param route This represents the route to search along and should be a valid `GeoJSON LineString`
   *              type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details.
   * @param options The options parameters.
   */
  searchAlongRoute(
    format: ResponseFormat,
    query: string,
    maxDetourTime: number,
    route: SearchAlongRouteRequest,
    options?: SearchSearchAlongRouteOptionalParams
  ): Promise<SearchSearchAlongRouteResponse> {
    return this.client.sendOperationRequest(
      { format, query, maxDetourTime, route, options },
      searchAlongRouteOperationSpec
    );
  }

  /**
   * **Search Fuzzy Batch API**
   *
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Address Batch API sends batches of queries to [Search Fuzzy
   * API](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy) using just a single API call.
   * You can call Search Address Fuzzy Batch API to run either asynchronously (async) or synchronously
   * (sync). The async API allows caller to batch up to **10,000** queries and sync API up to **100**
   * queries.
   * ### Submit Synchronous Batch Request
   * The Synchronous API is recommended for lightweight batch requests. When the service receives a
   * request, it will respond as soon as the batch items are calculated and there will be no possibility
   * to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if
   * the request takes longer than 60 seconds. The number of batch items is limited to **100** for this
   * API.
   * ```
   * POST
   * https://atlas.microsoft.com/search/fuzzy/batch/sync/json?api-version=1.0&subscription-key={subscription-key}
   * ```
   * ### Submit Asynchronous Batch Request
   * The Asynchronous API is appropriate for processing big volumes of relatively complex search requests
   * - It allows the retrieval of results in a separate call (multiple downloads are possible).
   * - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
   * - The number of batch items is limited to **10,000** for this API.
   *
   * When you make a request by using async request, by default the service returns a 202 response code
   * along a redirect URL in the Location field of the response header. This URL should be checked
   * periodically until the response data or error information is available.
   * The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if
   * used after the expiration period.
   *
   * Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
   * operations:
   * 1. Client sends a Search Address Batch `POST` request to Azure Maps
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request has been accepted.
   *
   *     > HTTP `Error` - There was an error processing your Batch request. This could either be a `400
   * Bad Request` or any other `Error` status code.
   *
   * 3. If the batch request was accepted successfully, the `Location` header in the response contains
   * the URL to download the results of the batch request.
   *     This status URI looks like following:
   *
   * ```
   *     GET
   * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch
   * results.
   *
   * ### POST Body for Batch Request
   * To send the _search fuzzy_ queries you will use a `POST` request where the request body will contain
   * the `batchItems` array in `json` format and the `Content-Type` header will be set to
   * `application/json`. Here's a sample request body containing 5 _search fuzzy_ queries:
   *
   *
   * ```json
   * {
   *     "batchItems": [
   *         {"query": "?query=atm&lat=47.639769&lon=-122.128362&radius=5000&limit=5"},
   *         {"query": "?query=Statue Of Liberty&limit=2"},
   *         {"query": "?query=Starbucks&lat=47.639769&lon=-122.128362&radius=5000"},
   *         {"query": "?query=Space Needle"},
   *         {"query": "?query=pizza&limit=10"}
   *     ]
   * }
   * ```
   *
   * A _search fuzzy_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
   * api-version and subscription-key. It can accept any of the supported _search fuzzy_ [URI
   * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#uri-parameters). The
   * string values in the _search fuzzy_ query must be properly escaped (e.g. " character should be
   * escaped with \\ ) and it should also be properly URL-encoded.
   *
   *
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries,
   * and the batch should contain at least **1** query.
   *
   *
   * ### Download Asynchronous Batch Results
   * To download the async batch results you will issue a `GET` request to the batch download endpoint.
   * This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request
   * and looks like the following:
   *
   * ```
   * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * Here's the typical sequence of operations for downloading the batch results:
   * 1. Client sends a `GET` request using the _download URL_.
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try
   * again in some time.
   *
   *     > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch
   * results.
   *
   *
   *
   * ### Batch Response Model
   * The returned data content is similar for async and sync requests. When downloading the results of an
   * async batch request, if the batch has finished processing, the response body contains the batch
   * response. This batch response contains a `summary` component that indicates the `totalRequests` that
   * were part of the original batch request and `successfulRequests`i.e. queries which were executed
   * successfully. The batch response also includes a `batchItems` array which contains a response for
   * each and every query in the batch request. The `batchItems` will contain the results in the exact
   * same order the original queries were sent in the batch request. Each item in `batchItems` contains
   * `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following
   * types:
   *
   *   -
   * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#SearchAddressResponse)
   * - If the query completed successfully.
   *
   *   - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
   *
   *
   * Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
   *
   *
   * ```json
   * {
   *     "summary": {
   *         "successfulRequests": 2,
   *         "totalRequests": 3
   *     },
   *     "batchItems": [
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "atm"
   *                 },
   *                 "results": [
   *                     {
   *                         "type": "POI",
   *                         "poi": {
   *                             "name": "ATM at Wells Fargo"
   *                         },
   *                         "address": {
   *                             "country": "United States Of America",
   *                             "freeformAddress": "3240 157th Ave NE, Redmond, WA 98052"
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "statue of liberty"
   *                 },
   *                 "results": [
   *                     {
   *                         "type": "POI",
   *                         "poi": {
   *                             "name": "Statue of Liberty"
   *                         },
   *                         "address": {
   *                             "country": "United States Of America",
   *                             "freeformAddress": "New York, NY 10004"
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 400,
   *             "response":
   *             {
   *                 "error":
   *                 {
   *                     "code": "400 BadRequest",
   *                     "message": "Bad request: one or more parameters were incorrectly specified or
   * are mutually exclusive."
   *                 }
   *             }
   *         }
   *     ]
   * }
   * ```
   * @param format Desired format of the response. Only `json` format is supported.
   * @param batchRequest The list of search fuzzy queries/requests to process. The list can contain  a
   *                     max of 10,000 queries and must contain at least 1 query.
   * @param options The options parameters.
   */
  fuzzySearchBatchSync(
    format: JsonFormat,
    batchRequest: BatchRequest,
    options?: SearchFuzzySearchBatchSyncOptionalParams
  ): Promise<SearchFuzzySearchBatchSyncResponse> {
    return this.client.sendOperationRequest(
      { format, batchRequest, options },
      fuzzySearchBatchSyncOperationSpec
    );
  }

  /**
   * **Search Fuzzy Batch API**
   *
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Address Batch API sends batches of queries to [Search Fuzzy
   * API](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy) using just a single API call.
   * You can call Search Address Fuzzy Batch API to run either asynchronously (async) or synchronously
   * (sync). The async API allows caller to batch up to **10,000** queries and sync API up to **100**
   * queries.
   * ### Submit Synchronous Batch Request
   * The Synchronous API is recommended for lightweight batch requests. When the service receives a
   * request, it will respond as soon as the batch items are calculated and there will be no possibility
   * to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if
   * the request takes longer than 60 seconds. The number of batch items is limited to **100** for this
   * API.
   * ```
   * POST
   * https://atlas.microsoft.com/search/fuzzy/batch/sync/json?api-version=1.0&subscription-key={subscription-key}
   * ```
   * ### Submit Asynchronous Batch Request
   * The Asynchronous API is appropriate for processing big volumes of relatively complex search requests
   * - It allows the retrieval of results in a separate call (multiple downloads are possible).
   * - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
   * - The number of batch items is limited to **10,000** for this API.
   *
   * When you make a request by using async request, by default the service returns a 202 response code
   * along a redirect URL in the Location field of the response header. This URL should be checked
   * periodically until the response data or error information is available.
   * The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if
   * used after the expiration period.
   *
   * Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
   * operations:
   * 1. Client sends a Search Address Batch `POST` request to Azure Maps
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request has been accepted.
   *
   *     > HTTP `Error` - There was an error processing your Batch request. This could either be a `400
   * Bad Request` or any other `Error` status code.
   *
   * 3. If the batch request was accepted successfully, the `Location` header in the response contains
   * the URL to download the results of the batch request.
   *     This status URI looks like following:
   *
   * ```
   *     GET
   * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch
   * results.
   *
   * ### POST Body for Batch Request
   * To send the _search fuzzy_ queries you will use a `POST` request where the request body will contain
   * the `batchItems` array in `json` format and the `Content-Type` header will be set to
   * `application/json`. Here's a sample request body containing 5 _search fuzzy_ queries:
   *
   *
   * ```json
   * {
   *     "batchItems": [
   *         {"query": "?query=atm&lat=47.639769&lon=-122.128362&radius=5000&limit=5"},
   *         {"query": "?query=Statue Of Liberty&limit=2"},
   *         {"query": "?query=Starbucks&lat=47.639769&lon=-122.128362&radius=5000"},
   *         {"query": "?query=Space Needle"},
   *         {"query": "?query=pizza&limit=10"}
   *     ]
   * }
   * ```
   *
   * A _search fuzzy_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
   * api-version and subscription-key. It can accept any of the supported _search fuzzy_ [URI
   * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#uri-parameters). The
   * string values in the _search fuzzy_ query must be properly escaped (e.g. " character should be
   * escaped with \\ ) and it should also be properly URL-encoded.
   *
   *
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries,
   * and the batch should contain at least **1** query.
   *
   *
   * ### Download Asynchronous Batch Results
   * To download the async batch results you will issue a `GET` request to the batch download endpoint.
   * This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request
   * and looks like the following:
   *
   * ```
   * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * Here's the typical sequence of operations for downloading the batch results:
   * 1. Client sends a `GET` request using the _download URL_.
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try
   * again in some time.
   *
   *     > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch
   * results.
   *
   *
   *
   * ### Batch Response Model
   * The returned data content is similar for async and sync requests. When downloading the results of an
   * async batch request, if the batch has finished processing, the response body contains the batch
   * response. This batch response contains a `summary` component that indicates the `totalRequests` that
   * were part of the original batch request and `successfulRequests`i.e. queries which were executed
   * successfully. The batch response also includes a `batchItems` array which contains a response for
   * each and every query in the batch request. The `batchItems` will contain the results in the exact
   * same order the original queries were sent in the batch request. Each item in `batchItems` contains
   * `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following
   * types:
   *
   *   -
   * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#SearchAddressResponse)
   * - If the query completed successfully.
   *
   *   - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
   *
   *
   * Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
   *
   *
   * ```json
   * {
   *     "summary": {
   *         "successfulRequests": 2,
   *         "totalRequests": 3
   *     },
   *     "batchItems": [
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "atm"
   *                 },
   *                 "results": [
   *                     {
   *                         "type": "POI",
   *                         "poi": {
   *                             "name": "ATM at Wells Fargo"
   *                         },
   *                         "address": {
   *                             "country": "United States Of America",
   *                             "freeformAddress": "3240 157th Ave NE, Redmond, WA 98052"
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "statue of liberty"
   *                 },
   *                 "results": [
   *                     {
   *                         "type": "POI",
   *                         "poi": {
   *                             "name": "Statue of Liberty"
   *                         },
   *                         "address": {
   *                             "country": "United States Of America",
   *                             "freeformAddress": "New York, NY 10004"
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 400,
   *             "response":
   *             {
   *                 "error":
   *                 {
   *                     "code": "400 BadRequest",
   *                     "message": "Bad request: one or more parameters were incorrectly specified or
   * are mutually exclusive."
   *                 }
   *             }
   *         }
   *     ]
   * }
   * ```
   * @param format Desired format of the response. Only `json` format is supported.
   * @param batchRequest The list of search fuzzy queries/requests to process. The list can contain a max
   *                     of 10,000 queries and must contain at least 1 query.
   * @param options The options parameters.
   */
  fuzzySearchBatch(
    format: JsonFormat,
    batchRequest: BatchRequest,
    options?: SearchFuzzySearchBatchOptionalParams
  ): Promise<SearchFuzzySearchBatchResponse> {
    return this.client.sendOperationRequest(
      { format, batchRequest, options },
      fuzzySearchBatchOperationSpec
    );
  }

  /**
   * **Search Fuzzy Batch API**
   *
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Address Batch API sends batches of queries to [Search Fuzzy
   * API](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy) using just a single API call.
   * You can call Search Address Fuzzy Batch API to run either asynchronously (async) or synchronously
   * (sync). The async API allows caller to batch up to **10,000** queries and sync API up to **100**
   * queries.
   * ### Submit Synchronous Batch Request
   * The Synchronous API is recommended for lightweight batch requests. When the service receives a
   * request, it will respond as soon as the batch items are calculated and there will be no possibility
   * to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if
   * the request takes longer than 60 seconds. The number of batch items is limited to **100** for this
   * API.
   * ```
   * POST
   * https://atlas.microsoft.com/search/fuzzy/batch/sync/json?api-version=1.0&subscription-key={subscription-key}
   * ```
   * ### Submit Asynchronous Batch Request
   * The Asynchronous API is appropriate for processing big volumes of relatively complex search requests
   * - It allows the retrieval of results in a separate call (multiple downloads are possible).
   * - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
   * - The number of batch items is limited to **10,000** for this API.
   *
   * When you make a request by using async request, by default the service returns a 202 response code
   * along a redirect URL in the Location field of the response header. This URL should be checked
   * periodically until the response data or error information is available.
   * The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if
   * used after the expiration period.
   *
   * Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
   * operations:
   * 1. Client sends a Search Address Batch `POST` request to Azure Maps
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request has been accepted.
   *
   *     > HTTP `Error` - There was an error processing your Batch request. This could either be a `400
   * Bad Request` or any other `Error` status code.
   *
   * 3. If the batch request was accepted successfully, the `Location` header in the response contains
   * the URL to download the results of the batch request.
   *     This status URI looks like following:
   *
   * ```
   *     GET
   * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch
   * results.
   *
   * ### POST Body for Batch Request
   * To send the _search fuzzy_ queries you will use a `POST` request where the request body will contain
   * the `batchItems` array in `json` format and the `Content-Type` header will be set to
   * `application/json`. Here's a sample request body containing 5 _search fuzzy_ queries:
   *
   *
   * ```json
   * {
   *     "batchItems": [
   *         {"query": "?query=atm&lat=47.639769&lon=-122.128362&radius=5000&limit=5"},
   *         {"query": "?query=Statue Of Liberty&limit=2"},
   *         {"query": "?query=Starbucks&lat=47.639769&lon=-122.128362&radius=5000"},
   *         {"query": "?query=Space Needle"},
   *         {"query": "?query=pizza&limit=10"}
   *     ]
   * }
   * ```
   *
   * A _search fuzzy_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
   * api-version and subscription-key. It can accept any of the supported _search fuzzy_ [URI
   * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#uri-parameters). The
   * string values in the _search fuzzy_ query must be properly escaped (e.g. " character should be
   * escaped with \\ ) and it should also be properly URL-encoded.
   *
   *
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries,
   * and the batch should contain at least **1** query.
   *
   *
   * ### Download Asynchronous Batch Results
   * To download the async batch results you will issue a `GET` request to the batch download endpoint.
   * This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request
   * and looks like the following:
   *
   * ```
   * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * Here's the typical sequence of operations for downloading the batch results:
   * 1. Client sends a `GET` request using the _download URL_.
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try
   * again in some time.
   *
   *     > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch
   * results.
   *
   *
   *
   * ### Batch Response Model
   * The returned data content is similar for async and sync requests. When downloading the results of an
   * async batch request, if the batch has finished processing, the response body contains the batch
   * response. This batch response contains a `summary` component that indicates the `totalRequests` that
   * were part of the original batch request and `successfulRequests`i.e. queries which were executed
   * successfully. The batch response also includes a `batchItems` array which contains a response for
   * each and every query in the batch request. The `batchItems` will contain the results in the exact
   * same order the original queries were sent in the batch request. Each item in `batchItems` contains
   * `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following
   * types:
   *
   *   -
   * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#SearchAddressResponse)
   * - If the query completed successfully.
   *
   *   - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
   *
   *
   * Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
   *
   *
   * ```json
   * {
   *     "summary": {
   *         "successfulRequests": 2,
   *         "totalRequests": 3
   *     },
   *     "batchItems": [
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "atm"
   *                 },
   *                 "results": [
   *                     {
   *                         "type": "POI",
   *                         "poi": {
   *                             "name": "ATM at Wells Fargo"
   *                         },
   *                         "address": {
   *                             "country": "United States Of America",
   *                             "freeformAddress": "3240 157th Ave NE, Redmond, WA 98052"
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "statue of liberty"
   *                 },
   *                 "results": [
   *                     {
   *                         "type": "POI",
   *                         "poi": {
   *                             "name": "Statue of Liberty"
   *                         },
   *                         "address": {
   *                             "country": "United States Of America",
   *                             "freeformAddress": "New York, NY 10004"
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 400,
   *             "response":
   *             {
   *                 "error":
   *                 {
   *                     "code": "400 BadRequest",
   *                     "message": "Bad request: one or more parameters were incorrectly specified or
   * are mutually exclusive."
   *                 }
   *             }
   *         }
   *     ]
   * }
   * ```
   * @param batchId Batch id for querying the operation.
   * @param options The options parameters.
   */
  getFuzzySearchBatch(
    batchId: string,
    options?: SearchGetFuzzySearchBatchOptionalParams
  ): Promise<SearchGetFuzzySearchBatchResponse> {
    return this.client.sendOperationRequest(
      { batchId, options },
      getFuzzySearchBatchOperationSpec
    );
  }

  /**
   * **Search Address Batch API**
   *
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Address Batch API sends batches of queries to [Search Address
   * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress) using just a single API call.
   * You can call Search Address Batch API to run either asynchronously (async) or synchronously (sync).
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries.
   * ### Submit Synchronous Batch Request
   * The Synchronous API is recommended for lightweight batch requests. When the service receives a
   * request, it will respond as soon as the batch items are calculated and there will be no possibility
   * to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if
   * the request takes longer than 60 seconds. The number of batch items is limited to **100** for this
   * API.
   * ```
   * POST
   * https://atlas.microsoft.com/search/address/batch/sync/json?api-version=1.0&subscription-key={subscription-key}
   * ```
   * ### Submit Asynchronous Batch Request
   * The Asynchronous API is appropriate for processing big volumes of relatively complex search requests
   * - It allows the retrieval of results in a separate call (multiple downloads are possible).
   * - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
   * - The number of batch items is limited to **10,000** for this API.
   *
   * When you make a request by using async request, by default the service returns a 202 response code
   * along a redirect URL in the Location field of the response header. This URL should be checked
   * periodically until the response data or error information is available.
   * The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if
   * used after the expiration period.
   *
   * Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
   * operations:
   * 1. Client sends a Search Address Batch `POST` request to Azure Maps
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request has been accepted.
   *
   *     > HTTP `Error` - There was an error processing your Batch request. This could either be a `400
   * Bad Request` or any other `Error` status code.
   *
   * 3. If the batch request was accepted successfully, the `Location` header in the response contains
   * the URL to download the results of the batch request.
   *     This status URI looks like following:
   *
   * ```
   *     GET
   * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch
   * results.
   *
   * ### POST Body for Batch Request
   * To send the _search address_ queries you will use a `POST` request where the request body will
   * contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
   * `application/json`. Here's a sample request body containing 5 _search address_ queries:
   *
   *
   * ```json
   * {
   *     "batchItems": [
   *         {"query": "?query=400 Broad St, Seattle, WA 98109&limit=3"},
   *         {"query": "?query=One, Microsoft Way, Redmond, WA 98052&limit=3"},
   *         {"query": "?query=350 5th Ave, New York, NY 10118&limit=1"},
   *         {"query": "?query=Pike Pl, Seattle, WA 98101&lat=47.610970&lon=-122.342469&radius=1000"},
   *         {"query": "?query=Champ de Mars, 5 Avenue Anatole France, 75007 Paris, France&limit=1"}
   *     ]
   * }
   * ```
   *
   * A _search address_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
   * api-version and subscription-key. It can accept any of the supported _search address_ [URI
   * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#uri-parameters). The
   * string values in the _search address_ query must be properly escaped (e.g. " character should be
   * escaped with \\ ) and it should also be properly URL-encoded.
   *
   *
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries,
   * and the batch should contain at least **1** query.
   *
   *
   * ### Download Asynchronous Batch Results
   * To download the async batch results you will issue a `GET` request to the batch download endpoint.
   * This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request
   * and looks like the following:
   *
   * ```
   * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * Here's the typical sequence of operations for downloading the batch results:
   * 1. Client sends a `GET` request using the _download URL_.
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try
   * again in some time.
   *
   *     > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch
   * results.
   *
   *
   *
   * ### Batch Response Model
   * The returned data content is similar for async and sync requests. When downloading the results of an
   * async batch request, if the batch has finished processing, the response body contains the batch
   * response. This batch response contains a `summary` component that indicates the `totalRequests` that
   * were part of the original batch request and `successfulRequests`i.e. queries which were executed
   * successfully. The batch response also includes a `batchItems` array which contains a response for
   * each and every query in the batch request. The `batchItems` will contain the results in the exact
   * same order the original queries were sent in the batch request. Each item in `batchItems` contains
   * `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following
   * types:
   *
   *   -
   * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#SearchAddressResponse)
   * - If the query completed successfully.
   *
   *   - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
   *
   *
   * Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
   *
   *
   * ```json
   * {
   *     "summary": {
   *         "successfulRequests": 2,
   *         "totalRequests": 3
   *     },
   *     "batchItems": [
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "one microsoft way redmond wa 98052"
   *                 },
   *                 "results": [
   *                     {
   *                         "position": {
   *                             "lat": 47.63989,
   *                             "lon": -122.12509
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "pike pl seattle wa 98101"
   *                 },
   *                 "results": [
   *                     {
   *                         "position": {
   *                             "lat": 47.60963,
   *                             "lon": -122.34215
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 400,
   *             "response":
   *             {
   *                 "error":
   *                 {
   *                     "code": "400 BadRequest",
   *                     "message": "Bad request: one or more parameters were incorrectly specified or
   * are mutually exclusive."
   *                 }
   *             }
   *         }
   *     ]
   * }
   * ```
   * @param format Desired format of the response. Only `json` format is supported.
   * @param batchRequest The list of address geocoding queries/requests to process. The list can contain
   *                     a max of 10,000 queries and must contain at least 1 query.
   * @param options The options parameters.
   */
  searchAddressBatchSync(
    format: JsonFormat,
    batchRequest: BatchRequest,
    options?: SearchSearchAddressBatchSyncOptionalParams
  ): Promise<SearchSearchAddressBatchSyncResponse> {
    return this.client.sendOperationRequest(
      { format, batchRequest, options },
      searchAddressBatchSyncOperationSpec
    );
  }

  /**
   * **Search Address Batch API**
   *
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Address Batch API sends batches of queries to [Search Address
   * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress) using just a single API call.
   * You can call Search Address Batch API to run either asynchronously (async) or synchronously (sync).
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries.
   * ### Submit Synchronous Batch Request
   * The Synchronous API is recommended for lightweight batch requests. When the service receives a
   * request, it will respond as soon as the batch items are calculated and there will be no possibility
   * to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if
   * the request takes longer than 60 seconds. The number of batch items is limited to **100** for this
   * API.
   * ```
   * POST
   * https://atlas.microsoft.com/search/address/batch/sync/json?api-version=1.0&subscription-key={subscription-key}
   * ```
   * ### Submit Asynchronous Batch Request
   * The Asynchronous API is appropriate for processing big volumes of relatively complex search requests
   * - It allows the retrieval of results in a separate call (multiple downloads are possible).
   * - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
   * - The number of batch items is limited to **10,000** for this API.
   *
   * When you make a request by using async request, by default the service returns a 202 response code
   * along a redirect URL in the Location field of the response header. This URL should be checked
   * periodically until the response data or error information is available.
   * The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if
   * used after the expiration period.
   *
   * Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
   * operations:
   * 1. Client sends a Search Address Batch `POST` request to Azure Maps
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request has been accepted.
   *
   *     > HTTP `Error` - There was an error processing your Batch request. This could either be a `400
   * Bad Request` or any other `Error` status code.
   *
   * 3. If the batch request was accepted successfully, the `Location` header in the response contains
   * the URL to download the results of the batch request.
   *     This status URI looks like following:
   *
   * ```
   *     GET
   * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch
   * results.
   *
   * ### POST Body for Batch Request
   * To send the _search address_ queries you will use a `POST` request where the request body will
   * contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
   * `application/json`. Here's a sample request body containing 5 _search address_ queries:
   *
   *
   * ```json
   * {
   *     "batchItems": [
   *         {"query": "?query=400 Broad St, Seattle, WA 98109&limit=3"},
   *         {"query": "?query=One, Microsoft Way, Redmond, WA 98052&limit=3"},
   *         {"query": "?query=350 5th Ave, New York, NY 10118&limit=1"},
   *         {"query": "?query=Pike Pl, Seattle, WA 98101&lat=47.610970&lon=-122.342469&radius=1000"},
   *         {"query": "?query=Champ de Mars, 5 Avenue Anatole France, 75007 Paris, France&limit=1"}
   *     ]
   * }
   * ```
   *
   * A _search address_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
   * api-version and subscription-key. It can accept any of the supported _search address_ [URI
   * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#uri-parameters). The
   * string values in the _search address_ query must be properly escaped (e.g. " character should be
   * escaped with \\ ) and it should also be properly URL-encoded.
   *
   *
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries,
   * and the batch should contain at least **1** query.
   *
   *
   * ### Download Asynchronous Batch Results
   * To download the async batch results you will issue a `GET` request to the batch download endpoint.
   * This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request
   * and looks like the following:
   *
   * ```
   * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * Here's the typical sequence of operations for downloading the batch results:
   * 1. Client sends a `GET` request using the _download URL_.
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try
   * again in some time.
   *
   *     > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch
   * results.
   *
   *
   *
   * ### Batch Response Model
   * The returned data content is similar for async and sync requests. When downloading the results of an
   * async batch request, if the batch has finished processing, the response body contains the batch
   * response. This batch response contains a `summary` component that indicates the `totalRequests` that
   * were part of the original batch request and `successfulRequests`i.e. queries which were executed
   * successfully. The batch response also includes a `batchItems` array which contains a response for
   * each and every query in the batch request. The `batchItems` will contain the results in the exact
   * same order the original queries were sent in the batch request. Each item in `batchItems` contains
   * `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following
   * types:
   *
   *   -
   * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#SearchAddressResponse)
   * - If the query completed successfully.
   *
   *   - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
   *
   *
   * Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
   *
   *
   * ```json
   * {
   *     "summary": {
   *         "successfulRequests": 2,
   *         "totalRequests": 3
   *     },
   *     "batchItems": [
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "one microsoft way redmond wa 98052"
   *                 },
   *                 "results": [
   *                     {
   *                         "position": {
   *                             "lat": 47.63989,
   *                             "lon": -122.12509
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "pike pl seattle wa 98101"
   *                 },
   *                 "results": [
   *                     {
   *                         "position": {
   *                             "lat": 47.60963,
   *                             "lon": -122.34215
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 400,
   *             "response":
   *             {
   *                 "error":
   *                 {
   *                     "code": "400 BadRequest",
   *                     "message": "Bad request: one or more parameters were incorrectly specified or
   * are mutually exclusive."
   *                 }
   *             }
   *         }
   *     ]
   * }
   * ```
   * @param format Desired format of the response. Only `json` format is supported.
   * @param batchRequest The list of address geocoding queries/requests to process. The list can contain
   *                     a max of 10,000 queries and must contain at least 1 query.
   * @param options The options parameters.
   */
  searchAddressBatch(
    format: JsonFormat,
    batchRequest: BatchRequest,
    options?: SearchSearchAddressBatchOptionalParams
  ): Promise<SearchSearchAddressBatchResponse> {
    return this.client.sendOperationRequest(
      { format, batchRequest, options },
      searchAddressBatchOperationSpec
    );
  }

  /**
   * **Search Address Batch API**
   *
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Address Batch API sends batches of queries to [Search Address
   * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress) using just a single API call.
   * You can call Search Address Batch API to run either asynchronously (async) or synchronously (sync).
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries.
   * ### Submit Synchronous Batch Request
   * The Synchronous API is recommended for lightweight batch requests. When the service receives a
   * request, it will respond as soon as the batch items are calculated and there will be no possibility
   * to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if
   * the request takes longer than 60 seconds. The number of batch items is limited to **100** for this
   * API.
   * ```
   * POST
   * https://atlas.microsoft.com/search/address/batch/sync/json?api-version=1.0&subscription-key={subscription-key}
   * ```
   * ### Submit Asynchronous Batch Request
   * The Asynchronous API is appropriate for processing big volumes of relatively complex search requests
   * - It allows the retrieval of results in a separate call (multiple downloads are possible).
   * - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
   * - The number of batch items is limited to **10,000** for this API.
   *
   * When you make a request by using async request, by default the service returns a 202 response code
   * along a redirect URL in the Location field of the response header. This URL should be checked
   * periodically until the response data or error information is available.
   * The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if
   * used after the expiration period.
   *
   * Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
   * operations:
   * 1. Client sends a Search Address Batch `POST` request to Azure Maps
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request has been accepted.
   *
   *     > HTTP `Error` - There was an error processing your Batch request. This could either be a `400
   * Bad Request` or any other `Error` status code.
   *
   * 3. If the batch request was accepted successfully, the `Location` header in the response contains
   * the URL to download the results of the batch request.
   *     This status URI looks like following:
   *
   * ```
   *     GET
   * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch
   * results.
   *
   * ### POST Body for Batch Request
   * To send the _search address_ queries you will use a `POST` request where the request body will
   * contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
   * `application/json`. Here's a sample request body containing 5 _search address_ queries:
   *
   *
   * ```json
   * {
   *     "batchItems": [
   *         {"query": "?query=400 Broad St, Seattle, WA 98109&limit=3"},
   *         {"query": "?query=One, Microsoft Way, Redmond, WA 98052&limit=3"},
   *         {"query": "?query=350 5th Ave, New York, NY 10118&limit=1"},
   *         {"query": "?query=Pike Pl, Seattle, WA 98101&lat=47.610970&lon=-122.342469&radius=1000"},
   *         {"query": "?query=Champ de Mars, 5 Avenue Anatole France, 75007 Paris, France&limit=1"}
   *     ]
   * }
   * ```
   *
   * A _search address_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
   * api-version and subscription-key. It can accept any of the supported _search address_ [URI
   * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#uri-parameters). The
   * string values in the _search address_ query must be properly escaped (e.g. " character should be
   * escaped with \\ ) and it should also be properly URL-encoded.
   *
   *
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries,
   * and the batch should contain at least **1** query.
   *
   *
   * ### Download Asynchronous Batch Results
   * To download the async batch results you will issue a `GET` request to the batch download endpoint.
   * This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request
   * and looks like the following:
   *
   * ```
   * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * Here's the typical sequence of operations for downloading the batch results:
   * 1. Client sends a `GET` request using the _download URL_.
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try
   * again in some time.
   *
   *     > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch
   * results.
   *
   *
   *
   * ### Batch Response Model
   * The returned data content is similar for async and sync requests. When downloading the results of an
   * async batch request, if the batch has finished processing, the response body contains the batch
   * response. This batch response contains a `summary` component that indicates the `totalRequests` that
   * were part of the original batch request and `successfulRequests`i.e. queries which were executed
   * successfully. The batch response also includes a `batchItems` array which contains a response for
   * each and every query in the batch request. The `batchItems` will contain the results in the exact
   * same order the original queries were sent in the batch request. Each item in `batchItems` contains
   * `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following
   * types:
   *
   *   -
   * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#SearchAddressResponse)
   * - If the query completed successfully.
   *
   *   - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
   *
   *
   * Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
   *
   *
   * ```json
   * {
   *     "summary": {
   *         "successfulRequests": 2,
   *         "totalRequests": 3
   *     },
   *     "batchItems": [
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "one microsoft way redmond wa 98052"
   *                 },
   *                 "results": [
   *                     {
   *                         "position": {
   *                             "lat": 47.63989,
   *                             "lon": -122.12509
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "query": "pike pl seattle wa 98101"
   *                 },
   *                 "results": [
   *                     {
   *                         "position": {
   *                             "lat": 47.60963,
   *                             "lon": -122.34215
   *                         }
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 400,
   *             "response":
   *             {
   *                 "error":
   *                 {
   *                     "code": "400 BadRequest",
   *                     "message": "Bad request: one or more parameters were incorrectly specified or
   * are mutually exclusive."
   *                 }
   *             }
   *         }
   *     ]
   * }
   * ```
   * @param batchId Batch id for querying the operation.
   * @param options The options parameters.
   */
  getSearchAddressBatch(
    batchId: string,
    options?: SearchGetSearchAddressBatchOptionalParams
  ): Promise<SearchGetSearchAddressBatchResponse> {
    return this.client.sendOperationRequest(
      { batchId, options },
      getSearchAddressBatchOperationSpec
    );
  }

  /**
   * **Search Address Reverse Batch API**
   *
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Address Batch API sends batches of queries to [Search Address Reverse
   * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse) using just a single
   * API call. You can call Search Address Reverse Batch API to run either asynchronously (async) or
   * synchronously (sync). The async API allows caller to batch up to **10,000** queries and sync API up
   * to **100** queries.
   * ### Submit Synchronous Batch Request
   * The Synchronous API is recommended for lightweight batch requests. When the service receives a
   * request, it will respond as soon as the batch items are calculated and there will be no possibility
   * to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if
   * the request takes longer than 60 seconds. The number of batch items is limited to **100** for this
   * API.
   * ```
   * POST
   * https://atlas.microsoft.com/search/address/reverse/batch/sync/json?api-version=1.0&subscription-key={subscription-key}
   * ```
   * ### Submit Asynchronous Batch Request
   * The Asynchronous API is appropriate for processing big volumes of relatively complex search requests
   * - It allows the retrieval of results in a separate call (multiple downloads are possible).
   * - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
   * - The number of batch items is limited to **10,000** for this API.
   *
   * When you make a request by using async request, by default the service returns a 202 response code
   * along a redirect URL in the Location field of the response header. This URL should be checked
   * periodically until the response data or error information is available.
   * The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if
   * used after the expiration period.
   *
   * Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
   * operations:
   * 1. Client sends a Search Address Batch `POST` request to Azure Maps
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request has been accepted.
   *
   *     > HTTP `Error` - There was an error processing your Batch request. This could either be a `400
   * Bad Request` or any other `Error` status code.
   *
   * 3. If the batch request was accepted successfully, the `Location` header in the response contains
   * the URL to download the results of the batch request.
   *     This status URI looks like following:
   *
   * ```
   *     GET
   * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch
   * results.
   *
   * ### POST Body for Batch Request
   * To send the _search address reverse_ queries you will use a `POST` request where the request body
   * will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
   * `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:
   *
   *
   * ```json
   * {
   *     "batchItems": [
   *         {"query": "?query=48.858561,2.294911"},
   *         {"query": "?query=47.639765,-122.127896&radius=5000&limit=2"},
   *         {"query": "?query=47.621028,-122.348170"},
   *         {"query": "?query=43.722990,10.396695"},
   *         {"query": "?query=40.750958,-73.982336"}
   *     ]
   * }
   * ```
   *
   * A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL,
   * path, api-version and subscription-key. It can accept any of the supported _search address reverse_
   * [URI
   * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#uri-parameters).
   * The string values in the _search address reverse_ query must be properly escaped (e.g. " character
   * should be escaped with \\ ) and it should also be properly URL-encoded.
   *
   *
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries,
   * and the batch should contain at least **1** query.
   *
   *
   * ### Download Asynchronous Batch Results
   * To download the async batch results you will issue a `GET` request to the batch download endpoint.
   * This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request
   * and looks like the following:
   *
   * ```
   * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * Here's the typical sequence of operations for downloading the batch results:
   * 1. Client sends a `GET` request using the _download URL_.
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try
   * again in some time.
   *
   *     > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch
   * results.
   *
   *
   *
   * ### Batch Response Model
   * The returned data content is similar for async and sync requests. When downloading the results of an
   * async batch request, if the batch has finished processing, the response body contains the batch
   * response. This batch response contains a `summary` component that indicates the `totalRequests` that
   * were part of the original batch request and `successfulRequests`i.e. queries which were executed
   * successfully. The batch response also includes a `batchItems` array which contains a response for
   * each and every query in the batch request. The `batchItems` will contain the results in the exact
   * same order the original queries were sent in the batch request. Each item in `batchItems` contains
   * `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following
   * types:
   *
   *   -
   * [`SearchAddressReverseResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse)
   * - If the query completed successfully.
   *
   *   - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
   *
   *
   * Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
   *
   *
   * ```json
   * {
   *     "summary": {
   *         "successfulRequests": 2,
   *         "totalRequests": 3
   *     },
   *     "batchItems": [
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "queryTime": 11
   *                 },
   *                 "addresses": [
   *                     {
   *                         "address": {
   *                             "country": "France",
   *                             "freeformAddress": "Avenue Anatole France, 75007 Paris"
   *                         },
   *                         "position": "48.858490,2.294820"
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "queryTime": 1
   *                 },
   *                 "addresses": [
   *                     {
   *                         "address": {
   *                             "country": "United States of America",
   *                             "freeformAddress": "157th Pl NE, Redmond WA 98052"
   *                         },
   *                         "position": "47.640470,-122.129430"
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 400,
   *             "response":
   *             {
   *                 "error":
   *                 {
   *                     "code": "400 BadRequest",
   *                     "message": "Bad request: one or more parameters were incorrectly specified or
   * are mutually exclusive."
   *                 }
   *             }
   *         }
   *     ]
   * }
   * ```
   * @param format Desired format of the response. Only `json` format is supported.
   * @param batchRequest The list of reverse geocoding queries/requests to process. The list can contain
   *                     a max of 10,000 queries and must contain at least 1 query.
   * @param options The options parameters.
   */
  reverseSearchAddressBatchSync(
    format: JsonFormat,
    batchRequest: BatchRequest,
    options?: SearchReverseSearchAddressBatchSyncOptionalParams
  ): Promise<SearchReverseSearchAddressBatchSyncResponse> {
    return this.client.sendOperationRequest(
      { format, batchRequest, options },
      reverseSearchAddressBatchSyncOperationSpec
    );
  }

  /**
   * **Search Address Reverse Batch API**
   *
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Address Batch API sends batches of queries to [Search Address Reverse
   * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse) using just a single
   * API call. You can call Search Address Reverse Batch API to run either asynchronously (async) or
   * synchronously (sync). The async API allows caller to batch up to **10,000** queries and sync API up
   * to **100** queries.
   * ### Submit Synchronous Batch Request
   * The Synchronous API is recommended for lightweight batch requests. When the service receives a
   * request, it will respond as soon as the batch items are calculated and there will be no possibility
   * to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if
   * the request takes longer than 60 seconds. The number of batch items is limited to **100** for this
   * API.
   * ```
   * POST
   * https://atlas.microsoft.com/search/address/reverse/batch/sync/json?api-version=1.0&subscription-key={subscription-key}
   * ```
   * ### Submit Asynchronous Batch Request
   * The Asynchronous API is appropriate for processing big volumes of relatively complex search requests
   * - It allows the retrieval of results in a separate call (multiple downloads are possible).
   * - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
   * - The number of batch items is limited to **10,000** for this API.
   *
   * When you make a request by using async request, by default the service returns a 202 response code
   * along a redirect URL in the Location field of the response header. This URL should be checked
   * periodically until the response data or error information is available.
   * The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if
   * used after the expiration period.
   *
   * Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
   * operations:
   * 1. Client sends a Search Address Batch `POST` request to Azure Maps
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request has been accepted.
   *
   *     > HTTP `Error` - There was an error processing your Batch request. This could either be a `400
   * Bad Request` or any other `Error` status code.
   *
   * 3. If the batch request was accepted successfully, the `Location` header in the response contains
   * the URL to download the results of the batch request.
   *     This status URI looks like following:
   *
   * ```
   *     GET
   * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch
   * results.
   *
   * ### POST Body for Batch Request
   * To send the _search address reverse_ queries you will use a `POST` request where the request body
   * will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
   * `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:
   *
   *
   * ```json
   * {
   *     "batchItems": [
   *         {"query": "?query=48.858561,2.294911"},
   *         {"query": "?query=47.639765,-122.127896&radius=5000&limit=2"},
   *         {"query": "?query=47.621028,-122.348170"},
   *         {"query": "?query=43.722990,10.396695"},
   *         {"query": "?query=40.750958,-73.982336"}
   *     ]
   * }
   * ```
   *
   * A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL,
   * path, api-version and subscription-key. It can accept any of the supported _search address reverse_
   * [URI
   * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#uri-parameters).
   * The string values in the _search address reverse_ query must be properly escaped (e.g. " character
   * should be escaped with \\ ) and it should also be properly URL-encoded.
   *
   *
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries,
   * and the batch should contain at least **1** query.
   *
   *
   * ### Download Asynchronous Batch Results
   * To download the async batch results you will issue a `GET` request to the batch download endpoint.
   * This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request
   * and looks like the following:
   *
   * ```
   * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * Here's the typical sequence of operations for downloading the batch results:
   * 1. Client sends a `GET` request using the _download URL_.
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try
   * again in some time.
   *
   *     > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch
   * results.
   *
   *
   *
   * ### Batch Response Model
   * The returned data content is similar for async and sync requests. When downloading the results of an
   * async batch request, if the batch has finished processing, the response body contains the batch
   * response. This batch response contains a `summary` component that indicates the `totalRequests` that
   * were part of the original batch request and `successfulRequests`i.e. queries which were executed
   * successfully. The batch response also includes a `batchItems` array which contains a response for
   * each and every query in the batch request. The `batchItems` will contain the results in the exact
   * same order the original queries were sent in the batch request. Each item in `batchItems` contains
   * `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following
   * types:
   *
   *   -
   * [`SearchAddressReverseResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse)
   * - If the query completed successfully.
   *
   *   - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
   *
   *
   * Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
   *
   *
   * ```json
   * {
   *     "summary": {
   *         "successfulRequests": 2,
   *         "totalRequests": 3
   *     },
   *     "batchItems": [
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "queryTime": 11
   *                 },
   *                 "addresses": [
   *                     {
   *                         "address": {
   *                             "country": "France",
   *                             "freeformAddress": "Avenue Anatole France, 75007 Paris"
   *                         },
   *                         "position": "48.858490,2.294820"
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "queryTime": 1
   *                 },
   *                 "addresses": [
   *                     {
   *                         "address": {
   *                             "country": "United States of America",
   *                             "freeformAddress": "157th Pl NE, Redmond WA 98052"
   *                         },
   *                         "position": "47.640470,-122.129430"
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 400,
   *             "response":
   *             {
   *                 "error":
   *                 {
   *                     "code": "400 BadRequest",
   *                     "message": "Bad request: one or more parameters were incorrectly specified or
   * are mutually exclusive."
   *                 }
   *             }
   *         }
   *     ]
   * }
   * ```
   * @param format Desired format of the response. Only `json` format is supported.
   * @param batchRequest The list of reverse geocoding queries/requests to process. The list can contain
   *                     a max of 10,000 queries and must contain at least 1 query.
   * @param options The options parameters.
   */
  reverseSearchAddressBatch(
    format: JsonFormat,
    batchRequest: BatchRequest,
    options?: SearchReverseSearchAddressBatchOptionalParams
  ): Promise<SearchReverseSearchAddressBatchResponse> {
    return this.client.sendOperationRequest(
      { format, batchRequest, options },
      reverseSearchAddressBatchOperationSpec
    );
  }

  /**
   * **Search Address Reverse Batch API**
   *
   *
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * The Search Address Batch API sends batches of queries to [Search Address Reverse
   * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse) using just a single
   * API call. You can call Search Address Reverse Batch API to run either asynchronously (async) or
   * synchronously (sync). The async API allows caller to batch up to **10,000** queries and sync API up
   * to **100** queries.
   * ### Submit Synchronous Batch Request
   * The Synchronous API is recommended for lightweight batch requests. When the service receives a
   * request, it will respond as soon as the batch items are calculated and there will be no possibility
   * to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if
   * the request takes longer than 60 seconds. The number of batch items is limited to **100** for this
   * API.
   * ```
   * POST
   * https://atlas.microsoft.com/search/address/reverse/batch/sync/json?api-version=1.0&subscription-key={subscription-key}
   * ```
   * ### Submit Asynchronous Batch Request
   * The Asynchronous API is appropriate for processing big volumes of relatively complex search requests
   * - It allows the retrieval of results in a separate call (multiple downloads are possible).
   * - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
   * - The number of batch items is limited to **10,000** for this API.
   *
   * When you make a request by using async request, by default the service returns a 202 response code
   * along a redirect URL in the Location field of the response header. This URL should be checked
   * periodically until the response data or error information is available.
   * The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if
   * used after the expiration period.
   *
   * Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
   * operations:
   * 1. Client sends a Search Address Batch `POST` request to Azure Maps
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request has been accepted.
   *
   *     > HTTP `Error` - There was an error processing your Batch request. This could either be a `400
   * Bad Request` or any other `Error` status code.
   *
   * 3. If the batch request was accepted successfully, the `Location` header in the response contains
   * the URL to download the results of the batch request.
   *     This status URI looks like following:
   *
   * ```
   *     GET
   * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch
   * results.
   *
   * ### POST Body for Batch Request
   * To send the _search address reverse_ queries you will use a `POST` request where the request body
   * will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
   * `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:
   *
   *
   * ```json
   * {
   *     "batchItems": [
   *         {"query": "?query=48.858561,2.294911"},
   *         {"query": "?query=47.639765,-122.127896&radius=5000&limit=2"},
   *         {"query": "?query=47.621028,-122.348170"},
   *         {"query": "?query=43.722990,10.396695"},
   *         {"query": "?query=40.750958,-73.982336"}
   *     ]
   * }
   * ```
   *
   * A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL,
   * path, api-version and subscription-key. It can accept any of the supported _search address reverse_
   * [URI
   * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#uri-parameters).
   * The string values in the _search address reverse_ query must be properly escaped (e.g. " character
   * should be escaped with \\ ) and it should also be properly URL-encoded.
   *
   *
   * The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries,
   * and the batch should contain at least **1** query.
   *
   *
   * ### Download Asynchronous Batch Results
   * To download the async batch results you will issue a `GET` request to the batch download endpoint.
   * This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request
   * and looks like the following:
   *
   * ```
   * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}
   * ```
   * Here's the typical sequence of operations for downloading the batch results:
   * 1. Client sends a `GET` request using the _download URL_.
   * 2. The server will respond with one of the following:
   *
   *     > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try
   * again in some time.
   *
   *     > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch
   * results.
   *
   *
   *
   * ### Batch Response Model
   * The returned data content is similar for async and sync requests. When downloading the results of an
   * async batch request, if the batch has finished processing, the response body contains the batch
   * response. This batch response contains a `summary` component that indicates the `totalRequests` that
   * were part of the original batch request and `successfulRequests`i.e. queries which were executed
   * successfully. The batch response also includes a `batchItems` array which contains a response for
   * each and every query in the batch request. The `batchItems` will contain the results in the exact
   * same order the original queries were sent in the batch request. Each item in `batchItems` contains
   * `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following
   * types:
   *
   *   -
   * [`SearchAddressReverseResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse)
   * - If the query completed successfully.
   *
   *   - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
   *
   *
   * Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
   *
   *
   * ```json
   * {
   *     "summary": {
   *         "successfulRequests": 2,
   *         "totalRequests": 3
   *     },
   *     "batchItems": [
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "queryTime": 11
   *                 },
   *                 "addresses": [
   *                     {
   *                         "address": {
   *                             "country": "France",
   *                             "freeformAddress": "Avenue Anatole France, 75007 Paris"
   *                         },
   *                         "position": "48.858490,2.294820"
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 200,
   *             "response":
   *             {
   *                 "summary": {
   *                     "queryTime": 1
   *                 },
   *                 "addresses": [
   *                     {
   *                         "address": {
   *                             "country": "United States of America",
   *                             "freeformAddress": "157th Pl NE, Redmond WA 98052"
   *                         },
   *                         "position": "47.640470,-122.129430"
   *                     }
   *                 ]
   *             }
   *         },
   *         {
   *             "statusCode": 400,
   *             "response":
   *             {
   *                 "error":
   *                 {
   *                     "code": "400 BadRequest",
   *                     "message": "Bad request: one or more parameters were incorrectly specified or
   * are mutually exclusive."
   *                 }
   *             }
   *         }
   *     ]
   * }
   * ```
   * @param batchId Batch id for querying the operation.
   * @param options The options parameters.
   */
  getReverseSearchAddressBatch(
    batchId: string,
    options?: SearchGetReverseSearchAddressBatchOptionalParams
  ): Promise<SearchGetReverseSearchAddressBatchResponse> {
    return this.client.sendOperationRequest(
      { batchId, options },
      getReverseSearchAddressBatchOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listPolygonsOperationSpec: coreClient.OperationSpec = {
  path: "/search/polygon/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolygonResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.geometryIds],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const fuzzySearchOperationSpec: coreClient.OperationSpec = {
  path: "/search/fuzzy/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.query,
    Parameters.isTypeAhead,
    Parameters.top,
    Parameters.skip,
    Parameters.categoryFilter,
    Parameters.countryCodeFilter,
    Parameters.lat,
    Parameters.lon,
    Parameters.radiusInMeters,
    Parameters.topLeft,
    Parameters.btmRight,
    Parameters.language,
    Parameters.extendedPostalCodesFor,
    Parameters.minFuzzyLevel,
    Parameters.maxFuzzyLevel,
    Parameters.indexFilter,
    Parameters.brandFilter,
    Parameters.electricVehicleConnectorFilter,
    Parameters.entityType,
    Parameters.localizedMapView,
    Parameters.operatingHours
  ],
  urlParameters: [Parameters.$host, Parameters.format1],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const searchPointOfInterestOperationSpec: coreClient.OperationSpec = {
  path: "/search/poi/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.query,
    Parameters.isTypeAhead,
    Parameters.top,
    Parameters.skip,
    Parameters.categoryFilter,
    Parameters.countryCodeFilter,
    Parameters.lat,
    Parameters.lon,
    Parameters.radiusInMeters,
    Parameters.topLeft,
    Parameters.btmRight,
    Parameters.language,
    Parameters.brandFilter,
    Parameters.electricVehicleConnectorFilter,
    Parameters.localizedMapView,
    Parameters.operatingHours,
    Parameters.extendedPostalCodesFor1
  ],
  urlParameters: [Parameters.$host, Parameters.format1],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const searchNearbyPointOfInterestOperationSpec: coreClient.OperationSpec = {
  path: "/search/nearby/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.categoryFilter,
    Parameters.countryCodeFilter,
    Parameters.radiusInMeters,
    Parameters.language,
    Parameters.extendedPostalCodesFor,
    Parameters.brandFilter,
    Parameters.electricVehicleConnectorFilter,
    Parameters.localizedMapView,
    Parameters.lat1,
    Parameters.lon1
  ],
  urlParameters: [Parameters.$host, Parameters.format1],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const searchPointOfInterestCategoryOperationSpec: coreClient.OperationSpec = {
  path: "/search/poi/category/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.query,
    Parameters.isTypeAhead,
    Parameters.top,
    Parameters.skip,
    Parameters.categoryFilter,
    Parameters.countryCodeFilter,
    Parameters.lat,
    Parameters.lon,
    Parameters.radiusInMeters,
    Parameters.topLeft,
    Parameters.btmRight,
    Parameters.language,
    Parameters.extendedPostalCodesFor,
    Parameters.brandFilter,
    Parameters.electricVehicleConnectorFilter,
    Parameters.localizedMapView,
    Parameters.operatingHours
  ],
  urlParameters: [Parameters.$host, Parameters.format1],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const getPointOfInterestCategoryTreeOperationSpec: coreClient.OperationSpec = {
  path: "/search/poi/category/tree/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PointOfInterestCategoryTreeResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.language],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const searchAddressOperationSpec: coreClient.OperationSpec = {
  path: "/search/address/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.query,
    Parameters.isTypeAhead,
    Parameters.top,
    Parameters.skip,
    Parameters.countryCodeFilter,
    Parameters.lat,
    Parameters.lon,
    Parameters.radiusInMeters,
    Parameters.topLeft,
    Parameters.btmRight,
    Parameters.language,
    Parameters.extendedPostalCodesFor,
    Parameters.entityType,
    Parameters.localizedMapView
  ],
  urlParameters: [Parameters.$host, Parameters.format1],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const reverseSearchAddressOperationSpec: coreClient.OperationSpec = {
  path: "/search/address/reverse/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReverseSearchAddressResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.radiusInMeters,
    Parameters.language,
    Parameters.entityType,
    Parameters.localizedMapView,
    Parameters.query1,
    Parameters.includeSpeedLimit,
    Parameters.heading,
    Parameters.streetNumber,
    Parameters.includeRoadUse,
    Parameters.roadUse,
    Parameters.allowFreeformNewline,
    Parameters.includeMatchType
  ],
  urlParameters: [Parameters.$host, Parameters.format1],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const reverseSearchCrossStreetAddressOperationSpec: coreClient.OperationSpec = {
  path: "/search/address/reverse/crossStreet/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReverseSearchCrossStreetAddressResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.radiusInMeters,
    Parameters.language,
    Parameters.localizedMapView,
    Parameters.query1,
    Parameters.heading
  ],
  urlParameters: [Parameters.$host, Parameters.format1],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const searchStructuredAddressOperationSpec: coreClient.OperationSpec = {
  path: "/search/address/structured/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.language,
    Parameters.extendedPostalCodesFor,
    Parameters.entityType,
    Parameters.localizedMapView,
    Parameters.countryCode,
    Parameters.streetNumber1,
    Parameters.streetName,
    Parameters.crossStreet,
    Parameters.municipality,
    Parameters.municipalitySubdivision,
    Parameters.countryTertiarySubdivision,
    Parameters.countrySecondarySubdivision,
    Parameters.countrySubdivision,
    Parameters.postalCode
  ],
  urlParameters: [Parameters.$host, Parameters.format1],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const searchInsideGeometryOperationSpec: coreClient.OperationSpec = {
  path: "/search/geometry/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.geometry,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.query,
    Parameters.top,
    Parameters.categoryFilter,
    Parameters.language,
    Parameters.extendedPostalCodesFor,
    Parameters.indexFilter,
    Parameters.localizedMapView,
    Parameters.operatingHours
  ],
  urlParameters: [Parameters.$host, Parameters.format1],
  headerParameters: [
    Parameters.accept,
    Parameters.clientId,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
const searchAlongRouteOperationSpec: coreClient.OperationSpec = {
  path: "/search/alongRoute/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.route,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.query,
    Parameters.categoryFilter,
    Parameters.brandFilter,
    Parameters.electricVehicleConnectorFilter,
    Parameters.localizedMapView,
    Parameters.operatingHours,
    Parameters.maxDetourTime,
    Parameters.top1
  ],
  urlParameters: [Parameters.$host, Parameters.format1],
  headerParameters: [
    Parameters.accept,
    Parameters.clientId,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
const fuzzySearchBatchSyncOperationSpec: coreClient.OperationSpec = {
  path: "/search/fuzzy/batch/sync/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressBatchResult
    },
    408: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.batchRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [
    Parameters.accept,
    Parameters.clientId,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
const fuzzySearchBatchOperationSpec: coreClient.OperationSpec = {
  path: "/search/fuzzy/batch/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressBatchResult
    },
    202: {
      headersMapper: Mappers.SearchFuzzySearchBatchHeaders
    }
  },
  requestBody: Parameters.batchRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [
    Parameters.accept,
    Parameters.clientId,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
const getFuzzySearchBatchOperationSpec: coreClient.OperationSpec = {
  path: "/search/fuzzy/batch/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressBatchResult
    },
    202: {
      headersMapper: Mappers.SearchGetFuzzySearchBatchHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.batchId],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const searchAddressBatchSyncOperationSpec: coreClient.OperationSpec = {
  path: "/search/address/batch/sync/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressBatchResult
    },
    408: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.batchRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [
    Parameters.accept,
    Parameters.clientId,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
const searchAddressBatchOperationSpec: coreClient.OperationSpec = {
  path: "/search/address/batch/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressBatchResult
    },
    202: {
      headersMapper: Mappers.SearchSearchAddressBatchHeaders
    }
  },
  requestBody: Parameters.batchRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [
    Parameters.accept,
    Parameters.clientId,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
const getSearchAddressBatchOperationSpec: coreClient.OperationSpec = {
  path: "/search/address/batch/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchAddressBatchResult
    },
    202: {
      headersMapper: Mappers.SearchGetSearchAddressBatchHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.batchId],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const reverseSearchAddressBatchSyncOperationSpec: coreClient.OperationSpec = {
  path: "/search/address/reverse/batch/sync/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReverseSearchAddressBatchResult
    },
    408: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.batchRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [
    Parameters.accept,
    Parameters.clientId,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
const reverseSearchAddressBatchOperationSpec: coreClient.OperationSpec = {
  path: "/search/address/reverse/batch/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReverseSearchAddressBatchResult
    },
    202: {
      headersMapper: Mappers.SearchReverseSearchAddressBatchHeaders
    }
  },
  requestBody: Parameters.batchRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [
    Parameters.accept,
    Parameters.clientId,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
const getReverseSearchAddressBatchOperationSpec: coreClient.OperationSpec = {
  path: "/search/address/reverse/batch/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReverseSearchAddressBatchResult
    },
    202: {
      headersMapper: Mappers.SearchGetReverseSearchAddressBatchHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.batchId],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
