/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  SearchInsideGeometryRequest as SearchInsideGeometryRequestMapper,
  SearchAlongRouteRequest as SearchAlongRouteRequestMapper,
  BatchRequest as BatchRequestMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const clientId: OperationParameter = {
  parameterPath: "clientId",
  mapper: {
    serializedName: "x-ms-client-id",
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "1.0",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const format: OperationURLParameter = {
  parameterPath: "format",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const geometryIds: OperationQueryParameter = {
  parameterPath: "geometryIds",
  mapper: {
    serializedName: "geometries",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const format1: OperationURLParameter = {
  parameterPath: "format",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const query: OperationQueryParameter = {
  parameterPath: "query",
  mapper: {
    serializedName: "query",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const isTypeAhead: OperationQueryParameter = {
  parameterPath: ["options", "isTypeAhead"],
  mapper: {
    serializedName: "typeahead",
    type: {
      name: "Boolean"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    constraints: {
      InclusiveMaximum: 100,
      InclusiveMinimum: 1
    },
    serializedName: "limit",
    type: {
      name: "Number"
    }
  }
};

export const skip: OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    constraints: {
      InclusiveMaximum: 1900,
      InclusiveMinimum: 0
    },
    serializedName: "ofs",
    type: {
      name: "Number"
    }
  }
};

export const categoryFilter: OperationQueryParameter = {
  parameterPath: ["options", "categoryFilter"],
  mapper: {
    serializedName: "categorySet",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Number"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const countryCodeFilter: OperationQueryParameter = {
  parameterPath: ["options", "countryCodeFilter"],
  mapper: {
    serializedName: "countrySet",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const lat: OperationQueryParameter = {
  parameterPath: ["options", "lat"],
  mapper: {
    serializedName: "lat",
    type: {
      name: "Number"
    }
  }
};

export const lon: OperationQueryParameter = {
  parameterPath: ["options", "lon"],
  mapper: {
    serializedName: "lon",
    type: {
      name: "Number"
    }
  }
};

export const radiusInMeters: OperationQueryParameter = {
  parameterPath: ["options", "radiusInMeters"],
  mapper: {
    serializedName: "radius",
    type: {
      name: "Number"
    }
  }
};

export const topLeft: OperationQueryParameter = {
  parameterPath: ["options", "topLeft"],
  mapper: {
    serializedName: "topLeft",
    type: {
      name: "String"
    }
  }
};

export const btmRight: OperationQueryParameter = {
  parameterPath: ["options", "btmRight"],
  mapper: {
    serializedName: "btmRight",
    type: {
      name: "String"
    }
  }
};

export const language: OperationQueryParameter = {
  parameterPath: ["options", "language"],
  mapper: {
    serializedName: "language",
    type: {
      name: "String"
    }
  }
};

export const extendedPostalCodesFor: OperationQueryParameter = {
  parameterPath: ["options", "extendedPostalCodesFor"],
  mapper: {
    serializedName: "extendedPostalCodesFor",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const minFuzzyLevel: OperationQueryParameter = {
  parameterPath: ["options", "minFuzzyLevel"],
  mapper: {
    constraints: {
      InclusiveMaximum: 4,
      InclusiveMinimum: 1
    },
    serializedName: "minFuzzyLevel",
    type: {
      name: "Number"
    }
  }
};

export const maxFuzzyLevel: OperationQueryParameter = {
  parameterPath: ["options", "maxFuzzyLevel"],
  mapper: {
    constraints: {
      InclusiveMaximum: 4,
      InclusiveMinimum: 1
    },
    serializedName: "maxFuzzyLevel",
    type: {
      name: "Number"
    }
  }
};

export const indexFilter: OperationQueryParameter = {
  parameterPath: ["options", "indexFilter"],
  mapper: {
    serializedName: "idxSet",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const brandFilter: OperationQueryParameter = {
  parameterPath: ["options", "brandFilter"],
  mapper: {
    serializedName: "brandSet",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const electricVehicleConnectorFilter: OperationQueryParameter = {
  parameterPath: ["options", "electricVehicleConnectorFilter"],
  mapper: {
    serializedName: "connectorSet",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const entityType: OperationQueryParameter = {
  parameterPath: ["options", "entityType"],
  mapper: {
    serializedName: "entityType",
    type: {
      name: "String"
    }
  }
};

export const localizedMapView: OperationQueryParameter = {
  parameterPath: ["options", "localizedMapView"],
  mapper: {
    serializedName: "view",
    type: {
      name: "String"
    }
  }
};

export const operatingHours: OperationQueryParameter = {
  parameterPath: ["options", "operatingHours"],
  mapper: {
    serializedName: "openingHours",
    type: {
      name: "String"
    }
  }
};

export const extendedPostalCodesFor1: OperationQueryParameter = {
  parameterPath: ["options", "extendedPostalCodesFor"],
  mapper: {
    constraints: {
      MaxItems: 1
    },
    serializedName: "extendedPostalCodesFor",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const lat1: OperationQueryParameter = {
  parameterPath: "lat",
  mapper: {
    serializedName: "lat",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const lon1: OperationQueryParameter = {
  parameterPath: "lon",
  mapper: {
    serializedName: "lon",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const query1: OperationQueryParameter = {
  parameterPath: "query",
  mapper: {
    constraints: {
      MinItems: 2,
      MaxItems: 2
    },
    serializedName: "query",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Number"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const includeSpeedLimit: OperationQueryParameter = {
  parameterPath: ["options", "includeSpeedLimit"],
  mapper: {
    serializedName: "returnSpeedLimit",
    type: {
      name: "Boolean"
    }
  }
};

export const heading: OperationQueryParameter = {
  parameterPath: ["options", "heading"],
  mapper: {
    constraints: {
      InclusiveMaximum: 360,
      InclusiveMinimum: -360
    },
    serializedName: "heading",
    type: {
      name: "Number"
    }
  }
};

export const streetNumber: OperationQueryParameter = {
  parameterPath: ["options", "streetNumber"],
  mapper: {
    serializedName: "number",
    type: {
      name: "String"
    }
  }
};

export const includeRoadUse: OperationQueryParameter = {
  parameterPath: ["options", "includeRoadUse"],
  mapper: {
    serializedName: "returnRoadUse",
    type: {
      name: "Boolean"
    }
  }
};

export const roadUse: OperationQueryParameter = {
  parameterPath: ["options", "roadUse"],
  mapper: {
    serializedName: "roadUse",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const allowFreeformNewline: OperationQueryParameter = {
  parameterPath: ["options", "allowFreeformNewline"],
  mapper: {
    serializedName: "allowFreeformNewline",
    type: {
      name: "Boolean"
    }
  }
};

export const includeMatchType: OperationQueryParameter = {
  parameterPath: ["options", "includeMatchType"],
  mapper: {
    serializedName: "returnMatchType",
    type: {
      name: "Boolean"
    }
  }
};

export const countryCode: OperationQueryParameter = {
  parameterPath: "countryCode",
  mapper: {
    defaultValue: "US",
    serializedName: "countryCode",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const streetNumber1: OperationQueryParameter = {
  parameterPath: ["options", "streetNumber"],
  mapper: {
    serializedName: "streetNumber",
    type: {
      name: "String"
    }
  }
};

export const streetName: OperationQueryParameter = {
  parameterPath: ["options", "streetName"],
  mapper: {
    serializedName: "streetName",
    type: {
      name: "String"
    }
  }
};

export const crossStreet: OperationQueryParameter = {
  parameterPath: ["options", "crossStreet"],
  mapper: {
    serializedName: "crossStreet",
    type: {
      name: "String"
    }
  }
};

export const municipality: OperationQueryParameter = {
  parameterPath: ["options", "municipality"],
  mapper: {
    serializedName: "municipality",
    type: {
      name: "String"
    }
  }
};

export const municipalitySubdivision: OperationQueryParameter = {
  parameterPath: ["options", "municipalitySubdivision"],
  mapper: {
    serializedName: "municipalitySubdivision",
    type: {
      name: "String"
    }
  }
};

export const countryTertiarySubdivision: OperationQueryParameter = {
  parameterPath: ["options", "countryTertiarySubdivision"],
  mapper: {
    serializedName: "countryTertiarySubdivision",
    type: {
      name: "String"
    }
  }
};

export const countrySecondarySubdivision: OperationQueryParameter = {
  parameterPath: ["options", "countrySecondarySubdivision"],
  mapper: {
    serializedName: "countrySecondarySubdivision",
    type: {
      name: "String"
    }
  }
};

export const countrySubdivision: OperationQueryParameter = {
  parameterPath: ["options", "countrySubdivision"],
  mapper: {
    serializedName: "countrySubdivision",
    type: {
      name: "String"
    }
  }
};

export const postalCode: OperationQueryParameter = {
  parameterPath: ["options", "postalCode"],
  mapper: {
    serializedName: "postalCode",
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const geometry: OperationParameter = {
  parameterPath: "geometry",
  mapper: SearchInsideGeometryRequestMapper
};

export const route: OperationParameter = {
  parameterPath: "route",
  mapper: SearchAlongRouteRequestMapper
};

export const maxDetourTime: OperationQueryParameter = {
  parameterPath: "maxDetourTime",
  mapper: {
    constraints: {
      InclusiveMaximum: 3600
    },
    serializedName: "maxDetourTime",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const top1: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    constraints: {
      InclusiveMaximum: 20
    },
    serializedName: "limit",
    type: {
      name: "Number"
    }
  }
};

export const batchRequest: OperationParameter = {
  parameterPath: "batchRequest",
  mapper: BatchRequestMapper
};

export const batchId: OperationURLParameter = {
  parameterPath: "batchId",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};
