/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const PolygonResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolygonResult",
    modelProperties: {
      polygons: {
        serializedName: "additionalData",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Polygon"
            }
          }
        }
      }
    }
  }
};

export const Polygon: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Polygon",
    modelProperties: {
      providerID: {
        serializedName: "providerID",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      geometryData: {
        serializedName: "geometryData",
        type: {
          name: "Composite",
          className: "GeoJsonObject"
        }
      }
    }
  }
};

export const GeoJsonObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonObject",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Point",
            "MultiPoint",
            "LineString",
            "MultiLineString",
            "Polygon",
            "MultiPolygon",
            "GeometryCollection",
            "Feature",
            "FeatureCollection"
          ]
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const SearchAddressResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchAddressResult",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "SearchSummary"
        }
      },
      results: {
        serializedName: "results",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SearchAddressResultItem"
            }
          }
        }
      }
    }
  }
};

export const SearchSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchSummary",
    modelProperties: {
      query: {
        serializedName: "query",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      queryType: {
        serializedName: "queryType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      queryTime: {
        serializedName: "queryTime",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numResults: {
        serializedName: "numResults",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      top: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      skip: {
        serializedName: "offset",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalResults: {
        serializedName: "totalResults",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      fuzzyLevel: {
        serializedName: "fuzzyLevel",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      geoBias: {
        serializedName: "geoBias",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      }
    }
  }
};

export const LatLongPairAbbreviated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LatLongPairAbbreviated",
    modelProperties: {
      lat: {
        serializedName: "lat",
        type: {
          name: "Number"
        }
      },
      lon: {
        serializedName: "lon",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SearchAddressResultItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchAddressResultItem",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      score: {
        serializedName: "score",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      distanceInMeters: {
        serializedName: "dist",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      entityType: {
        serializedName: "entityType",
        type: {
          name: "String"
        }
      },
      pointOfInterest: {
        serializedName: "poi",
        type: {
          name: "Composite",
          className: "PointOfInterest"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "Composite",
          className: "Address"
        }
      },
      position: {
        serializedName: "position",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      },
      viewport: {
        serializedName: "viewport",
        type: {
          name: "Composite",
          className: "BoundingBox"
        }
      },
      entryPoints: {
        serializedName: "entryPoints",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntryPoint"
            }
          }
        }
      },
      addressRanges: {
        serializedName: "addressRanges",
        type: {
          name: "Composite",
          className: "AddressRanges"
        }
      },
      dataSources: {
        serializedName: "dataSources",
        type: {
          name: "Composite",
          className: "DataSource"
        }
      },
      matchType: {
        serializedName: "matchType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detourTime: {
        serializedName: "detourTime",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PointOfInterest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointOfInterest",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      phone: {
        serializedName: "phone",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      categorySet: {
        serializedName: "categorySet",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PointOfInterestCategorySet"
            }
          }
        }
      },
      classifications: {
        serializedName: "classifications",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Classification"
            }
          }
        }
      },
      brands: {
        serializedName: "brands",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BrandName"
            }
          }
        }
      },
      operatingHours: {
        serializedName: "openingHours",
        type: {
          name: "Composite",
          className: "OperatingHours"
        }
      }
    }
  }
};

export const PointOfInterestCategorySet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointOfInterestCategorySet",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Classification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Classification",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      names: {
        serializedName: "names",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClassificationName"
            }
          }
        }
      }
    }
  }
};

export const ClassificationName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClassificationName",
    modelProperties: {
      nameLocale: {
        serializedName: "nameLocale",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BrandName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BrandName",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperatingHours: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperatingHours",
    modelProperties: {
      mode: {
        serializedName: "mode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timeRanges: {
        serializedName: "timeRanges",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperatingHoursTimeRange"
            }
          }
        }
      }
    }
  }
};

export const OperatingHoursTimeRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperatingHoursTimeRange",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "Composite",
          className: "OperatingHoursTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "Composite",
          className: "OperatingHoursTime"
        }
      }
    }
  }
};

export const OperatingHoursTime: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperatingHoursTime",
    modelProperties: {
      date: {
        serializedName: "date",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hour: {
        serializedName: "hour",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minute: {
        serializedName: "minute",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Address: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Address",
    modelProperties: {
      buildingNumber: {
        serializedName: "buildingNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      street: {
        serializedName: "street",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      crossStreet: {
        serializedName: "crossStreet",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      streetNumber: {
        serializedName: "streetNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      routeNumbers: {
        serializedName: "routeNumbers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      streetName: {
        serializedName: "streetName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      streetNameAndNumber: {
        serializedName: "streetNameAndNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      municipality: {
        serializedName: "municipality",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      municipalitySubdivision: {
        serializedName: "municipalitySubdivision",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      countryTertiarySubdivision: {
        serializedName: "countryTertiarySubdivision",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      countrySecondarySubdivision: {
        serializedName: "countrySecondarySubdivision",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      countrySubdivision: {
        serializedName: "countrySubdivision",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      postalCode: {
        serializedName: "postalCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      extendedPostalCode: {
        serializedName: "extendedPostalCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      countryCode: {
        serializedName: "countryCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      countryCodeISO3: {
        serializedName: "countryCodeISO3",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      freeformAddress: {
        serializedName: "freeformAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      countrySubdivisionName: {
        serializedName: "countrySubdivisionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localName: {
        serializedName: "localName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      boundingBox: {
        serializedName: "boundingBox",
        type: {
          name: "Composite",
          className: "BoundingBoxCompassNotation"
        }
      }
    }
  }
};

export const BoundingBoxCompassNotation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BoundingBoxCompassNotation",
    modelProperties: {
      northEast: {
        serializedName: "northEast",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      southWest: {
        serializedName: "southWest",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      entity: {
        serializedName: "entity",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BoundingBox: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BoundingBox",
    modelProperties: {
      topLeft: {
        serializedName: "topLeftPoint",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      },
      bottomRight: {
        serializedName: "btmRightPoint",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      }
    }
  }
};

export const EntryPoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntryPoint",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      position: {
        serializedName: "position",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      }
    }
  }
};

export const AddressRanges: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddressRanges",
    modelProperties: {
      rangeLeft: {
        serializedName: "rangeLeft",
        type: {
          name: "String"
        }
      },
      rangeRight: {
        serializedName: "rangeRight",
        type: {
          name: "String"
        }
      },
      from: {
        serializedName: "from",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      },
      to: {
        serializedName: "to",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      }
    }
  }
};

export const DataSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataSource",
    modelProperties: {
      geometry: {
        serializedName: "geometry",
        type: {
          name: "Composite",
          className: "GeometryIdentifier"
        }
      }
    }
  }
};

export const GeometryIdentifier: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeometryIdentifier",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PointOfInterestCategoryTreeResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointOfInterestCategoryTreeResult",
    modelProperties: {
      categories: {
        serializedName: "poiCategories",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PointOfInterestCategory"
            }
          }
        }
      }
    }
  }
};

export const PointOfInterestCategory: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointOfInterestCategory",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      childIds: {
        serializedName: "childCategoryIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      synonyms: {
        serializedName: "synonyms",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ReverseSearchAddressResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReverseSearchAddressResult",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "SearchSummary"
        }
      },
      addresses: {
        serializedName: "addresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReverseSearchAddressResultItem"
            }
          }
        }
      }
    }
  }
};

export const ReverseSearchAddressResultItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReverseSearchAddressResultItem",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "Composite",
          className: "Address"
        }
      },
      position: {
        serializedName: "position",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      roadUse: {
        serializedName: "roadUse",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      matchType: {
        serializedName: "matchType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReverseSearchCrossStreetAddressResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReverseSearchCrossStreetAddressResult",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "SearchSummary"
        }
      },
      addresses: {
        serializedName: "addresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReverseSearchCrossStreetAddressResultItem"
            }
          }
        }
      }
    }
  }
};

export const ReverseSearchCrossStreetAddressResultItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReverseSearchCrossStreetAddressResultItem",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "Composite",
          className: "Address"
        }
      },
      position: {
        serializedName: "position",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchInsideGeometryRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchInsideGeometryRequest",
    modelProperties: {
      geometry: {
        serializedName: "geometry",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const SearchAlongRouteRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchAlongRouteRequest",
    modelProperties: {
      route: {
        serializedName: "route",
        type: {
          name: "Composite",
          className: "GeoJsonLineString"
        }
      }
    }
  }
};

export const GeoJsonLineStringData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonLineStringData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Number"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const BatchRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchRequest",
    modelProperties: {
      batchItems: {
        serializedName: "batchItems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BatchRequestItem"
            }
          }
        }
      }
    }
  }
};

export const BatchRequestItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchRequestItem",
    modelProperties: {
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchResult",
    modelProperties: {
      batchSummary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "BatchResultSummary"
        }
      }
    }
  }
};

export const BatchResultSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchResultSummary",
    modelProperties: {
      successfulRequests: {
        serializedName: "successfulRequests",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalRequests: {
        serializedName: "totalRequests",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BatchResultItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchResultItem",
    modelProperties: {
      statusCode: {
        serializedName: "statusCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Viewport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Viewport",
    modelProperties: {
      topLeftPoint: {
        serializedName: "topLeftPoint",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      },
      btmRightPoint: {
        serializedName: "btmRightPoint",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      }
    }
  }
};

export const GeoJsonPointData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonPointData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonMultiPointData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiPointData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Number"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonMultiLineStringData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiLineStringData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonPolygonData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonPolygonData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonMultiPolygonData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiPolygonData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Sequence",
                      element: {
                        type: {
                          name: "Number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonGeometryCollectionData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonGeometryCollectionData",
    modelProperties: {
      geometries: {
        serializedName: "geometries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoJsonGeometry"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonFeatureData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonFeatureData",
    modelProperties: {
      geometry: {
        serializedName: "geometry",
        type: {
          name: "Composite",
          className: "GeoJsonGeometry"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      featureType: {
        serializedName: "featureType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoJsonFeatureCollectionData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonFeatureCollectionData",
    modelProperties: {
      features: {
        serializedName: "features",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoJsonFeature"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonGeometry: coreClient.CompositeMapper = {
  serializedName: "GeoJsonGeometry",
  type: {
    name: "Composite",
    className: "GeoJsonGeometry",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      ...GeoJsonObject.type.modelProperties
    }
  }
};

export const GeoJsonFeature: coreClient.CompositeMapper = {
  serializedName: "Feature",
  type: {
    name: "Composite",
    className: "GeoJsonFeature",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: GeoJsonObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonObject.type.modelProperties,
      ...GeoJsonFeatureData.type.modelProperties
    }
  }
};

export const GeoJsonFeatureCollection: coreClient.CompositeMapper = {
  serializedName: "FeatureCollection",
  type: {
    name: "Composite",
    className: "GeoJsonFeatureCollection",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: GeoJsonObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonObject.type.modelProperties,
      ...GeoJsonFeatureCollectionData.type.modelProperties
    }
  }
};

export const SearchAddressBatchItemResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchAddressBatchItemResponse",
    modelProperties: {
      ...SearchAddressResult.type.modelProperties,
      ...ErrorResponse.type.modelProperties
    }
  }
};

export const ReverseSearchAddressBatchItemResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReverseSearchAddressBatchItemResponse",
    modelProperties: {
      ...ReverseSearchAddressResult.type.modelProperties,
      ...ErrorResponse.type.modelProperties
    }
  }
};

export const GeoJsonLineString: coreClient.CompositeMapper = {
  serializedName: "LineString",
  type: {
    name: "Composite",
    className: "GeoJsonLineString",
    uberParent: "GeoJsonLineStringData",
    polymorphicDiscriminator:
      GeoJsonLineStringData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonLineStringData.type.modelProperties
    }
  }
};

export const SearchAddressBatchResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchAddressBatchResult",
    modelProperties: {
      ...BatchResult.type.modelProperties,
      batchItems: {
        serializedName: "batchItems",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SearchAddressBatchItem"
            }
          }
        }
      }
    }
  }
};

export const ReverseSearchAddressBatchResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReverseSearchAddressBatchResult",
    modelProperties: {
      ...BatchResult.type.modelProperties,
      batchItems: {
        serializedName: "batchItems",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReverseSearchAddressBatchItem"
            }
          }
        }
      }
    }
  }
};

export const SearchAddressBatchItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchAddressBatchItem",
    modelProperties: {
      ...BatchResultItem.type.modelProperties,
      response: {
        serializedName: "response",
        type: {
          name: "Composite",
          className: "SearchAddressBatchItemResponse"
        }
      }
    }
  }
};

export const ReverseSearchAddressBatchItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReverseSearchAddressBatchItem",
    modelProperties: {
      ...BatchResultItem.type.modelProperties,
      response: {
        serializedName: "response",
        type: {
          name: "Composite",
          className: "ReverseSearchAddressBatchItemResponse"
        }
      }
    }
  }
};

export const GeoJsonPoint: coreClient.CompositeMapper = {
  serializedName: "Point",
  type: {
    name: "Composite",
    className: "GeoJsonPoint",
    uberParent: "GeoJsonPointData",
    polymorphicDiscriminator: GeoJsonPointData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonPointData.type.modelProperties
    }
  }
};

export const GeoJsonMultiPoint: coreClient.CompositeMapper = {
  serializedName: "MultiPoint",
  type: {
    name: "Composite",
    className: "GeoJsonMultiPoint",
    uberParent: "GeoJsonMultiPointData",
    polymorphicDiscriminator:
      GeoJsonMultiPointData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiPointData.type.modelProperties
    }
  }
};

export const GeoJsonMultiLineString: coreClient.CompositeMapper = {
  serializedName: "MultiLineString",
  type: {
    name: "Composite",
    className: "GeoJsonMultiLineString",
    uberParent: "GeoJsonMultiLineStringData",
    polymorphicDiscriminator:
      GeoJsonMultiLineStringData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiLineStringData.type.modelProperties
    }
  }
};

export const GeoJsonPolygon: coreClient.CompositeMapper = {
  serializedName: "Polygon",
  type: {
    name: "Composite",
    className: "GeoJsonPolygon",
    uberParent: "GeoJsonPolygonData",
    polymorphicDiscriminator: GeoJsonPolygonData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonPolygonData.type.modelProperties
    }
  }
};

export const GeoJsonMultiPolygon: coreClient.CompositeMapper = {
  serializedName: "MultiPolygon",
  type: {
    name: "Composite",
    className: "GeoJsonMultiPolygon",
    uberParent: "GeoJsonMultiPolygonData",
    polymorphicDiscriminator:
      GeoJsonMultiPolygonData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiPolygonData.type.modelProperties
    }
  }
};

export const GeoJsonGeometryCollection: coreClient.CompositeMapper = {
  serializedName: "GeometryCollection",
  type: {
    name: "Composite",
    className: "GeoJsonGeometryCollection",
    uberParent: "GeoJsonGeometryCollectionData",
    polymorphicDiscriminator:
      GeoJsonGeometryCollectionData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonGeometryCollectionData.type.modelProperties
    }
  }
};

export const SearchFuzzySearchBatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchFuzzySearchBatchHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchGetFuzzySearchBatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchGetFuzzySearchBatchHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchSearchAddressBatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchSearchAddressBatchHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchGetSearchAddressBatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchGetSearchAddressBatchHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchReverseSearchAddressBatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchReverseSearchAddressBatchHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchGetReverseSearchAddressBatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchGetReverseSearchAddressBatchHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  GeoJsonObject: GeoJsonObject,
  "GeoJsonObject.GeoJsonGeometry": GeoJsonGeometry,
  "GeoJsonObject.Feature": GeoJsonFeature,
  "GeoJsonObject.FeatureCollection": GeoJsonFeatureCollection,
  "GeoJsonLineStringData.LineString": GeoJsonLineString,
  "GeoJsonPointData.Point": GeoJsonPoint,
  "GeoJsonMultiPointData.MultiPoint": GeoJsonMultiPoint,
  "GeoJsonMultiLineStringData.MultiLineString": GeoJsonMultiLineString,
  "GeoJsonPolygonData.Polygon": GeoJsonPolygon,
  "GeoJsonMultiPolygonData.MultiPolygon": GeoJsonMultiPolygon,
  "GeoJsonGeometryCollectionData.GeometryCollection": GeoJsonGeometryCollection
};
