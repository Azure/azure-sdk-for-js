/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type GeoJsonObjectUnion =
  | GeoJsonObject
  | GeoJsonGeometryUnion
  | GeoJsonFeature
  | GeoJsonFeatureCollection;
export type GeoJsonGeometryUnion =
  | GeoJsonGeometry
  | GeoJsonLineString
  | GeoJsonPoint
  | GeoJsonMultiPoint
  | GeoJsonMultiLineString
  | GeoJsonPolygon
  | GeoJsonMultiPolygon
  | GeoJsonGeometryCollection;

/** This object is returned from a successful Search Polygon call */
export interface PolygonResult {
  /**
   * Results array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly polygons?: Polygon[];
}

export interface Polygon {
  /**
   * ID of the returned entity
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly providerId: string;
  /** Geometry data in GeoJSON format. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details. Present only if "error" is not present. */
  geometryData?: GeoJsonObjectUnion;
}

/** A valid `GeoJSON` object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3) for details. */
export interface GeoJsonObject {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "GeoJsonGeometry"
    | "LineString"
    | "Point"
    | "MultiPoint"
    | "MultiLineString"
    | "Polygon"
    | "MultiPolygon"
    | "GeometryCollection"
    | "Feature"
    | "FeatureCollection";
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** This object is returned from a successful Search calls. */
export interface SearchAddressResult {
  /**
   * Summary object for a Search API response
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary: SearchSummary;
  /**
   * A list of Search API results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly results: SearchAddressResultItem[];
}

/** Summary object for a Search API response. */
export interface SearchSummary {
  /**
   * The query parameter that was used to produce these search results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly query?: string;
  /**
   * The type of query being returned: NEARBY or NON_NEAR.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queryType?: QueryType;
  /**
   * Time spent resolving the query, in milliseconds.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queryTime: number;
  /**
   * Number of results in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numResults: number;
  /**
   * The starting offset of the returned Results within the full Result set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly skip?: number;
  /**
   * The total number of Results found.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalResults?: number;
  /**
   * The maximum fuzzy level required to provide Results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fuzzyLevel?: number;
  /**
   * Indication when the internal search engine has applied a geospatial bias to improve the ranking of results.  In  some methods, this can be affected by setting the lat and lon parameters where available.  In other cases it is  purely internal.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geoBias?: LatLongPairAbbreviated;
}

/** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
export interface LatLongPairAbbreviated {
  /** Latitude property */
  lat: number;
  /** Longitude property */
  lon: number;
}

/** Result object for a Search API response. */
export interface SearchAddressResultItem {
  /**
   * One of:
   * * POI
   * * Street
   * * Geography
   * * Point Address
   * * Address Range
   * * Cross Street
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type: SearchAddressResultType;
  /**
   * Id property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id: string;
  /**
   * The value within a result set to indicate the relative matching score between results.  You can use this to  determine that result x is twice as likely to be as relevant as result y if the value of x is 2x the value of y.   The values vary between queries and is only meant as a relative value for one result set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly score: number;
  /**
   * Straight line distance between the result and geobias location in meters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly distanceInMeters?: number;
  /**
   * Information about the original data source of the Result. Used for support requests.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: string;
  entityType?: GeographicEntityType;
  /**
   * Details of the returned POI including information such as the name, phone, url address, and classifications.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly pointOfInterest?: PointOfInterest;
  /**
   * The address of the result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly address: Address;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  position: LatLongPairAbbreviated;
  /**
   * The viewport that covers the result represented by the top-left and bottom-right coordinates of the viewport.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly viewport: BoundingBox;
  /**
   * Array of EntryPoints. Those describe the types of entrances available at the location. The type can be "main" for main entrances such as a front door, or a lobby, and "minor", for side and back doors.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly entryPoints?: EntryPoint[];
  /**
   * Describes the address range on both sides of the street for a search result. Coordinates for the start and end locations of the address range are included.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly addressRanges?: AddressRanges;
  /**
   * Optional section. Reference geometry id for use with the [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSources?: DataSource;
  /**
   * Information on the type of match.
   *
   * One of:
   *   * AddressPoint
   *   * HouseNumberRange
   *   * Street
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly matchType?: MatchType;
  /**
   * Detour time in seconds. Only returned for calls to the Search Along Route API.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detourTime?: number;
}

/** Details of the returned POI including information such as the name, phone, url address, and classifications. */
export interface PointOfInterest {
  /**
   * Name of the POI property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name: string;
  /**
   * Telephone number property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly phone?: string;
  /**
   * Website URL property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly url?: string;
  /**
   * The list of the most specific POI categories
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly categorySet?: PointOfInterestCategorySet[];
  /**
   * Categories array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly categories?: string[];
  /**
   * Classification array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly classifications?: Classification[];
  /**
   * Brands array. The name of the brand for the POI being returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly brands?: Brand[];
  /** Opening hours for a POI (Points of Interest). */
  operatingHours?: OperatingHours;
}

/** POI category */
export interface PointOfInterestCategorySet {
  /**
   * Category ID
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id: number;
}

/** The classification for the POI being returned */
export interface Classification {
  /**
   * Code property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code: string;
  /**
   * Names array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly names: ClassificationName[];
}

/** Name for the classification */
export interface ClassificationName {
  /**
   * Name Locale property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nameLocale: string;
  /**
   * Name property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name: string;
}

/** The brand associated with the POI */
export interface Brand {
  /**
   * Name of the brand
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name: string;
}

/** Opening hours for a POI (Points of Interest). */
export interface OperatingHours {
  /**
   * Value used in the request: none or "nextSevenDays"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mode: string;
  /**
   * List of time ranges for the next 7 days
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeRanges: OperatingHoursTimeRange[];
}

/** Open time range for a day */
export interface OperatingHoursTimeRange {
  /** The point in the next 7 days range when a given POI is being opened, or the beginning of the range if it was opened before the range. */
  startTime: OperatingHoursTime;
  /** The point in the next 7 days range when a given POI is being closed, or the beginning of the range if it was closed before the range. */
  endTime: OperatingHoursTime;
}

/** Represents a date and time */
export interface OperatingHoursTime {
  /**
   * Represents current calendar date in POI time zone, e.g. "2019-02-07".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly date: string;
  /**
   * Hours are in the 24 hour format in the local time of a POI; possible values are 0 - 23.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hour: number;
  /**
   * Minutes are in the local time of a POI; possible values are 0 - 59.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minute: number;
}

/** The address of the result */
export interface Address {
  /**
   * The building number on the street. DEPRECATED, use streetNumber instead.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly buildingNumber?: string;
  /**
   * The street name. DEPRECATED, use streetName instead.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly street?: string;
  /**
   * The name of the street being crossed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly crossStreet?: string;
  /**
   * The building number on the street.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly streetNumber?: string;
  /**
   * The codes used to unambiguously identify the street
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly routeNumbers?: string[];
  /**
   * The street name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly streetName?: string;
  /**
   * The street name and number.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly streetNameAndNumber?: string;
  /**
   * City / Town
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly municipality?: string;
  /**
   * Sub / Super City
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly municipalitySubdivision?: string;
  /**
   * Named Area
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countryTertiarySubdivision?: string;
  /**
   * County
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countrySecondarySubdivision?: string;
  /**
   * State or Province
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countrySubdivision?: string;
  /**
   * Postal Code / Zip Code
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly postalCode?: string;
  /**
   * Extended postal code (availability is dependent on the region).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly extendedPostalCode?: string;
  /**
   * Country (Note: This is a two-letter code, not a country name.)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countryCode?: string;
  /**
   * Country name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly country?: string;
  /**
   * ISO alpha-3 country code
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countryCodeISO3?: string;
  /**
   * An address line formatted according to the formatting rules of a Result's country of origin, or in the case of a country, its full country name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly freeformAddress?: string;
  /**
   * The full name of a first level of country administrative hierarchy. This field appears only in case countrySubdivision is presented in an abbreviated form. Only supported for USA, Canada, and United Kingdom.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countrySubdivisionName?: string;
  /**
   * An address component which represents the name of a geographic area or locality that groups a number of addressable objects for addressing purposes, without being an administrative unit. This field is used to build the `freeformAddress` property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly localName?: string;
  /**
   * The bounding box of the location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly boundingBox?: BoundingBoxCompassNotation;
}

/** The bounding box of the location. */
export interface BoundingBoxCompassNotation {
  /**
   * North-east latitude,longitude coordinate of the bounding box as comma-separated floats
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly northEast: string;
  /**
   * South-west latitude,longitude coordinate of the bounding box as comma-separated floats
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly southWest: string;
  /**
   * Entity type source of the bounding box. For reverse-geocoding this is always equal to position.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly entity?: Entity;
}

/** The viewport that covers the result represented by the top-left and bottom-right coordinates of the viewport. */
export interface BoundingBox {
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  topLeft: LatLongPairAbbreviated;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  bottomRight: LatLongPairAbbreviated;
}

/** The entry point for the POI being returned. */
export interface EntryPoint {
  /**
   * The type of entry point. Value can be either _main_ or _minor_.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type: EntryPointType;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  position: LatLongPairAbbreviated;
}

/** Describes the address range on both sides of the street for a search result. Coordinates for the start and end locations of the address range are included. */
export interface AddressRanges {
  /** Address range on the left side of the street. */
  rangeLeft: string;
  /** Address range on the right side of the street. */
  rangeRight: string;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  from: LatLongPairAbbreviated;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  to: LatLongPairAbbreviated;
}

/** Optional section. Reference ids for use with the [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. */
export interface DataSource {
  /** Information about the geometric shape of the result. Only present if type == Geography. */
  geometry?: GeometryIdentifier;
}

/** Information about the geometric shape of the result. Only present if type == Geography. */
export interface GeometryIdentifier {
  /**
   * Pass this as geometryId to the [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API to fetch geometry information for this result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id: string;
}

/** This object is returned from a successful POI Category Tree call */
export interface PointOfInterestCategoryTreeResult {
  /**
   * Categories array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly categories?: PointOfInterestCategory[];
}

/** POI category result */
export interface PointOfInterestCategory {
  /**
   * Unique ID for the category. ID can be used to restrict search results to specific categories through other Search Service APIs, like [Get Search POI](https://docs.microsoft.com/rest/api/maps/search/getsearchpoi).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id: number;
  /**
   * Name of the category
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name: string;
  /**
   * Array of child category ids
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly childIds: number[];
  /**
   * Array of alternative names of the category
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly synonyms: string[];
}

/** This object is returned from a successful Search Address Reverse call */
export interface ReverseSearchAddressResult {
  /**
   * Summary object for a Search Address Reverse response
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary: SearchSummary;
  /**
   * Addresses array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly addresses: ReverseSearchAddressResultItem[];
}

/** Result object for a Search Address Reverse response */
export interface ReverseSearchAddressResultItem {
  /**
   * The address of the result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly address: Address;
  /**
   * Position property in the form of "{latitude},{longitude}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly position: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly roadUse?: RoadUseType[];
  /**
   * Information on the type of match.
   *
   * One of:
   *   * AddressPoint
   *   * HouseNumberRange
   *   * Street
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly matchType?: MatchType;
}

/** This object is returned from a successful Search Address Reverse CrossStreet call */
export interface ReverseSearchCrossStreetAddressResult {
  /**
   * Summary object for a Search Address Reverse Cross Street response
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary: SearchSummary;
  /**
   * Addresses array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly addresses: ReverseSearchCrossStreetAddressResultItem[];
}

/** Result object for a Search Address Reverse Cross Street response */
export interface ReverseSearchCrossStreetAddressResultItem {
  /**
   * The address of the result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly address?: Address;
  /**
   * Position property in the form of "{latitude},{longitude}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly position?: string;
}

/** This type represents the request body for the Search Inside Geometry service. */
export interface SearchInsideGeometryRequest {
  /** A valid `GeoJSON` object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3) for details. */
  geometry?: Record<string, unknown>;
}

/** This type represents the request body for the Search Along Route service. */
export interface SearchAlongRouteRequest {
  /** A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details. */
  route?: GeoJsonLineString;
}

export interface GeoJsonLineStringData {
  /** Coordinates for the `GeoJson LineString` geometry. */
  coordinates: number[][];
}

/** This type represents the request body for the Batch service. */
export interface BatchRequest {
  /** The list of queries to process. */
  batchItems?: BatchRequestItem[];
}

/** Batch request object */
export interface BatchRequestItem {
  /** This parameter contains a query string used to perform an unstructured geocoding operation. The query string will be passed verbatim to the search API for processing. */
  query?: string;
}

/** An item returned from Batch API. Extend with 'response' property. */
export interface BatchResultItem {
  /**
   * HTTP request status code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusCode: number;
}

/** This object is returned from a successful Batch service call. Extend with 'batchItems' property. */
export interface BatchResult {
  /**
   * Summary of the results for the batch request
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly batchSummary: BatchResultSummary;
}

/** Summary of the results for the batch request */
export interface BatchResultSummary {
  /**
   * Number of successful requests in the batch
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalSuccessfulRequests: number;
  /**
   * Total number of requests in the batch
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalRequests: number;
}

/** The viewport that covers the result represented by the top-left and bottom-right coordinates of the viewport. */
export interface Viewport {
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  topLeftPoint?: LatLongPairAbbreviated;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  btmRightPoint?: LatLongPairAbbreviated;
}

/** Data contained by a `GeoJson Point`. */
export interface GeoJsonPointData {
  /** A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details. */
  coordinates: number[];
}

/** Data contained by a `GeoJson MultiPoint`. */
export interface GeoJsonMultiPointData {
  /** Coordinates for the `GeoJson MultiPoint` geometry. */
  coordinates: number[][];
}

export interface GeoJsonMultiLineStringData {
  /** Coordinates for the `GeoJson MultiLineString` geometry. */
  coordinates: number[][][];
}

export interface GeoJsonPolygonData {
  /** Coordinates for the `GeoJson Polygon` geometry type. */
  coordinates: number[][][];
}

export interface GeoJsonMultiPolygonData {
  /** Contains a list of valid `GeoJSON Polygon` objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude). */
  coordinates: number[][][][];
}

export interface GeoJsonGeometryCollectionData {
  /** Contains a list of valid `GeoJSON` geometry objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude). */
  geometries: GeoJsonGeometryUnion[];
}

export interface GeoJsonFeatureData {
  /** A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details. */
  geometry: GeoJsonGeometryUnion;
  /** Properties can contain any additional metadata about the `Feature`. Value can be any JSON object or a JSON null value */
  properties?: Record<string, unknown>;
  /** Identifier for the feature. */
  id?: string;
  /** The type of the feature. The value depends on the data model the current feature is part of. Some data models may have an empty value. */
  featureType?: string;
}

export interface GeoJsonFeatureCollectionData {
  /** Contains a list of valid `GeoJSON Feature` objects. */
  features: GeoJsonFeature[];
}

/** A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details. */
export type GeoJsonGeometry = GeoJsonObject & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "GeoJsonGeometry"
    | "LineString"
    | "Point"
    | "MultiPoint"
    | "MultiLineString"
    | "Polygon"
    | "MultiPolygon"
    | "GeometryCollection";
};

/** A valid `GeoJSON Feature` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2) for details. */
export type GeoJsonFeature = GeoJsonObject &
  GeoJsonFeatureData & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Feature";
  };

/** A valid `GeoJSON FeatureCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. */
export type GeoJsonFeatureCollection = GeoJsonObject &
  GeoJsonFeatureCollectionData & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FeatureCollection";
  };

/** The result of the query. SearchAddressResponse if the query completed successfully, ErrorResponse otherwise. */
export type SearchAddressBatchItemResponse = SearchAddressResult &
  ErrorResponse & {};

/** The result of the query. SearchAddressReverseResponse if the query completed successfully, ErrorResponse otherwise. */
export type ReverseSearchAddressBatchItemResponse = ReverseSearchAddressResult &
  ErrorResponse & {};

/** A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details. */
export type GeoJsonLineString = GeoJsonGeometry & GeoJsonLineStringData & {};

/** An item returned from Search Address Batch service call. */
export type SearchAddressBatchItem = BatchResultItem & {
  /**
   * The result of the query. SearchAddressResponse if the query completed successfully, ErrorResponse otherwise.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly response: SearchAddressBatchItemResponse;
};

/** An item returned from Search Address Reverse Batch service call. */
export type ReverseSearchAddressBatchItem = BatchResultItem & {
  /**
   * The result of the query. SearchAddressReverseResponse if the query completed successfully, ErrorResponse otherwise.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly response: ReverseSearchAddressBatchItemResponse;
};

/** This object is returned from a successful Search Address Batch service call. */
export type SearchAddressBatchResult = BatchResult & {
  /**
   * Array containing the batch results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly batchItems: SearchAddressBatchItem[];
};

/** This object is returned from a successful Search Address Reverse Batch service call. */
export type ReverseSearchAddressBatchResult = BatchResult & {
  /**
   * Array containing the batch results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly batchItems: ReverseSearchAddressBatchItem[];
};

/** A valid `GeoJSON Point` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details. */
export type GeoJsonPoint = GeoJsonGeometry & GeoJsonPointData & {};

/** A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details. */
export type GeoJsonMultiPoint = GeoJsonGeometry & GeoJsonMultiPointData & {};

/** A valid `GeoJSON MultiLineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.5) for details. */
export type GeoJsonMultiLineString = GeoJsonGeometry &
  GeoJsonMultiLineStringData & {};

/** A valid `GeoJSON Polygon` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6) for details. */
export type GeoJsonPolygon = GeoJsonGeometry & GeoJsonPolygonData & {};

/** A valid `GeoJSON MultiPolygon` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.7) for details. */
export type GeoJsonMultiPolygon = GeoJsonGeometry &
  GeoJsonMultiPolygonData & {};

/** A valid `GeoJSON GeometryCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.8) for details. */
export type GeoJsonGeometryCollection = GeoJsonGeometry &
  GeoJsonGeometryCollectionData & {};

/** Defines headers for Search_fuzzySearchBatch operation. */
export interface SearchFuzzySearchBatchHeaders {
  /** New URL to check for the results of the long running process. */
  location?: string;
}

/** Defines headers for Search_getFuzzySearchBatch operation. */
export interface SearchGetFuzzySearchBatchHeaders {
  /** New URL to check for the results of the long running process. */
  location?: string;
}

/** Defines headers for Search_searchAddressBatch operation. */
export interface SearchSearchAddressBatchHeaders {
  /** New URL to check for the results of the long running process. */
  location?: string;
}

/** Defines headers for Search_getSearchAddressBatch operation. */
export interface SearchGetSearchAddressBatchHeaders {
  /** New URL to check for the results of the long running process. */
  location?: string;
}

/** Defines headers for Search_reverseSearchAddressBatch operation. */
export interface SearchReverseSearchAddressBatchHeaders {
  /** New URL to check for the results of the long running process. */
  location?: string;
}

/** Defines headers for Search_getReverseSearchAddressBatch operation. */
export interface SearchGetReverseSearchAddressBatchHeaders {
  /** New URL to check for the results of the long running process. */
  location?: string;
}

/** Known values of {@link JsonFormat} that the service accepts. */
export enum KnownJsonFormat {
  /** [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259) */
  Json = "json"
}

/**
 * Defines values for JsonFormat. \
 * {@link KnownJsonFormat} can be used interchangeably with JsonFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **json**: [The JavaScript Object Notation Data Interchange Format](https:\/\/tools.ietf.org\/html\/rfc8259)
 */
export type JsonFormat = string;

/** Known values of {@link ResponseFormat} that the service accepts. */
export enum KnownResponseFormat {
  /** [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259) */
  Json = "json",
  /** [The Extensible Markup Language](https://www.w3.org/TR/xml/) */
  Xml = "xml"
}

/**
 * Defines values for ResponseFormat. \
 * {@link KnownResponseFormat} can be used interchangeably with ResponseFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **json**: [The JavaScript Object Notation Data Interchange Format](https:\/\/tools.ietf.org\/html\/rfc8259) \
 * **xml**: [The Extensible Markup Language](https:\/\/www.w3.org\/TR\/xml\/)
 */
export type ResponseFormat = string;

/** Known values of {@link SearchIndexes} that the service accepts. */
export enum KnownSearchIndexes {
  /** Address range interpolation */
  Address = "Addr",
  /** Geographies */
  Geographies = "Geo",
  /** Point Addresses */
  PointAddresses = "PAD",
  /** Points of interest */
  PointsOfInterest = "POI",
  /** Streets */
  Streets = "Str",
  /** Cross Streets (Intersections) */
  CrossStreets = "Xstr"
}

/**
 * Defines values for SearchIndexes. \
 * {@link KnownSearchIndexes} can be used interchangeably with SearchIndexes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Addr**: Address range interpolation \
 * **Geo**: Geographies \
 * **PAD**: Point Addresses \
 * **POI**: Points of interest \
 * **Str**: Streets \
 * **Xstr**: Cross Streets (Intersections)
 */
export type SearchIndexes = string;

/** Known values of {@link ElectricVehicleConnector} that the service accepts. */
export enum KnownElectricVehicleConnector {
  /**
   * These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage.
   *
   * See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets)
   */
  StandardHouseholdCountrySpecific = "StandardHouseholdCountrySpecific",
  /** Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure. */
  IEC62196Type1 = "IEC62196Type1",
  /** Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging. */
  IEC62196Type1CCS = "IEC62196Type1CCS",
  /** Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point */
  IEC62196Type2CableAttached = "IEC62196Type2CableAttached",
  /** Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point. */
  IEC62196Type2Outlet = "IEC62196Type2Outlet",
  /** Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging. */
  IEC62196Type2CCS = "IEC62196Type2CCS",
  /** Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure. */
  IEC62196Type3 = "IEC62196Type3",
  /** CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging. */
  Chademo = "Chademo",
  /** Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration. */
  IEC60309AC1PhaseBlue = "IEC60309AC1PhaseBlue",
  /** Industrial White connector is a DC connector defined in the IEC 60309 standard. */
  IEC60309DCWhite = "IEC60309DCWhite",
  /** The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe. */
  Tesla = "Tesla"
}

/**
 * Defines values for ElectricVehicleConnector. \
 * {@link KnownElectricVehicleConnector} can be used interchangeably with ElectricVehicleConnector,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StandardHouseholdCountrySpecific**: These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage.
 *
 * See also: [Plug & socket types - World Standards](https:\/\/www.worldstandards.eu\/electricity\/plugs-and-sockets) \
 * **IEC62196Type1**: Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure. \
 * **IEC62196Type1CCS**: Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging. \
 * **IEC62196Type2CableAttached**: Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point \
 * **IEC62196Type2Outlet**: Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point. \
 * **IEC62196Type2CCS**: Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging. \
 * **IEC62196Type3**: Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure. \
 * **Chademo**: CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging. \
 * **IEC60309AC1PhaseBlue**: Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration. \
 * **IEC60309DCWhite**: Industrial White connector is a DC connector defined in the IEC 60309 standard. \
 * **Tesla**: The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
 */
export type ElectricVehicleConnector = string;

/** Known values of {@link GeographicEntityType} that the service accepts. */
export enum KnownGeographicEntityType {
  Country = "Country",
  CountrySubdivision = "CountrySubdivision",
  CountrySecondarySubdivision = "CountrySecondarySubdivision",
  CountryTertiarySubdivision = "CountryTertiarySubdivision",
  Municipality = "Municipality",
  MunicipalitySubdivision = "MunicipalitySubdivision",
  Neighbourhood = "Neighbourhood",
  PostalCodeArea = "PostalCodeArea"
}

/**
 * Defines values for GeographicEntityType. \
 * {@link KnownGeographicEntityType} can be used interchangeably with GeographicEntityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Country** \
 * **CountrySubdivision** \
 * **CountrySecondarySubdivision** \
 * **CountryTertiarySubdivision** \
 * **Municipality** \
 * **MunicipalitySubdivision** \
 * **Neighbourhood** \
 * **PostalCodeArea**
 */
export type GeographicEntityType = string;

/** Known values of {@link LocalizedMapView} that the service accepts. */
export enum KnownLocalizedMapView {
  /** United Arab Emirates (Arabic View) */
  AE = "AE",
  /** Argentina (Argentinian View) */
  AR = "AR",
  /** Bahrain (Arabic View) */
  BH = "BH",
  /** India (Indian View) */
  IN = "IN",
  /** Iraq (Arabic View) */
  IQ = "IQ",
  /** Jordan (Arabic View) */
  JO = "JO",
  /** Kuwait (Arabic View) */
  KW = "KW",
  /** Lebanon (Arabic View) */
  LB = "LB",
  /** Morocco (Moroccan View) */
  MA = "MA",
  /** Oman (Arabic View) */
  OM = "OM",
  /** Pakistan (Pakistani View) */
  PK = "PK",
  /** Palestinian Authority (Arabic View) */
  PS = "PS",
  /** Qatar (Arabic View) */
  QA = "QA",
  /** Saudi Arabia (Arabic View) */
  SA = "SA",
  /** Syria (Arabic View) */
  SY = "SY",
  /** Yemen (Arabic View) */
  YE = "YE",
  /** Return the map data based on the IP address of the request. */
  Auto = "Auto",
  /** Unified View (Others) */
  Unified = "Unified"
}

/**
 * Defines values for LocalizedMapView. \
 * {@link KnownLocalizedMapView} can be used interchangeably with LocalizedMapView,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AE**: United Arab Emirates (Arabic View) \
 * **AR**: Argentina (Argentinian View) \
 * **BH**: Bahrain (Arabic View) \
 * **IN**: India (Indian View) \
 * **IQ**: Iraq (Arabic View) \
 * **JO**: Jordan (Arabic View) \
 * **KW**: Kuwait (Arabic View) \
 * **LB**: Lebanon (Arabic View) \
 * **MA**: Morocco (Moroccan View) \
 * **OM**: Oman (Arabic View) \
 * **PK**: Pakistan (Pakistani View) \
 * **PS**: Palestinian Authority (Arabic View) \
 * **QA**: Qatar (Arabic View) \
 * **SA**: Saudi Arabia (Arabic View) \
 * **SY**: Syria (Arabic View) \
 * **YE**: Yemen (Arabic View) \
 * **Auto**: Return the map data based on the IP address of the request. \
 * **Unified**: Unified View (Others)
 */
export type LocalizedMapView = string;

/** Known values of {@link OperatingHoursRange} that the service accepts. */
export enum KnownOperatingHoursRange {
  /** Shows the hours of operation for the next week, starting with the current day in the local time of the POI. */
  NextSevenDays = "nextSevenDays"
}

/**
 * Defines values for OperatingHoursRange. \
 * {@link KnownOperatingHoursRange} can be used interchangeably with OperatingHoursRange,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **nextSevenDays**: Shows the hours of operation for the next week, starting with the current day in the local time of the POI.
 */
export type OperatingHoursRange = string;

/** Known values of {@link QueryType} that the service accepts. */
export enum KnownQueryType {
  /** Search was performed around a certain latitude and longitude with a defined radius */
  Nearby = "NEARBY",
  /** Search was performed globally, without biasing to a certain latitude and longitude, and no defined radius */
  Global = "NON_NEAR"
}

/**
 * Defines values for QueryType. \
 * {@link KnownQueryType} can be used interchangeably with QueryType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NEARBY**: Search was performed around a certain latitude and longitude with a defined radius \
 * **NON_NEAR**: Search was performed globally, without biasing to a certain latitude and longitude, and no defined radius
 */
export type QueryType = string;

/** Known values of {@link SearchAddressResultType} that the service accepts. */
export enum KnownSearchAddressResultType {
  POI = "POI",
  Street = "Street",
  Geography = "Geography",
  PointAddress = "Point Address",
  AddressRange = "Address Range",
  CrossStreet = "Cross Street"
}

/**
 * Defines values for SearchAddressResultType. \
 * {@link KnownSearchAddressResultType} can be used interchangeably with SearchAddressResultType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **POI** \
 * **Street** \
 * **Geography** \
 * **Point Address** \
 * **Address Range** \
 * **Cross Street**
 */
export type SearchAddressResultType = string;

/** Known values of {@link Entity} that the service accepts. */
export enum KnownEntity {
  /** Position entity */
  Position = "position"
}

/**
 * Defines values for Entity. \
 * {@link KnownEntity} can be used interchangeably with Entity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **position**: Position entity
 */
export type Entity = string;

/** Known values of {@link EntryPointType} that the service accepts. */
export enum KnownEntryPointType {
  Main = "main",
  Minor = "minor"
}

/**
 * Defines values for EntryPointType. \
 * {@link KnownEntryPointType} can be used interchangeably with EntryPointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **main** \
 * **minor**
 */
export type EntryPointType = string;

/** Known values of {@link MatchType} that the service accepts. */
export enum KnownMatchType {
  AddressPoint = "AddressPoint",
  HouseNumberRange = "HouseNumberRange",
  Street = "Street"
}

/**
 * Defines values for MatchType. \
 * {@link KnownMatchType} can be used interchangeably with MatchType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AddressPoint** \
 * **HouseNumberRange** \
 * **Street**
 */
export type MatchType = string;

/** Known values of {@link PointOfInterestExtendedPostalCodes} that the service accepts. */
export enum KnownPointOfInterestExtendedPostalCodes {
  POI = "POI",
  None = "None"
}

/**
 * Defines values for PointOfInterestExtendedPostalCodes. \
 * {@link KnownPointOfInterestExtendedPostalCodes} can be used interchangeably with PointOfInterestExtendedPostalCodes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **POI** \
 * **None**
 */
export type PointOfInterestExtendedPostalCodes = string;

/** Known values of {@link RoadUseType} that the service accepts. */
export enum KnownRoadUseType {
  LimitedAccess = "LimitedAccess",
  Arterial = "Arterial",
  Terminal = "Terminal",
  Ramp = "Ramp",
  Rotary = "Rotary",
  LocalStreet = "LocalStreet"
}

/**
 * Defines values for RoadUseType. \
 * {@link KnownRoadUseType} can be used interchangeably with RoadUseType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LimitedAccess** \
 * **Arterial** \
 * **Terminal** \
 * **Ramp** \
 * **Rotary** \
 * **LocalStreet**
 */
export type RoadUseType = string;
/** Defines values for GeoJsonObjectType. */
export type GeoJsonObjectType =
  | "Point"
  | "MultiPoint"
  | "LineString"
  | "MultiLineString"
  | "Polygon"
  | "MultiPolygon"
  | "GeometryCollection"
  | "Feature"
  | "FeatureCollection";

/** Optional parameters. */
export interface SearchListPolygonsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listPolygons operation. */
export type SearchListPolygonsResponse = PolygonResult;

/** Optional parameters. */
export interface SearchFuzzySearchOptionalParams
  extends coreClient.OperationOptions {
  /** Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode */
  isTypeAhead?: boolean;
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  top?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  skip?: number;
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categoryFilter?: number[];
  /** Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries */
  countryCodeFilter?: string[];
  /** Latitude where results should be biased. E.g. 37.337 */
  lat?: number;
  /** Longitude where results should be biased. E.g. -121.89 */
  lon?: number;
  /** The radius in meters to for the results to be constrained to the defined area */
  radiusInMeters?: number;
  /** Top left position of the bounding box. E.g. 37.553,-122.453 */
  topLeft?: string;
  /** Bottom right position of the bounding box. E.g. 37.553,-122.453 */
  btmRight?: string;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: SearchIndexes[];
  /**
   * Minimum fuzziness level to be used. Default: 1, minimum: 1 and maximum: 4
   *
   * * Level 1 has no spell checking.
   *
   * * Level 2 uses normal n-gram spell checking. For example, query "restrant" can be matched to "restaurant."
   *
   * * Level 3 uses sound-like spell checking, and shingle spell checking. Sound-like spell checking is for "rstrnt" to "restaurant" matching. Shingle spell checking is for "mountainview" to "mountain view" matching.
   *
   * * Level 4 doesn’t add any more spell checking functions.
   *
   *
   *
   * The search engine will start looking for a match on the level defined by minFuzzyLevel, and will stop searching at the level specified by maxFuzzyLevel.
   */
  minFuzzyLevel?: number;
  /**
   * Maximum fuzziness level to be used. Default: 2, minimum: 1 and maximum: 4
   *
   * * Level 1 has no spell checking.
   *
   * * Level 2 uses normal n-gram spell checking. For example, query "restrant" can be matched to "restaurant."
   *
   * * Level 3 uses sound-like spell checking, and shingle spell checking. Sound-like spell checking is for "rstrnt" to "restaurant" matching. Shingle spell checking is for "mountainview" to "mountain view" matching.
   *
   * * Level 4 doesn’t add any more spell checking functions.
   *
   *
   *
   * The search engine will start looking for a match on the level defined by minFuzzyLevel, and will stop searching at the level specified by maxFuzzyLevel.
   */
  maxFuzzyLevel?: number;
  /** A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are: Addr = Address range interpolation, Geo = Geographies, PAD = Point Addresses, POI = Points of interest, Str = Streets, Xstr = Cross Streets (intersections) */
  indexFilter?: SearchIndexes[];
  /**
   * A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a "," in their name should be put into quotes.
   *
   * Usage examples:
   *
   *  brandSet=Foo
   *
   *  brandSet=Foo,Bar
   *
   *  brandSet="A,B,C Comma",Bar
   */
  brandFilter?: string[];
  /**
   * A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.
   *
   * Available connector types are:
   *   * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
   *   * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
   *   * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
   *   * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
   *   * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
   *   * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
   *   * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
   *   * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
   *   * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
   *
   * Usage examples:
   *
   *  connectorSet=IEC62196Type2CableAttached
   *  connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
   */
  electricVehicleConnectorFilter?: ElectricVehicleConnector[];
  /**
   * Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. The following parameters are ignored when entityType is set:
   *
   * * heading
   * * number
   * * returnRoadUse
   * * returnSpeedLimit
   * * roadUse
   * * returnMatchType
   */
  entityType?: GeographicEntityType;
  /**
   * The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  localizedMapView?: LocalizedMapView;
  /**
   * Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available. If not passed, then no opening hours information will be returned.
   * Supported value: nextSevenDays
   */
  operatingHours?: OperatingHoursRange;
}

/** Contains response data for the fuzzySearch operation. */
export type SearchFuzzySearchResponse = SearchAddressResult;

/** Optional parameters. */
export interface SearchSearchPointOfInterestOptionalParams
  extends coreClient.OperationOptions {
  /** Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode */
  isTypeAhead?: boolean;
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  top?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  skip?: number;
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categoryFilter?: number[];
  /** Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries */
  countryCodeFilter?: string[];
  /** Latitude where results should be biased. E.g. 37.337 */
  lat?: number;
  /** Longitude where results should be biased. E.g. -121.89 */
  lon?: number;
  /** The radius in meters to for the results to be constrained to the defined area */
  radiusInMeters?: number;
  /** Top left position of the bounding box. E.g. 37.553,-122.453 */
  topLeft?: string;
  /** Bottom right position of the bounding box. E.g. 37.553,-122.453 */
  btmRight?: string;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a "," in their name should be put into quotes.
   *
   * Usage examples:
   *
   *  brandSet=Foo
   *
   *  brandSet=Foo,Bar
   *
   *  brandSet="A,B,C Comma",Bar
   */
  brandFilter?: string[];
  /**
   * A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.
   *
   * Available connector types are:
   *   * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
   *   * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
   *   * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
   *   * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
   *   * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
   *   * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
   *   * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
   *   * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
   *   * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
   *
   * Usage examples:
   *
   *  connectorSet=IEC62196Type2CableAttached
   *  connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
   */
  electricVehicleConnectorFilter?: ElectricVehicleConnector[];
  /**
   * The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  localizedMapView?: LocalizedMapView;
  /**
   * Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available. If not passed, then no opening hours information will be returned.
   * Supported value: nextSevenDays
   */
  operatingHours?: OperatingHoursRange;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **POI** = Points of Interest
   *
   * Value should be **POI** or **None** to disable extended postal codes.
   *
   * By default extended postal codes are included.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: PointOfInterestExtendedPostalCodes[];
}

/** Contains response data for the searchPointOfInterest operation. */
export type SearchSearchPointOfInterestResponse = SearchAddressResult;

/** Optional parameters. */
export interface SearchSearchNearbyPointOfInterestOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  top?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  skip?: number;
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categoryFilter?: number[];
  /** Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries */
  countryCodeFilter?: string[];
  /** The radius in meters to for the results to be constrained to the defined area, Min value is 1, Max Value is 50000. */
  radiusInMeters?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: SearchIndexes[];
  /**
   * A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a "," in their name should be put into quotes.
   *
   * Usage examples:
   *
   *  brandSet=Foo
   *
   *  brandSet=Foo,Bar
   *
   *  brandSet="A,B,C Comma",Bar
   */
  brandFilter?: string[];
  /**
   * A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.
   *
   * Available connector types are:
   *   * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
   *   * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
   *   * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
   *   * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
   *   * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
   *   * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
   *   * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
   *   * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
   *   * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
   *
   * Usage examples:
   *
   *  connectorSet=IEC62196Type2CableAttached
   *  connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
   */
  electricVehicleConnectorFilter?: ElectricVehicleConnector[];
  /**
   * The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  localizedMapView?: LocalizedMapView;
}

/** Contains response data for the searchNearbyPointOfInterest operation. */
export type SearchSearchNearbyPointOfInterestResponse = SearchAddressResult;

/** Optional parameters. */
export interface SearchSearchPointOfInterestCategoryOptionalParams
  extends coreClient.OperationOptions {
  /** Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode */
  isTypeAhead?: boolean;
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  top?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  skip?: number;
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categoryFilter?: number[];
  /** Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries */
  countryCodeFilter?: string[];
  /** Latitude where results should be biased. E.g. 37.337 */
  lat?: number;
  /** Longitude where results should be biased. E.g. -121.89 */
  lon?: number;
  /** The radius in meters to for the results to be constrained to the defined area */
  radiusInMeters?: number;
  /** Top left position of the bounding box. E.g. 37.553,-122.453 */
  topLeft?: string;
  /** Bottom right position of the bounding box. E.g. 37.553,-122.453 */
  btmRight?: string;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: SearchIndexes[];
  /**
   * A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a "," in their name should be put into quotes.
   *
   * Usage examples:
   *
   *  brandSet=Foo
   *
   *  brandSet=Foo,Bar
   *
   *  brandSet="A,B,C Comma",Bar
   */
  brandFilter?: string[];
  /**
   * A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.
   *
   * Available connector types are:
   *   * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
   *   * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
   *   * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
   *   * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
   *   * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
   *   * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
   *   * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
   *   * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
   *   * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
   *
   * Usage examples:
   *
   *  connectorSet=IEC62196Type2CableAttached
   *  connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
   */
  electricVehicleConnectorFilter?: ElectricVehicleConnector[];
  /**
   * The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  localizedMapView?: LocalizedMapView;
  /**
   * Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available. If not passed, then no opening hours information will be returned.
   * Supported value: nextSevenDays
   */
  operatingHours?: OperatingHoursRange;
}

/** Contains response data for the searchPointOfInterestCategory operation. */
export type SearchSearchPointOfInterestCategoryResponse = SearchAddressResult;

/** Optional parameters. */
export interface SearchGetPointOfInterestCategoryTreeOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, except NGT and NGT-Latn. Language tag is case insensitive. When data in specified language is not available for a specific field, default language is used (English).
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
}

/** Contains response data for the getPointOfInterestCategoryTree operation. */
export type SearchGetPointOfInterestCategoryTreeResponse = PointOfInterestCategoryTreeResult;

/** Optional parameters. */
export interface SearchSearchAddressOptionalParams
  extends coreClient.OperationOptions {
  /** Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode */
  isTypeAhead?: boolean;
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  top?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  skip?: number;
  /** Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries */
  countryCodeFilter?: string[];
  /** Latitude where results should be biased. E.g. 37.337 */
  lat?: number;
  /** Longitude where results should be biased. E.g. -121.89 */
  lon?: number;
  /** The radius in meters to for the results to be constrained to the defined area */
  radiusInMeters?: number;
  /** Top left position of the bounding box. E.g. 37.553,-122.453 */
  topLeft?: string;
  /** Bottom right position of the bounding box. E.g. 37.553,-122.453 */
  btmRight?: string;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: SearchIndexes[];
  /**
   * Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. The following parameters are ignored when entityType is set:
   *
   * * heading
   * * number
   * * returnRoadUse
   * * returnSpeedLimit
   * * roadUse
   * * returnMatchType
   */
  entityType?: GeographicEntityType;
  /**
   * The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  localizedMapView?: LocalizedMapView;
}

/** Contains response data for the searchAddress operation. */
export type SearchSearchAddressResponse = SearchAddressResult;

/** Optional parameters. */
export interface SearchReverseSearchAddressOptionalParams
  extends coreClient.OperationOptions {
  /** The radius in meters to for the results to be constrained to the defined area */
  radiusInMeters?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. The following parameters are ignored when entityType is set:
   *
   * * heading
   * * number
   * * returnRoadUse
   * * returnSpeedLimit
   * * roadUse
   * * returnMatchType
   */
  entityType?: GeographicEntityType;
  /**
   * The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  localizedMapView?: LocalizedMapView;
  /** Boolean. To enable return of the posted speed limit */
  includeSpeedLimit?: boolean;
  /** The directional heading of the vehicle in degrees, for travel along a segment of roadway. 0 is North, 90 is East and so on, values range from -360 to 360. The precision can include upto one decimal place */
  heading?: number;
  /** Street number as a string. If a number is sent in along with the request, the response may include the side of the street (Left/Right) and also an offset position for that number */
  streetNumber?: string;
  /** Boolean. To enable return of the road use array for reverse geocodes at street level */
  includeRoadUse?: boolean;
  /** To restrict reverse geocodes to a certain type of road use. The road use array for reverse geocodes can be one or more of LimitedAccess, Arterial, Terminal, Ramp, Rotary, LocalStreet */
  roadUse?: RoadUseType[];
  /**
   * Format of newlines in the formatted address.
   *
   * If true, the address will contain newlines.
   * If false, newlines will be converted to commas.
   */
  allowFreeformNewline?: boolean;
  /** Include information on the type of match the geocoder achieved in the response. */
  includeMatchType?: boolean;
}

/** Contains response data for the reverseSearchAddress operation. */
export type SearchReverseSearchAddressResponse = ReverseSearchAddressResult;

/** Optional parameters. */
export interface SearchReverseSearchCrossStreetAddressOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  top?: number;
  /** The radius in meters to for the results to be constrained to the defined area */
  radiusInMeters?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  localizedMapView?: LocalizedMapView;
  /** The directional heading of the vehicle in degrees, for travel along a segment of roadway. 0 is North, 90 is East and so on, values range from -360 to 360. The precision can include upto one decimal place */
  heading?: number;
}

/** Contains response data for the reverseSearchCrossStreetAddress operation. */
export type SearchReverseSearchCrossStreetAddressResponse = ReverseSearchCrossStreetAddressResult;

/** Optional parameters. */
export interface SearchSearchStructuredAddressOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  top?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  skip?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: SearchIndexes[];
  /**
   * Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. The following parameters are ignored when entityType is set:
   *
   * * heading
   * * number
   * * returnRoadUse
   * * returnSpeedLimit
   * * roadUse
   * * returnMatchType
   */
  entityType?: GeographicEntityType;
  /**
   * The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  localizedMapView?: LocalizedMapView;
  /** The street number portion of an address */
  streetNumber?: string;
  /** The street name portion of an address */
  streetName?: string;
  /** The cross street name for the structured address */
  crossStreet?: string;
  /** The municipality portion of an address */
  municipality?: string;
  /** The municipality subdivision (sub/super city) for the structured address */
  municipalitySubdivision?: string;
  /** The named area for the structured address */
  countryTertiarySubdivision?: string;
  /** The county for the structured address */
  countrySecondarySubdivision?: string;
  /** The country subdivision portion of an address */
  countrySubdivision?: string;
  /** The postal code portion of an address */
  postalCode?: string;
}

/** Contains response data for the searchStructuredAddress operation. */
export type SearchSearchStructuredAddressResponse = SearchAddressResult;

/** Optional parameters. */
export interface SearchSearchInsideGeometryOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  top?: number;
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categoryFilter?: number[];
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: SearchIndexes[];
  /** A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are: Addr = Address range interpolation, Geo = Geographies, PAD = Point Addresses, POI = Points of interest, Str = Streets, Xstr = Cross Streets (intersections) */
  indexFilter?: SearchIndexes[];
  /**
   * The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  localizedMapView?: LocalizedMapView;
  /**
   * Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available. If not passed, then no opening hours information will be returned.
   * Supported value: nextSevenDays
   */
  operatingHours?: OperatingHoursRange;
}

/** Contains response data for the searchInsideGeometry operation. */
export type SearchSearchInsideGeometryResponse = SearchAddressResult;

/** Optional parameters. */
export interface SearchSearchAlongRouteOptionalParams
  extends coreClient.OperationOptions {
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categoryFilter?: number[];
  /**
   * A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a "," in their name should be put into quotes.
   *
   * Usage examples:
   *
   *  brandSet=Foo
   *
   *  brandSet=Foo,Bar
   *
   *  brandSet="A,B,C Comma",Bar
   */
  brandFilter?: string[];
  /**
   * A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.
   *
   * Available connector types are:
   *   * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
   *   * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
   *   * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
   *   * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
   *   * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
   *   * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
   *   * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
   *   * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
   *   * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
   *
   * Usage examples:
   *
   *  connectorSet=IEC62196Type2CableAttached
   *  connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
   */
  electricVehicleConnectorFilter?: ElectricVehicleConnector[];
  /**
   * The View parameter (also called the "user region" parameter) allows you to show the correct maps for a certain country/region for geopolitically disputed regions. Different countries have different views of such regions, and the View parameter allows your application to comply with the view required by the country your application will be serving. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  localizedMapView?: LocalizedMapView;
  /**
   * Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available. If not passed, then no opening hours information will be returned.
   * Supported value: nextSevenDays
   */
  operatingHours?: OperatingHoursRange;
  /** Maximum number of responses that will be returned. Default value is 10. Max value is 20 */
  top?: number;
}

/** Contains response data for the searchAlongRoute operation. */
export type SearchSearchAlongRouteResponse = SearchAddressResult;

/** Optional parameters. */
export interface SearchFuzzySearchBatchSyncOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the fuzzySearchBatchSync operation. */
export type SearchFuzzySearchBatchSyncResponse = SearchAddressBatchResult;

/** Optional parameters. */
export interface SearchFuzzySearchBatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the fuzzySearchBatch operation. */
export type SearchFuzzySearchBatchResponse = SearchAddressBatchResult;

/** Optional parameters. */
export interface SearchGetFuzzySearchBatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFuzzySearchBatch operation. */
export type SearchGetFuzzySearchBatchResponse = SearchAddressBatchResult;

/** Optional parameters. */
export interface SearchSearchAddressBatchSyncOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the searchAddressBatchSync operation. */
export type SearchSearchAddressBatchSyncResponse = SearchAddressBatchResult;

/** Optional parameters. */
export interface SearchSearchAddressBatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the searchAddressBatch operation. */
export type SearchSearchAddressBatchResponse = SearchAddressBatchResult;

/** Optional parameters. */
export interface SearchGetSearchAddressBatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSearchAddressBatch operation. */
export type SearchGetSearchAddressBatchResponse = SearchAddressBatchResult;

/** Optional parameters. */
export interface SearchReverseSearchAddressBatchSyncOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the reverseSearchAddressBatchSync operation. */
export type SearchReverseSearchAddressBatchSyncResponse = ReverseSearchAddressBatchResult;

/** Optional parameters. */
export interface SearchReverseSearchAddressBatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the reverseSearchAddressBatch operation. */
export type SearchReverseSearchAddressBatchResponse = ReverseSearchAddressBatchResult;

/** Optional parameters. */
export interface SearchGetReverseSearchAddressBatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getReverseSearchAddressBatch operation. */
export type SearchGetReverseSearchAddressBatchResponse = ReverseSearchAddressBatchResult;

/** Optional parameters. */
export interface GeneratedClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. */
  clientId?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
