/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  RouteMatrixQuery as RouteMatrixQueryMapper,
  RouteDirectionParameters as RouteDirectionParametersMapper,
  BatchRequest as BatchRequestMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const routeMatrixQuery: OperationParameter = {
  parameterPath: "routeMatrixQuery",
  mapper: RouteMatrixQueryMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const clientId: OperationParameter = {
  parameterPath: "clientId",
  mapper: {
    serializedName: "x-ms-client-id",
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "1.0",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const format: OperationURLParameter = {
  parameterPath: "format",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const waitForResults: OperationQueryParameter = {
  parameterPath: ["options", "waitForResults"],
  mapper: {
    serializedName: "waitForResults",
    type: {
      name: "Boolean"
    }
  }
};

export const computeTravelTime: OperationQueryParameter = {
  parameterPath: ["options", "computeTravelTime"],
  mapper: {
    serializedName: "computeTravelTimeFor",
    type: {
      name: "String"
    }
  }
};

export const filterSectionType: OperationQueryParameter = {
  parameterPath: ["options", "filterSectionType"],
  mapper: {
    serializedName: "sectionType",
    type: {
      name: "String"
    }
  }
};

export const arriveAt: OperationQueryParameter = {
  parameterPath: ["options", "arriveAt"],
  mapper: {
    serializedName: "arriveAt",
    type: {
      name: "DateTime"
    }
  }
};

export const departAt: OperationQueryParameter = {
  parameterPath: ["options", "departAt"],
  mapper: {
    serializedName: "departAt",
    type: {
      name: "DateTime"
    }
  }
};

export const vehicleAxleWeight: OperationQueryParameter = {
  parameterPath: ["options", "vehicleAxleWeight"],
  mapper: {
    defaultValue: 0,
    serializedName: "vehicleAxleWeight",
    type: {
      name: "Number"
    }
  }
};

export const vehicleLength: OperationQueryParameter = {
  parameterPath: ["options", "vehicleLength"],
  mapper: {
    defaultValue: 0,
    serializedName: "vehicleLength",
    type: {
      name: "Number"
    }
  }
};

export const vehicleHeight: OperationQueryParameter = {
  parameterPath: ["options", "vehicleHeight"],
  mapper: {
    defaultValue: 0,
    serializedName: "vehicleHeight",
    type: {
      name: "Number"
    }
  }
};

export const vehicleWidth: OperationQueryParameter = {
  parameterPath: ["options", "vehicleWidth"],
  mapper: {
    defaultValue: 0,
    serializedName: "vehicleWidth",
    type: {
      name: "Number"
    }
  }
};

export const vehicleMaxSpeed: OperationQueryParameter = {
  parameterPath: ["options", "vehicleMaxSpeed"],
  mapper: {
    defaultValue: 0,
    serializedName: "vehicleMaxSpeed",
    type: {
      name: "Number"
    }
  }
};

export const vehicleWeight: OperationQueryParameter = {
  parameterPath: ["options", "vehicleWeight"],
  mapper: {
    defaultValue: 0,
    serializedName: "vehicleWeight",
    type: {
      name: "Number"
    }
  }
};

export const windingness: OperationQueryParameter = {
  parameterPath: ["options", "windingness"],
  mapper: {
    serializedName: "windingness",
    type: {
      name: "String"
    }
  }
};

export const inclineLevel: OperationQueryParameter = {
  parameterPath: ["options", "inclineLevel"],
  mapper: {
    serializedName: "hilliness",
    type: {
      name: "String"
    }
  }
};

export const travelMode: OperationQueryParameter = {
  parameterPath: ["options", "travelMode"],
  mapper: {
    serializedName: "travelMode",
    type: {
      name: "String"
    }
  }
};

export const avoid: OperationQueryParameter = {
  parameterPath: ["options", "avoid"],
  mapper: {
    serializedName: "avoid",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "Multi"
};

export const useTrafficData: OperationQueryParameter = {
  parameterPath: ["options", "useTrafficData"],
  mapper: {
    serializedName: "traffic",
    type: {
      name: "Boolean"
    }
  }
};

export const routeType: OperationQueryParameter = {
  parameterPath: ["options", "routeType"],
  mapper: {
    serializedName: "routeType",
    type: {
      name: "String"
    }
  }
};

export const vehicleLoadType: OperationQueryParameter = {
  parameterPath: ["options", "vehicleLoadType"],
  mapper: {
    serializedName: "vehicleLoadType",
    type: {
      name: "String"
    }
  }
};

export const matrixId: OperationURLParameter = {
  parameterPath: "matrixId",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const format1: OperationURLParameter = {
  parameterPath: "format",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const routePoints: OperationQueryParameter = {
  parameterPath: "routePoints",
  mapper: {
    serializedName: "query",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const maxAlternatives: OperationQueryParameter = {
  parameterPath: ["options", "maxAlternatives"],
  mapper: {
    constraints: {
      InclusiveMaximum: 5,
      InclusiveMinimum: 0
    },
    serializedName: "maxAlternatives",
    type: {
      name: "Number"
    }
  }
};

export const alternativeType: OperationQueryParameter = {
  parameterPath: ["options", "alternativeType"],
  mapper: {
    serializedName: "alternativeType",
    type: {
      name: "String"
    }
  }
};

export const minDeviationDistance: OperationQueryParameter = {
  parameterPath: ["options", "minDeviationDistance"],
  mapper: {
    serializedName: "minDeviationDistance",
    type: {
      name: "Number"
    }
  }
};

export const minDeviationTime: OperationQueryParameter = {
  parameterPath: ["options", "minDeviationTime"],
  mapper: {
    serializedName: "minDeviationTime",
    type: {
      name: "Number"
    }
  }
};

export const instructionsType: OperationQueryParameter = {
  parameterPath: ["options", "instructionsType"],
  mapper: {
    serializedName: "instructionsType",
    type: {
      name: "String"
    }
  }
};

export const language: OperationQueryParameter = {
  parameterPath: ["options", "language"],
  mapper: {
    serializedName: "language",
    type: {
      name: "String"
    }
  }
};

export const computeBestWaypointOrder: OperationQueryParameter = {
  parameterPath: ["options", "computeBestWaypointOrder"],
  mapper: {
    serializedName: "computeBestOrder",
    type: {
      name: "Boolean"
    }
  }
};

export const routeRepresentationForBestOrder: OperationQueryParameter = {
  parameterPath: ["options", "routeRepresentationForBestOrder"],
  mapper: {
    serializedName: "routeRepresentation",
    type: {
      name: "String"
    }
  }
};

export const vehicleHeading: OperationQueryParameter = {
  parameterPath: ["options", "vehicleHeading"],
  mapper: {
    constraints: {
      InclusiveMaximum: 359,
      InclusiveMinimum: 0
    },
    serializedName: "vehicleHeading",
    type: {
      name: "Number"
    }
  }
};

export const report: OperationQueryParameter = {
  parameterPath: ["options", "report"],
  mapper: {
    serializedName: "report",
    type: {
      name: "String"
    }
  }
};

export const isCommercialVehicle: OperationQueryParameter = {
  parameterPath: ["options", "isCommercialVehicle"],
  mapper: {
    defaultValue: false,
    serializedName: "vehicleCommercial",
    type: {
      name: "Boolean"
    }
  }
};

export const vehicleEngineType: OperationQueryParameter = {
  parameterPath: ["options", "vehicleEngineType"],
  mapper: {
    serializedName: "vehicleEngineType",
    type: {
      name: "String"
    }
  }
};

export const constantSpeedConsumptionInLitersPerHundredKm: OperationQueryParameter = {
  parameterPath: ["options", "constantSpeedConsumptionInLitersPerHundredKm"],
  mapper: {
    serializedName: "constantSpeedConsumptionInLitersPerHundredkm",
    type: {
      name: "String"
    }
  }
};

export const currentFuelInLiters: OperationQueryParameter = {
  parameterPath: ["options", "currentFuelInLiters"],
  mapper: {
    serializedName: "currentFuelInLiters",
    type: {
      name: "Number"
    }
  }
};

export const auxiliaryPowerInLitersPerHour: OperationQueryParameter = {
  parameterPath: ["options", "auxiliaryPowerInLitersPerHour"],
  mapper: {
    serializedName: "auxiliaryPowerInLitersPerHour",
    type: {
      name: "Number"
    }
  }
};

export const fuelEnergyDensityInMegajoulesPerLiter: OperationQueryParameter = {
  parameterPath: ["options", "fuelEnergyDensityInMegajoulesPerLiter"],
  mapper: {
    serializedName: "fuelEnergyDensityInMJoulesPerLiter",
    type: {
      name: "Number"
    }
  }
};

export const accelerationEfficiency: OperationQueryParameter = {
  parameterPath: ["options", "accelerationEfficiency"],
  mapper: {
    constraints: {
      InclusiveMaximum: 1,
      InclusiveMinimum: 0
    },
    serializedName: "accelerationEfficiency",
    type: {
      name: "Number"
    }
  }
};

export const decelerationEfficiency: OperationQueryParameter = {
  parameterPath: ["options", "decelerationEfficiency"],
  mapper: {
    constraints: {
      InclusiveMaximum: 1,
      InclusiveMinimum: 0
    },
    serializedName: "decelerationEfficiency",
    type: {
      name: "Number"
    }
  }
};

export const uphillEfficiency: OperationQueryParameter = {
  parameterPath: ["options", "uphillEfficiency"],
  mapper: {
    constraints: {
      InclusiveMaximum: 1,
      InclusiveMinimum: 0
    },
    serializedName: "uphillEfficiency",
    type: {
      name: "Number"
    }
  }
};

export const downhillEfficiency: OperationQueryParameter = {
  parameterPath: ["options", "downhillEfficiency"],
  mapper: {
    constraints: {
      InclusiveMaximum: 1,
      InclusiveMinimum: 0
    },
    serializedName: "downhillEfficiency",
    type: {
      name: "Number"
    }
  }
};

export const constantSpeedConsumptionInKwHPerHundredKm: OperationQueryParameter = {
  parameterPath: ["options", "constantSpeedConsumptionInKwHPerHundredKm"],
  mapper: {
    serializedName: "constantSpeedConsumptionInkWhPerHundredkm",
    type: {
      name: "String"
    }
  }
};

export const currentChargeInKwH: OperationQueryParameter = {
  parameterPath: ["options", "currentChargeInKwH"],
  mapper: {
    serializedName: "currentChargeInkWh",
    type: {
      name: "Number"
    }
  }
};

export const maxChargeInKwH: OperationQueryParameter = {
  parameterPath: ["options", "maxChargeInKwH"],
  mapper: {
    serializedName: "maxChargeInkWh",
    type: {
      name: "Number"
    }
  }
};

export const auxiliaryPowerInKw: OperationQueryParameter = {
  parameterPath: ["options", "auxiliaryPowerInKw"],
  mapper: {
    serializedName: "auxiliaryPowerInkW",
    type: {
      name: "Number"
    }
  }
};

export const routeDirectionParameters: OperationParameter = {
  parameterPath: "routeDirectionParameters",
  mapper: RouteDirectionParametersMapper
};

export const query: OperationQueryParameter = {
  parameterPath: "query",
  mapper: {
    constraints: {
      MinItems: 2,
      MaxItems: 2
    },
    serializedName: "query",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Number"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const fuelBudgetInLiters: OperationQueryParameter = {
  parameterPath: ["options", "fuelBudgetInLiters"],
  mapper: {
    serializedName: "fuelBudgetInLiters",
    type: {
      name: "Number"
    }
  }
};

export const energyBudgetInKwH: OperationQueryParameter = {
  parameterPath: ["options", "energyBudgetInKwH"],
  mapper: {
    serializedName: "energyBudgetInkWh",
    type: {
      name: "Number"
    }
  }
};

export const timeBudgetInSeconds: OperationQueryParameter = {
  parameterPath: ["options", "timeBudgetInSeconds"],
  mapper: {
    serializedName: "timeBudgetInSec",
    type: {
      name: "Number"
    }
  }
};

export const distanceBudgetInMeters: OperationQueryParameter = {
  parameterPath: ["options", "distanceBudgetInMeters"],
  mapper: {
    serializedName: "distanceBudgetInMeters",
    type: {
      name: "Number"
    }
  }
};

export const routeDirectionsBatchQueries: OperationParameter = {
  parameterPath: "routeDirectionsBatchQueries",
  mapper: BatchRequestMapper
};

export const batchId: OperationURLParameter = {
  parameterPath: "batchId",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};
