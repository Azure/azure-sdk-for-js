/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  MapsAccount,
  AccountsListByResourceGroupOptionalParams,
  AccountsListBySubscriptionOptionalParams,
  AccountsCreateOrUpdateOptionalParams,
  AccountsCreateOrUpdateResponse,
  MapsAccountUpdateParameters,
  AccountsUpdateOptionalParams,
  AccountsUpdateResponse,
  AccountsDeleteOptionalParams,
  AccountsGetOptionalParams,
  AccountsGetResponse,
  AccountSasParameters,
  AccountsListSasOptionalParams,
  AccountsListSasResponse,
  AccountsListKeysOptionalParams,
  AccountsListKeysResponse,
  MapsKeySpecification,
  AccountsRegenerateKeysOptionalParams,
  AccountsRegenerateKeysResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Accounts. */
export interface Accounts {
  /**
   * Get all Maps Accounts in a Resource Group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: AccountsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<MapsAccount>;
  /**
   * Get all Maps Accounts in a Subscription
   * @param options The options parameters.
   */
  listBySubscription(
    options?: AccountsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<MapsAccount>;
  /**
   * Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST
   * APIs.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param mapsAccount The new or updated parameters for the Maps Account.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    mapsAccount: MapsAccount,
    options?: AccountsCreateOrUpdateOptionalParams
  ): Promise<AccountsCreateOrUpdateResponse>;
  /**
   * Updates a Maps Account. Only a subset of the parameters may be updated after creation, such as Sku,
   * Tags, Properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param mapsAccountUpdateParameters The updated parameters for the Maps Account.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    mapsAccountUpdateParameters: MapsAccountUpdateParameters,
    options?: AccountsUpdateOptionalParams
  ): Promise<AccountsUpdateResponse>;
  /**
   * Delete a Maps Account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Get a Maps Account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsGetOptionalParams
  ): Promise<AccountsGetResponse>;
  /**
   * Create and list an account shared access signature token. Use this SAS token for authentication to
   * Azure Maps REST APIs through various Azure Maps SDKs. As prerequisite to create a SAS Token.
   *
   * Prerequisites:
   * 1. Create or have an existing User Assigned Managed Identity in the same Azure region as the
   * account.
   * 2. Create or update an Azure Map account with the same Azure region as the User Assigned Managed
   * Identity is placed.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param mapsAccountSasParameters The updated parameters for the Maps Account.
   * @param options The options parameters.
   */
  listSas(
    resourceGroupName: string,
    accountName: string,
    mapsAccountSasParameters: AccountSasParameters,
    options?: AccountsListSasOptionalParams
  ): Promise<AccountsListSasResponse>;
  /**
   * Get the keys to use with the Maps APIs. A key is used to authenticate and authorize access to the
   * Maps REST APIs. Only one key is needed at a time; two are given to provide seamless key
   * regeneration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsListKeysOptionalParams
  ): Promise<AccountsListKeysResponse>;
  /**
   * Regenerate either the primary or secondary key for use with the Maps APIs. The old key will stop
   * working immediately.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param keySpecification Which key to regenerate:  primary or secondary.
   * @param options The options parameters.
   */
  regenerateKeys(
    resourceGroupName: string,
    accountName: string,
    keySpecification: MapsKeySpecification,
    options?: AccountsRegenerateKeysOptionalParams
  ): Promise<AccountsRegenerateKeysResponse>;
}
