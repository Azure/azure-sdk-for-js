/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/accountsMappers";
import * as Parameters from "../models/parameters";
import { AzureMapsManagementClientContext } from "../azureMapsManagementClientContext";

/** Class representing a Accounts. */
export class Accounts {
  private readonly client: AzureMapsManagementClientContext;

  /**
   * Create a Accounts.
   * @param {AzureMapsManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureMapsManagementClientContext) {
    this.client = client;
  }

  /**
   * Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps
   * REST APIs.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param mapsAccount The new or updated parameters for the Maps Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountsCreateOrUpdateResponse>
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    mapsAccount: Models.MapsAccount,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param mapsAccount The new or updated parameters for the Maps Account.
   * @param callback The callback
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    mapsAccount: Models.MapsAccount,
    callback: msRest.ServiceCallback<Models.MapsAccount>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param mapsAccount The new or updated parameters for the Maps Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    mapsAccount: Models.MapsAccount,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MapsAccount>
  ): void;
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    mapsAccount: Models.MapsAccount,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MapsAccount>,
    callback?: msRest.ServiceCallback<Models.MapsAccount>
  ): Promise<Models.AccountsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        mapsAccount,
        options
      },
      createOrUpdateOperationSpec,
      callback
    ) as Promise<Models.AccountsCreateOrUpdateResponse>;
  }

  /**
   * Updates a Maps Account. Only a subset of the parameters may be updated after creation, such as
   * Sku, Tags, Properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param mapsAccountUpdateParameters The updated parameters for the Maps Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountsUpdateResponse>
   */
  update(
    resourceGroupName: string,
    accountName: string,
    mapsAccountUpdateParameters: Models.MapsAccountUpdateParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param mapsAccountUpdateParameters The updated parameters for the Maps Account.
   * @param callback The callback
   */
  update(
    resourceGroupName: string,
    accountName: string,
    mapsAccountUpdateParameters: Models.MapsAccountUpdateParameters,
    callback: msRest.ServiceCallback<Models.MapsAccount>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param mapsAccountUpdateParameters The updated parameters for the Maps Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(
    resourceGroupName: string,
    accountName: string,
    mapsAccountUpdateParameters: Models.MapsAccountUpdateParameters,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MapsAccount>
  ): void;
  update(
    resourceGroupName: string,
    accountName: string,
    mapsAccountUpdateParameters: Models.MapsAccountUpdateParameters,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MapsAccount>,
    callback?: msRest.ServiceCallback<Models.MapsAccount>
  ): Promise<Models.AccountsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        mapsAccountUpdateParameters,
        options
      },
      updateOperationSpec,
      callback
    ) as Promise<Models.AccountsUpdateResponse>;
  }

  /**
   * Delete a Maps Account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param callback The callback
   */
  deleteMethod(
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<void>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<void>
  ): void;
  deleteMethod(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>,
    callback?: msRest.ServiceCallback<void>
  ): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      deleteMethodOperationSpec,
      callback
    );
  }

  /**
   * Get a Maps Account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountsGetResponse>
   */
  get(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<Models.MapsAccount>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MapsAccount>
  ): void;
  get(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MapsAccount>,
    callback?: msRest.ServiceCallback<Models.MapsAccount>
  ): Promise<Models.AccountsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.AccountsGetResponse>;
  }

  /**
   * Get all Maps Accounts in a Resource Group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountsListByResourceGroupResponse>
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(
    resourceGroupName: string,
    callback: msRest.ServiceCallback<Models.MapsAccounts>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(
    resourceGroupName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MapsAccounts>
  ): void;
  listByResourceGroup(
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MapsAccounts>,
    callback?: msRest.ServiceCallback<Models.MapsAccounts>
  ): Promise<Models.AccountsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback
    ) as Promise<Models.AccountsListByResourceGroupResponse>;
  }

  /**
   * Get all Maps Accounts in a Subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountsListBySubscriptionResponse>
   */
  listBySubscription(
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.MapsAccounts>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MapsAccounts>
  ): void;
  listBySubscription(
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MapsAccounts>,
    callback?: msRest.ServiceCallback<Models.MapsAccounts>
  ): Promise<Models.AccountsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback
    ) as Promise<Models.AccountsListBySubscriptionResponse>;
  }

  /**
   * Get the keys to use with the Maps APIs. A key is used to authenticate and authorize access to
   * the Maps REST APIs. Only one key is needed at a time; two are given to provide seamless key
   * regeneration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountsListKeysResponse>
   */
  listKeys(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountsListKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param callback The callback
   */
  listKeys(
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<Models.MapsAccountKeys>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MapsAccountKeys>
  ): void;
  listKeys(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MapsAccountKeys>,
    callback?: msRest.ServiceCallback<Models.MapsAccountKeys>
  ): Promise<Models.AccountsListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listKeysOperationSpec,
      callback
    ) as Promise<Models.AccountsListKeysResponse>;
  }

  /**
   * Regenerate either the primary or secondary key for use with the Maps APIs. The old key will stop
   * working immediately.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param keySpecification Which key to regenerate:  primary or secondary.
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountsRegenerateKeysResponse>
   */
  regenerateKeys(
    resourceGroupName: string,
    accountName: string,
    keySpecification: Models.MapsKeySpecification,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountsRegenerateKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param keySpecification Which key to regenerate:  primary or secondary.
   * @param callback The callback
   */
  regenerateKeys(
    resourceGroupName: string,
    accountName: string,
    keySpecification: Models.MapsKeySpecification,
    callback: msRest.ServiceCallback<Models.MapsAccountKeys>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param keySpecification Which key to regenerate:  primary or secondary.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateKeys(
    resourceGroupName: string,
    accountName: string,
    keySpecification: Models.MapsKeySpecification,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MapsAccountKeys>
  ): void;
  regenerateKeys(
    resourceGroupName: string,
    accountName: string,
    keySpecification: Models.MapsKeySpecification,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MapsAccountKeys>,
    callback?: msRest.ServiceCallback<Models.MapsAccountKeys>
  ): Promise<Models.AccountsRegenerateKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        keySpecification,
        options
      },
      regenerateKeysOperationSpec,
      callback
    ) as Promise<Models.AccountsRegenerateKeysResponse>;
  }

  /**
   * Get all Maps Accounts in a Resource Group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.MapsAccounts>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MapsAccounts>
  ): void;
  listByResourceGroupNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MapsAccounts>,
    callback?: msRest.ServiceCallback<Models.MapsAccounts>
  ): Promise<Models.AccountsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback
    ) as Promise<Models.AccountsListByResourceGroupNextResponse>;
  }

  /**
   * Get all Maps Accounts in a Subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.MapsAccounts>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MapsAccounts>
  ): void;
  listBySubscriptionNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MapsAccounts>,
    callback?: msRest.ServiceCallback<Models.MapsAccounts>
  ): Promise<Models.AccountsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback
    ) as Promise<Models.AccountsListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "mapsAccount",
    mapper: {
      ...Mappers.MapsAccount,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.MapsAccount
    },
    201: {
      bodyMapper: Mappers.MapsAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "mapsAccountUpdateParameters",
    mapper: {
      ...Mappers.MapsAccountUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.MapsAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.MapsAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.MapsAccounts
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Maps/accounts",
  urlParameters: [Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.MapsAccounts
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/listKeys",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.MapsAccountKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const regenerateKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/regenerateKey",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "keySpecification",
    mapper: {
      ...Mappers.MapsKeySpecification,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.MapsAccountKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.MapsAccounts
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.MapsAccounts
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
