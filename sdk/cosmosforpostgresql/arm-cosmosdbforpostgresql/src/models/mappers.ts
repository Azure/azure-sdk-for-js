/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ClusterListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cluster"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaintenanceWindow: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceWindow",
    modelProperties: {
      customWindow: {
        serializedName: "customWindow",
        type: {
          name: "String"
        }
      },
      startHour: {
        serializedName: "startHour",
        type: {
          name: "Number"
        }
      },
      startMinute: {
        serializedName: "startMinute",
        type: {
          name: "Number"
        }
      },
      dayOfWeek: {
        serializedName: "dayOfWeek",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServerNameItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerNameItem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        serializedName: "fullyQualifiedDomainName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointProperty",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ClusterForUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterForUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      postgresqlVersion: {
        serializedName: "properties.postgresqlVersion",
        type: {
          name: "String"
        }
      },
      citusVersion: {
        serializedName: "properties.citusVersion",
        type: {
          name: "String"
        }
      },
      enableShardsOnCoordinator: {
        serializedName: "properties.enableShardsOnCoordinator",
        type: {
          name: "Boolean"
        }
      },
      enableHa: {
        serializedName: "properties.enableHa",
        type: {
          name: "Boolean"
        }
      },
      preferredPrimaryZone: {
        serializedName: "properties.preferredPrimaryZone",
        type: {
          name: "String"
        }
      },
      coordinatorServerEdition: {
        serializedName: "properties.coordinatorServerEdition",
        type: {
          name: "String"
        }
      },
      coordinatorStorageQuotaInMb: {
        serializedName: "properties.coordinatorStorageQuotaInMb",
        type: {
          name: "Number"
        }
      },
      coordinatorVCores: {
        serializedName: "properties.coordinatorVCores",
        type: {
          name: "Number"
        }
      },
      coordinatorEnablePublicIpAccess: {
        serializedName: "properties.coordinatorEnablePublicIpAccess",
        type: {
          name: "Boolean"
        }
      },
      nodeServerEdition: {
        serializedName: "properties.nodeServerEdition",
        type: {
          name: "String"
        }
      },
      nodeCount: {
        serializedName: "properties.nodeCount",
        type: {
          name: "Number"
        }
      },
      nodeStorageQuotaInMb: {
        serializedName: "properties.nodeStorageQuotaInMb",
        type: {
          name: "Number"
        }
      },
      nodeVCores: {
        serializedName: "properties.nodeVCores",
        type: {
          name: "Number"
        }
      },
      nodeEnablePublicIpAccess: {
        serializedName: "properties.nodeEnablePublicIpAccess",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      maintenanceWindow: {
        serializedName: "properties.maintenanceWindow",
        type: {
          name: "Composite",
          className: "MaintenanceWindow"
        }
      }
    }
  }
};

export const ClusterServerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterServerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterServer"
            }
          }
        }
      }
    }
  }
};

export const ServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerProperties",
    modelProperties: {
      serverEdition: {
        serializedName: "serverEdition",
        type: {
          name: "String"
        }
      },
      storageQuotaInMb: {
        serializedName: "storageQuotaInMb",
        type: {
          name: "Number"
        }
      },
      vCores: {
        serializedName: "vCores",
        type: {
          name: "Number"
        }
      },
      enableHa: {
        serializedName: "enableHa",
        type: {
          name: "Boolean"
        }
      },
      enablePublicIpAccess: {
        serializedName: "enablePublicIpAccess",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isReadOnly: {
        serializedName: "isReadOnly",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      administratorLogin: {
        serializedName: "administratorLogin",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerConfigurationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerConfiguration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterConfigurationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Configuration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerRoleGroupConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerRoleGroupConfiguration",
    modelProperties: {
      role: {
        serializedName: "role",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "defaultValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      }
    }
  }
};

export const RoleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Role"
            }
          }
        }
      }
    }
  }
};

export const NameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.DBforPostgreSQL/serverGroupsv2",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailability",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupIds: {
        serializedName: "properties.groupIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ClusterServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterServerProperties",
    modelProperties: {
      ...ServerProperties.type.modelProperties,
      fullyQualifiedDomainName: {
        serializedName: "fullyQualifiedDomainName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      haState: {
        serializedName: "haState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      availabilityZone: {
        serializedName: "availabilityZone",
        type: {
          name: "String"
        }
      },
      postgresqlVersion: {
        serializedName: "postgresqlVersion",
        type: {
          name: "String"
        }
      },
      citusVersion: {
        serializedName: "citusVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimplePrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimplePrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      groupIds: {
        serializedName: "properties.groupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      }
    }
  }
};

export const ClusterServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterServer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      serverEdition: {
        serializedName: "properties.serverEdition",
        type: {
          name: "String"
        }
      },
      storageQuotaInMb: {
        serializedName: "properties.storageQuotaInMb",
        type: {
          name: "Number"
        }
      },
      vCores: {
        serializedName: "properties.vCores",
        type: {
          name: "Number"
        }
      },
      enableHa: {
        serializedName: "properties.enableHa",
        type: {
          name: "Boolean"
        }
      },
      enablePublicIpAccess: {
        serializedName: "properties.enablePublicIpAccess",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isReadOnly: {
        serializedName: "properties.isReadOnly",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        serializedName: "properties.fullyQualifiedDomainName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "properties.role",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      haState: {
        serializedName: "properties.haState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      availabilityZone: {
        serializedName: "properties.availabilityZone",
        type: {
          name: "String"
        }
      },
      postgresqlVersion: {
        serializedName: "properties.postgresqlVersion",
        type: {
          name: "String"
        }
      },
      citusVersion: {
        serializedName: "properties.citusVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerConfiguration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "properties.defaultValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "properties.dataType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowedValues: {
        serializedName: "properties.allowedValues",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiresRestart: {
        serializedName: "properties.requiresRestart",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Configuration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "properties.dataType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowedValues: {
        serializedName: "properties.allowedValues",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiresRestart: {
        serializedName: "properties.requiresRestart",
        type: {
          name: "Boolean"
        }
      },
      serverRoleGroupConfigurations: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "properties.serverRoleGroupConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerRoleGroupConfiguration"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      startIpAddress: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "properties.startIpAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "properties.endIpAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Role: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Role",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      password: {
        serializedName: "properties.password",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Cluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      postgresqlVersion: {
        serializedName: "properties.postgresqlVersion",
        type: {
          name: "String"
        }
      },
      citusVersion: {
        serializedName: "properties.citusVersion",
        type: {
          name: "String"
        }
      },
      maintenanceWindow: {
        serializedName: "properties.maintenanceWindow",
        type: {
          name: "Composite",
          className: "MaintenanceWindow"
        }
      },
      preferredPrimaryZone: {
        serializedName: "properties.preferredPrimaryZone",
        type: {
          name: "String"
        }
      },
      enableShardsOnCoordinator: {
        serializedName: "properties.enableShardsOnCoordinator",
        type: {
          name: "Boolean"
        }
      },
      enableHa: {
        serializedName: "properties.enableHa",
        type: {
          name: "Boolean"
        }
      },
      coordinatorServerEdition: {
        serializedName: "properties.coordinatorServerEdition",
        type: {
          name: "String"
        }
      },
      coordinatorStorageQuotaInMb: {
        serializedName: "properties.coordinatorStorageQuotaInMb",
        type: {
          name: "Number"
        }
      },
      coordinatorVCores: {
        serializedName: "properties.coordinatorVCores",
        type: {
          name: "Number"
        }
      },
      coordinatorEnablePublicIpAccess: {
        serializedName: "properties.coordinatorEnablePublicIpAccess",
        type: {
          name: "Boolean"
        }
      },
      nodeServerEdition: {
        serializedName: "properties.nodeServerEdition",
        type: {
          name: "String"
        }
      },
      nodeCount: {
        serializedName: "properties.nodeCount",
        type: {
          name: "Number"
        }
      },
      nodeStorageQuotaInMb: {
        serializedName: "properties.nodeStorageQuotaInMb",
        type: {
          name: "Number"
        }
      },
      nodeVCores: {
        serializedName: "properties.nodeVCores",
        type: {
          name: "Number"
        }
      },
      nodeEnablePublicIpAccess: {
        serializedName: "properties.nodeEnablePublicIpAccess",
        type: {
          name: "Boolean"
        }
      },
      serverNames: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "properties.serverNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerNameItem"
            }
          }
        }
      },
      sourceResourceId: {
        serializedName: "properties.sourceResourceId",
        type: {
          name: "String"
        }
      },
      sourceLocation: {
        serializedName: "properties.sourceLocation",
        type: {
          name: "String"
        }
      },
      pointInTimeUTC: {
        serializedName: "properties.pointInTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      readReplicas: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "properties.readReplicas",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      earliestRestoreTime: {
        serializedName: "properties.earliestRestoreTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SimplePrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const ClustersCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersRestartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersRestartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersStopHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersPromoteReadReplicaHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersPromoteReadReplicaHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationsUpdateOnCoordinatorHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationsUpdateOnCoordinatorHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationsUpdateOnNodeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationsUpdateOnNodeHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRulesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRulesCreateOrUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRulesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRulesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RolesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RolesCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RolesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RolesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsCreateOrUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-async-operation",
        type: {
          name: "String"
        }
      }
    }
  }
};
