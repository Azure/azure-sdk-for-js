/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of clusters. */
export interface ClusterListResult {
  /** The list of clusters */
  value?: Cluster[];
  /**
   * The link used to get the next page of cluster list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Schedule settings for regular cluster updates. */
export interface MaintenanceWindow {
  /** Indicates whether custom maintenance window is enabled or not. */
  customWindow?: string;
  /** Start hour within preferred day of the week for maintenance window. */
  startHour?: number;
  /** Start minute within the start hour for maintenance window. */
  startMinute?: number;
  /** Preferred day of the week for maintenance window. */
  dayOfWeek?: number;
}

/** The name object for a server. */
export interface ServerNameItem {
  /** The name of a server. */
  name?: string;
  /**
   * The fully qualified domain name of a server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullyQualifiedDomainName?: string;
}

/** Property to represent resource id of the private endpoint. */
export interface PrivateEndpointProperty {
  /** Resource id of the private endpoint. */
  id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval/rejection of the connection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Represents a cluster for update. */
export interface ClusterForUpdate {
  /** Application-specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
  /**
   * The password of the administrator login. Each cluster is created with pre-defined administrative role called ‘citus’.
   * This value contains a credential. Consider obscuring before showing to users
   */
  administratorLoginPassword?: string;
  /** The major PostgreSQL version on all cluster servers. */
  postgresqlVersion?: string;
  /** The Citus extension version on all cluster servers. */
  citusVersion?: string;
  /** If shards on coordinator is enabled or not for the cluster. */
  enableShardsOnCoordinator?: boolean;
  /** If high availability (HA) is enabled or not for the cluster. */
  enableHa?: boolean;
  /** Preferred primary availability zone (AZ) for all cluster servers. */
  preferredPrimaryZone?: string;
  /** The edition of the coordinator (default: GeneralPurpose). */
  coordinatorServerEdition?: string;
  /** The storage of the coordinator in MB. */
  coordinatorStorageQuotaInMb?: number;
  /** The vCores count of the coordinator (max: 96). */
  coordinatorVCores?: number;
  /** If public access is enabled on coordinator. */
  coordinatorEnablePublicIpAccess?: boolean;
  /** The edition of a node (default: MemoryOptimized). */
  nodeServerEdition?: string;
  /** Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1. */
  nodeCount?: number;
  /** The storage in MB on each worker node. */
  nodeStorageQuotaInMb?: number;
  /** The compute in vCores on each worker node (max: 104). */
  nodeVCores?: number;
  /**
   * If public access is enabled on worker nodes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeEnablePublicIpAccess?: boolean;
  /** Maintenance window of a cluster. */
  maintenanceWindow?: MaintenanceWindow;
}

/** A list of servers in a cluster. */
export interface ClusterServerListResult {
  /** The list of servers in a cluster. */
  value?: ClusterServer[];
}

/** The properties of a server. */
export interface ServerProperties {
  /** The edition of a server. */
  serverEdition?: string;
  /** The storage of a server in MB. */
  storageQuotaInMb?: number;
  /** The vCores count of a server. */
  vCores?: number;
  /** If high availability (HA) is enabled or not for the server. */
  enableHa?: boolean;
  /**
   * If public access is enabled on server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enablePublicIpAccess?: boolean;
  /**
   * If server database is set to read-only by system maintenance depending on high disk space usage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isReadOnly?: boolean;
  /**
   * The administrator's login name of the servers in the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administratorLogin?: string;
}

/** A list of server configurations. */
export interface ServerConfigurationListResult {
  /** The list of server configurations. */
  value?: ServerConfiguration[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of cluster configurations. */
export interface ClusterConfigurationListResult {
  /** The list of cluster configurations. */
  value?: Configuration[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Represents server role group configuration value. */
export interface ServerRoleGroupConfiguration {
  /** The role of servers in the server role group. */
  role: ServerRole;
  /** Value of the configuration. */
  value: string;
  /**
   * Default value of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultValue?: string;
  /**
   * Source of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly source?: string;
}

/** A list of firewall rules. */
export interface FirewallRuleListResult {
  /** The list of firewall rules in a cluster. */
  value?: FirewallRule[];
}

/** A list of roles. */
export interface RoleListResult {
  /** The list of roles in a cluster. */
  value?: Role[];
}

/** Request from client to check cluster name availability. */
export interface NameAvailabilityRequest {
  /** Cluster name to verify. */
  name: string;
  /** Resource type used for verification. */
  type: "Microsoft.DBforPostgreSQL/serverGroupsv2";
}

/** Represents cluster name availability. */
export interface NameAvailability {
  /** Error message. */
  message?: string;
  /** Indicates whether the cluster name is available. */
  nameAvailable?: boolean;
  /** Name of the cluster. */
  name?: string;
  /** Type of the cluster. */
  type?: string;
}

/** A list of resource provider operations. */
export interface OperationListResult {
  /** Collection of available operation details. */
  value?: Operation[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** REST API operation definition. */
export interface Operation {
  /**
   * The name of the operation being performed on this particular object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The localized display information for this particular operation or action.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly display?: OperationDisplay;
  /** Indicates whether the operation is a data action. */
  isDataAction?: boolean;
  /**
   * The intended executor of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: OperationOrigin;
  /**
   * Additional descriptions for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: { [propertyName: string]: Record<string, unknown> };
}

/** Display metadata associated with the operation. */
export interface OperationDisplay {
  /**
   * Operation resource provider name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * Localized friendly name for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * Operation description.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** List of private endpoint connections associated with the specified resource. */
export interface PrivateEndpointConnectionListResult {
  /** Array of private endpoint connections. */
  value?: PrivateEndpointConnection[];
}

/** The private endpoint resource. */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for private endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** A list of private link resources. */
export interface PrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: PrivateLinkResource[];
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The private endpoint connection resource. */
export interface PrivateEndpointConnection extends Resource {
  /**
   * The group ids for the private endpoint resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupIds?: string[];
  /** The private endpoint resource. */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** A private link resource. */
export interface PrivateLinkResource extends Resource {
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** The private link resource private link DNS zone name. */
  requiredZoneNames?: string[];
}

/** The properties of a server in cluster. */
export interface ClusterServerProperties extends ServerProperties {
  /**
   * The fully qualified domain name of a server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullyQualifiedDomainName?: string;
  /** The role of server in the cluster. */
  role?: ServerRole;
  /**
   * A state of a cluster/server that is visible to user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: string;
  /**
   * A state of HA feature for the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly haState?: string;
  /** Availability Zone information of the server. */
  availabilityZone?: string;
  /** The major PostgreSQL version of server. */
  postgresqlVersion?: string;
  /** The Citus extension version of server. */
  citusVersion?: string;
}

/** A private endpoint connection. */
export interface SimplePrivateEndpointConnection extends ProxyResource {
  /** Private endpoint which the connection belongs to. */
  privateEndpoint?: PrivateEndpointProperty;
  /** Group ids of the private endpoint connection. */
  groupIds?: string[];
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
}

/** Represents a server in a cluster. */
export interface ClusterServer extends ProxyResource {
  /** The edition of a server. */
  serverEdition?: string;
  /** The storage of a server in MB. */
  storageQuotaInMb?: number;
  /** The vCores count of a server. */
  vCores?: number;
  /** If high availability (HA) is enabled or not for the server. */
  enableHa?: boolean;
  /**
   * If public access is enabled on server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enablePublicIpAccess?: boolean;
  /**
   * If server database is set to read-only by system maintenance depending on high disk space usage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isReadOnly?: boolean;
  /**
   * The administrator's login name of the servers in the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administratorLogin?: string;
  /**
   * The fully qualified domain name of a server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullyQualifiedDomainName?: string;
  /** The role of server in the cluster. */
  role?: ServerRole;
  /**
   * A state of a cluster/server that is visible to user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: string;
  /**
   * A state of HA feature for the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly haState?: string;
  /** Availability Zone information of the server. */
  availabilityZone?: string;
  /** The major PostgreSQL version of server. */
  postgresqlVersion?: string;
  /** The Citus extension version of server. */
  citusVersion?: string;
}

/** Represents a configuration. */
export interface ServerConfiguration extends ProxyResource {
  /** Value of the configuration. */
  value?: string;
  /**
   * Source of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly source?: string;
  /**
   * Description of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * Default value of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultValue?: string;
  /**
   * Data type of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataType?: ConfigurationDataType;
  /**
   * Allowed values of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly allowedValues?: string;
  /**
   * If configuration change requires restart.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiresRestart?: boolean;
  /**
   * Provisioning state of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Represents configuration details for coordinator and node. */
export interface Configuration extends ProxyResource {
  /**
   * Description of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * Data type of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataType?: ConfigurationDataType;
  /**
   * Allowed values of the configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly allowedValues?: string;
  /** If configuration change requires restart. */
  requiresRestart?: boolean;
  /** The list of server role group configuration values. */
  serverRoleGroupConfigurations?: ServerRoleGroupConfiguration[];
  /**
   * Provisioning state of the configuration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Represents a cluster firewall rule. */
export interface FirewallRule extends ProxyResource {
  /** The start IP address of the cluster firewall rule. Must be IPv4 format. */
  startIpAddress: string;
  /** The end IP address of the cluster firewall rule. Must be IPv4 format. */
  endIpAddress: string;
  /**
   * Provisioning state of the firewall rule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Represents a cluster role. */
export interface Role extends ProxyResource {
  /**
   * The password of the cluster role.
   * This value contains a credential. Consider obscuring before showing to users
   */
  password: string;
  /**
   * Provisioning state of the role
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Represents a cluster. */
export interface Cluster extends TrackedResource {
  /**
   * The administrator's login name of the servers in the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administratorLogin?: string;
  /**
   * The password of the administrator login. Required for creation.
   * This value contains a credential. Consider obscuring before showing to users
   */
  administratorLoginPassword?: string;
  /**
   * Provisioning state of the cluster
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * A state of a cluster/server that is visible to user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: string;
  /** The major PostgreSQL version on all cluster servers. */
  postgresqlVersion?: string;
  /** The Citus extension version on all cluster servers. */
  citusVersion?: string;
  /** Maintenance window of a cluster. */
  maintenanceWindow?: MaintenanceWindow;
  /** Preferred primary availability zone (AZ) for all cluster servers. */
  preferredPrimaryZone?: string;
  /** If shards on coordinator is enabled or not for the cluster. */
  enableShardsOnCoordinator?: boolean;
  /** If high availability (HA) is enabled or not for the cluster. */
  enableHa?: boolean;
  /** The edition of a coordinator server (default: GeneralPurpose). Required for creation. */
  coordinatorServerEdition?: string;
  /** The storage of a server in MB. Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information. */
  coordinatorStorageQuotaInMb?: number;
  /** The vCores count of a server (max: 96). Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information. */
  coordinatorVCores?: number;
  /** If public access is enabled on coordinator. */
  coordinatorEnablePublicIpAccess?: boolean;
  /** The edition of a node server (default: MemoryOptimized). */
  nodeServerEdition?: string;
  /** Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1. Required for creation. */
  nodeCount?: number;
  /** The storage in MB on each worker node. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information. */
  nodeStorageQuotaInMb?: number;
  /** The compute in vCores on each worker node (max: 104). See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information. */
  nodeVCores?: number;
  /** If public access is enabled on worker nodes. */
  nodeEnablePublicIpAccess?: boolean;
  /**
   * The list of server names in the cluster
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverNames?: ServerNameItem[];
  /** The resource id of source cluster for read replica clusters. */
  sourceResourceId?: string;
  /** The Azure region of source cluster for read replica clusters. */
  sourceLocation?: string;
  /** Date and time in UTC (ISO8601 format) for cluster restore. */
  pointInTimeUTC?: Date;
  /**
   * The array of read replica clusters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly readReplicas?: string[];
  /**
   * The earliest restore point time (ISO8601 format) for the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly earliestRestoreTime?: Date;
  /**
   * The private endpoint connections for a cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: SimplePrivateEndpointConnection[];
}

/** Defines headers for Clusters_create operation. */
export interface ClustersCreateHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for Clusters_delete operation. */
export interface ClustersDeleteHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for Clusters_update operation. */
export interface ClustersUpdateHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for Clusters_restart operation. */
export interface ClustersRestartHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for Clusters_start operation. */
export interface ClustersStartHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for Clusters_stop operation. */
export interface ClustersStopHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for Clusters_promoteReadReplica operation. */
export interface ClustersPromoteReadReplicaHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for Configurations_updateOnCoordinator operation. */
export interface ConfigurationsUpdateOnCoordinatorHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for Configurations_updateOnNode operation. */
export interface ConfigurationsUpdateOnNodeHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for FirewallRules_createOrUpdate operation. */
export interface FirewallRulesCreateOrUpdateHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for FirewallRules_delete operation. */
export interface FirewallRulesDeleteHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for Roles_create operation. */
export interface RolesCreateHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for Roles_delete operation. */
export interface RolesDeleteHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for PrivateEndpointConnections_createOrUpdate operation. */
export interface PrivateEndpointConnectionsCreateOrUpdateHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Defines headers for PrivateEndpointConnections_delete operation. */
export interface PrivateEndpointConnectionsDeleteHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointServiceConnectionStatus {
  /** Pending */
  Pending = "Pending",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected"
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ServerRole} that the service accepts. */
export enum KnownServerRole {
  /** Coordinator */
  Coordinator = "Coordinator",
  /** Worker */
  Worker = "Worker"
}

/**
 * Defines values for ServerRole. \
 * {@link KnownServerRole} can be used interchangeably with ServerRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Coordinator** \
 * **Worker**
 */
export type ServerRole = string;

/** Known values of {@link ConfigurationDataType} that the service accepts. */
export enum KnownConfigurationDataType {
  /** Boolean */
  Boolean = "Boolean",
  /** Numeric */
  Numeric = "Numeric",
  /** Integer */
  Integer = "Integer",
  /** Enumeration */
  Enumeration = "Enumeration"
}

/**
 * Defines values for ConfigurationDataType. \
 * {@link KnownConfigurationDataType} can be used interchangeably with ConfigurationDataType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Boolean** \
 * **Numeric** \
 * **Integer** \
 * **Enumeration**
 */
export type ConfigurationDataType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Canceled */
  Canceled = "Canceled",
  /** InProgress */
  InProgress = "InProgress",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Canceled** \
 * **InProgress** \
 * **Failed**
 */
export type ProvisioningState = string;

/** Known values of {@link OperationOrigin} that the service accepts. */
export enum KnownOperationOrigin {
  /** NotSpecified */
  NotSpecified = "NotSpecified",
  /** User */
  User = "user",
  /** System */
  System = "system"
}

/**
 * Defines values for OperationOrigin. \
 * {@link KnownOperationOrigin} can be used interchangeably with OperationOrigin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **user** \
 * **system**
 */
export type OperationOrigin = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownPrivateEndpointConnectionProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Creating */
  Creating = "Creating",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export type PrivateEndpointConnectionProvisioningState = string;

/** Optional parameters. */
export interface ClustersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ClustersListResponse = ClusterListResult;

/** Optional parameters. */
export interface ClustersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ClustersListByResourceGroupResponse = ClusterListResult;

/** Optional parameters. */
export interface ClustersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ClustersCreateResponse = Cluster;

/** Optional parameters. */
export interface ClustersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ClustersGetResponse = Cluster;

/** Optional parameters. */
export interface ClustersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ClustersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ClustersUpdateResponse = Cluster;

/** Optional parameters. */
export interface ClustersRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restart operation. */
export type ClustersRestartResponse = ClustersRestartHeaders;

/** Optional parameters. */
export interface ClustersStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ClustersStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ClustersPromoteReadReplicaOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the promoteReadReplica operation. */
export type ClustersPromoteReadReplicaResponse = ClustersPromoteReadReplicaHeaders;

/** Optional parameters. */
export interface ClustersCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type ClustersCheckNameAvailabilityResponse = NameAvailability;

/** Optional parameters. */
export interface ClustersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ClustersListNextResponse = ClusterListResult;

/** Optional parameters. */
export interface ClustersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ClustersListByResourceGroupNextResponse = ClusterListResult;

/** Optional parameters. */
export interface ServersListByClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCluster operation. */
export type ServersListByClusterResponse = ClusterServerListResult;

/** Optional parameters. */
export interface ServersGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServersGetResponse = ClusterServer;

/** Optional parameters. */
export interface ConfigurationsListByServerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByServer operation. */
export type ConfigurationsListByServerResponse = ServerConfigurationListResult;

/** Optional parameters. */
export interface ConfigurationsListByClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCluster operation. */
export type ConfigurationsListByClusterResponse = ClusterConfigurationListResult;

/** Optional parameters. */
export interface ConfigurationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConfigurationsGetResponse = Configuration;

/** Optional parameters. */
export interface ConfigurationsGetCoordinatorOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getCoordinator operation. */
export type ConfigurationsGetCoordinatorResponse = ServerConfiguration;

/** Optional parameters. */
export interface ConfigurationsUpdateOnCoordinatorOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateOnCoordinator operation. */
export type ConfigurationsUpdateOnCoordinatorResponse = ServerConfiguration;

/** Optional parameters. */
export interface ConfigurationsGetNodeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getNode operation. */
export type ConfigurationsGetNodeResponse = ServerConfiguration;

/** Optional parameters. */
export interface ConfigurationsUpdateOnNodeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateOnNode operation. */
export type ConfigurationsUpdateOnNodeResponse = ServerConfiguration;

/** Optional parameters. */
export interface ConfigurationsListByServerNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByServerNext operation. */
export type ConfigurationsListByServerNextResponse = ServerConfigurationListResult;

/** Optional parameters. */
export interface ConfigurationsListByClusterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByClusterNext operation. */
export type ConfigurationsListByClusterNextResponse = ClusterConfigurationListResult;

/** Optional parameters. */
export interface FirewallRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type FirewallRulesCreateOrUpdateResponse = FirewallRule;

/** Optional parameters. */
export interface FirewallRulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type FirewallRulesDeleteResponse = FirewallRulesDeleteHeaders;

/** Optional parameters. */
export interface FirewallRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FirewallRulesGetResponse = FirewallRule;

/** Optional parameters. */
export interface FirewallRulesListByClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCluster operation. */
export type FirewallRulesListByClusterResponse = FirewallRuleListResult;

/** Optional parameters. */
export interface RolesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RolesGetResponse = Role;

/** Optional parameters. */
export interface RolesCreateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type RolesCreateResponse = Role;

/** Optional parameters. */
export interface RolesDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type RolesDeleteResponse = RolesDeleteHeaders;

/** Optional parameters. */
export interface RolesListByClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCluster operation. */
export type RolesListByClusterResponse = RoleListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCluster operation. */
export type PrivateEndpointConnectionsListByClusterResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type PrivateEndpointConnectionsDeleteResponse = PrivateEndpointConnectionsDeleteHeaders;

/** Optional parameters. */
export interface PrivateLinkResourcesListByClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCluster operation. */
export type PrivateLinkResourcesListByClusterResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export interface CosmosDBForPostgreSQLOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
