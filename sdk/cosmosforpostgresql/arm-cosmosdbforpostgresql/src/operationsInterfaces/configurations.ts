/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  ServerConfiguration,
  ConfigurationsListByServerOptionalParams,
  Configuration,
  ConfigurationsListByClusterOptionalParams,
  ConfigurationsGetOptionalParams,
  ConfigurationsGetResponse,
  ConfigurationsGetCoordinatorOptionalParams,
  ConfigurationsGetCoordinatorResponse,
  ConfigurationsUpdateOnCoordinatorOptionalParams,
  ConfigurationsUpdateOnCoordinatorResponse,
  ConfigurationsGetNodeOptionalParams,
  ConfigurationsGetNodeResponse,
  ConfigurationsUpdateOnNodeOptionalParams,
  ConfigurationsUpdateOnNodeResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Configurations. */
export interface Configurations {
  /**
   * List all the configurations of a server in cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param serverName The name of the server.
   * @param options The options parameters.
   */
  listByServer(
    resourceGroupName: string,
    clusterName: string,
    serverName: string,
    options?: ConfigurationsListByServerOptionalParams
  ): PagedAsyncIterableIterator<ServerConfiguration>;
  /**
   * List all the configurations of a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  listByCluster(
    resourceGroupName: string,
    clusterName: string,
    options?: ConfigurationsListByClusterOptionalParams
  ): PagedAsyncIterableIterator<Configuration>;
  /**
   * Gets information of a configuration for coordinator and nodes.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param configurationName The name of the cluster configuration.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    configurationName: string,
    options?: ConfigurationsGetOptionalParams
  ): Promise<ConfigurationsGetResponse>;
  /**
   * Gets information of a configuration for coordinator.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param configurationName The name of the cluster configuration.
   * @param options The options parameters.
   */
  getCoordinator(
    resourceGroupName: string,
    clusterName: string,
    configurationName: string,
    options?: ConfigurationsGetCoordinatorOptionalParams
  ): Promise<ConfigurationsGetCoordinatorResponse>;
  /**
   * Updates configuration of coordinator in a cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param configurationName The name of the cluster configuration.
   * @param parameters The required parameters for updating a cluster configuration.
   * @param options The options parameters.
   */
  beginUpdateOnCoordinator(
    resourceGroupName: string,
    clusterName: string,
    configurationName: string,
    parameters: ServerConfiguration,
    options?: ConfigurationsUpdateOnCoordinatorOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ConfigurationsUpdateOnCoordinatorResponse>,
      ConfigurationsUpdateOnCoordinatorResponse
    >
  >;
  /**
   * Updates configuration of coordinator in a cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param configurationName The name of the cluster configuration.
   * @param parameters The required parameters for updating a cluster configuration.
   * @param options The options parameters.
   */
  beginUpdateOnCoordinatorAndWait(
    resourceGroupName: string,
    clusterName: string,
    configurationName: string,
    parameters: ServerConfiguration,
    options?: ConfigurationsUpdateOnCoordinatorOptionalParams
  ): Promise<ConfigurationsUpdateOnCoordinatorResponse>;
  /**
   * Gets information of a configuration for worker nodes.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param configurationName The name of the cluster configuration.
   * @param options The options parameters.
   */
  getNode(
    resourceGroupName: string,
    clusterName: string,
    configurationName: string,
    options?: ConfigurationsGetNodeOptionalParams
  ): Promise<ConfigurationsGetNodeResponse>;
  /**
   * Updates configuration of worker nodes in a cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param configurationName The name of the cluster configuration.
   * @param parameters The required parameters for updating a cluster configuration.
   * @param options The options parameters.
   */
  beginUpdateOnNode(
    resourceGroupName: string,
    clusterName: string,
    configurationName: string,
    parameters: ServerConfiguration,
    options?: ConfigurationsUpdateOnNodeOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ConfigurationsUpdateOnNodeResponse>,
      ConfigurationsUpdateOnNodeResponse
    >
  >;
  /**
   * Updates configuration of worker nodes in a cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param configurationName The name of the cluster configuration.
   * @param parameters The required parameters for updating a cluster configuration.
   * @param options The options parameters.
   */
  beginUpdateOnNodeAndWait(
    resourceGroupName: string,
    clusterName: string,
    configurationName: string,
    parameters: ServerConfiguration,
    options?: ConfigurationsUpdateOnNodeOptionalParams
  ): Promise<ConfigurationsUpdateOnNodeResponse>;
}
