/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { JitRequests } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationClient } from "../applicationClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  JitRequestsGetOptionalParams,
  JitRequestsGetResponse,
  JitRequestDefinition,
  JitRequestsCreateOrUpdateOptionalParams,
  JitRequestsCreateOrUpdateResponse,
  JitRequestPatchable,
  JitRequestsUpdateOptionalParams,
  JitRequestsUpdateResponse,
  JitRequestsDeleteOptionalParams,
  JitRequestsListBySubscriptionOptionalParams,
  JitRequestsListBySubscriptionResponse,
  JitRequestsListByResourceGroupOptionalParams,
  JitRequestsListByResourceGroupResponse
} from "../models";

/** Class containing JitRequests operations. */
export class JitRequestsImpl implements JitRequests {
  private readonly client: ApplicationClient;

  /**
   * Initialize a new instance of the class JitRequests class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationClient) {
    this.client = client;
  }

  /**
   * Gets the JIT request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jitRequestName The name of the JIT request.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    jitRequestName: string,
    options?: JitRequestsGetOptionalParams
  ): Promise<JitRequestsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, jitRequestName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates the JIT request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jitRequestName The name of the JIT request.
   * @param parameters Parameters supplied to the update JIT request.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    jitRequestName: string,
    parameters: JitRequestDefinition,
    options?: JitRequestsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<JitRequestsCreateOrUpdateResponse>,
      JitRequestsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<JitRequestsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, jitRequestName, parameters, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      JitRequestsCreateOrUpdateResponse,
      OperationState<JitRequestsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates the JIT request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jitRequestName The name of the JIT request.
   * @param parameters Parameters supplied to the update JIT request.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    jitRequestName: string,
    parameters: JitRequestDefinition,
    options?: JitRequestsCreateOrUpdateOptionalParams
  ): Promise<JitRequestsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      jitRequestName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the JIT request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jitRequestName The name of the JIT request.
   * @param parameters Parameters supplied to the update JIT request.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    jitRequestName: string,
    parameters: JitRequestPatchable,
    options?: JitRequestsUpdateOptionalParams
  ): Promise<JitRequestsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, jitRequestName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Deletes the JIT request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jitRequestName The name of the JIT request.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    jitRequestName: string,
    options?: JitRequestsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, jitRequestName, options },
      deleteOperationSpec
    );
  }

  /**
   * Lists all JIT requests within the subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: JitRequestsListBySubscriptionOptionalParams
  ): Promise<JitRequestsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Lists all JIT requests within the resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: JitRequestsListByResourceGroupOptionalParams
  ): Promise<JitRequestsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JitRequestDefinition
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jitRequestName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.JitRequestDefinition
    },
    201: {
      bodyMapper: Mappers.JitRequestDefinition
    },
    202: {
      bodyMapper: Mappers.JitRequestDefinition
    },
    204: {
      bodyMapper: Mappers.JitRequestDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jitRequestName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.JitRequestDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jitRequestName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jitRequestName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Solutions/jitRequests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JitRequestDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JitRequestDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
