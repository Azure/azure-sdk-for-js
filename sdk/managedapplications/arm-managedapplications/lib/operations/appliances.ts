/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/appliancesMappers";
import * as Parameters from "../models/parameters";
import { ManagedApplicationClientContext } from "../managedApplicationClientContext";

/** Class representing a Appliances. */
export class Appliances {
  private readonly client: ManagedApplicationClientContext;

  /**
   * Create a Appliances.
   * @param {ManagedApplicationClientContext} client Reference to the service client.
   */
  constructor(client: ManagedApplicationClientContext) {
    this.client = client;
  }

  /**
   * Gets the appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applianceName The name of the appliance.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppliancesGetResponse>
   */
  get(resourceGroupName: string, applianceName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppliancesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applianceName The name of the appliance.
   * @param callback The callback
   */
  get(resourceGroupName: string, applianceName: string, callback: msRest.ServiceCallback<Models.Appliance>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applianceName The name of the appliance.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, applianceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Appliance>): void;
  get(resourceGroupName: string, applianceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Appliance>, callback?: msRest.ServiceCallback<Models.Appliance>): Promise<Models.AppliancesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applianceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AppliancesGetResponse>;
  }

  /**
   * Deletes the appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applianceName The name of the appliance.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, applianceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,applianceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a new appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applianceName The name of the appliance.
   * @param parameters Parameters supplied to the create or update an appliance.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppliancesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, applianceName: string, parameters: Models.Appliance, options?: msRest.RequestOptionsBase): Promise<Models.AppliancesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,applianceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AppliancesCreateOrUpdateResponse>;
  }

  /**
   * Updates an existing appliance. The only value that can be updated via PATCH currently is the
   * tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applianceName The name of the appliance.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppliancesUpdateResponse>
   */
  update(resourceGroupName: string, applianceName: string, options?: Models.AppliancesUpdateOptionalParams): Promise<Models.AppliancesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applianceName The name of the appliance.
   * @param callback The callback
   */
  update(resourceGroupName: string, applianceName: string, callback: msRest.ServiceCallback<Models.Appliance>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applianceName The name of the appliance.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, applianceName: string, options: Models.AppliancesUpdateOptionalParams, callback: msRest.ServiceCallback<Models.Appliance>): void;
  update(resourceGroupName: string, applianceName: string, options?: Models.AppliancesUpdateOptionalParams | msRest.ServiceCallback<Models.Appliance>, callback?: msRest.ServiceCallback<Models.Appliance>): Promise<Models.AppliancesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applianceName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.AppliancesUpdateResponse>;
  }

  /**
   * Gets all the appliances within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppliancesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppliancesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ApplianceListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplianceListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplianceListResult>, callback?: msRest.ServiceCallback<Models.ApplianceListResult>): Promise<Models.AppliancesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.AppliancesListByResourceGroupResponse>;
  }

  /**
   * Gets all the appliances within a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppliancesListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.AppliancesListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ApplianceListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplianceListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplianceListResult>, callback?: msRest.ServiceCallback<Models.ApplianceListResult>): Promise<Models.AppliancesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.AppliancesListBySubscriptionResponse>;
  }

  /**
   * Gets the appliance.
   * @param applianceId The fully qualified ID of the appliance, including the appliance name and the
   * appliance resource type. Use the format,
   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
   * @param [options] The optional parameters
   * @returns Promise<Models.AppliancesGetByIdResponse>
   */
  getById(applianceId: string, options?: msRest.RequestOptionsBase): Promise<Models.AppliancesGetByIdResponse>;
  /**
   * @param applianceId The fully qualified ID of the appliance, including the appliance name and the
   * appliance resource type. Use the format,
   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
   * @param callback The callback
   */
  getById(applianceId: string, callback: msRest.ServiceCallback<Models.Appliance>): void;
  /**
   * @param applianceId The fully qualified ID of the appliance, including the appliance name and the
   * appliance resource type. Use the format,
   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
   * @param options The optional parameters
   * @param callback The callback
   */
  getById(applianceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Appliance>): void;
  getById(applianceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Appliance>, callback?: msRest.ServiceCallback<Models.Appliance>): Promise<Models.AppliancesGetByIdResponse> {
    return this.client.sendOperationRequest(
      {
        applianceId,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.AppliancesGetByIdResponse>;
  }

  /**
   * Deletes the appliance.
   * @param applianceId The fully qualified ID of the appliance, including the appliance name and the
   * appliance resource type. Use the format,
   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteById(applianceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteById(applianceId,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a new appliance.
   * @param applianceId The fully qualified ID of the appliance, including the appliance name and the
   * appliance resource type. Use the format,
   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
   * @param parameters Parameters supplied to the create or update an appliance.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppliancesCreateOrUpdateByIdResponse>
   */
  createOrUpdateById(applianceId: string, parameters: Models.Appliance, options?: msRest.RequestOptionsBase): Promise<Models.AppliancesCreateOrUpdateByIdResponse> {
    return this.beginCreateOrUpdateById(applianceId,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AppliancesCreateOrUpdateByIdResponse>;
  }

  /**
   * Updates an existing appliance. The only value that can be updated via PATCH currently is the
   * tags.
   * @param applianceId The fully qualified ID of the appliance, including the appliance name and the
   * appliance resource type. Use the format,
   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
   * @param [options] The optional parameters
   * @returns Promise<Models.AppliancesUpdateByIdResponse>
   */
  updateById(applianceId: string, options?: Models.AppliancesUpdateByIdOptionalParams): Promise<Models.AppliancesUpdateByIdResponse>;
  /**
   * @param applianceId The fully qualified ID of the appliance, including the appliance name and the
   * appliance resource type. Use the format,
   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
   * @param callback The callback
   */
  updateById(applianceId: string, callback: msRest.ServiceCallback<Models.Appliance>): void;
  /**
   * @param applianceId The fully qualified ID of the appliance, including the appliance name and the
   * appliance resource type. Use the format,
   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
   * @param options The optional parameters
   * @param callback The callback
   */
  updateById(applianceId: string, options: Models.AppliancesUpdateByIdOptionalParams, callback: msRest.ServiceCallback<Models.Appliance>): void;
  updateById(applianceId: string, options?: Models.AppliancesUpdateByIdOptionalParams | msRest.ServiceCallback<Models.Appliance>, callback?: msRest.ServiceCallback<Models.Appliance>): Promise<Models.AppliancesUpdateByIdResponse> {
    return this.client.sendOperationRequest(
      {
        applianceId,
        options
      },
      updateByIdOperationSpec,
      callback) as Promise<Models.AppliancesUpdateByIdResponse>;
  }

  /**
   * Deletes the appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applianceName The name of the appliance.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, applianceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        applianceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Creates a new appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applianceName The name of the appliance.
   * @param parameters Parameters supplied to the create or update an appliance.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, applianceName: string, parameters: Models.Appliance, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        applianceName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the appliance.
   * @param applianceId The fully qualified ID of the appliance, including the appliance name and the
   * appliance resource type. Use the format,
   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteById(applianceId: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        applianceId,
        options
      },
      beginDeleteByIdOperationSpec,
      options);
  }

  /**
   * Creates a new appliance.
   * @param applianceId The fully qualified ID of the appliance, including the appliance name and the
   * appliance resource type. Use the format,
   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
   * @param parameters Parameters supplied to the create or update an appliance.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateById(applianceId: string, parameters: Models.Appliance, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        applianceId,
        parameters,
        options
      },
      beginCreateOrUpdateByIdOperationSpec,
      options);
  }

  /**
   * Gets all the appliances within a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppliancesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppliancesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ApplianceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplianceListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplianceListResult>, callback?: msRest.ServiceCallback<Models.ApplianceListResult>): Promise<Models.AppliancesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.AppliancesListByResourceGroupNextResponse>;
  }

  /**
   * Gets all the appliances within a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AppliancesListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppliancesListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ApplianceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplianceListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplianceListResult>, callback?: msRest.ServiceCallback<Models.ApplianceListResult>): Promise<Models.AppliancesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.AppliancesListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/appliances/{applianceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applianceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Appliance
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/appliances/{applianceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applianceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.Appliance
  },
  responses: {
    200: {
      bodyMapper: Mappers.Appliance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/appliances",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplianceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Solutions/appliances",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplianceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{applianceId}",
  urlParameters: [
    Parameters.applianceId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Appliance
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{applianceId}",
  urlParameters: [
    Parameters.applianceId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.Appliance
  },
  responses: {
    200: {
      bodyMapper: Mappers.Appliance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/appliances/{applianceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applianceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/appliances/{applianceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applianceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Appliance,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Appliance
    },
    201: {
      bodyMapper: Mappers.Appliance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{applianceId}",
  urlParameters: [
    Parameters.applianceId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{applianceId}",
  urlParameters: [
    Parameters.applianceId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Appliance,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Appliance
    },
    201: {
      bodyMapper: Mappers.Appliance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplianceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplianceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
