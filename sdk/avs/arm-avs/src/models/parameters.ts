/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  Sku as SkuMapper,
  PrivateCloud as PrivateCloudMapper,
  PrivateCloudUpdate as PrivateCloudUpdateMapper,
  Addon as AddonMapper,
  ExpressRouteAuthorization as ExpressRouteAuthorizationMapper,
  CloudLink as CloudLinkMapper,
  Cluster as ClusterMapper,
  ClusterUpdate as ClusterUpdateMapper,
  Datastore as DatastoreMapper,
  PlacementPolicy as PlacementPolicyMapper,
  PlacementPolicyUpdate as PlacementPolicyUpdateMapper,
  VirtualMachineRestrictMovement as VirtualMachineRestrictMovementMapper,
  GlobalReachConnection as GlobalReachConnectionMapper,
  HcxEnterpriseSite as HcxEnterpriseSiteMapper,
  IscsiPath as IscsiPathMapper,
  ScriptExecution as ScriptExecutionMapper,
  WorkloadNetworkDhcp as WorkloadNetworkDhcpMapper,
  WorkloadNetworkDnsService as WorkloadNetworkDnsServiceMapper,
  WorkloadNetworkDnsZone as WorkloadNetworkDnsZoneMapper,
  WorkloadNetworkPortMirroring as WorkloadNetworkPortMirroringMapper,
  WorkloadNetworkPublicIP as WorkloadNetworkPublicIPMapper,
  WorkloadNetworkSegment as WorkloadNetworkSegmentMapper,
  WorkloadNetworkVMGroup as WorkloadNetworkVMGroupMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-09-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "location",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const sku: OperationParameter = {
  parameterPath: ["options", "sku"],
  mapper: SkuMapper,
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const privateCloudName: OperationURLParameter = {
  parameterPath: "privateCloudName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "privateCloudName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const privateCloud: OperationParameter = {
  parameterPath: "privateCloud",
  mapper: PrivateCloudMapper,
};

export const privateCloudUpdate: OperationParameter = {
  parameterPath: "privateCloudUpdate",
  mapper: PrivateCloudUpdateMapper,
};

export const addonName: OperationURLParameter = {
  parameterPath: "addonName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "addonName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const addon: OperationParameter = {
  parameterPath: "addon",
  mapper: AddonMapper,
};

export const authorizationName: OperationURLParameter = {
  parameterPath: "authorizationName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "authorizationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const authorization: OperationParameter = {
  parameterPath: "authorization",
  mapper: ExpressRouteAuthorizationMapper,
};

export const cloudLinkName: OperationURLParameter = {
  parameterPath: "cloudLinkName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "cloudLinkName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const cloudLink: OperationParameter = {
  parameterPath: "cloudLink",
  mapper: CloudLinkMapper,
};

export const clusterName: OperationURLParameter = {
  parameterPath: "clusterName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "clusterName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const cluster: OperationParameter = {
  parameterPath: "cluster",
  mapper: ClusterMapper,
};

export const clusterUpdate: OperationParameter = {
  parameterPath: "clusterUpdate",
  mapper: ClusterUpdateMapper,
};

export const datastoreName: OperationURLParameter = {
  parameterPath: "datastoreName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "datastoreName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const datastore: OperationParameter = {
  parameterPath: "datastore",
  mapper: DatastoreMapper,
};

export const placementPolicyName: OperationURLParameter = {
  parameterPath: "placementPolicyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "placementPolicyName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const placementPolicy: OperationParameter = {
  parameterPath: "placementPolicy",
  mapper: PlacementPolicyMapper,
};

export const placementPolicyUpdate: OperationParameter = {
  parameterPath: "placementPolicyUpdate",
  mapper: PlacementPolicyUpdateMapper,
};

export const virtualMachineId: OperationURLParameter = {
  parameterPath: "virtualMachineId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "virtualMachineId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const restrictMovement: OperationParameter = {
  parameterPath: "restrictMovement",
  mapper: VirtualMachineRestrictMovementMapper,
};

export const globalReachConnectionName: OperationURLParameter = {
  parameterPath: "globalReachConnectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "globalReachConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const globalReachConnection: OperationParameter = {
  parameterPath: "globalReachConnection",
  mapper: GlobalReachConnectionMapper,
};

export const hcxEnterpriseSiteName: OperationURLParameter = {
  parameterPath: "hcxEnterpriseSiteName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "hcxEnterpriseSiteName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const hcxEnterpriseSite: OperationParameter = {
  parameterPath: "hcxEnterpriseSite",
  mapper: HcxEnterpriseSiteMapper,
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: IscsiPathMapper,
};

export const scriptExecutionName: OperationURLParameter = {
  parameterPath: "scriptExecutionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "scriptExecutionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const scriptExecution: OperationParameter = {
  parameterPath: "scriptExecution",
  mapper: ScriptExecutionMapper,
};

export const scriptOutputStreamType: OperationParameter = {
  parameterPath: ["options", "scriptOutputStreamType"],
  mapper: {
    serializedName: "scriptOutputStreamType",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String",
        },
      },
    },
  },
};

export const scriptPackageName: OperationURLParameter = {
  parameterPath: "scriptPackageName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._@]+$"),
    },
    serializedName: "scriptPackageName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const scriptCmdletName: OperationURLParameter = {
  parameterPath: "scriptCmdletName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "scriptCmdletName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const dhcpId: OperationURLParameter = {
  parameterPath: "dhcpId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "dhcpId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const workloadNetworkDhcp: OperationParameter = {
  parameterPath: "workloadNetworkDhcp",
  mapper: WorkloadNetworkDhcpMapper,
};

export const dnsServiceId: OperationURLParameter = {
  parameterPath: "dnsServiceId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "dnsServiceId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const workloadNetworkDnsService: OperationParameter = {
  parameterPath: "workloadNetworkDnsService",
  mapper: WorkloadNetworkDnsServiceMapper,
};

export const dnsZoneId: OperationURLParameter = {
  parameterPath: "dnsZoneId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "dnsZoneId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const workloadNetworkDnsZone: OperationParameter = {
  parameterPath: "workloadNetworkDnsZone",
  mapper: WorkloadNetworkDnsZoneMapper,
};

export const gatewayId: OperationURLParameter = {
  parameterPath: "gatewayId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "gatewayId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const portMirroringId: OperationURLParameter = {
  parameterPath: "portMirroringId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "portMirroringId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const workloadNetworkPortMirroring: OperationParameter = {
  parameterPath: "workloadNetworkPortMirroring",
  mapper: WorkloadNetworkPortMirroringMapper,
};

export const publicIPId: OperationURLParameter = {
  parameterPath: "publicIPId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "publicIPId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const workloadNetworkPublicIP: OperationParameter = {
  parameterPath: "workloadNetworkPublicIP",
  mapper: WorkloadNetworkPublicIPMapper,
};

export const segmentId: OperationURLParameter = {
  parameterPath: "segmentId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "segmentId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const workloadNetworkSegment: OperationParameter = {
  parameterPath: "workloadNetworkSegment",
  mapper: WorkloadNetworkSegmentMapper,
};

export const vmGroupId: OperationURLParameter = {
  parameterPath: "vmGroupId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$"),
    },
    serializedName: "vmGroupId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const workloadNetworkVMGroup: OperationParameter = {
  parameterPath: "workloadNetworkVMGroup",
  mapper: WorkloadNetworkVMGroupMapper,
};
