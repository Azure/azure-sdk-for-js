/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Subscription trial availability
 */
export interface Trial {
  /**
   * Trial status. Possible values include: 'TrialAvailable', 'TrialUsed', 'TrialDisabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: TrialStatus;
  /**
   * Number of trial hosts available
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly availableHosts?: number;
}

/**
 * Subscription quotas
 */
export interface Quota {
  /**
   * Remaining hosts quota by sku type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostsRemaining?: { [propertyName: string]: number };
  /**
   * Host quota is active for current subscription. Possible values include: 'Enabled', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly quotaEnabled?: QuotaEnabled;
}

/**
 * The core properties of ARM resources
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource
 */
export interface TrackedResource extends Resource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The resource model definition for a ARM proxy resource
 */
export interface ProxyResource extends Resource {
}

/**
 * The resource management error additional info.
 */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly info?: any;
}

/**
 * Common error response for all Azure Resource Manager APIs to return error details for failed
 * operations. (This also follows the OData error response format.)
 * @summary Error Response
 */
export interface ErrorResponse {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The error target.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly target?: string;
  /**
   * The error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ErrorResponse[];
  /**
   * The error additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/**
 * Contains the localized display information for this operation
 */
export interface OperationDisplay {
  /**
   * Localized friendly form of the resource provider name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
  /**
   * Localized friendly form of the resource type related to this operation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * Localized friendly name for the operation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * Localized friendly description for the operation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
}

/**
 * Specifications of the Log for Azure Monitoring
 */
export interface LogSpecification {
  /**
   * Name of the log
   */
  name?: string;
  /**
   * Localized friendly display name of the log
   */
  displayName?: string;
  /**
   * Blob duration of the log
   */
  blobDuration?: string;
}

/**
 * Specifications of the Dimension of metrics
 */
export interface MetricDimension {
  /**
   * Name of the dimension
   */
  name?: string;
  /**
   * Localized friendly display name of the dimension
   */
  displayName?: string;
}

/**
 * Specifications of the Metrics for Azure Monitoring
 */
export interface MetricSpecification {
  /**
   * Name of the metric
   */
  name?: string;
  /**
   * Localized friendly display name of the metric
   */
  displayName?: string;
  /**
   * Localized friendly description of the metric
   */
  displayDescription?: string;
  /**
   * Unit that makes sense for the metric
   */
  unit?: string;
  /**
   * Name of the metric category that the metric belongs to. A metric can only belong to a single
   * category.
   */
  category?: string;
  /**
   * Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.
   */
  aggregationType?: string;
  /**
   * Supported aggregation types
   */
  supportedAggregationTypes?: string[];
  /**
   * Supported time grain types
   */
  supportedTimeGrainTypes?: string[];
  /**
   * Optional. If set to true, then zero will be returned for time duration where no metric is
   * emitted/published.
   */
  fillGapWithZero?: boolean;
  /**
   * Dimensions of the metric
   */
  dimensions?: MetricDimension[];
  /**
   * Whether or not the service is using regional MDM accounts.
   */
  enableRegionalMdmAccount?: string;
  /**
   * The name of the MDM account.
   */
  sourceMdmAccount?: string;
  /**
   * The name of the MDM namespace.
   */
  sourceMdmNamespace?: string;
}

/**
 * Service specification payload
 */
export interface ServiceSpecification {
  /**
   * Specifications of the Log for Azure Monitoring
   */
  logSpecifications?: LogSpecification[];
  /**
   * Specifications of the Metrics for Azure Monitoring
   */
  metricSpecifications?: MetricSpecification[];
}

/**
 * Extra Operation properties
 */
export interface OperationProperties {
  /**
   * Service specifications of the operation
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * A REST API operation
 */
export interface Operation {
  /**
   * Name of the operation being performed on this object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Contains the localized display information for this operation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly display?: OperationDisplay;
  /**
   * Gets or sets a value indicating whether the operation is a data action or not
   */
  isDataAction?: boolean;
  /**
   * Origin of the operation
   */
  origin?: string;
  /**
   * Properties of the operation
   */
  properties?: OperationProperties;
}

/**
 * ExpressRoute Circuit Authorization
 */
export interface ExpressRouteAuthorization extends Resource {
  /**
   * The state of the  ExpressRoute Circuit Authorization provisioning. Possible values include:
   * 'Succeeded', 'Failed', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ExpressRouteAuthorizationProvisioningState;
  /**
   * The ID of the ExpressRoute Circuit Authorization
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly expressRouteAuthorizationId?: string;
  /**
   * The key of the ExpressRoute Circuit Authorization
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly expressRouteAuthorizationKey?: string;
}

/**
 * An ExpressRoute Circuit
 */
export interface Circuit {
  /**
   * CIDR of primary subnet
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primarySubnet?: string;
  /**
   * CIDR of secondary subnet
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secondarySubnet?: string;
  /**
   * Identifier of the ExpressRoute Circuit (Microsoft Colo only)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly expressRouteID?: string;
  /**
   * ExpressRoute Circuit private peering identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly expressRoutePrivatePeeringID?: string;
}

/**
 * Endpoint addresses
 */
export interface Endpoints {
  /**
   * Endpoint for the NSX-T Data Center manager
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nsxtManager?: string;
  /**
   * Endpoint for Virtual Center Server Appliance
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vcsa?: string;
  /**
   * Endpoint for the HCX Cloud Manager
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hcxCloudManager?: string;
}

/**
 * vCenter Single Sign On Identity Source
 */
export interface IdentitySource {
  /**
   * The name of the identity source
   */
  name?: string;
  /**
   * The domain's NetBIOS name
   */
  alias?: string;
  /**
   * The domain's dns name
   */
  domain?: string;
  /**
   * The base distinguished name for users
   */
  baseUserDN?: string;
  /**
   * The base distinguished name for groups
   */
  baseGroupDN?: string;
  /**
   * Primary server URL
   */
  primaryServer?: string;
  /**
   * Secondary server URL
   */
  secondaryServer?: string;
  /**
   * Protect LDAP communication using SSL certificate (LDAPS). Possible values include: 'Enabled',
   * 'Disabled'
   */
  ssl?: SslEnum;
  /**
   * The ID of an Active Directory user with a minimum of read-only access to Base DN for users and
   * group
   */
  username?: string;
  /**
   * The password of the Active Directory user with a minimum of read-only access to Base DN for
   * users and groups.
   */
  password?: string;
}

/**
 * The resource model definition representing SKU
 */
export interface Sku {
  /**
   * The name of the SKU.
   */
  name: string;
}

/**
 * A private cloud resource
 */
export interface PrivateCloud extends TrackedResource {
  /**
   * The private cloud SKU
   */
  sku: Sku;
  /**
   * The default cluster used for management
   */
  managementCluster?: ManagementCluster;
  /**
   * Connectivity to internet is enabled or disabled. Possible values include: 'Enabled',
   * 'Disabled'. Default value: 'Disabled'.
   */
  internet?: InternetEnum;
  /**
   * vCenter Single Sign On Identity Sources
   */
  identitySources?: IdentitySource[];
  /**
   * Indicate to rotate the vCenter admin password for the private cloud. Possible values include:
   * 'OnetimeRotate'
   */
  vcenterPassword?: VcsaAdminRotateEnum;
  /**
   * Indicate to rotate the NSX-T Manager password for the private cloud. Possible values include:
   * 'OnetimeRotate'
   */
  nsxtPassword?: NsxtAdminRotateEnum;
  /**
   * The provisioning state. Possible values include: 'Succeeded', 'Failed', 'Cancelled',
   * 'Pending', 'Building', 'Deleting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: PrivateCloudProvisioningState;
  /**
   * An ExpressRoute Circuit
   */
  circuit?: Circuit;
  /**
   * The endpoints
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endpoints?: Endpoints;
  /**
   * The block of addresses should be unique across VNet in your subscription as well as
   * on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0
   * and 255, and X is between 0 and 22
   */
  networkBlock: string;
  /**
   * Network used to access vCenter Server and NSX-T Manager
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly managementNetwork?: string;
  /**
   * Used for virtual machine cold migration, cloning, and snapshot migration
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningNetwork?: string;
  /**
   * Used for live migration of virtual machines
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vmotionNetwork?: string;
  /**
   * Thumbprint of the vCenter Server SSL certificate
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vcenterCertificateThumbprint?: string;
  /**
   * Thumbprint of the NSX-T Manager SSL certificate
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nsxtCertificateThumbprint?: string;
}

/**
 * The common properties of a cluster
 */
export interface CommonClusterProperties {
  /**
   * The state of the cluster provisioning. Possible values include: 'Succeeded', 'Failed',
   * 'Cancelled', 'Deleting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ClusterProvisioningState;
  /**
   * The cluster size
   */
  clusterSize?: number;
  /**
   * The identity
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly clusterId?: number;
  /**
   * The hosts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hosts?: string[];
}

/**
 * The properties of a management cluster
 */
export interface ManagementCluster extends CommonClusterProperties {
}

/**
 * An update to a private cloud resource
 */
export interface PrivateCloudUpdate {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * The default cluster used for management
   */
  managementCluster?: ManagementCluster;
  /**
   * Connectivity to internet is enabled or disabled. Possible values include: 'Enabled',
   * 'Disabled'. Default value: 'Disabled'.
   */
  internet?: InternetEnum;
  /**
   * vCenter Single Sign On Identity Sources
   */
  identitySources?: IdentitySource[];
  /**
   * Indicate to rotate the vCenter admin password for the private cloud. Possible values include:
   * 'OnetimeRotate'
   */
  vcenterPassword?: VcsaAdminRotateEnum;
  /**
   * Indicate to rotate the NSX-T Manager password for the private cloud. Possible values include:
   * 'OnetimeRotate'
   */
  nsxtPassword?: NsxtAdminRotateEnum;
}

/**
 * A cluster resource
 */
export interface Cluster extends Resource {
  /**
   * The cluster SKU
   */
  sku: Sku;
  /**
   * The state of the cluster provisioning. Possible values include: 'Succeeded', 'Failed',
   * 'Cancelled', 'Deleting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ClusterProvisioningState;
  /**
   * The cluster size
   */
  clusterSize?: number;
  /**
   * The identity
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly clusterId?: number;
  /**
   * The hosts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hosts?: string[];
}

/**
 * An update of a cluster resource
 */
export interface ClusterUpdate {
  /**
   * The cluster size
   */
  clusterSize?: number;
}

/**
 * Administrative credentials for accessing vCenter and NSX-T
 */
export interface AdminCredentials {
  /**
   * NSX-T Manager username
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nsxtUsername?: string;
  /**
   * NSX-T Manager password
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nsxtPassword?: string;
  /**
   * vCenter admin username
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vcenterUsername?: string;
  /**
   * vCenter admin password
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vcenterPassword?: string;
}

/**
 * An HCX Enterprise Site resource
 */
export interface HcxEnterpriseSite extends Resource {
  /**
   * The activation key
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly activationKey?: string;
  /**
   * The status of the HCX Enterprise Site. Possible values include: 'Available', 'Consumed',
   * 'Deactivated', 'Deleted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: HcxEnterpriseSiteStatus;
}

/**
 * A global reach connection resource
 */
export interface GlobalReachConnection extends Resource {
  /**
   * The state of the  ExpressRoute Circuit Authorization provisioning. Possible values include:
   * 'Succeeded', 'Failed', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: GlobalReachConnectionProvisioningState;
  /**
   * The network used for global reach carved out from the original network block provided for the
   * private cloud
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly addressPrefix?: string;
  /**
   * Authorization key from the peer express route used for the global reach connection
   */
  authorizationKey?: string;
  /**
   * The connection status of the global reach connection. Possible values include: 'Connected',
   * 'Connecting', 'Disconnected'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly circuitConnectionStatus?: GlobalReachConnectionStatus;
  /**
   * Identifier of the ExpressRoute Circuit to peer with in the global reach connection
   */
  peerExpressRouteCircuit?: string;
}

/**
 * Subnet configuration for segment
 */
export interface WorkloadNetworkSegmentSubnet {
  /**
   * DHCP Range assigned for subnet.
   */
  dhcpRanges?: string[];
  /**
   * Gateway address.
   */
  gatewayAddress?: string;
}

/**
 * Ports and any VIF attached to segment.
 */
export interface WorkloadNetworkSegmentPortVif {
  /**
   * Name of port or VIF attached to segment.
   */
  portName?: string;
}

/**
 * NSX Segment
 */
export interface WorkloadNetworkSegment extends ProxyResource {
  /**
   * Display name of the segment.
   */
  displayName?: string;
  /**
   * Gateway which to connect segment to.
   */
  connectedGateway?: string;
  /**
   * Subnet which to connect segment to.
   */
  subnet?: WorkloadNetworkSegmentSubnet;
  /**
   * Port Vif which segment is associated with.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly portVif?: WorkloadNetworkSegmentPortVif[];
  /**
   * Segment status. Possible values include: 'SUCCESS, FAILURE'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: SegmentStatusEnum;
  /**
   * The provisioning state. Possible values include: 'Succeeded', 'Failed', 'Building',
   * 'Deleting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: WorkloadNetworkSegmentProvisioningState;
  /**
   * NSX revision number.
   */
  revision?: number;
}

/**
 * Contains the possible cases for WorkloadNetworkDhcpEntity.
 */
export type WorkloadNetworkDhcpEntityUnion = WorkloadNetworkDhcpEntity | WorkloadNetworkDhcpServer | WorkloadNetworkDhcpRelay;

/**
 * Base class for WorkloadNetworkDhcpServer and WorkloadNetworkDhcpRelay to inherit from
 */
export interface WorkloadNetworkDhcpEntity {
  /**
   * Polymorphic Discriminator
   */
  dhcpType: "WorkloadNetworkDhcpEntity";
  /**
   * Display name of the DHCP entity.
   */
  displayName?: string;
  /**
   * NSX Segments consuming DHCP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly segments?: string[];
  /**
   * The provisioning state. Possible values include: 'Succeeded', 'Failed', 'Building',
   * 'Deleting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: WorkloadNetworkDhcpProvisioningState;
  /**
   * NSX revision number.
   */
  revision?: number;
}

/**
 * NSX DHCP Server
 */
export interface WorkloadNetworkDhcpServer {
  /**
   * Polymorphic Discriminator
   */
  dhcpType: "SERVER";
  /**
   * Display name of the DHCP entity.
   */
  displayName?: string;
  /**
   * NSX Segments consuming DHCP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly segments?: string[];
  /**
   * The provisioning state. Possible values include: 'Succeeded', 'Failed', 'Building',
   * 'Deleting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: WorkloadNetworkDhcpProvisioningState;
  /**
   * NSX revision number.
   */
  revision?: number;
  /**
   * DHCP Server Address.
   */
  serverAddress?: string;
  /**
   * DHCP Server Lease Time.
   */
  leaseTime?: number;
}

/**
 * NSX DHCP Relay
 */
export interface WorkloadNetworkDhcpRelay {
  /**
   * Polymorphic Discriminator
   */
  dhcpType: "RELAY";
  /**
   * Display name of the DHCP entity.
   */
  displayName?: string;
  /**
   * NSX Segments consuming DHCP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly segments?: string[];
  /**
   * The provisioning state. Possible values include: 'Succeeded', 'Failed', 'Building',
   * 'Deleting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: WorkloadNetworkDhcpProvisioningState;
  /**
   * NSX revision number.
   */
  revision?: number;
  /**
   * DHCP Relay Addresses. Max 3.
   */
  serverAddresses?: string[];
}

/**
 * NSX DHCP
 */
export interface WorkloadNetworkDhcp extends ProxyResource {
  /**
   * Display name of the DHCP entity.
   */
  displayName?: string;
  /**
   * NSX Segments consuming DHCP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly segments?: string[];
  /**
   * The provisioning state. Possible values include: 'Succeeded', 'Failed', 'Building',
   * 'Deleting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: WorkloadNetworkDhcpProvisioningState;
  /**
   * NSX revision number.
   */
  revision?: number;
  /**
   * Polymorphic Discriminator
   */
  dhcpType: string;
}

/**
 * NSX Port Mirroring
 */
export interface WorkloadNetworkPortMirroring extends ProxyResource {
  /**
   * Display name of the port mirroring profile.
   */
  displayName?: string;
  /**
   * Direction of port mirroring profile. Possible values include: 'INGRESS, EGRESS, BIDIRECTIONAL'
   */
  direction?: PortMirroringDirectionEnum;
  /**
   * Source VM Group.
   */
  source?: string;
  /**
   * Destination VM Group.
   */
  destination?: string;
  /**
   * Port Mirroring Status. Possible values include: 'SUCCESS, FAILURE'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: PortMirroringStatusEnum;
  /**
   * The provisioning state. Possible values include: 'Succeeded', 'Failed', 'Building',
   * 'Deleting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: WorkloadNetworkPortMirroringProvisioningState;
  /**
   * NSX revision number.
   */
  revision?: number;
}

/**
 * NSX VM Group
 */
export interface WorkloadNetworkVMGroup extends ProxyResource {
  /**
   * Display name of the VM group.
   */
  displayName?: string;
  /**
   * Virtual machine members of this group.
   */
  members?: string[];
  /**
   * VM Group status. Possible values include: 'SUCCESS, FAILURE'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: VMGroupStatusEnum;
  /**
   * The provisioning state. Possible values include: 'Succeeded', 'Failed', 'Building',
   * 'Deleting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: WorkloadNetworkVMGroupProvisioningState;
  /**
   * NSX revision number.
   */
  revision?: number;
}

/**
 * NSX Virtual Machine
 */
export interface WorkloadNetworkVirtualMachine extends ProxyResource {
  /**
   * Display name of the VM.
   */
  displayName?: string;
  /**
   * Virtual machine type. Possible values include: 'REGULAR, EDGE, SERVICE'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vmType?: VMTypeEnum;
}

/**
 * NSX Gateway.
 */
export interface WorkloadNetworkGateway extends ProxyResource {
  /**
   * Display name of the DHCP entity.
   */
  displayName?: string;
  /**
   * NSX Gateway Path.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly path?: string;
}

/**
 * Optional Parameters.
 */
export interface ClustersUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The cluster size
   */
  clusterSize?: number;
}

/**
 * Optional Parameters.
 */
export interface ClustersBeginUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The cluster size
   */
  clusterSize?: number;
}

/**
 * An interface representing AvsClientOptions.
 */
export interface AvsClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Pageable list of operations
 * @extends Array<Operation>
 */
export interface OperationList extends Array<Operation> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A paged list of private clouds
 * @extends Array<PrivateCloud>
 */
export interface PrivateCloudList extends Array<PrivateCloud> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A paged list of clusters
 * @extends Array<Cluster>
 */
export interface ClusterList extends Array<Cluster> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A paged list of HCX Enterprise Sites
 * @extends Array<HcxEnterpriseSite>
 */
export interface HcxEnterpriseSiteList extends Array<HcxEnterpriseSite> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A paged list of ExpressRoute Circuit Authorizations
 * @extends Array<ExpressRouteAuthorization>
 */
export interface ExpressRouteAuthorizationList extends Array<ExpressRouteAuthorization> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A paged list of global reach connections
 * @extends Array<GlobalReachConnection>
 */
export interface GlobalReachConnectionList extends Array<GlobalReachConnection> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of NSX Segments
 * @extends Array<WorkloadNetworkSegment>
 */
export interface WorkloadNetworkSegmentsList extends Array<WorkloadNetworkSegment> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of NSX dhcp entities
 * @extends Array<WorkloadNetworkDhcp>
 */
export interface WorkloadNetworkDhcpList extends Array<WorkloadNetworkDhcp> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of NSX Gateways
 * @extends Array<WorkloadNetworkGateway>
 */
export interface WorkloadNetworkGatewayList extends Array<WorkloadNetworkGateway> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of NSX Port Mirroring
 * @extends Array<WorkloadNetworkPortMirroring>
 */
export interface WorkloadNetworkPortMirroringList extends Array<WorkloadNetworkPortMirroring> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of NSX VM Groups
 * @extends Array<WorkloadNetworkVMGroup>
 */
export interface WorkloadNetworkVMGroupsList extends Array<WorkloadNetworkVMGroup> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of NSX Virtual Machines
 * @extends Array<WorkloadNetworkVirtualMachine>
 */
export interface WorkloadNetworkVirtualMachinesList extends Array<WorkloadNetworkVirtualMachine> {
  /**
   * URL to get the next page if any
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for TrialStatus.
 * Possible values include: 'TrialAvailable', 'TrialUsed', 'TrialDisabled'
 * @readonly
 * @enum {string}
 */
export type TrialStatus = 'TrialAvailable' | 'TrialUsed' | 'TrialDisabled';

/**
 * Defines values for QuotaEnabled.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type QuotaEnabled = 'Enabled' | 'Disabled';

/**
 * Defines values for ExpressRouteAuthorizationProvisioningState.
 * Possible values include: 'Succeeded', 'Failed', 'Updating'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteAuthorizationProvisioningState = 'Succeeded' | 'Failed' | 'Updating';

/**
 * Defines values for SslEnum.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type SslEnum = 'Enabled' | 'Disabled';

/**
 * Defines values for PrivateCloudProvisioningState.
 * Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Pending', 'Building', 'Deleting',
 * 'Updating'
 * @readonly
 * @enum {string}
 */
export type PrivateCloudProvisioningState = 'Succeeded' | 'Failed' | 'Cancelled' | 'Pending' | 'Building' | 'Deleting' | 'Updating';

/**
 * Defines values for InternetEnum.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type InternetEnum = 'Enabled' | 'Disabled';

/**
 * Defines values for VcsaAdminRotateEnum.
 * Possible values include: 'OnetimeRotate'
 * @readonly
 * @enum {string}
 */
export type VcsaAdminRotateEnum = 'OnetimeRotate';

/**
 * Defines values for NsxtAdminRotateEnum.
 * Possible values include: 'OnetimeRotate'
 * @readonly
 * @enum {string}
 */
export type NsxtAdminRotateEnum = 'OnetimeRotate';

/**
 * Defines values for ClusterProvisioningState.
 * Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Deleting', 'Updating'
 * @readonly
 * @enum {string}
 */
export type ClusterProvisioningState = 'Succeeded' | 'Failed' | 'Cancelled' | 'Deleting' | 'Updating';

/**
 * Defines values for HcxEnterpriseSiteStatus.
 * Possible values include: 'Available', 'Consumed', 'Deactivated', 'Deleted'
 * @readonly
 * @enum {string}
 */
export type HcxEnterpriseSiteStatus = 'Available' | 'Consumed' | 'Deactivated' | 'Deleted';

/**
 * Defines values for GlobalReachConnectionProvisioningState.
 * Possible values include: 'Succeeded', 'Failed', 'Updating'
 * @readonly
 * @enum {string}
 */
export type GlobalReachConnectionProvisioningState = 'Succeeded' | 'Failed' | 'Updating';

/**
 * Defines values for GlobalReachConnectionStatus.
 * Possible values include: 'Connected', 'Connecting', 'Disconnected'
 * @readonly
 * @enum {string}
 */
export type GlobalReachConnectionStatus = 'Connected' | 'Connecting' | 'Disconnected';

/**
 * Defines values for SegmentStatusEnum.
 * Possible values include: 'SUCCESS, FAILURE'
 * @readonly
 * @enum {string}
 */
export type SegmentStatusEnum = 'SUCCESS, FAILURE';

/**
 * Defines values for WorkloadNetworkSegmentProvisioningState.
 * Possible values include: 'Succeeded', 'Failed', 'Building', 'Deleting', 'Updating'
 * @readonly
 * @enum {string}
 */
export type WorkloadNetworkSegmentProvisioningState = 'Succeeded' | 'Failed' | 'Building' | 'Deleting' | 'Updating';

/**
 * Defines values for WorkloadNetworkDhcpProvisioningState.
 * Possible values include: 'Succeeded', 'Failed', 'Building', 'Deleting', 'Updating'
 * @readonly
 * @enum {string}
 */
export type WorkloadNetworkDhcpProvisioningState = 'Succeeded' | 'Failed' | 'Building' | 'Deleting' | 'Updating';

/**
 * Defines values for PortMirroringDirectionEnum.
 * Possible values include: 'INGRESS, EGRESS, BIDIRECTIONAL'
 * @readonly
 * @enum {string}
 */
export type PortMirroringDirectionEnum = 'INGRESS, EGRESS, BIDIRECTIONAL';

/**
 * Defines values for PortMirroringStatusEnum.
 * Possible values include: 'SUCCESS, FAILURE'
 * @readonly
 * @enum {string}
 */
export type PortMirroringStatusEnum = 'SUCCESS, FAILURE';

/**
 * Defines values for WorkloadNetworkPortMirroringProvisioningState.
 * Possible values include: 'Succeeded', 'Failed', 'Building', 'Deleting', 'Updating'
 * @readonly
 * @enum {string}
 */
export type WorkloadNetworkPortMirroringProvisioningState = 'Succeeded' | 'Failed' | 'Building' | 'Deleting' | 'Updating';

/**
 * Defines values for VMGroupStatusEnum.
 * Possible values include: 'SUCCESS, FAILURE'
 * @readonly
 * @enum {string}
 */
export type VMGroupStatusEnum = 'SUCCESS, FAILURE';

/**
 * Defines values for WorkloadNetworkVMGroupProvisioningState.
 * Possible values include: 'Succeeded', 'Failed', 'Building', 'Deleting', 'Updating'
 * @readonly
 * @enum {string}
 */
export type WorkloadNetworkVMGroupProvisioningState = 'Succeeded' | 'Failed' | 'Building' | 'Deleting' | 'Updating';

/**
 * Defines values for VMTypeEnum.
 * Possible values include: 'REGULAR, EDGE, SERVICE'
 * @readonly
 * @enum {string}
 */
export type VMTypeEnum = 'REGULAR, EDGE, SERVICE';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationList;
    };
};

/**
 * Contains response data for the checkTrialAvailability operation.
 */
export type LocationsCheckTrialAvailabilityResponse = Trial & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Trial;
    };
};

/**
 * Contains response data for the checkQuotaAvailability operation.
 */
export type LocationsCheckQuotaAvailabilityResponse = Quota & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Quota;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PrivateCloudsListResponse = PrivateCloudList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateCloudList;
    };
};

/**
 * Contains response data for the listInSubscription operation.
 */
export type PrivateCloudsListInSubscriptionResponse = PrivateCloudList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateCloudList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateCloudsGetResponse = PrivateCloud & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateCloud;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PrivateCloudsCreateOrUpdateResponse = PrivateCloud & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateCloud;
    };
};

/**
 * Contains response data for the update operation.
 */
export type PrivateCloudsUpdateResponse = PrivateCloud & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateCloud;
    };
};

/**
 * Contains response data for the listAdminCredentials operation.
 */
export type PrivateCloudsListAdminCredentialsResponse = AdminCredentials & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AdminCredentials;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PrivateCloudsBeginCreateOrUpdateResponse = PrivateCloud & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateCloud;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type PrivateCloudsBeginUpdateResponse = PrivateCloud & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateCloud;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PrivateCloudsListNextResponse = PrivateCloudList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateCloudList;
    };
};

/**
 * Contains response data for the listInSubscriptionNext operation.
 */
export type PrivateCloudsListInSubscriptionNextResponse = PrivateCloudList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateCloudList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ClustersListResponse = ClusterList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClusterList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ClustersGetResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Cluster;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ClustersCreateOrUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Cluster;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ClustersUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Cluster;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ClustersBeginCreateOrUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Cluster;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ClustersBeginUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Cluster;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ClustersListNextResponse = ClusterList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClusterList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type HcxEnterpriseSitesListResponse = HcxEnterpriseSiteList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HcxEnterpriseSiteList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type HcxEnterpriseSitesGetResponse = HcxEnterpriseSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HcxEnterpriseSite;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type HcxEnterpriseSitesCreateOrUpdateResponse = HcxEnterpriseSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HcxEnterpriseSite;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type HcxEnterpriseSitesListNextResponse = HcxEnterpriseSiteList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HcxEnterpriseSiteList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AuthorizationsListResponse = ExpressRouteAuthorizationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteAuthorizationList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AuthorizationsGetResponse = ExpressRouteAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteAuthorization;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AuthorizationsCreateOrUpdateResponse = ExpressRouteAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteAuthorization;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type AuthorizationsBeginCreateOrUpdateResponse = ExpressRouteAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteAuthorization;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AuthorizationsListNextResponse = ExpressRouteAuthorizationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteAuthorizationList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type GlobalReachConnectionsListResponse = GlobalReachConnectionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GlobalReachConnectionList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type GlobalReachConnectionsGetResponse = GlobalReachConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GlobalReachConnection;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GlobalReachConnectionsCreateOrUpdateResponse = GlobalReachConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GlobalReachConnection;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type GlobalReachConnectionsBeginCreateOrUpdateResponse = GlobalReachConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GlobalReachConnection;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type GlobalReachConnectionsListNextResponse = GlobalReachConnectionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GlobalReachConnectionList;
    };
};

/**
 * Contains response data for the listSegments operation.
 */
export type WorkloadNetworksListSegmentsResponse = WorkloadNetworkSegmentsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkSegmentsList;
    };
};

/**
 * Contains response data for the getSegment operation.
 */
export type WorkloadNetworksGetSegmentResponse = WorkloadNetworkSegment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkSegment;
    };
};

/**
 * Contains response data for the createSegments operation.
 */
export type WorkloadNetworksCreateSegmentsResponse = WorkloadNetworkSegment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkSegment;
    };
};

/**
 * Contains response data for the updateSegments operation.
 */
export type WorkloadNetworksUpdateSegmentsResponse = WorkloadNetworkSegment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkSegment;
    };
};

/**
 * Contains response data for the listDhcp operation.
 */
export type WorkloadNetworksListDhcpResponse = WorkloadNetworkDhcpList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkDhcpList;
    };
};

/**
 * Contains response data for the getDhcp operation.
 */
export type WorkloadNetworksGetDhcpResponse = WorkloadNetworkDhcp & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkDhcp;
    };
};

/**
 * Contains response data for the createDhcp operation.
 */
export type WorkloadNetworksCreateDhcpResponse = WorkloadNetworkDhcp & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkDhcp;
    };
};

/**
 * Contains response data for the updateDhcp operation.
 */
export type WorkloadNetworksUpdateDhcpResponse = WorkloadNetworkDhcp & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkDhcp;
    };
};

/**
 * Contains response data for the listGateways operation.
 */
export type WorkloadNetworksListGatewaysResponse = WorkloadNetworkGatewayList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkGatewayList;
    };
};

/**
 * Contains response data for the getGateway operation.
 */
export type WorkloadNetworksGetGatewayResponse = WorkloadNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkGateway;
    };
};

/**
 * Contains response data for the listPortMirroring operation.
 */
export type WorkloadNetworksListPortMirroringResponse = WorkloadNetworkPortMirroringList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkPortMirroringList;
    };
};

/**
 * Contains response data for the getPortMirroring operation.
 */
export type WorkloadNetworksGetPortMirroringResponse = WorkloadNetworkPortMirroring & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkPortMirroring;
    };
};

/**
 * Contains response data for the createPortMirroring operation.
 */
export type WorkloadNetworksCreatePortMirroringResponse = WorkloadNetworkPortMirroring & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkPortMirroring;
    };
};

/**
 * Contains response data for the updatePortMirroring operation.
 */
export type WorkloadNetworksUpdatePortMirroringResponse = WorkloadNetworkPortMirroring & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkPortMirroring;
    };
};

/**
 * Contains response data for the listVMGroups operation.
 */
export type WorkloadNetworksListVMGroupsResponse = WorkloadNetworkVMGroupsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkVMGroupsList;
    };
};

/**
 * Contains response data for the getVMGroup operation.
 */
export type WorkloadNetworksGetVMGroupResponse = WorkloadNetworkVMGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkVMGroup;
    };
};

/**
 * Contains response data for the createVMGroup operation.
 */
export type WorkloadNetworksCreateVMGroupResponse = WorkloadNetworkVMGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkVMGroup;
    };
};

/**
 * Contains response data for the updateVMGroup operation.
 */
export type WorkloadNetworksUpdateVMGroupResponse = WorkloadNetworkVMGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkVMGroup;
    };
};

/**
 * Contains response data for the listVirtualMachines operation.
 */
export type WorkloadNetworksListVirtualMachinesResponse = WorkloadNetworkVirtualMachinesList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkVirtualMachinesList;
    };
};

/**
 * Contains response data for the getVirtualMachine operation.
 */
export type WorkloadNetworksGetVirtualMachineResponse = WorkloadNetworkVirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkVirtualMachine;
    };
};

/**
 * Contains response data for the beginCreateSegments operation.
 */
export type WorkloadNetworksBeginCreateSegmentsResponse = WorkloadNetworkSegment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkSegment;
    };
};

/**
 * Contains response data for the beginUpdateSegments operation.
 */
export type WorkloadNetworksBeginUpdateSegmentsResponse = WorkloadNetworkSegment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkSegment;
    };
};

/**
 * Contains response data for the beginCreateDhcp operation.
 */
export type WorkloadNetworksBeginCreateDhcpResponse = WorkloadNetworkDhcp & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkDhcp;
    };
};

/**
 * Contains response data for the beginUpdateDhcp operation.
 */
export type WorkloadNetworksBeginUpdateDhcpResponse = WorkloadNetworkDhcp & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkDhcp;
    };
};

/**
 * Contains response data for the beginCreatePortMirroring operation.
 */
export type WorkloadNetworksBeginCreatePortMirroringResponse = WorkloadNetworkPortMirroring & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkPortMirroring;
    };
};

/**
 * Contains response data for the beginUpdatePortMirroring operation.
 */
export type WorkloadNetworksBeginUpdatePortMirroringResponse = WorkloadNetworkPortMirroring & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkPortMirroring;
    };
};

/**
 * Contains response data for the beginCreateVMGroup operation.
 */
export type WorkloadNetworksBeginCreateVMGroupResponse = WorkloadNetworkVMGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkVMGroup;
    };
};

/**
 * Contains response data for the beginUpdateVMGroup operation.
 */
export type WorkloadNetworksBeginUpdateVMGroupResponse = WorkloadNetworkVMGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkVMGroup;
    };
};

/**
 * Contains response data for the listSegmentsNext operation.
 */
export type WorkloadNetworksListSegmentsNextResponse = WorkloadNetworkSegmentsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkSegmentsList;
    };
};

/**
 * Contains response data for the listDhcpNext operation.
 */
export type WorkloadNetworksListDhcpNextResponse = WorkloadNetworkDhcpList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkDhcpList;
    };
};

/**
 * Contains response data for the listGatewaysNext operation.
 */
export type WorkloadNetworksListGatewaysNextResponse = WorkloadNetworkGatewayList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkGatewayList;
    };
};

/**
 * Contains response data for the listPortMirroringNext operation.
 */
export type WorkloadNetworksListPortMirroringNextResponse = WorkloadNetworkPortMirroringList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkPortMirroringList;
    };
};

/**
 * Contains response data for the listVMGroupsNext operation.
 */
export type WorkloadNetworksListVMGroupsNextResponse = WorkloadNetworkVMGroupsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkVMGroupsList;
    };
};

/**
 * Contains response data for the listVirtualMachinesNext operation.
 */
export type WorkloadNetworksListVirtualMachinesNextResponse = WorkloadNetworkVirtualMachinesList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadNetworkVirtualMachinesList;
    };
};
