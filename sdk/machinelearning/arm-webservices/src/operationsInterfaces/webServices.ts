/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  WebService,
  WebServicesListByResourceGroupOptionalParams,
  WebServicesListBySubscriptionIdOptionalParams,
  WebServicesCreateOrUpdateOptionalParams,
  WebServicesCreateOrUpdateResponse,
  WebServicesGetOptionalParams,
  WebServicesGetResponse,
  PatchedWebService,
  WebServicesPatchOptionalParams,
  WebServicesPatchResponse,
  WebServicesRemoveOptionalParams,
  WebServicesCreateRegionalPropertiesOptionalParams,
  WebServicesCreateRegionalPropertiesResponse,
  WebServicesListKeysOptionalParams,
  WebServicesListKeysResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a WebServices. */
export interface WebServices {
  /**
   * Gets the web services in the specified resource group.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: WebServicesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<WebService>;
  /**
   * Gets the web services in the specified subscription.
   * @param options The options parameters.
   */
  listBySubscriptionId(
    options?: WebServicesListBySubscriptionIdOptionalParams
  ): PagedAsyncIterableIterator<WebService>;
  /**
   * Create or update a web service. This call will overwrite an existing web service. Note that there is
   * no warning or confirmation. This is a nonrecoverable operation. If your intent is to create a new
   * web service, call the Get operation first to verify that it does not exist.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param createOrUpdatePayload The payload that is used to create or update the web service.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    webServiceName: string,
    createOrUpdatePayload: WebService,
    options?: WebServicesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebServicesCreateOrUpdateResponse>,
      WebServicesCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a web service. This call will overwrite an existing web service. Note that there is
   * no warning or confirmation. This is a nonrecoverable operation. If your intent is to create a new
   * web service, call the Get operation first to verify that it does not exist.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param createOrUpdatePayload The payload that is used to create or update the web service.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    webServiceName: string,
    createOrUpdatePayload: WebService,
    options?: WebServicesCreateOrUpdateOptionalParams
  ): Promise<WebServicesCreateOrUpdateResponse>;
  /**
   * Gets the Web Service Definition as specified by a subscription, resource group, and name. Note that
   * the storage credentials and web service keys are not returned by this call. To get the web service
   * access keys, call List Keys.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    webServiceName: string,
    options?: WebServicesGetOptionalParams
  ): Promise<WebServicesGetResponse>;
  /**
   * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To
   * determine whether it has completed successfully, you must perform a Get operation.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param patchPayload The payload to use to patch the web service.
   * @param options The options parameters.
   */
  beginPatch(
    resourceGroupName: string,
    webServiceName: string,
    patchPayload: PatchedWebService,
    options?: WebServicesPatchOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebServicesPatchResponse>,
      WebServicesPatchResponse
    >
  >;
  /**
   * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To
   * determine whether it has completed successfully, you must perform a Get operation.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param patchPayload The payload to use to patch the web service.
   * @param options The options parameters.
   */
  beginPatchAndWait(
    resourceGroupName: string,
    webServiceName: string,
    patchPayload: PatchedWebService,
    options?: WebServicesPatchOptionalParams
  ): Promise<WebServicesPatchResponse>;
  /**
   * Deletes the specified web service.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param options The options parameters.
   */
  beginRemove(
    resourceGroupName: string,
    webServiceName: string,
    options?: WebServicesRemoveOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the specified web service.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param options The options parameters.
   */
  beginRemoveAndWait(
    resourceGroupName: string,
    webServiceName: string,
    options?: WebServicesRemoveOptionalParams
  ): Promise<void>;
  /**
   * Creates an encrypted credentials parameter blob for the specified region. To get the web service
   * from a region other than the region in which it has been created, you must first call Create
   * Regional Web Services Properties to create a copy of the encrypted credential parameter blob in that
   * region. You only need to do this before the first time that you get the web service in the new
   * region.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param region The region for which encrypted credential parameters are created.
   * @param options The options parameters.
   */
  beginCreateRegionalProperties(
    resourceGroupName: string,
    webServiceName: string,
    region: string,
    options?: WebServicesCreateRegionalPropertiesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebServicesCreateRegionalPropertiesResponse>,
      WebServicesCreateRegionalPropertiesResponse
    >
  >;
  /**
   * Creates an encrypted credentials parameter blob for the specified region. To get the web service
   * from a region other than the region in which it has been created, you must first call Create
   * Regional Web Services Properties to create a copy of the encrypted credential parameter blob in that
   * region. You only need to do this before the first time that you get the web service in the new
   * region.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param region The region for which encrypted credential parameters are created.
   * @param options The options parameters.
   */
  beginCreateRegionalPropertiesAndWait(
    resourceGroupName: string,
    webServiceName: string,
    region: string,
    options?: WebServicesCreateRegionalPropertiesOptionalParams
  ): Promise<WebServicesCreateRegionalPropertiesResponse>;
  /**
   * Gets the access keys for the specified web service.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    webServiceName: string,
    options?: WebServicesListKeysOptionalParams
  ): Promise<WebServicesListKeysResponse>;
}
