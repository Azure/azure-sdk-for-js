/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { WebServices } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMLWebServicesManagementClient } from "../azureMLWebServicesManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  WebService,
  WebServicesListByResourceGroupNextOptionalParams,
  WebServicesListByResourceGroupOptionalParams,
  WebServicesListBySubscriptionIdNextOptionalParams,
  WebServicesListBySubscriptionIdOptionalParams,
  WebServicesCreateOrUpdateOptionalParams,
  WebServicesCreateOrUpdateResponse,
  WebServicesGetOptionalParams,
  WebServicesGetResponse,
  PatchedWebService,
  WebServicesPatchOptionalParams,
  WebServicesPatchResponse,
  WebServicesRemoveOptionalParams,
  WebServicesCreateRegionalPropertiesOptionalParams,
  WebServicesCreateRegionalPropertiesResponse,
  WebServicesListKeysOptionalParams,
  WebServicesListKeysResponse,
  WebServicesListByResourceGroupResponse,
  WebServicesListBySubscriptionIdResponse,
  WebServicesListByResourceGroupNextResponse,
  WebServicesListBySubscriptionIdNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing WebServices operations. */
export class WebServicesImpl implements WebServices {
  private readonly client: AzureMLWebServicesManagementClient;

  /**
   * Initialize a new instance of the class WebServices class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMLWebServicesManagementClient) {
    this.client = client;
  }

  /**
   * Gets the web services in the specified resource group.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: WebServicesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<WebService> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: WebServicesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<WebService[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: WebServicesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<WebService> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the web services in the specified subscription.
   * @param options The options parameters.
   */
  public listBySubscriptionId(
    options?: WebServicesListBySubscriptionIdOptionalParams
  ): PagedAsyncIterableIterator<WebService> {
    const iter = this.listBySubscriptionIdPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionIdPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionIdPagingPage(
    options?: WebServicesListBySubscriptionIdOptionalParams
  ): AsyncIterableIterator<WebService[]> {
    let result = await this._listBySubscriptionId(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionIdNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionIdPagingAll(
    options?: WebServicesListBySubscriptionIdOptionalParams
  ): AsyncIterableIterator<WebService> {
    for await (const page of this.listBySubscriptionIdPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Create or update a web service. This call will overwrite an existing web service. Note that there is
   * no warning or confirmation. This is a nonrecoverable operation. If your intent is to create a new
   * web service, call the Get operation first to verify that it does not exist.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param createOrUpdatePayload The payload that is used to create or update the web service.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    webServiceName: string,
    createOrUpdatePayload: WebService,
    options?: WebServicesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebServicesCreateOrUpdateResponse>,
      WebServicesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebServicesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, webServiceName, createOrUpdatePayload, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a web service. This call will overwrite an existing web service. Note that there is
   * no warning or confirmation. This is a nonrecoverable operation. If your intent is to create a new
   * web service, call the Get operation first to verify that it does not exist.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param createOrUpdatePayload The payload that is used to create or update the web service.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    webServiceName: string,
    createOrUpdatePayload: WebService,
    options?: WebServicesCreateOrUpdateOptionalParams
  ): Promise<WebServicesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      webServiceName,
      createOrUpdatePayload,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the Web Service Definition as specified by a subscription, resource group, and name. Note that
   * the storage credentials and web service keys are not returned by this call. To get the web service
   * access keys, call List Keys.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    webServiceName: string,
    options?: WebServicesGetOptionalParams
  ): Promise<WebServicesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, webServiceName, options },
      getOperationSpec
    );
  }

  /**
   * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To
   * determine whether it has completed successfully, you must perform a Get operation.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param patchPayload The payload to use to patch the web service.
   * @param options The options parameters.
   */
  async beginPatch(
    resourceGroupName: string,
    webServiceName: string,
    patchPayload: PatchedWebService,
    options?: WebServicesPatchOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebServicesPatchResponse>,
      WebServicesPatchResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebServicesPatchResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, webServiceName, patchPayload, options },
      patchOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To
   * determine whether it has completed successfully, you must perform a Get operation.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param patchPayload The payload to use to patch the web service.
   * @param options The options parameters.
   */
  async beginPatchAndWait(
    resourceGroupName: string,
    webServiceName: string,
    patchPayload: PatchedWebService,
    options?: WebServicesPatchOptionalParams
  ): Promise<WebServicesPatchResponse> {
    const poller = await this.beginPatch(
      resourceGroupName,
      webServiceName,
      patchPayload,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the specified web service.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param options The options parameters.
   */
  async beginRemove(
    resourceGroupName: string,
    webServiceName: string,
    options?: WebServicesRemoveOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, webServiceName, options },
      removeOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the specified web service.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param options The options parameters.
   */
  async beginRemoveAndWait(
    resourceGroupName: string,
    webServiceName: string,
    options?: WebServicesRemoveOptionalParams
  ): Promise<void> {
    const poller = await this.beginRemove(
      resourceGroupName,
      webServiceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Creates an encrypted credentials parameter blob for the specified region. To get the web service
   * from a region other than the region in which it has been created, you must first call Create
   * Regional Web Services Properties to create a copy of the encrypted credential parameter blob in that
   * region. You only need to do this before the first time that you get the web service in the new
   * region.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param region The region for which encrypted credential parameters are created.
   * @param options The options parameters.
   */
  async beginCreateRegionalProperties(
    resourceGroupName: string,
    webServiceName: string,
    region: string,
    options?: WebServicesCreateRegionalPropertiesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebServicesCreateRegionalPropertiesResponse>,
      WebServicesCreateRegionalPropertiesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebServicesCreateRegionalPropertiesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, webServiceName, region, options },
      createRegionalPropertiesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates an encrypted credentials parameter blob for the specified region. To get the web service
   * from a region other than the region in which it has been created, you must first call Create
   * Regional Web Services Properties to create a copy of the encrypted credential parameter blob in that
   * region. You only need to do this before the first time that you get the web service in the new
   * region.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param region The region for which encrypted credential parameters are created.
   * @param options The options parameters.
   */
  async beginCreateRegionalPropertiesAndWait(
    resourceGroupName: string,
    webServiceName: string,
    region: string,
    options?: WebServicesCreateRegionalPropertiesOptionalParams
  ): Promise<WebServicesCreateRegionalPropertiesResponse> {
    const poller = await this.beginCreateRegionalProperties(
      resourceGroupName,
      webServiceName,
      region,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the access keys for the specified web service.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    webServiceName: string,
    options?: WebServicesListKeysOptionalParams
  ): Promise<WebServicesListKeysResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, webServiceName, options },
      listKeysOperationSpec
    );
  }

  /**
   * Gets the web services in the specified resource group.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: WebServicesListByResourceGroupOptionalParams
  ): Promise<WebServicesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets the web services in the specified subscription.
   * @param options The options parameters.
   */
  private _listBySubscriptionId(
    options?: WebServicesListBySubscriptionIdOptionalParams
  ): Promise<WebServicesListBySubscriptionIdResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionIdOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: WebServicesListByResourceGroupNextOptionalParams
  ): Promise<WebServicesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionIdNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
   * @param options The options parameters.
   */
  private _listBySubscriptionIdNext(
    nextLink: string,
    options?: WebServicesListBySubscriptionIdNextOptionalParams
  ): Promise<WebServicesListBySubscriptionIdNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionIdNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.WebService
    },
    201: {
      bodyMapper: Mappers.WebService
    },
    202: {
      bodyMapper: Mappers.WebService
    },
    204: {
      bodyMapper: Mappers.WebService
    }
  },
  requestBody: Parameters.createOrUpdatePayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebService
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.region],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const patchOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.WebService
    },
    201: {
      bodyMapper: Mappers.WebService
    },
    202: {
      bodyMapper: Mappers.WebService
    },
    204: {
      bodyMapper: Mappers.WebService
    }
  },
  requestBody: Parameters.patchPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const removeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  serializer
};
const createRegionalPropertiesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/CreateRegionalBlob",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    201: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    202: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    204: {
      bodyMapper: Mappers.AsyncOperationStatus
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.region1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listKeysOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/listKeys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebServiceKeys
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedWebServicesList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/webServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedWebServicesList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedWebServicesList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionIdNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedWebServicesList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
