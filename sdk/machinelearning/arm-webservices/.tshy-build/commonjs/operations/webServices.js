"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebServicesImpl = void 0;
const tslib_1 = require("tslib");
const pagingHelper_js_1 = require("../pagingHelper.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
const core_lro_1 = require("@azure/core-lro");
const lroImpl_js_1 = require("../lroImpl.js");
/// <reference lib="esnext.asynciterable" />
/** Class containing WebServices operations. */
class WebServicesImpl {
    /**
     * Initialize a new instance of the class WebServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the web services in the specified resource group.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the web services in the specified subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options) {
        const iter = this.listBySubscriptionIdPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionIdPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionIdPagingPage(options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._listBySubscriptionId(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listBySubscriptionIdNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listBySubscriptionIdPagingAll(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listBySubscriptionIdPagingPage(options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Create or update a web service. This call will overwrite an existing web service. Note that there is
     * no warning or confirmation. This is a nonrecoverable operation. If your intent is to create a new
     * web service, call the Get operation first to verify that it does not exist.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param createOrUpdatePayload The payload that is used to create or update the web service.
     * @param options The options parameters.
     */
    async beginCreateOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new lroImpl_js_1.LroImpl(sendOperation, { resourceGroupName, webServiceName, createOrUpdatePayload, options }, createOrUpdateOperationSpec);
        const poller = new core_lro_1.LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Create or update a web service. This call will overwrite an existing web service. Note that there is
     * no warning or confirmation. This is a nonrecoverable operation. If your intent is to create a new
     * web service, call the Get operation first to verify that it does not exist.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param createOrUpdatePayload The payload that is used to create or update the web service.
     * @param options The options parameters.
     */
    async beginCreateOrUpdateAndWait(resourceGroupName, webServiceName, createOrUpdatePayload, options) {
        const poller = await this.beginCreateOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets the Web Service Definition as specified by a subscription, resource group, and name. Note that
     * the storage credentials and web service keys are not returned by this call. To get the web service
     * access keys, call List Keys.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param options The options parameters.
     */
    get(resourceGroupName, webServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, webServiceName, options }, getOperationSpec);
    }
    /**
     * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To
     * determine whether it has completed successfully, you must perform a Get operation.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param patchPayload The payload to use to patch the web service.
     * @param options The options parameters.
     */
    async beginPatch(resourceGroupName, webServiceName, patchPayload, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new lroImpl_js_1.LroImpl(sendOperation, { resourceGroupName, webServiceName, patchPayload, options }, patchOperationSpec);
        const poller = new core_lro_1.LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To
     * determine whether it has completed successfully, you must perform a Get operation.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param patchPayload The payload to use to patch the web service.
     * @param options The options parameters.
     */
    async beginPatchAndWait(resourceGroupName, webServiceName, patchPayload, options) {
        const poller = await this.beginPatch(resourceGroupName, webServiceName, patchPayload, options);
        return poller.pollUntilDone();
    }
    /**
     * Deletes the specified web service.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param options The options parameters.
     */
    async beginRemove(resourceGroupName, webServiceName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new lroImpl_js_1.LroImpl(sendOperation, { resourceGroupName, webServiceName, options }, removeOperationSpec);
        const poller = new core_lro_1.LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Deletes the specified web service.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param options The options parameters.
     */
    async beginRemoveAndWait(resourceGroupName, webServiceName, options) {
        const poller = await this.beginRemove(resourceGroupName, webServiceName, options);
        return poller.pollUntilDone();
    }
    /**
     * Creates an encrypted credentials parameter blob for the specified region. To get the web service
     * from a region other than the region in which it has been created, you must first call Create
     * Regional Web Services Properties to create a copy of the encrypted credential parameter blob in that
     * region. You only need to do this before the first time that you get the web service in the new
     * region.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param region The region for which encrypted credential parameters are created.
     * @param options The options parameters.
     */
    async beginCreateRegionalProperties(resourceGroupName, webServiceName, region, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new lroImpl_js_1.LroImpl(sendOperation, { resourceGroupName, webServiceName, region, options }, createRegionalPropertiesOperationSpec);
        const poller = new core_lro_1.LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Creates an encrypted credentials parameter blob for the specified region. To get the web service
     * from a region other than the region in which it has been created, you must first call Create
     * Regional Web Services Properties to create a copy of the encrypted credential parameter blob in that
     * region. You only need to do this before the first time that you get the web service in the new
     * region.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param region The region for which encrypted credential parameters are created.
     * @param options The options parameters.
     */
    async beginCreateRegionalPropertiesAndWait(resourceGroupName, webServiceName, region, options) {
        const poller = await this.beginCreateRegionalProperties(resourceGroupName, webServiceName, region, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets the access keys for the specified web service.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, webServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, webServiceName, options }, listKeysOperationSpec);
    }
    /**
     * Gets the web services in the specified resource group.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Gets the web services in the specified subscription.
     * @param options The options parameters.
     */
    _listBySubscriptionId(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionIdOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListBySubscriptionIdNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
     * @param options The options parameters.
     */
    _listBySubscriptionIdNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionIdNextOperationSpec);
    }
}
exports.WebServicesImpl = WebServicesImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.WebService
        },
        201: {
            bodyMapper: Mappers.WebService
        },
        202: {
            bodyMapper: Mappers.WebService
        },
        204: {
            bodyMapper: Mappers.WebService
        }
    },
    requestBody: Parameters.createOrUpdatePayload,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.webServiceName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WebService
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.region],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.webServiceName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const patchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.WebService
        },
        201: {
            bodyMapper: Mappers.WebService
        },
        202: {
            bodyMapper: Mappers.WebService
        },
        204: {
            bodyMapper: Mappers.WebService
        }
    },
    requestBody: Parameters.patchPayload,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.webServiceName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const removeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.webServiceName,
        Parameters.subscriptionId
    ],
    serializer
};
const createRegionalPropertiesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/CreateRegionalBlob",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AsyncOperationStatus
        },
        201: {
            bodyMapper: Mappers.AsyncOperationStatus
        },
        202: {
            bodyMapper: Mappers.AsyncOperationStatus
        },
        204: {
            bodyMapper: Mappers.AsyncOperationStatus
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.region1],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.webServiceName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/listKeys",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WebServiceKeys
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.webServiceName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PaginatedWebServicesList
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySubscriptionIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/webServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PaginatedWebServicesList
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PaginatedWebServicesList
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySubscriptionIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PaginatedWebServicesList
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=webServices.js.map