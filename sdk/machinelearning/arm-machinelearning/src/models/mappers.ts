/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AmlOperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlOperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AmlOperation"
            }
          }
        }
      }
    }
  }
};

export const AmlOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlOperation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "AmlOperationDisplay"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AmlOperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const EncryptionProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityForCmk"
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "EncryptionKeyVaultProperties"
        }
      }
    }
  }
};

export const IdentityForCmk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityForCmk",
    modelProperties: {
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionKeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionKeyVaultProperties",
    modelProperties: {
      keyVaultArmId: {
        serializedName: "keyVaultArmId",
        required: true,
        type: {
          name: "String"
        }
      },
      keyIdentifier: {
        serializedName: "keyIdentifier",
        required: true,
        type: {
          name: "String"
        }
      },
      identityClientId: {
        serializedName: "identityClientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnetArmId: {
        serializedName: "subnetArmId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: ["Free", "Basic", "Standard", "Premium"]
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SharedPrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requestMessage: {
        serializedName: "properties.requestMessage",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotebookResourceInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookResourceInfo",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      notebookPreparationError: {
        serializedName: "notebookPreparationError",
        type: {
          name: "Composite",
          className: "NotebookPreparationError"
        }
      }
    }
  }
};

export const NotebookPreparationError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookPreparationError",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      statusCode: {
        serializedName: "statusCode",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceManagedResourcesSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceManagedResourcesSettings",
    modelProperties: {
      cosmosDb: {
        serializedName: "cosmosDb",
        type: {
          name: "Composite",
          className: "CosmosDbSettings"
        }
      }
    }
  }
};

export const CosmosDbSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CosmosDbSettings",
    modelProperties: {
      collectionsThroughput: {
        serializedName: "collectionsThroughput",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WorkspaceUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      imageBuildCompute: {
        serializedName: "properties.imageBuildCompute",
        type: {
          name: "String"
        }
      },
      serviceManagedResourcesSettings: {
        serializedName: "properties.serviceManagedResourcesSettings",
        type: {
          name: "Composite",
          className: "ServiceManagedResourcesSettings"
        }
      },
      primaryUserAssignedIdentity: {
        serializedName: "properties.primaryUserAssignedIdentity",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      applicationInsights: {
        serializedName: "properties.applicationInsights",
        type: {
          name: "String"
        }
      },
      containerRegistry: {
        serializedName: "properties.containerRegistry",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workspace"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnoseWorkspaceParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseWorkspaceParameters",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "DiagnoseRequestProperties"
        }
      }
    }
  }
};

export const DiagnoseRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseRequestProperties",
    modelProperties: {
      udr: {
        serializedName: "udr",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      nsg: {
        serializedName: "nsg",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      resourceLock: {
        serializedName: "resourceLock",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      dnsResolution: {
        serializedName: "dnsResolution",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      storageAccount: {
        serializedName: "storageAccount",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      keyVault: {
        serializedName: "keyVault",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      containerRegistry: {
        serializedName: "containerRegistry",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      applicationInsights: {
        serializedName: "applicationInsights",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      others: {
        serializedName: "others",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const DiagnoseResponseResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseResponseResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "DiagnoseResponseResultValue"
        }
      }
    }
  }
};

export const DiagnoseResponseResultValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseResponseResultValue",
    modelProperties: {
      userDefinedRouteResults: {
        serializedName: "userDefinedRouteResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      networkSecurityRuleResults: {
        serializedName: "networkSecurityRuleResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      resourceLockResults: {
        serializedName: "resourceLockResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      dnsResolutionResults: {
        serializedName: "dnsResolutionResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      storageAccountResults: {
        serializedName: "storageAccountResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      keyVaultResults: {
        serializedName: "keyVaultResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      containerRegistryResults: {
        serializedName: "containerRegistryResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      applicationInsightsResults: {
        serializedName: "applicationInsightsResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      otherResults: {
        serializedName: "otherResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      }
    }
  }
};

export const DiagnoseResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseResult",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "level",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListWorkspaceKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListWorkspaceKeysResult",
    modelProperties: {
      userStorageKey: {
        serializedName: "userStorageKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userStorageResourceId: {
        serializedName: "userStorageResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      appInsightsInstrumentationKey: {
        serializedName: "appInsightsInstrumentationKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      containerRegistryCredentials: {
        serializedName: "containerRegistryCredentials",
        type: {
          name: "Composite",
          className: "RegistryListCredentialsResult"
        }
      },
      notebookAccessKeys: {
        serializedName: "notebookAccessKeys",
        type: {
          name: "Composite",
          className: "ListNotebookKeysResult"
        }
      }
    }
  }
};

export const RegistryListCredentialsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryListCredentialsResult",
    modelProperties: {
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      passwords: {
        serializedName: "passwords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Password"
            }
          }
        }
      }
    }
  }
};

export const Password: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Password",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListNotebookKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListNotebookKeysResult",
    modelProperties: {
      primaryAccessKey: {
        serializedName: "primaryAccessKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryAccessKey: {
        serializedName: "secondaryAccessKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListUsagesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListUsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      amlWorkspaceLocation: {
        serializedName: "amlWorkspaceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const UsageName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineSizeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSizeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineSize"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineSize: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSize",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCPUs: {
        serializedName: "vCPUs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      gpus: {
        serializedName: "gpus",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      osVhdSizeMB: {
        serializedName: "osVhdSizeMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxResourceVolumeMB: {
        serializedName: "maxResourceVolumeMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      memoryGB: {
        serializedName: "memoryGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lowPriorityCapable: {
        serializedName: "lowPriorityCapable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      premiumIO: {
        serializedName: "premiumIO",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      estimatedVMPrices: {
        serializedName: "estimatedVMPrices",
        type: {
          name: "Composite",
          className: "EstimatedVMPrices"
        }
      },
      supportedComputeTypes: {
        serializedName: "supportedComputeTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const EstimatedVMPrices: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EstimatedVMPrices",
    modelProperties: {
      billingCurrency: {
        serializedName: "billingCurrency",
        required: true,
        type: {
          name: "String"
        }
      },
      unitOfMeasure: {
        serializedName: "unitOfMeasure",
        required: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EstimatedVMPrice"
            }
          }
        }
      }
    }
  }
};

export const EstimatedVMPrice: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EstimatedVMPrice",
    modelProperties: {
      retailPrice: {
        serializedName: "retailPrice",
        required: true,
        type: {
          name: "Number"
        }
      },
      osType: {
        serializedName: "osType",
        required: true,
        type: {
          name: "String"
        }
      },
      vmTier: {
        serializedName: "vmTier",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaUpdateParameters",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QuotaBaseProperties"
            }
          }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaBaseProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaBaseProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateWorkspaceQuotasResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateWorkspaceQuotasResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateWorkspaceQuotas"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateWorkspaceQuotas: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateWorkspaceQuotas",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListWorkspaceQuotas: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListWorkspaceQuotas",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceQuota"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceQuota: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceQuota",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      amlWorkspaceLocation: {
        serializedName: "amlWorkspaceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "ResourceName"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PaginatedComputeResourcesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PaginatedComputeResourcesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeResourceSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeResourceSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "Compute"
        }
      }
    }
  }
};

export const Compute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Compute",
    uberParent: "Compute",
    polymorphicDiscriminator: {
      serializedName: "computeType",
      clientName: "computeType"
    },
    modelProperties: {
      computeType: {
        serializedName: "computeType",
        required: true,
        type: {
          name: "String"
        }
      },
      computeLocation: {
        serializedName: "computeLocation",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "createdOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      modifiedOn: {
        serializedName: "modifiedOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      provisioningErrors: {
        serializedName: "provisioningErrors",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      isAttachedCompute: {
        serializedName: "isAttachedCompute",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      disableLocalAuth: {
        serializedName: "disableLocalAuth",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ClusterUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterUpdateParameters",
    modelProperties: {
      properties: {
        serializedName: "properties.properties",
        type: {
          name: "Composite",
          className: "ScaleSettingsInformation"
        }
      }
    }
  }
};

export const ScaleSettingsInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleSettingsInformation",
    modelProperties: {
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      }
    }
  }
};

export const ScaleSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleSettings",
    modelProperties: {
      maxNodeCount: {
        serializedName: "maxNodeCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      minNodeCount: {
        defaultValue: 0,
        serializedName: "minNodeCount",
        type: {
          name: "Number"
        }
      },
      nodeIdleTimeBeforeScaleDown: {
        serializedName: "nodeIdleTimeBeforeScaleDown",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const AmlComputeNodesInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlComputeNodesInformation",
    modelProperties: {
      nodes: {
        serializedName: "nodes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AmlComputeNodeInformation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlComputeNodeInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlComputeNodeInformation",
    modelProperties: {
      nodeId: {
        serializedName: "nodeId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        serializedName: "publicIpAddress",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nodeState: {
        serializedName: "nodeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runId: {
        serializedName: "runId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotebookAccessTokenResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookAccessTokenResult",
    modelProperties: {
      notebookResourceId: {
        serializedName: "notebookResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicDns: {
        serializedName: "publicDns",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accessToken: {
        serializedName: "accessToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tokenType: {
        serializedName: "tokenType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expiresIn: {
        serializedName: "expiresIn",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      refreshToken: {
        serializedName: "refreshToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeSecrets: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: {
      serializedName: "computeType",
      clientName: "computeType"
    },
    modelProperties: {
      computeType: {
        serializedName: "computeType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const ListStorageAccountKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListStorageAccountKeysResult",
    modelProperties: {
      userStorageKey: {
        serializedName: "userStorageKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceConnectionPropertiesV2: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceConnectionPropertiesV2",
    uberParent: "WorkspaceConnectionPropertiesV2",
    polymorphicDiscriminator: {
      serializedName: "authType",
      clientName: "authType"
    },
    modelProperties: {
      authType: {
        serializedName: "authType",
        required: true,
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      valueFormat: {
        serializedName: "valueFormat",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceConnectionPropertiesV2BasicResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceConnectionPropertiesV2BasicResourceArmPaginatedResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkspaceConnectionPropertiesV2BasicResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalFqdnResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalFqdnResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FqdnEndpoints"
            }
          }
        }
      }
    }
  }
};

export const FqdnEndpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FqdnEndpoints",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FqdnEndpointsProperties"
        }
      }
    }
  }
};

export const FqdnEndpointsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FqdnEndpointsProperties",
    modelProperties: {
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FqdnEndpoint"
            }
          }
        }
      }
    }
  }
};

export const FqdnEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FqdnEndpoint",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        type: {
          name: "String"
        }
      },
      endpointDetails: {
        serializedName: "endpointDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FqdnEndpointDetail"
            }
          }
        }
      }
    }
  }
};

export const FqdnEndpointDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FqdnEndpointDetail",
    modelProperties: {
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BatchEndpointTrackedResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchEndpointTrackedResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BatchEndpoint"
            }
          }
        }
      }
    }
  }
};

export const BatchEndpointDefaults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchEndpointDefaults",
    modelProperties: {
      deploymentName: {
        serializedName: "deploymentName",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointPropertiesBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointPropertiesBase",
    modelProperties: {
      authMode: {
        serializedName: "authMode",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      },
      keys: {
        serializedName: "keys",
        type: {
          name: "Composite",
          className: "EndpointAuthKeys"
        }
      },
      properties: {
        serializedName: "properties",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      scoringUri: {
        serializedName: "scoringUri",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      swaggerUri: {
        serializedName: "swaggerUri",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointAuthKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointAuthKeys",
    modelProperties: {
      primaryKey: {
        serializedName: "primaryKey",
        nullable: true,
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartialManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartialManagedServiceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const PartialMinimalTrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartialMinimalTrackedResource",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const BatchDeploymentTrackedResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchDeploymentTrackedResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BatchDeployment"
            }
          }
        }
      }
    }
  }
};

export const AssetReferenceBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssetReferenceBase",
    uberParent: "AssetReferenceBase",
    polymorphicDiscriminator: {
      serializedName: "referenceType",
      clientName: "referenceType"
    },
    modelProperties: {
      referenceType: {
        serializedName: "referenceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceConfiguration",
    modelProperties: {
      instanceCount: {
        defaultValue: 1,
        serializedName: "instanceCount",
        type: {
          name: "Number"
        }
      },
      instanceType: {
        serializedName: "instanceType",
        nullable: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        nullable: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const BatchRetrySettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchRetrySettings",
    modelProperties: {
      maxRetries: {
        defaultValue: 3,
        serializedName: "maxRetries",
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: "PT30S",
        serializedName: "timeout",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const EndpointDeploymentPropertiesBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointDeploymentPropertiesBase",
    modelProperties: {
      codeConfiguration: {
        serializedName: "codeConfiguration",
        type: {
          name: "Composite",
          className: "CodeConfiguration"
        }
      },
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      },
      environmentId: {
        serializedName: "environmentId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      properties: {
        serializedName: "properties",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const CodeConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CodeConfiguration",
    modelProperties: {
      codeId: {
        serializedName: "codeId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      scoringScript: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]"),
          MinLength: 1
        },
        serializedName: "scoringScript",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PartialBatchDeployment"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PartialBatchDeployment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartialBatchDeployment",
    modelProperties: {
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CodeContainerResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CodeContainerResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CodeContainer"
            }
          }
        }
      }
    }
  }
};

export const ResourceBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceBase",
    modelProperties: {
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      tags: {
        serializedName: "tags",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const CodeVersionResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CodeVersionResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CodeVersion"
            }
          }
        }
      }
    }
  }
};

export const ComponentContainerResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComponentContainerResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComponentContainer"
            }
          }
        }
      }
    }
  }
};

export const ComponentVersionResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComponentVersionResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComponentVersion"
            }
          }
        }
      }
    }
  }
};

export const DataContainerResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataContainerResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataContainer"
            }
          }
        }
      }
    }
  }
};

export const DataVersionBaseResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataVersionBaseResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataVersionBase"
            }
          }
        }
      }
    }
  }
};

export const DatastoreResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatastoreResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Datastore"
            }
          }
        }
      }
    }
  }
};

export const DatastoreCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatastoreCredentials",
    uberParent: "DatastoreCredentials",
    polymorphicDiscriminator: {
      serializedName: "credentialsType",
      clientName: "credentialsType"
    },
    modelProperties: {
      credentialsType: {
        serializedName: "credentialsType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatastoreSecrets: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatastoreSecrets",
    uberParent: "DatastoreSecrets",
    polymorphicDiscriminator: {
      serializedName: "secretsType",
      clientName: "secretsType"
    },
    modelProperties: {
      secretsType: {
        serializedName: "secretsType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentContainerResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentContainerResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentContainer"
            }
          }
        }
      }
    }
  }
};

export const EnvironmentVersionResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentVersionResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVersion"
            }
          }
        }
      }
    }
  }
};

export const BuildContext: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildContext",
    modelProperties: {
      contextUri: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "contextUri",
        required: true,
        type: {
          name: "String"
        }
      },
      dockerfilePath: {
        defaultValue: "Dockerfile",
        serializedName: "dockerfilePath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InferenceContainerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InferenceContainerProperties",
    modelProperties: {
      livenessRoute: {
        serializedName: "livenessRoute",
        type: {
          name: "Composite",
          className: "Route"
        }
      },
      readinessRoute: {
        serializedName: "readinessRoute",
        type: {
          name: "Composite",
          className: "Route"
        }
      },
      scoringRoute: {
        serializedName: "scoringRoute",
        type: {
          name: "Composite",
          className: "Route"
        }
      }
    }
  }
};

export const Route: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Route",
    modelProperties: {
      path: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "path",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobBaseResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobBaseResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobBase"
            }
          }
        }
      }
    }
  }
};

export const IdentityConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityConfiguration",
    uberParent: "IdentityConfiguration",
    polymorphicDiscriminator: {
      serializedName: "identityType",
      clientName: "identityType"
    },
    modelProperties: {
      identityType: {
        serializedName: "identityType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobService",
    modelProperties: {
      endpoint: {
        serializedName: "endpoint",
        nullable: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      jobServiceType: {
        serializedName: "jobServiceType",
        nullable: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      properties: {
        serializedName: "properties",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelContainerResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelContainerResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelContainer"
            }
          }
        }
      }
    }
  }
};

export const ModelVersionResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelVersionResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelVersion"
            }
          }
        }
      }
    }
  }
};

export const FlavorData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlavorData",
    modelProperties: {
      data: {
        serializedName: "data",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const OnlineEndpointTrackedResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineEndpointTrackedResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OnlineEndpoint"
            }
          }
        }
      }
    }
  }
};

export const OnlineDeploymentTrackedResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineDeploymentTrackedResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OnlineDeployment"
            }
          }
        }
      }
    }
  }
};

export const ProbeSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProbeSettings",
    modelProperties: {
      failureThreshold: {
        defaultValue: 30,
        serializedName: "failureThreshold",
        type: {
          name: "Number"
        }
      },
      initialDelay: {
        serializedName: "initialDelay",
        nullable: true,
        type: {
          name: "TimeSpan"
        }
      },
      period: {
        defaultValue: "PT10S",
        serializedName: "period",
        type: {
          name: "TimeSpan"
        }
      },
      successThreshold: {
        defaultValue: 1,
        serializedName: "successThreshold",
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: "PT2S",
        serializedName: "timeout",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const OnlineRequestSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineRequestSettings",
    modelProperties: {
      maxConcurrentRequestsPerInstance: {
        defaultValue: 1,
        serializedName: "maxConcurrentRequestsPerInstance",
        type: {
          name: "Number"
        }
      },
      maxQueueWait: {
        defaultValue: "PT0.5S",
        serializedName: "maxQueueWait",
        type: {
          name: "TimeSpan"
        }
      },
      requestTimeout: {
        defaultValue: "PT5S",
        serializedName: "requestTimeout",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const OnlineScaleSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineScaleSettings",
    uberParent: "OnlineScaleSettings",
    polymorphicDiscriminator: {
      serializedName: "scaleType",
      clientName: "scaleType"
    },
    modelProperties: {
      scaleType: {
        serializedName: "scaleType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartialSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartialSku",
    modelProperties: {
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: ["Free", "Basic", "Standard", "Premium"]
        }
      }
    }
  }
};

export const DeploymentLogsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentLogsRequest",
    modelProperties: {
      containerType: {
        serializedName: "containerType",
        type: {
          name: "String"
        }
      },
      tail: {
        serializedName: "tail",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DeploymentLogs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentLogs",
    modelProperties: {
      content: {
        serializedName: "content",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuResource"
            }
          }
        }
      }
    }
  }
};

export const SkuResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuResource",
    modelProperties: {
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SkuSetting"
        }
      }
    }
  }
};

export const SkuCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuCapacity",
    modelProperties: {
      default: {
        defaultValue: 0,
        serializedName: "default",
        type: {
          name: "Number"
        }
      },
      maximum: {
        defaultValue: 0,
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      minimum: {
        defaultValue: 0,
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      scaleType: {
        serializedName: "scaleType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuSetting",
    modelProperties: {
      name: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: ["Free", "Basic", "Standard", "Premium"]
        }
      }
    }
  }
};

export const RegenerateEndpointKeysRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegenerateEndpointKeysRequest",
    modelProperties: {
      keyType: {
        serializedName: "keyType",
        required: true,
        type: {
          name: "String"
        }
      },
      keyValue: {
        serializedName: "keyValue",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointAuthToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointAuthToken",
    modelProperties: {
      accessToken: {
        serializedName: "accessToken",
        nullable: true,
        type: {
          name: "String"
        }
      },
      expiryTimeUtc: {
        defaultValue: 0,
        serializedName: "expiryTimeUtc",
        type: {
          name: "Number"
        }
      },
      refreshAfterTimeUtc: {
        defaultValue: 0,
        serializedName: "refreshAfterTimeUtc",
        type: {
          name: "Number"
        }
      },
      tokenType: {
        serializedName: "tokenType",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduleResourceArmPaginatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleResourceArmPaginatedResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Schedule"
            }
          }
        }
      }
    }
  }
};

export const ScheduleActionBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleActionBase",
    uberParent: "ScheduleActionBase",
    polymorphicDiscriminator: {
      serializedName: "actionType",
      clientName: "actionType"
    },
    modelProperties: {
      actionType: {
        serializedName: "actionType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggerBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerBase",
    uberParent: "TriggerBase",
    polymorphicDiscriminator: {
      serializedName: "triggerType",
      clientName: "triggerType"
    },
    modelProperties: {
      endTime: {
        serializedName: "endTime",
        nullable: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        nullable: true,
        type: {
          name: "String"
        }
      },
      timeZone: {
        defaultValue: "UTC",
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      triggerType: {
        serializedName: "triggerType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListAmlUserFeatureResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListAmlUserFeatureResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AmlUserFeature"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlUserFeature: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlUserFeature",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceId",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AKSSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AKSSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AKSSchemaProperties"
        }
      }
    }
  }
};

export const AKSSchemaProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AKSSchemaProperties",
    modelProperties: {
      clusterFqdn: {
        serializedName: "clusterFqdn",
        nullable: true,
        type: {
          name: "String"
        }
      },
      systemServices: {
        serializedName: "systemServices",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SystemService"
            }
          }
        }
      },
      agentCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "agentCount",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      agentVmSize: {
        serializedName: "agentVmSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      clusterPurpose: {
        defaultValue: "FastProd",
        serializedName: "clusterPurpose",
        type: {
          name: "String"
        }
      },
      sslConfiguration: {
        serializedName: "sslConfiguration",
        type: {
          name: "Composite",
          className: "SslConfiguration"
        }
      },
      aksNetworkingConfiguration: {
        serializedName: "aksNetworkingConfiguration",
        type: {
          name: "Composite",
          className: "AksNetworkingConfiguration"
        }
      },
      loadBalancerType: {
        defaultValue: "PublicIp",
        serializedName: "loadBalancerType",
        type: {
          name: "String"
        }
      },
      loadBalancerSubnet: {
        serializedName: "loadBalancerSubnet",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemService",
    modelProperties: {
      systemServiceType: {
        serializedName: "systemServiceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        serializedName: "publicIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SslConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SslConfiguration",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      cert: {
        serializedName: "cert",
        nullable: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cname: {
        serializedName: "cname",
        nullable: true,
        type: {
          name: "String"
        }
      },
      leafDomainLabel: {
        serializedName: "leafDomainLabel",
        nullable: true,
        type: {
          name: "String"
        }
      },
      overwriteExistingDomain: {
        serializedName: "overwriteExistingDomain",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AksNetworkingConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AksNetworkingConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      serviceCidr: {
        constraints: {
          Pattern: new RegExp(
            "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
          )
        },
        serializedName: "serviceCidr",
        type: {
          name: "String"
        }
      },
      dnsServiceIP: {
        constraints: {
          Pattern: new RegExp(
            "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
          )
        },
        serializedName: "dnsServiceIP",
        type: {
          name: "String"
        }
      },
      dockerBridgeCidr: {
        constraints: {
          Pattern: new RegExp(
            "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
          )
        },
        serializedName: "dockerBridgeCidr",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "KubernetesProperties"
        }
      }
    }
  }
};

export const KubernetesProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesProperties",
    modelProperties: {
      relayConnectionString: {
        serializedName: "relayConnectionString",
        nullable: true,
        type: {
          name: "String"
        }
      },
      serviceBusConnectionString: {
        serializedName: "serviceBusConnectionString",
        nullable: true,
        type: {
          name: "String"
        }
      },
      extensionPrincipalId: {
        serializedName: "extensionPrincipalId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      extensionInstanceReleaseTrain: {
        serializedName: "extensionInstanceReleaseTrain",
        type: {
          name: "String"
        }
      },
      vcName: {
        serializedName: "vcName",
        type: {
          name: "String"
        }
      },
      namespace: {
        defaultValue: "default",
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      defaultInstanceType: {
        serializedName: "defaultInstanceType",
        type: {
          name: "String"
        }
      },
      instanceTypes: {
        serializedName: "instanceTypes",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "InstanceTypeSchema" }
          }
        }
      }
    }
  }
};

export const InstanceTypeSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceTypeSchema",
    modelProperties: {
      nodeSelector: {
        serializedName: "nodeSelector",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "InstanceTypeSchemaResources"
        }
      }
    }
  }
};

export const InstanceTypeSchemaResources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceTypeSchemaResources",
    modelProperties: {
      requests: {
        serializedName: "requests",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      limits: {
        serializedName: "limits",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AmlComputeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlComputeProperties",
    modelProperties: {
      osType: {
        defaultValue: "Linux",
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      vmPriority: {
        serializedName: "vmPriority",
        type: {
          name: "String"
        }
      },
      virtualMachineImage: {
        serializedName: "virtualMachineImage",
        type: {
          name: "Composite",
          className: "VirtualMachineImage"
        }
      },
      isolatedNetwork: {
        serializedName: "isolatedNetwork",
        type: {
          name: "Boolean"
        }
      },
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      },
      userAccountCredentials: {
        serializedName: "userAccountCredentials",
        type: {
          name: "Composite",
          className: "UserAccountCredentials"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      remoteLoginPortPublicAccess: {
        defaultValue: "NotSpecified",
        serializedName: "remoteLoginPortPublicAccess",
        type: {
          name: "String"
        }
      },
      allocationState: {
        serializedName: "allocationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allocationStateTransitionTime: {
        serializedName: "allocationStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      currentNodeCount: {
        serializedName: "currentNodeCount",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      targetNodeCount: {
        serializedName: "targetNodeCount",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      nodeStateCounts: {
        serializedName: "nodeStateCounts",
        type: {
          name: "Composite",
          className: "NodeStateCounts"
        }
      },
      enableNodePublicIp: {
        defaultValue: true,
        serializedName: "enableNodePublicIp",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      propertyBag: {
        serializedName: "propertyBag",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const VirtualMachineImage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineImage",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserAccountCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAccountCredentials",
    modelProperties: {
      adminUserName: {
        serializedName: "adminUserName",
        required: true,
        type: {
          name: "String"
        }
      },
      adminUserSshPublicKey: {
        serializedName: "adminUserSshPublicKey",
        type: {
          name: "String"
        }
      },
      adminUserPassword: {
        serializedName: "adminUserPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeStateCounts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeStateCounts",
    modelProperties: {
      idleNodeCount: {
        serializedName: "idleNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      runningNodeCount: {
        serializedName: "runningNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      preparingNodeCount: {
        serializedName: "preparingNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unusableNodeCount: {
        serializedName: "unusableNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      leavingNodeCount: {
        serializedName: "leavingNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      preemptedNodeCount: {
        serializedName: "preemptedNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AmlComputeSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlComputeSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AmlComputeProperties"
        }
      }
    }
  }
};

export const ComputeInstanceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceProperties",
    modelProperties: {
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      applicationSharingPolicy: {
        defaultValue: "Shared",
        serializedName: "applicationSharingPolicy",
        type: {
          name: "String"
        }
      },
      sshSettings: {
        serializedName: "sshSettings",
        type: {
          name: "Composite",
          className: "ComputeInstanceSshSettings"
        }
      },
      connectivityEndpoints: {
        serializedName: "connectivityEndpoints",
        type: {
          name: "Composite",
          className: "ComputeInstanceConnectivityEndpoints"
        }
      },
      applications: {
        serializedName: "applications",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeInstanceApplication"
            }
          }
        }
      },
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "Composite",
          className: "ComputeInstanceCreatedBy"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      computeInstanceAuthorizationType: {
        defaultValue: "personal",
        serializedName: "computeInstanceAuthorizationType",
        nullable: true,
        type: {
          name: "String"
        }
      },
      personalComputeInstanceSettings: {
        serializedName: "personalComputeInstanceSettings",
        type: {
          name: "Composite",
          className: "PersonalComputeInstanceSettings"
        }
      },
      setupScripts: {
        serializedName: "setupScripts",
        type: {
          name: "Composite",
          className: "SetupScripts"
        }
      },
      lastOperation: {
        serializedName: "lastOperation",
        type: {
          name: "Composite",
          className: "ComputeInstanceLastOperation"
        }
      },
      schedules: {
        serializedName: "schedules",
        type: {
          name: "Composite",
          className: "ComputeSchedules"
        }
      },
      enableNodePublicIp: {
        serializedName: "enableNodePublicIp",
        type: {
          name: "Boolean"
        }
      },
      containers: {
        serializedName: "containers",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeInstanceContainer"
            }
          }
        }
      },
      dataDisks: {
        serializedName: "dataDisks",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeInstanceDataDisk"
            }
          }
        }
      },
      dataMounts: {
        serializedName: "dataMounts",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeInstanceDataMount"
            }
          }
        }
      },
      versions: {
        serializedName: "versions",
        type: {
          name: "Composite",
          className: "ComputeInstanceVersion"
        }
      }
    }
  }
};

export const ComputeInstanceSshSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceSshSettings",
    modelProperties: {
      sshPublicAccess: {
        defaultValue: "Disabled",
        serializedName: "sshPublicAccess",
        type: {
          name: "String"
        }
      },
      adminUserName: {
        serializedName: "adminUserName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sshPort: {
        serializedName: "sshPort",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      adminPublicKey: {
        serializedName: "adminPublicKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceConnectivityEndpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceConnectivityEndpoints",
    modelProperties: {
      publicIpAddress: {
        serializedName: "publicIpAddress",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceApplication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceApplication",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      endpointUri: {
        serializedName: "endpointUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceCreatedBy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceCreatedBy",
    modelProperties: {
      userName: {
        serializedName: "userName",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      userOrgId: {
        serializedName: "userOrgId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userId: {
        serializedName: "userId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PersonalComputeInstanceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PersonalComputeInstanceSettings",
    modelProperties: {
      assignedUser: {
        serializedName: "assignedUser",
        type: {
          name: "Composite",
          className: "AssignedUser"
        }
      }
    }
  }
};

export const AssignedUser: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssignedUser",
    modelProperties: {
      objectId: {
        serializedName: "objectId",
        required: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SetupScripts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SetupScripts",
    modelProperties: {
      scripts: {
        serializedName: "scripts",
        type: {
          name: "Composite",
          className: "ScriptsToExecute"
        }
      }
    }
  }
};

export const ScriptsToExecute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptsToExecute",
    modelProperties: {
      startupScript: {
        serializedName: "startupScript",
        type: {
          name: "Composite",
          className: "ScriptReference"
        }
      },
      creationScript: {
        serializedName: "creationScript",
        type: {
          name: "Composite",
          className: "ScriptReference"
        }
      }
    }
  }
};

export const ScriptReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptReference",
    modelProperties: {
      scriptSource: {
        serializedName: "scriptSource",
        type: {
          name: "String"
        }
      },
      scriptData: {
        serializedName: "scriptData",
        type: {
          name: "String"
        }
      },
      scriptArguments: {
        serializedName: "scriptArguments",
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "timeout",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceLastOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceLastOperation",
    modelProperties: {
      operationName: {
        serializedName: "operationName",
        type: {
          name: "String"
        }
      },
      operationTime: {
        serializedName: "operationTime",
        type: {
          name: "DateTime"
        }
      },
      operationStatus: {
        serializedName: "operationStatus",
        type: {
          name: "String"
        }
      },
      operationTrigger: {
        serializedName: "operationTrigger",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeSchedules: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeSchedules",
    modelProperties: {
      computeStartStop: {
        serializedName: "computeStartStop",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeStartStopSchedule"
            }
          }
        }
      }
    }
  }
};

export const ComputeStartStopSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeStartStopSchedule",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      provisioningStatus: {
        serializedName: "provisioningStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      triggerType: {
        serializedName: "triggerType",
        type: {
          name: "String"
        }
      },
      recurrence: {
        serializedName: "recurrence",
        type: {
          name: "Composite",
          className: "RecurrenceTrigger"
        }
      },
      cron: {
        serializedName: "cron",
        type: {
          name: "Composite",
          className: "CronTrigger"
        }
      },
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "ScheduleBase"
        }
      }
    }
  }
};

export const RecurrenceSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecurrenceSchedule",
    modelProperties: {
      hours: {
        serializedName: "hours",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      minutes: {
        serializedName: "minutes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      monthDays: {
        serializedName: "monthDays",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      weekDays: {
        serializedName: "weekDays",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ScheduleBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleBase",
    modelProperties: {
      id: {
        serializedName: "id",
        nullable: true,
        type: {
          name: "String"
        }
      },
      provisioningStatus: {
        serializedName: "provisioningStatus",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceContainer",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      autosave: {
        serializedName: "autosave",
        type: {
          name: "String"
        }
      },
      gpu: {
        serializedName: "gpu",
        type: {
          name: "String"
        }
      },
      network: {
        serializedName: "network",
        type: {
          name: "String"
        }
      },
      environment: {
        serializedName: "environment",
        type: {
          name: "Composite",
          className: "ComputeInstanceEnvironmentInfo"
        }
      },
      services: {
        serializedName: "services",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      }
    }
  }
};

export const ComputeInstanceEnvironmentInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceEnvironmentInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceDataDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceDataDisk",
    modelProperties: {
      caching: {
        serializedName: "caching",
        type: {
          name: "String"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        type: {
          name: "Number"
        }
      },
      lun: {
        serializedName: "lun",
        type: {
          name: "Number"
        }
      },
      storageAccountType: {
        defaultValue: "Standard_LRS",
        serializedName: "storageAccountType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceDataMount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceDataMount",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      sourceType: {
        serializedName: "sourceType",
        type: {
          name: "String"
        }
      },
      mountName: {
        serializedName: "mountName",
        type: {
          name: "String"
        }
      },
      mountAction: {
        serializedName: "mountAction",
        type: {
          name: "String"
        }
      },
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      mountPath: {
        serializedName: "mountPath",
        type: {
          name: "String"
        }
      },
      mountState: {
        serializedName: "mountState",
        type: {
          name: "String"
        }
      },
      mountedOn: {
        serializedName: "mountedOn",
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceVersion",
    modelProperties: {
      runtime: {
        serializedName: "runtime",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ComputeInstanceProperties"
        }
      }
    }
  }
};

export const VirtualMachineSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VirtualMachineSchemaProperties"
        }
      }
    }
  }
};

export const VirtualMachineSchemaProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSchemaProperties",
    modelProperties: {
      virtualMachineSize: {
        serializedName: "virtualMachineSize",
        type: {
          name: "String"
        }
      },
      sshPort: {
        serializedName: "sshPort",
        type: {
          name: "Number"
        }
      },
      notebookServerPort: {
        serializedName: "notebookServerPort",
        type: {
          name: "Number"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      },
      isNotebookInstanceCompute: {
        serializedName: "isNotebookInstanceCompute",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VirtualMachineSshCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSshCredentials",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      publicKeyData: {
        serializedName: "publicKeyData",
        type: {
          name: "String"
        }
      },
      privateKeyData: {
        serializedName: "privateKeyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HDInsightProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HDInsightProperties",
    modelProperties: {
      sshPort: {
        serializedName: "sshPort",
        type: {
          name: "Number"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      }
    }
  }
};

export const HDInsightSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HDInsightSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "HDInsightProperties"
        }
      }
    }
  }
};

export const DatabricksProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabricksProperties",
    modelProperties: {
      databricksAccessToken: {
        serializedName: "databricksAccessToken",
        type: {
          name: "String"
        }
      },
      workspaceUrl: {
        serializedName: "workspaceUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabricksSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabricksSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DatabricksProperties"
        }
      }
    }
  }
};

export const DataLakeAnalyticsSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataLakeAnalyticsSchemaProperties"
        }
      }
    }
  }
};

export const DataLakeAnalyticsSchemaProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsSchemaProperties",
    modelProperties: {
      dataLakeStoreAccountName: {
        serializedName: "dataLakeStoreAccountName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SynapseSparkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SynapseSparkProperties",
    modelProperties: {
      autoScaleProperties: {
        serializedName: "autoScaleProperties",
        type: {
          name: "Composite",
          className: "AutoScaleProperties"
        }
      },
      autoPauseProperties: {
        serializedName: "autoPauseProperties",
        type: {
          name: "Composite",
          className: "AutoPauseProperties"
        }
      },
      sparkVersion: {
        serializedName: "sparkVersion",
        type: {
          name: "String"
        }
      },
      nodeCount: {
        serializedName: "nodeCount",
        type: {
          name: "Number"
        }
      },
      nodeSize: {
        serializedName: "nodeSize",
        type: {
          name: "String"
        }
      },
      nodeSizeFamily: {
        serializedName: "nodeSizeFamily",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      },
      workspaceName: {
        serializedName: "workspaceName",
        type: {
          name: "String"
        }
      },
      poolName: {
        serializedName: "poolName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoScaleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoScaleProperties",
    modelProperties: {
      minNodeCount: {
        serializedName: "minNodeCount",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      maxNodeCount: {
        serializedName: "maxNodeCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoPauseProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoPauseProperties",
    modelProperties: {
      delayInMinutes: {
        serializedName: "delayInMinutes",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AksComputeSecretsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AksComputeSecretsProperties",
    modelProperties: {
      userKubeConfig: {
        serializedName: "userKubeConfig",
        type: {
          name: "String"
        }
      },
      adminKubeConfig: {
        serializedName: "adminKubeConfig",
        type: {
          name: "String"
        }
      },
      imagePullSecretName: {
        serializedName: "imagePullSecretName",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineSecretsSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSecretsSchema",
    modelProperties: {
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      }
    }
  }
};

export const DatabricksComputeSecretsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabricksComputeSecretsProperties",
    modelProperties: {
      databricksAccessToken: {
        serializedName: "databricksAccessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceConnectionUsernamePassword: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceConnectionUsernamePassword",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceConnectionPersonalAccessToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceConnectionPersonalAccessToken",
    modelProperties: {
      pat: {
        serializedName: "pat",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceConnectionSharedAccessSignature: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceConnectionSharedAccessSignature",
    modelProperties: {
      sas: {
        serializedName: "sas",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceConnectionManagedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceConnectionManagedIdentity",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssetJobInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssetJobInput",
    modelProperties: {
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      uri: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "uri",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssetJobOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssetJobOutput",
    modelProperties: {
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "uri",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ForecastHorizon: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastHorizon",
    uberParent: "ForecastHorizon",
    polymorphicDiscriminator: {
      serializedName: "mode",
      clientName: "mode"
    },
    modelProperties: {
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobOutput",
    uberParent: "JobOutput",
    polymorphicDiscriminator: {
      serializedName: "jobOutputType",
      clientName: "jobOutputType"
    },
    modelProperties: {
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      },
      jobOutputType: {
        serializedName: "jobOutputType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoMLVertical: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoMLVertical",
    uberParent: "AutoMLVertical",
    polymorphicDiscriminator: {
      serializedName: "taskType",
      clientName: "taskType"
    },
    modelProperties: {
      logVerbosity: {
        serializedName: "logVerbosity",
        type: {
          name: "String"
        }
      },
      targetColumnName: {
        serializedName: "targetColumnName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      taskType: {
        serializedName: "taskType",
        required: true,
        type: {
          name: "String"
        }
      },
      trainingData: {
        serializedName: "trainingData",
        type: {
          name: "Composite",
          className: "MLTableJobInput"
        }
      }
    }
  }
};

export const JobInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobInput",
    uberParent: "JobInput",
    polymorphicDiscriminator: {
      serializedName: "jobInputType",
      clientName: "jobInputType"
    },
    modelProperties: {
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      },
      jobInputType: {
        serializedName: "jobInputType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NCrossValidations: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NCrossValidations",
    uberParent: "NCrossValidations",
    polymorphicDiscriminator: {
      serializedName: "mode",
      clientName: "mode"
    },
    modelProperties: {
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Seasonality: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Seasonality",
    uberParent: "Seasonality",
    polymorphicDiscriminator: {
      serializedName: "mode",
      clientName: "mode"
    },
    modelProperties: {
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetLags: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetLags",
    uberParent: "TargetLags",
    polymorphicDiscriminator: {
      serializedName: "mode",
      clientName: "mode"
    },
    modelProperties: {
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetRollingWindowSize: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetRollingWindowSize",
    uberParent: "TargetRollingWindowSize",
    polymorphicDiscriminator: {
      serializedName: "mode",
      clientName: "mode"
    },
    modelProperties: {
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EarlyTerminationPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EarlyTerminationPolicy",
    uberParent: "EarlyTerminationPolicy",
    polymorphicDiscriminator: {
      serializedName: "policyType",
      clientName: "policyType"
    },
    modelProperties: {
      delayEvaluation: {
        defaultValue: 0,
        serializedName: "delayEvaluation",
        type: {
          name: "Number"
        }
      },
      evaluationInterval: {
        defaultValue: 0,
        serializedName: "evaluationInterval",
        type: {
          name: "Number"
        }
      },
      policyType: {
        serializedName: "policyType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SamplingAlgorithm: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SamplingAlgorithm",
    uberParent: "SamplingAlgorithm",
    polymorphicDiscriminator: {
      serializedName: "samplingAlgorithmType",
      clientName: "samplingAlgorithmType"
    },
    modelProperties: {
      samplingAlgorithmType: {
        serializedName: "samplingAlgorithmType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrainingSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrainingSettings",
    modelProperties: {
      enableDnnTraining: {
        defaultValue: false,
        serializedName: "enableDnnTraining",
        type: {
          name: "Boolean"
        }
      },
      enableModelExplainability: {
        defaultValue: true,
        serializedName: "enableModelExplainability",
        type: {
          name: "Boolean"
        }
      },
      enableOnnxCompatibleModels: {
        defaultValue: false,
        serializedName: "enableOnnxCompatibleModels",
        type: {
          name: "Boolean"
        }
      },
      enableStackEnsemble: {
        defaultValue: true,
        serializedName: "enableStackEnsemble",
        type: {
          name: "Boolean"
        }
      },
      enableVoteEnsemble: {
        defaultValue: true,
        serializedName: "enableVoteEnsemble",
        type: {
          name: "Boolean"
        }
      },
      ensembleModelDownloadTimeout: {
        defaultValue: "PT5M",
        serializedName: "ensembleModelDownloadTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      stackEnsembleSettings: {
        serializedName: "stackEnsembleSettings",
        type: {
          name: "Composite",
          className: "StackEnsembleSettings"
        }
      }
    }
  }
};

export const StackEnsembleSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StackEnsembleSettings",
    modelProperties: {
      stackMetaLearnerKWargs: {
        serializedName: "stackMetaLearnerKWargs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      stackMetaLearnerTrainPercentage: {
        defaultValue: 0.2,
        serializedName: "stackMetaLearnerTrainPercentage",
        type: {
          name: "Number"
        }
      },
      stackMetaLearnerType: {
        serializedName: "stackMetaLearnerType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableVertical: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableVertical",
    modelProperties: {
      cvSplitColumnNames: {
        serializedName: "cvSplitColumnNames",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      featurizationSettings: {
        serializedName: "featurizationSettings",
        type: {
          name: "Composite",
          className: "TableVerticalFeaturizationSettings"
        }
      },
      limitSettings: {
        serializedName: "limitSettings",
        type: {
          name: "Composite",
          className: "TableVerticalLimitSettings"
        }
      },
      nCrossValidations: {
        serializedName: "nCrossValidations",
        type: {
          name: "Composite",
          className: "NCrossValidations"
        }
      },
      testData: {
        serializedName: "testData",
        type: {
          name: "Composite",
          className: "MLTableJobInput"
        }
      },
      testDataSize: {
        serializedName: "testDataSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      validationData: {
        serializedName: "validationData",
        type: {
          name: "Composite",
          className: "MLTableJobInput"
        }
      },
      validationDataSize: {
        serializedName: "validationDataSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      weightColumnName: {
        serializedName: "weightColumnName",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ColumnTransformer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ColumnTransformer",
    modelProperties: {
      fields: {
        serializedName: "fields",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      parameters: {
        serializedName: "parameters",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const FeaturizationSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeaturizationSettings",
    modelProperties: {
      datasetLanguage: {
        serializedName: "datasetLanguage",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableVerticalLimitSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableVerticalLimitSettings",
    modelProperties: {
      enableEarlyTermination: {
        defaultValue: true,
        serializedName: "enableEarlyTermination",
        type: {
          name: "Boolean"
        }
      },
      exitScore: {
        serializedName: "exitScore",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      maxConcurrentTrials: {
        defaultValue: 1,
        serializedName: "maxConcurrentTrials",
        type: {
          name: "Number"
        }
      },
      maxCoresPerTrial: {
        defaultValue: -1,
        serializedName: "maxCoresPerTrial",
        type: {
          name: "Number"
        }
      },
      maxTrials: {
        defaultValue: 1000,
        serializedName: "maxTrials",
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: "PT6H",
        serializedName: "timeout",
        type: {
          name: "TimeSpan"
        }
      },
      trialTimeout: {
        defaultValue: "PT30M",
        serializedName: "trialTimeout",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const DistributionConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DistributionConfiguration",
    uberParent: "DistributionConfiguration",
    polymorphicDiscriminator: {
      serializedName: "distributionType",
      clientName: "distributionType"
    },
    modelProperties: {
      distributionType: {
        serializedName: "distributionType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobLimits: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobLimits",
    uberParent: "JobLimits",
    polymorphicDiscriminator: {
      serializedName: "jobLimitsType",
      clientName: "jobLimitsType"
    },
    modelProperties: {
      jobLimitsType: {
        serializedName: "jobLimitsType",
        required: true,
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "timeout",
        nullable: true,
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ContainerResourceRequirements: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerResourceRequirements",
    modelProperties: {
      containerResourceLimits: {
        serializedName: "containerResourceLimits",
        type: {
          name: "Composite",
          className: "ContainerResourceSettings"
        }
      },
      containerResourceRequests: {
        serializedName: "containerResourceRequests",
        type: {
          name: "Composite",
          className: "ContainerResourceSettings"
        }
      }
    }
  }
};

export const ContainerResourceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerResourceSettings",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        nullable: true,
        type: {
          name: "String"
        }
      },
      gpu: {
        serializedName: "gpu",
        nullable: true,
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ForecastingSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastingSettings",
    modelProperties: {
      countryOrRegionForHolidays: {
        serializedName: "countryOrRegionForHolidays",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cvStepSize: {
        serializedName: "cvStepSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      featureLags: {
        serializedName: "featureLags",
        type: {
          name: "String"
        }
      },
      forecastHorizon: {
        serializedName: "forecastHorizon",
        type: {
          name: "Composite",
          className: "ForecastHorizon"
        }
      },
      frequency: {
        serializedName: "frequency",
        nullable: true,
        type: {
          name: "String"
        }
      },
      seasonality: {
        serializedName: "seasonality",
        type: {
          name: "Composite",
          className: "Seasonality"
        }
      },
      shortSeriesHandlingConfig: {
        serializedName: "shortSeriesHandlingConfig",
        type: {
          name: "String"
        }
      },
      targetAggregateFunction: {
        serializedName: "targetAggregateFunction",
        type: {
          name: "String"
        }
      },
      targetLags: {
        serializedName: "targetLags",
        type: {
          name: "Composite",
          className: "TargetLags"
        }
      },
      targetRollingWindowSize: {
        serializedName: "targetRollingWindowSize",
        type: {
          name: "Composite",
          className: "TargetRollingWindowSize"
        }
      },
      timeColumnName: {
        serializedName: "timeColumnName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      timeSeriesIdColumnNames: {
        serializedName: "timeSeriesIdColumnNames",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      useStl: {
        serializedName: "useStl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageModelSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageModelSettings",
    modelProperties: {
      advancedSettings: {
        serializedName: "advancedSettings",
        nullable: true,
        type: {
          name: "String"
        }
      },
      amsGradient: {
        serializedName: "amsGradient",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      augmentations: {
        serializedName: "augmentations",
        nullable: true,
        type: {
          name: "String"
        }
      },
      beta1: {
        serializedName: "beta1",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      beta2: {
        serializedName: "beta2",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      checkpointFrequency: {
        serializedName: "checkpointFrequency",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      checkpointModel: {
        serializedName: "checkpointModel",
        type: {
          name: "Composite",
          className: "MLFlowModelJobInput"
        }
      },
      checkpointRunId: {
        serializedName: "checkpointRunId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      distributed: {
        serializedName: "distributed",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      earlyStopping: {
        serializedName: "earlyStopping",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      earlyStoppingDelay: {
        serializedName: "earlyStoppingDelay",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      earlyStoppingPatience: {
        serializedName: "earlyStoppingPatience",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      enableOnnxNormalization: {
        serializedName: "enableOnnxNormalization",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      evaluationFrequency: {
        serializedName: "evaluationFrequency",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      gradientAccumulationStep: {
        serializedName: "gradientAccumulationStep",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      layersToFreeze: {
        serializedName: "layersToFreeze",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      learningRate: {
        serializedName: "learningRate",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      learningRateScheduler: {
        serializedName: "learningRateScheduler",
        type: {
          name: "String"
        }
      },
      modelName: {
        serializedName: "modelName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      momentum: {
        serializedName: "momentum",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      nesterov: {
        serializedName: "nesterov",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      numberOfEpochs: {
        serializedName: "numberOfEpochs",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      numberOfWorkers: {
        serializedName: "numberOfWorkers",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      optimizer: {
        serializedName: "optimizer",
        type: {
          name: "String"
        }
      },
      randomSeed: {
        serializedName: "randomSeed",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      stepLRGamma: {
        serializedName: "stepLRGamma",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      stepLRStepSize: {
        serializedName: "stepLRStepSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      trainingBatchSize: {
        serializedName: "trainingBatchSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      validationBatchSize: {
        serializedName: "validationBatchSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      warmupCosineLRCycles: {
        serializedName: "warmupCosineLRCycles",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      warmupCosineLRWarmupEpochs: {
        serializedName: "warmupCosineLRWarmupEpochs",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      weightDecay: {
        serializedName: "weightDecay",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImageModelDistributionSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageModelDistributionSettings",
    modelProperties: {
      amsGradient: {
        serializedName: "amsGradient",
        nullable: true,
        type: {
          name: "String"
        }
      },
      augmentations: {
        serializedName: "augmentations",
        nullable: true,
        type: {
          name: "String"
        }
      },
      beta1: {
        serializedName: "beta1",
        nullable: true,
        type: {
          name: "String"
        }
      },
      beta2: {
        serializedName: "beta2",
        nullable: true,
        type: {
          name: "String"
        }
      },
      distributed: {
        serializedName: "distributed",
        nullable: true,
        type: {
          name: "String"
        }
      },
      earlyStopping: {
        serializedName: "earlyStopping",
        nullable: true,
        type: {
          name: "String"
        }
      },
      earlyStoppingDelay: {
        serializedName: "earlyStoppingDelay",
        nullable: true,
        type: {
          name: "String"
        }
      },
      earlyStoppingPatience: {
        serializedName: "earlyStoppingPatience",
        nullable: true,
        type: {
          name: "String"
        }
      },
      enableOnnxNormalization: {
        serializedName: "enableOnnxNormalization",
        nullable: true,
        type: {
          name: "String"
        }
      },
      evaluationFrequency: {
        serializedName: "evaluationFrequency",
        nullable: true,
        type: {
          name: "String"
        }
      },
      gradientAccumulationStep: {
        serializedName: "gradientAccumulationStep",
        nullable: true,
        type: {
          name: "String"
        }
      },
      layersToFreeze: {
        serializedName: "layersToFreeze",
        nullable: true,
        type: {
          name: "String"
        }
      },
      learningRate: {
        serializedName: "learningRate",
        nullable: true,
        type: {
          name: "String"
        }
      },
      learningRateScheduler: {
        serializedName: "learningRateScheduler",
        nullable: true,
        type: {
          name: "String"
        }
      },
      modelName: {
        serializedName: "modelName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      momentum: {
        serializedName: "momentum",
        nullable: true,
        type: {
          name: "String"
        }
      },
      nesterov: {
        serializedName: "nesterov",
        nullable: true,
        type: {
          name: "String"
        }
      },
      numberOfEpochs: {
        serializedName: "numberOfEpochs",
        nullable: true,
        type: {
          name: "String"
        }
      },
      numberOfWorkers: {
        serializedName: "numberOfWorkers",
        nullable: true,
        type: {
          name: "String"
        }
      },
      optimizer: {
        serializedName: "optimizer",
        nullable: true,
        type: {
          name: "String"
        }
      },
      randomSeed: {
        serializedName: "randomSeed",
        nullable: true,
        type: {
          name: "String"
        }
      },
      stepLRGamma: {
        serializedName: "stepLRGamma",
        nullable: true,
        type: {
          name: "String"
        }
      },
      stepLRStepSize: {
        serializedName: "stepLRStepSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      trainingBatchSize: {
        serializedName: "trainingBatchSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      validationBatchSize: {
        serializedName: "validationBatchSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      warmupCosineLRCycles: {
        serializedName: "warmupCosineLRCycles",
        nullable: true,
        type: {
          name: "String"
        }
      },
      warmupCosineLRWarmupEpochs: {
        serializedName: "warmupCosineLRWarmupEpochs",
        nullable: true,
        type: {
          name: "String"
        }
      },
      weightDecay: {
        serializedName: "weightDecay",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageVertical: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageVertical",
    modelProperties: {
      limitSettings: {
        serializedName: "limitSettings",
        type: {
          name: "Composite",
          className: "ImageLimitSettings"
        }
      },
      sweepSettings: {
        serializedName: "sweepSettings",
        type: {
          name: "Composite",
          className: "ImageSweepSettings"
        }
      },
      validationData: {
        serializedName: "validationData",
        type: {
          name: "Composite",
          className: "MLTableJobInput"
        }
      },
      validationDataSize: {
        serializedName: "validationDataSize",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImageLimitSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageLimitSettings",
    modelProperties: {
      maxConcurrentTrials: {
        defaultValue: 1,
        serializedName: "maxConcurrentTrials",
        type: {
          name: "Number"
        }
      },
      maxTrials: {
        defaultValue: 1,
        serializedName: "maxTrials",
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: "P7D",
        serializedName: "timeout",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ImageSweepSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageSweepSettings",
    modelProperties: {
      earlyTermination: {
        serializedName: "earlyTermination",
        type: {
          name: "Composite",
          className: "EarlyTerminationPolicy"
        }
      },
      samplingAlgorithm: {
        serializedName: "samplingAlgorithm",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NlpVertical: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NlpVertical",
    modelProperties: {
      featurizationSettings: {
        serializedName: "featurizationSettings",
        type: {
          name: "Composite",
          className: "NlpVerticalFeaturizationSettings"
        }
      },
      limitSettings: {
        serializedName: "limitSettings",
        type: {
          name: "Composite",
          className: "NlpVerticalLimitSettings"
        }
      },
      validationData: {
        serializedName: "validationData",
        type: {
          name: "Composite",
          className: "MLTableJobInput"
        }
      }
    }
  }
};

export const NlpVerticalLimitSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NlpVerticalLimitSettings",
    modelProperties: {
      maxConcurrentTrials: {
        defaultValue: 1,
        serializedName: "maxConcurrentTrials",
        type: {
          name: "Number"
        }
      },
      maxTrials: {
        defaultValue: 1,
        serializedName: "maxTrials",
        type: {
          name: "Number"
        }
      },
      timeout: {
        serializedName: "timeout",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const Objective: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Objective",
    modelProperties: {
      goal: {
        serializedName: "goal",
        required: true,
        type: {
          name: "String"
        }
      },
      primaryMetric: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "primaryMetric",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrialComponent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrialComponent",
    modelProperties: {
      codeId: {
        serializedName: "codeId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      command: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]"),
          MinLength: 1
        },
        serializedName: "command",
        required: true,
        type: {
          name: "String"
        }
      },
      distribution: {
        serializedName: "distribution",
        type: {
          name: "Composite",
          className: "DistributionConfiguration"
        }
      },
      environmentId: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "environmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "JobResourceConfiguration"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Workspace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      workspaceId: {
        serializedName: "properties.workspaceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      keyVault: {
        serializedName: "properties.keyVault",
        type: {
          name: "String"
        }
      },
      applicationInsights: {
        serializedName: "properties.applicationInsights",
        type: {
          name: "String"
        }
      },
      containerRegistry: {
        serializedName: "properties.containerRegistry",
        nullable: true,
        type: {
          name: "String"
        }
      },
      storageAccount: {
        serializedName: "properties.storageAccount",
        type: {
          name: "String"
        }
      },
      discoveryUrl: {
        serializedName: "properties.discoveryUrl",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperty"
        }
      },
      hbiWorkspace: {
        defaultValue: false,
        serializedName: "properties.hbiWorkspace",
        type: {
          name: "Boolean"
        }
      },
      serviceProvisionedResourceGroup: {
        serializedName: "properties.serviceProvisionedResourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateLinkCount: {
        serializedName: "properties.privateLinkCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      imageBuildCompute: {
        serializedName: "properties.imageBuildCompute",
        type: {
          name: "String"
        }
      },
      allowPublicAccessWhenBehindVnet: {
        defaultValue: false,
        serializedName: "properties.allowPublicAccessWhenBehindVnet",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      sharedPrivateLinkResources: {
        serializedName: "properties.sharedPrivateLinkResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedPrivateLinkResource"
            }
          }
        }
      },
      notebookInfo: {
        serializedName: "properties.notebookInfo",
        type: {
          name: "Composite",
          className: "NotebookResourceInfo"
        }
      },
      serviceManagedResourcesSettings: {
        serializedName: "properties.serviceManagedResourcesSettings",
        type: {
          name: "Composite",
          className: "ServiceManagedResourcesSettings"
        }
      },
      primaryUserAssignedIdentity: {
        serializedName: "properties.primaryUserAssignedIdentity",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageHnsEnabled: {
        serializedName: "properties.storageHnsEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      mlFlowTrackingUri: {
        serializedName: "properties.mlFlowTrackingUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      v1LegacyMode: {
        defaultValue: false,
        serializedName: "properties.v1LegacyMode",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ComputeResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      ...ComputeResourceSchema.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WorkspaceConnectionPropertiesV2BasicResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceConnectionPropertiesV2BasicResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WorkspaceConnectionPropertiesV2"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CodeContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CodeContainer",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CodeContainerProperties"
        }
      }
    }
  }
};

export const CodeVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CodeVersion",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CodeVersionProperties"
        }
      }
    }
  }
};

export const ComponentContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComponentContainer",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ComponentContainerProperties"
        }
      }
    }
  }
};

export const ComponentVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComponentVersion",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ComponentVersionProperties"
        }
      }
    }
  }
};

export const DataContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataContainer",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataContainerProperties"
        }
      }
    }
  }
};

export const DataVersionBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataVersionBase",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataVersionBaseProperties"
        }
      }
    }
  }
};

export const Datastore: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Datastore",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DatastoreProperties"
        }
      }
    }
  }
};

export const EnvironmentContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentContainer",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EnvironmentContainerProperties"
        }
      }
    }
  }
};

export const EnvironmentVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentVersion",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EnvironmentVersionProperties"
        }
      }
    }
  }
};

export const JobBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobBase",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobBaseProperties"
        }
      }
    }
  }
};

export const ModelContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelContainer",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ModelContainerProperties"
        }
      }
    }
  }
};

export const ModelVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelVersion",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ModelVersionProperties"
        }
      }
    }
  }
};

export const Schedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Schedule",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ScheduleProperties"
        }
      }
    }
  }
};

export const Aks: coreClient.CompositeMapper = {
  serializedName: "AKS",
  type: {
    name: "Composite",
    className: "Aks",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      ...AKSSchema.type.modelProperties
    }
  }
};

export const Kubernetes: coreClient.CompositeMapper = {
  serializedName: "Kubernetes",
  type: {
    name: "Composite",
    className: "Kubernetes",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      ...KubernetesSchema.type.modelProperties
    }
  }
};

export const AmlCompute: coreClient.CompositeMapper = {
  serializedName: "AmlCompute",
  type: {
    name: "Composite",
    className: "AmlCompute",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      ...AmlComputeSchema.type.modelProperties
    }
  }
};

export const ComputeInstance: coreClient.CompositeMapper = {
  serializedName: "ComputeInstance",
  type: {
    name: "Composite",
    className: "ComputeInstance",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      ...ComputeInstanceSchema.type.modelProperties
    }
  }
};

export const VirtualMachine: coreClient.CompositeMapper = {
  serializedName: "VirtualMachine",
  type: {
    name: "Composite",
    className: "VirtualMachine",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      ...VirtualMachineSchema.type.modelProperties
    }
  }
};

export const HDInsight: coreClient.CompositeMapper = {
  serializedName: "HDInsight",
  type: {
    name: "Composite",
    className: "HDInsight",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      ...HDInsightSchema.type.modelProperties
    }
  }
};

export const DataFactory: coreClient.CompositeMapper = {
  serializedName: "DataFactory",
  type: {
    name: "Composite",
    className: "DataFactory",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties
    }
  }
};

export const Databricks: coreClient.CompositeMapper = {
  serializedName: "Databricks",
  type: {
    name: "Composite",
    className: "Databricks",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      ...DatabricksSchema.type.modelProperties
    }
  }
};

export const DataLakeAnalytics: coreClient.CompositeMapper = {
  serializedName: "DataLakeAnalytics",
  type: {
    name: "Composite",
    className: "DataLakeAnalytics",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      ...DataLakeAnalyticsSchema.type.modelProperties
    }
  }
};

export const SynapseSpark: coreClient.CompositeMapper = {
  serializedName: "SynapseSpark",
  type: {
    name: "Composite",
    className: "SynapseSpark",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SynapseSparkProperties"
        }
      }
    }
  }
};

export const AksComputeSecrets: coreClient.CompositeMapper = {
  serializedName: "AKS",
  type: {
    name: "Composite",
    className: "AksComputeSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      ...AksComputeSecretsProperties.type.modelProperties
    }
  }
};

export const VirtualMachineSecrets: coreClient.CompositeMapper = {
  serializedName: "VirtualMachine",
  type: {
    name: "Composite",
    className: "VirtualMachineSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      ...VirtualMachineSecretsSchema.type.modelProperties
    }
  }
};

export const DatabricksComputeSecrets: coreClient.CompositeMapper = {
  serializedName: "Databricks",
  type: {
    name: "Composite",
    className: "DatabricksComputeSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      ...DatabricksComputeSecretsProperties.type.modelProperties
    }
  }
};

export const PATAuthTypeWorkspaceConnectionProperties: coreClient.CompositeMapper = {
  serializedName: "PAT",
  type: {
    name: "Composite",
    className: "PATAuthTypeWorkspaceConnectionProperties",
    uberParent: "WorkspaceConnectionPropertiesV2",
    polymorphicDiscriminator:
      WorkspaceConnectionPropertiesV2.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkspaceConnectionPropertiesV2.type.modelProperties,
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "WorkspaceConnectionPersonalAccessToken"
        }
      }
    }
  }
};

export const SASAuthTypeWorkspaceConnectionProperties: coreClient.CompositeMapper = {
  serializedName: "SAS",
  type: {
    name: "Composite",
    className: "SASAuthTypeWorkspaceConnectionProperties",
    uberParent: "WorkspaceConnectionPropertiesV2",
    polymorphicDiscriminator:
      WorkspaceConnectionPropertiesV2.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkspaceConnectionPropertiesV2.type.modelProperties,
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "WorkspaceConnectionSharedAccessSignature"
        }
      }
    }
  }
};

export const UsernamePasswordAuthTypeWorkspaceConnectionProperties: coreClient.CompositeMapper = {
  serializedName: "UsernamePassword",
  type: {
    name: "Composite",
    className: "UsernamePasswordAuthTypeWorkspaceConnectionProperties",
    uberParent: "WorkspaceConnectionPropertiesV2",
    polymorphicDiscriminator:
      WorkspaceConnectionPropertiesV2.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkspaceConnectionPropertiesV2.type.modelProperties,
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "WorkspaceConnectionUsernamePassword"
        }
      }
    }
  }
};

export const NoneAuthTypeWorkspaceConnectionProperties: coreClient.CompositeMapper = {
  serializedName: "None",
  type: {
    name: "Composite",
    className: "NoneAuthTypeWorkspaceConnectionProperties",
    uberParent: "WorkspaceConnectionPropertiesV2",
    polymorphicDiscriminator:
      WorkspaceConnectionPropertiesV2.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkspaceConnectionPropertiesV2.type.modelProperties
    }
  }
};

export const ManagedIdentityAuthTypeWorkspaceConnectionProperties: coreClient.CompositeMapper = {
  serializedName: "ManagedIdentity",
  type: {
    name: "Composite",
    className: "ManagedIdentityAuthTypeWorkspaceConnectionProperties",
    uberParent: "WorkspaceConnectionPropertiesV2",
    polymorphicDiscriminator:
      WorkspaceConnectionPropertiesV2.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkspaceConnectionPropertiesV2.type.modelProperties,
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "WorkspaceConnectionManagedIdentity"
        }
      }
    }
  }
};

export const BatchEndpointProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchEndpointProperties",
    modelProperties: {
      ...EndpointPropertiesBase.type.modelProperties,
      defaults: {
        serializedName: "defaults",
        type: {
          name: "Composite",
          className: "BatchEndpointDefaults"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OnlineEndpointProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineEndpointProperties",
    modelProperties: {
      ...EndpointPropertiesBase.type.modelProperties,
      compute: {
        serializedName: "compute",
        nullable: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      traffic: {
        serializedName: "traffic",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      }
    }
  }
};

export const PartialMinimalTrackedResourceWithIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartialMinimalTrackedResourceWithIdentity",
    modelProperties: {
      ...PartialMinimalTrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "PartialManagedServiceIdentity"
        }
      }
    }
  }
};

export const PartialMinimalTrackedResourceWithSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartialMinimalTrackedResourceWithSku",
    modelProperties: {
      ...PartialMinimalTrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "PartialSku"
        }
      }
    }
  }
};

export const DataPathAssetReference: coreClient.CompositeMapper = {
  serializedName: "DataPath",
  type: {
    name: "Composite",
    className: "DataPathAssetReference",
    uberParent: "AssetReferenceBase",
    polymorphicDiscriminator: AssetReferenceBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetReferenceBase.type.modelProperties,
      datastoreId: {
        serializedName: "datastoreId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdAssetReference: coreClient.CompositeMapper = {
  serializedName: "Id",
  type: {
    name: "Composite",
    className: "IdAssetReference",
    uberParent: "AssetReferenceBase",
    polymorphicDiscriminator: AssetReferenceBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetReferenceBase.type.modelProperties,
      assetId: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "assetId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutputPathAssetReference: coreClient.CompositeMapper = {
  serializedName: "OutputPath",
  type: {
    name: "Composite",
    className: "OutputPathAssetReference",
    uberParent: "AssetReferenceBase",
    polymorphicDiscriminator: AssetReferenceBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetReferenceBase.type.modelProperties,
      jobId: {
        serializedName: "jobId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentResourceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentResourceConfiguration",
    modelProperties: {
      ...ResourceConfiguration.type.modelProperties
    }
  }
};

export const JobResourceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResourceConfiguration",
    modelProperties: {
      ...ResourceConfiguration.type.modelProperties,
      dockerArgs: {
        serializedName: "dockerArgs",
        nullable: true,
        type: {
          name: "String"
        }
      },
      shmSize: {
        defaultValue: "2g",
        constraints: {
          Pattern: new RegExp("\\d+[bBkKmMgG]")
        },
        serializedName: "shmSize",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchDeploymentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchDeploymentProperties",
    modelProperties: {
      ...EndpointDeploymentPropertiesBase.type.modelProperties,
      compute: {
        serializedName: "compute",
        nullable: true,
        type: {
          name: "String"
        }
      },
      errorThreshold: {
        defaultValue: -1,
        serializedName: "errorThreshold",
        type: {
          name: "Number"
        }
      },
      loggingLevel: {
        serializedName: "loggingLevel",
        type: {
          name: "String"
        }
      },
      maxConcurrencyPerInstance: {
        defaultValue: 1,
        serializedName: "maxConcurrencyPerInstance",
        type: {
          name: "Number"
        }
      },
      miniBatchSize: {
        defaultValue: 10,
        serializedName: "miniBatchSize",
        type: {
          name: "Number"
        }
      },
      model: {
        serializedName: "model",
        type: {
          name: "Composite",
          className: "AssetReferenceBase"
        }
      },
      outputAction: {
        serializedName: "outputAction",
        type: {
          name: "String"
        }
      },
      outputFileName: {
        defaultValue: "predictions.csv",
        serializedName: "outputFileName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "DeploymentResourceConfiguration"
        }
      },
      retrySettings: {
        serializedName: "retrySettings",
        type: {
          name: "Composite",
          className: "BatchRetrySettings"
        }
      }
    }
  }
};

export const OnlineDeploymentProperties: coreClient.CompositeMapper = {
  serializedName: "OnlineDeploymentProperties",
  type: {
    name: "Composite",
    className: "OnlineDeploymentProperties",
    uberParent: "EndpointDeploymentPropertiesBase",
    polymorphicDiscriminator: {
      serializedName: "endpointComputeType",
      clientName: "endpointComputeType"
    },
    modelProperties: {
      ...EndpointDeploymentPropertiesBase.type.modelProperties,
      appInsightsEnabled: {
        defaultValue: false,
        serializedName: "appInsightsEnabled",
        type: {
          name: "Boolean"
        }
      },
      egressPublicNetworkAccess: {
        serializedName: "egressPublicNetworkAccess",
        type: {
          name: "String"
        }
      },
      endpointComputeType: {
        serializedName: "endpointComputeType",
        required: true,
        type: {
          name: "String"
        }
      },
      instanceType: {
        serializedName: "instanceType",
        nullable: true,
        type: {
          name: "String"
        }
      },
      livenessProbe: {
        serializedName: "livenessProbe",
        type: {
          name: "Composite",
          className: "ProbeSettings"
        }
      },
      model: {
        serializedName: "model",
        nullable: true,
        type: {
          name: "String"
        }
      },
      modelMountPath: {
        serializedName: "modelMountPath",
        nullable: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      readinessProbe: {
        serializedName: "readinessProbe",
        type: {
          name: "Composite",
          className: "ProbeSettings"
        }
      },
      requestSettings: {
        serializedName: "requestSettings",
        type: {
          name: "Composite",
          className: "OnlineRequestSettings"
        }
      },
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "OnlineScaleSettings"
        }
      }
    }
  }
};

export const AssetContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssetContainer",
    modelProperties: {
      ...ResourceBase.type.modelProperties,
      isArchived: {
        defaultValue: false,
        serializedName: "isArchived",
        type: {
          name: "Boolean"
        }
      },
      latestVersion: {
        serializedName: "latestVersion",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      nextVersion: {
        serializedName: "nextVersion",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssetBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssetBase",
    modelProperties: {
      ...ResourceBase.type.modelProperties,
      isAnonymous: {
        defaultValue: false,
        serializedName: "isAnonymous",
        type: {
          name: "Boolean"
        }
      },
      isArchived: {
        defaultValue: false,
        serializedName: "isArchived",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DatastoreProperties: coreClient.CompositeMapper = {
  serializedName: "DatastoreProperties",
  type: {
    name: "Composite",
    className: "DatastoreProperties",
    uberParent: "ResourceBase",
    polymorphicDiscriminator: {
      serializedName: "datastoreType",
      clientName: "datastoreType"
    },
    modelProperties: {
      ...ResourceBase.type.modelProperties,
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "DatastoreCredentials"
        }
      },
      datastoreType: {
        serializedName: "datastoreType",
        required: true,
        type: {
          name: "String"
        }
      },
      isDefault: {
        serializedName: "isDefault",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const JobBaseProperties: coreClient.CompositeMapper = {
  serializedName: "JobBaseProperties",
  type: {
    name: "Composite",
    className: "JobBaseProperties",
    uberParent: "ResourceBase",
    polymorphicDiscriminator: {
      serializedName: "jobType",
      clientName: "jobType"
    },
    modelProperties: {
      ...ResourceBase.type.modelProperties,
      componentId: {
        serializedName: "componentId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      computeId: {
        serializedName: "computeId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      experimentName: {
        defaultValue: "Default",
        serializedName: "experimentName",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityConfiguration"
        }
      },
      isArchived: {
        defaultValue: false,
        serializedName: "isArchived",
        type: {
          name: "Boolean"
        }
      },
      jobType: {
        serializedName: "jobType",
        required: true,
        type: {
          name: "String"
        }
      },
      services: {
        serializedName: "services",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "JobService" } }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleProperties",
    modelProperties: {
      ...ResourceBase.type.modelProperties,
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "ScheduleActionBase"
        }
      },
      displayName: {
        serializedName: "displayName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        defaultValue: true,
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      trigger: {
        serializedName: "trigger",
        type: {
          name: "Composite",
          className: "TriggerBase"
        }
      }
    }
  }
};

export const AccountKeyDatastoreCredentials: coreClient.CompositeMapper = {
  serializedName: "AccountKey",
  type: {
    name: "Composite",
    className: "AccountKeyDatastoreCredentials",
    uberParent: "DatastoreCredentials",
    polymorphicDiscriminator:
      DatastoreCredentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreCredentials.type.modelProperties,
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Composite",
          className: "AccountKeyDatastoreSecrets"
        }
      }
    }
  }
};

export const CertificateDatastoreCredentials: coreClient.CompositeMapper = {
  serializedName: "Certificate",
  type: {
    name: "Composite",
    className: "CertificateDatastoreCredentials",
    uberParent: "DatastoreCredentials",
    polymorphicDiscriminator:
      DatastoreCredentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreCredentials.type.modelProperties,
      authorityUrl: {
        serializedName: "authorityUrl",
        nullable: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      resourceUrl: {
        serializedName: "resourceUrl",
        nullable: true,
        type: {
          name: "String"
        }
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Composite",
          className: "CertificateDatastoreSecrets"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      thumbprint: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "thumbprint",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NoneDatastoreCredentials: coreClient.CompositeMapper = {
  serializedName: "None",
  type: {
    name: "Composite",
    className: "NoneDatastoreCredentials",
    uberParent: "DatastoreCredentials",
    polymorphicDiscriminator:
      DatastoreCredentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreCredentials.type.modelProperties
    }
  }
};

export const SasDatastoreCredentials: coreClient.CompositeMapper = {
  serializedName: "Sas",
  type: {
    name: "Composite",
    className: "SasDatastoreCredentials",
    uberParent: "DatastoreCredentials",
    polymorphicDiscriminator:
      DatastoreCredentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreCredentials.type.modelProperties,
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Composite",
          className: "SasDatastoreSecrets"
        }
      }
    }
  }
};

export const ServicePrincipalDatastoreCredentials: coreClient.CompositeMapper = {
  serializedName: "ServicePrincipal",
  type: {
    name: "Composite",
    className: "ServicePrincipalDatastoreCredentials",
    uberParent: "DatastoreCredentials",
    polymorphicDiscriminator:
      DatastoreCredentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreCredentials.type.modelProperties,
      authorityUrl: {
        serializedName: "authorityUrl",
        nullable: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      resourceUrl: {
        serializedName: "resourceUrl",
        nullable: true,
        type: {
          name: "String"
        }
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Composite",
          className: "ServicePrincipalDatastoreSecrets"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const AccountKeyDatastoreSecrets: coreClient.CompositeMapper = {
  serializedName: "AccountKey",
  type: {
    name: "Composite",
    className: "AccountKeyDatastoreSecrets",
    uberParent: "DatastoreSecrets",
    polymorphicDiscriminator: DatastoreSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreSecrets.type.modelProperties,
      key: {
        serializedName: "key",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateDatastoreSecrets: coreClient.CompositeMapper = {
  serializedName: "Certificate",
  type: {
    name: "Composite",
    className: "CertificateDatastoreSecrets",
    uberParent: "DatastoreSecrets",
    polymorphicDiscriminator: DatastoreSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreSecrets.type.modelProperties,
      certificate: {
        serializedName: "certificate",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SasDatastoreSecrets: coreClient.CompositeMapper = {
  serializedName: "Sas",
  type: {
    name: "Composite",
    className: "SasDatastoreSecrets",
    uberParent: "DatastoreSecrets",
    polymorphicDiscriminator: DatastoreSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreSecrets.type.modelProperties,
      sasToken: {
        serializedName: "sasToken",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicePrincipalDatastoreSecrets: coreClient.CompositeMapper = {
  serializedName: "ServicePrincipal",
  type: {
    name: "Composite",
    className: "ServicePrincipalDatastoreSecrets",
    uberParent: "DatastoreSecrets",
    polymorphicDiscriminator: DatastoreSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreSecrets.type.modelProperties,
      clientSecret: {
        serializedName: "clientSecret",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlToken: coreClient.CompositeMapper = {
  serializedName: "AMLToken",
  type: {
    name: "Composite",
    className: "AmlToken",
    uberParent: "IdentityConfiguration",
    polymorphicDiscriminator:
      IdentityConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...IdentityConfiguration.type.modelProperties
    }
  }
};

export const ManagedIdentity: coreClient.CompositeMapper = {
  serializedName: "Managed",
  type: {
    name: "Composite",
    className: "ManagedIdentity",
    uberParent: "IdentityConfiguration",
    polymorphicDiscriminator:
      IdentityConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...IdentityConfiguration.type.modelProperties,
      clientId: {
        serializedName: "clientId",
        nullable: true,
        type: {
          name: "Uuid"
        }
      },
      objectId: {
        serializedName: "objectId",
        nullable: true,
        type: {
          name: "Uuid"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserIdentity: coreClient.CompositeMapper = {
  serializedName: "UserIdentity",
  type: {
    name: "Composite",
    className: "UserIdentity",
    uberParent: "IdentityConfiguration",
    polymorphicDiscriminator:
      IdentityConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...IdentityConfiguration.type.modelProperties
    }
  }
};

export const DefaultScaleSettings: coreClient.CompositeMapper = {
  serializedName: "Default",
  type: {
    name: "Composite",
    className: "DefaultScaleSettings",
    uberParent: "OnlineScaleSettings",
    polymorphicDiscriminator: OnlineScaleSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...OnlineScaleSettings.type.modelProperties
    }
  }
};

export const TargetUtilizationScaleSettings: coreClient.CompositeMapper = {
  serializedName: "TargetUtilization",
  type: {
    name: "Composite",
    className: "TargetUtilizationScaleSettings",
    uberParent: "OnlineScaleSettings",
    polymorphicDiscriminator: OnlineScaleSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...OnlineScaleSettings.type.modelProperties,
      maxInstances: {
        defaultValue: 1,
        serializedName: "maxInstances",
        type: {
          name: "Number"
        }
      },
      minInstances: {
        defaultValue: 1,
        serializedName: "minInstances",
        type: {
          name: "Number"
        }
      },
      pollingInterval: {
        defaultValue: "PT1S",
        serializedName: "pollingInterval",
        type: {
          name: "TimeSpan"
        }
      },
      targetUtilizationPercentage: {
        defaultValue: 70,
        serializedName: "targetUtilizationPercentage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EndpointScheduleAction: coreClient.CompositeMapper = {
  serializedName: "InvokeBatchEndpoint",
  type: {
    name: "Composite",
    className: "EndpointScheduleAction",
    uberParent: "ScheduleActionBase",
    polymorphicDiscriminator: ScheduleActionBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ScheduleActionBase.type.modelProperties,
      endpointInvocationDefinition: {
        serializedName: "endpointInvocationDefinition",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const JobScheduleAction: coreClient.CompositeMapper = {
  serializedName: "CreateJob",
  type: {
    name: "Composite",
    className: "JobScheduleAction",
    uberParent: "ScheduleActionBase",
    polymorphicDiscriminator: ScheduleActionBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ScheduleActionBase.type.modelProperties,
      jobDefinition: {
        serializedName: "jobDefinition",
        type: {
          name: "Composite",
          className: "JobBaseProperties"
        }
      }
    }
  }
};

export const RecurrenceTrigger: coreClient.CompositeMapper = {
  serializedName: "Recurrence",
  type: {
    name: "Composite",
    className: "RecurrenceTrigger",
    uberParent: "TriggerBase",
    polymorphicDiscriminator: TriggerBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...TriggerBase.type.modelProperties,
      frequency: {
        serializedName: "frequency",
        required: true,
        type: {
          name: "String"
        }
      },
      interval: {
        serializedName: "interval",
        required: true,
        type: {
          name: "Number"
        }
      },
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "RecurrenceSchedule"
        }
      }
    }
  }
};

export const CronTrigger: coreClient.CompositeMapper = {
  serializedName: "Cron",
  type: {
    name: "Composite",
    className: "CronTrigger",
    uberParent: "TriggerBase",
    polymorphicDiscriminator: TriggerBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...TriggerBase.type.modelProperties,
      expression: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "expression",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MLTableJobInput: coreClient.CompositeMapper = {
  serializedName: "mltable",
  type: {
    name: "Composite",
    className: "MLTableJobInput",
    uberParent: "AssetJobInput",
    polymorphicDiscriminator: AssetJobInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobInput.type.modelProperties,
      ...JobInput.type.modelProperties
    }
  }
};

export const CustomModelJobInput: coreClient.CompositeMapper = {
  serializedName: "custom_model",
  type: {
    name: "Composite",
    className: "CustomModelJobInput",
    uberParent: "AssetJobInput",
    polymorphicDiscriminator: AssetJobInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobInput.type.modelProperties,
      ...JobInput.type.modelProperties
    }
  }
};

export const MLFlowModelJobInput: coreClient.CompositeMapper = {
  serializedName: "mlflow_model",
  type: {
    name: "Composite",
    className: "MLFlowModelJobInput",
    uberParent: "AssetJobInput",
    polymorphicDiscriminator: AssetJobInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobInput.type.modelProperties,
      ...JobInput.type.modelProperties
    }
  }
};

export const TritonModelJobInput: coreClient.CompositeMapper = {
  serializedName: "triton_model",
  type: {
    name: "Composite",
    className: "TritonModelJobInput",
    uberParent: "AssetJobInput",
    polymorphicDiscriminator: AssetJobInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobInput.type.modelProperties,
      ...JobInput.type.modelProperties
    }
  }
};

export const UriFileJobInput: coreClient.CompositeMapper = {
  serializedName: "uri_file",
  type: {
    name: "Composite",
    className: "UriFileJobInput",
    uberParent: "AssetJobInput",
    polymorphicDiscriminator: AssetJobInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobInput.type.modelProperties,
      ...JobInput.type.modelProperties
    }
  }
};

export const UriFolderJobInput: coreClient.CompositeMapper = {
  serializedName: "uri_folder",
  type: {
    name: "Composite",
    className: "UriFolderJobInput",
    uberParent: "AssetJobInput",
    polymorphicDiscriminator: AssetJobInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobInput.type.modelProperties,
      ...JobInput.type.modelProperties
    }
  }
};

export const CustomModelJobOutput: coreClient.CompositeMapper = {
  serializedName: "custom_model",
  type: {
    name: "Composite",
    className: "CustomModelJobOutput",
    uberParent: "AssetJobOutput",
    polymorphicDiscriminator: AssetJobOutput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobOutput.type.modelProperties,
      ...JobOutput.type.modelProperties
    }
  }
};

export const MLFlowModelJobOutput: coreClient.CompositeMapper = {
  serializedName: "mlflow_model",
  type: {
    name: "Composite",
    className: "MLFlowModelJobOutput",
    uberParent: "AssetJobOutput",
    polymorphicDiscriminator: AssetJobOutput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobOutput.type.modelProperties,
      ...JobOutput.type.modelProperties
    }
  }
};

export const MLTableJobOutput: coreClient.CompositeMapper = {
  serializedName: "mltable",
  type: {
    name: "Composite",
    className: "MLTableJobOutput",
    uberParent: "AssetJobOutput",
    polymorphicDiscriminator: AssetJobOutput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobOutput.type.modelProperties,
      ...JobOutput.type.modelProperties
    }
  }
};

export const TritonModelJobOutput: coreClient.CompositeMapper = {
  serializedName: "triton_model",
  type: {
    name: "Composite",
    className: "TritonModelJobOutput",
    uberParent: "AssetJobOutput",
    polymorphicDiscriminator: AssetJobOutput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobOutput.type.modelProperties,
      ...JobOutput.type.modelProperties
    }
  }
};

export const UriFileJobOutput: coreClient.CompositeMapper = {
  serializedName: "uri_file",
  type: {
    name: "Composite",
    className: "UriFileJobOutput",
    uberParent: "AssetJobOutput",
    polymorphicDiscriminator: AssetJobOutput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobOutput.type.modelProperties,
      ...JobOutput.type.modelProperties
    }
  }
};

export const UriFolderJobOutput: coreClient.CompositeMapper = {
  serializedName: "uri_folder",
  type: {
    name: "Composite",
    className: "UriFolderJobOutput",
    uberParent: "AssetJobOutput",
    polymorphicDiscriminator: AssetJobOutput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AssetJobOutput.type.modelProperties,
      ...JobOutput.type.modelProperties
    }
  }
};

export const AutoForecastHorizon: coreClient.CompositeMapper = {
  serializedName: "Auto",
  type: {
    name: "Composite",
    className: "AutoForecastHorizon",
    uberParent: "ForecastHorizon",
    polymorphicDiscriminator: ForecastHorizon.type.polymorphicDiscriminator,
    modelProperties: {
      ...ForecastHorizon.type.modelProperties
    }
  }
};

export const CustomForecastHorizon: coreClient.CompositeMapper = {
  serializedName: "Custom",
  type: {
    name: "Composite",
    className: "CustomForecastHorizon",
    uberParent: "ForecastHorizon",
    polymorphicDiscriminator: ForecastHorizon.type.polymorphicDiscriminator,
    modelProperties: {
      ...ForecastHorizon.type.modelProperties,
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Classification: coreClient.CompositeMapper = {
  serializedName: "Classification",
  type: {
    name: "Composite",
    className: "Classification",
    uberParent: "TableVertical",
    polymorphicDiscriminator: TableVertical.type.polymorphicDiscriminator,
    modelProperties: {
      ...TableVertical.type.modelProperties,
      ...AutoMLVertical.type.modelProperties,
      positiveLabel: {
        serializedName: "positiveLabel",
        nullable: true,
        type: {
          name: "String"
        }
      },
      primaryMetric: {
        serializedName: "primaryMetric",
        type: {
          name: "String"
        }
      },
      trainingSettings: {
        serializedName: "trainingSettings",
        type: {
          name: "Composite",
          className: "ClassificationTrainingSettings"
        }
      }
    }
  }
};

export const Forecasting: coreClient.CompositeMapper = {
  serializedName: "Forecasting",
  type: {
    name: "Composite",
    className: "Forecasting",
    uberParent: "TableVertical",
    polymorphicDiscriminator: TableVertical.type.polymorphicDiscriminator,
    modelProperties: {
      ...TableVertical.type.modelProperties,
      ...AutoMLVertical.type.modelProperties,
      forecastingSettings: {
        serializedName: "forecastingSettings",
        type: {
          name: "Composite",
          className: "ForecastingSettings"
        }
      },
      primaryMetric: {
        serializedName: "primaryMetric",
        type: {
          name: "String"
        }
      },
      trainingSettings: {
        serializedName: "trainingSettings",
        type: {
          name: "Composite",
          className: "ForecastingTrainingSettings"
        }
      }
    }
  }
};

export const ImageClassificationBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageClassificationBase",
    modelProperties: {
      ...ImageVertical.type.modelProperties,
      modelSettings: {
        serializedName: "modelSettings",
        type: {
          name: "Composite",
          className: "ImageModelSettingsClassification"
        }
      },
      searchSpace: {
        serializedName: "searchSpace",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageModelDistributionSettingsClassification"
            }
          }
        }
      }
    }
  }
};

export const ImageClassification: coreClient.CompositeMapper = {
  serializedName: "ImageClassification",
  type: {
    name: "Composite",
    className: "ImageClassification",
    uberParent: "ImageClassificationBase",
    modelProperties: {
      ...ImageClassificationBase.type.modelProperties,
      ...AutoMLVertical.type.modelProperties,
      primaryMetric: {
        serializedName: "primaryMetric",
        type: {
          name: "String"
        }
      }
    }
  }
};
ImageClassificationBase.type.polymorphicDiscriminator =
  ImageClassificationBase.type.polymorphicDiscriminator;

export const ImageClassificationMultilabel: coreClient.CompositeMapper = {
  serializedName: "ImageClassificationMultilabel",
  type: {
    name: "Composite",
    className: "ImageClassificationMultilabel",
    uberParent: "ImageClassificationBase",
    polymorphicDiscriminator:
      ImageClassificationBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageClassificationBase.type.modelProperties,
      ...AutoMLVertical.type.modelProperties,
      primaryMetric: {
        serializedName: "primaryMetric",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageObjectDetectionBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageObjectDetectionBase",
    modelProperties: {
      ...ImageVertical.type.modelProperties,
      modelSettings: {
        serializedName: "modelSettings",
        type: {
          name: "Composite",
          className: "ImageModelSettingsObjectDetection"
        }
      },
      searchSpace: {
        serializedName: "searchSpace",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageModelDistributionSettingsObjectDetection"
            }
          }
        }
      }
    }
  }
};

export const ImageInstanceSegmentation: coreClient.CompositeMapper = {
  serializedName: "ImageInstanceSegmentation",
  type: {
    name: "Composite",
    className: "ImageInstanceSegmentation",
    uberParent: "ImageObjectDetectionBase",
    polymorphicDiscriminator:
      ImageObjectDetectionBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageObjectDetectionBase.type.modelProperties,
      ...AutoMLVertical.type.modelProperties,
      primaryMetric: {
        serializedName: "primaryMetric",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageObjectDetection: coreClient.CompositeMapper = {
  serializedName: "ImageObjectDetection",
  type: {
    name: "Composite",
    className: "ImageObjectDetection",
    uberParent: "ImageObjectDetectionBase",
    modelProperties: {
      ...ImageObjectDetectionBase.type.modelProperties,
      ...AutoMLVertical.type.modelProperties,
      primaryMetric: {
        serializedName: "primaryMetric",
        type: {
          name: "String"
        }
      }
    }
  }
};
ImageObjectDetectionBase.type.polymorphicDiscriminator =
  ImageObjectDetectionBase.type.polymorphicDiscriminator;

export const Regression: coreClient.CompositeMapper = {
  serializedName: "Regression",
  type: {
    name: "Composite",
    className: "Regression",
    uberParent: "TableVertical",
    polymorphicDiscriminator: TableVertical.type.polymorphicDiscriminator,
    modelProperties: {
      ...TableVertical.type.modelProperties,
      ...AutoMLVertical.type.modelProperties,
      primaryMetric: {
        serializedName: "primaryMetric",
        type: {
          name: "String"
        }
      },
      trainingSettings: {
        serializedName: "trainingSettings",
        type: {
          name: "Composite",
          className: "RegressionTrainingSettings"
        }
      }
    }
  }
};

export const TextClassification: coreClient.CompositeMapper = {
  serializedName: "TextClassification",
  type: {
    name: "Composite",
    className: "TextClassification",
    uberParent: "NlpVertical",
    polymorphicDiscriminator: NlpVertical.type.polymorphicDiscriminator,
    modelProperties: {
      ...NlpVertical.type.modelProperties,
      ...AutoMLVertical.type.modelProperties,
      primaryMetric: {
        serializedName: "primaryMetric",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TextClassificationMultilabel: coreClient.CompositeMapper = {
  serializedName: "TextClassificationMultilabel",
  type: {
    name: "Composite",
    className: "TextClassificationMultilabel",
    uberParent: "NlpVertical",
    polymorphicDiscriminator: NlpVertical.type.polymorphicDiscriminator,
    modelProperties: {
      ...NlpVertical.type.modelProperties,
      ...AutoMLVertical.type.modelProperties,
      primaryMetric: {
        serializedName: "primaryMetric",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TextNer: coreClient.CompositeMapper = {
  serializedName: "TextNER",
  type: {
    name: "Composite",
    className: "TextNer",
    uberParent: "NlpVertical",
    polymorphicDiscriminator: NlpVertical.type.polymorphicDiscriminator,
    modelProperties: {
      ...NlpVertical.type.modelProperties,
      ...AutoMLVertical.type.modelProperties,
      primaryMetric: {
        serializedName: "primaryMetric",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LiteralJobInput: coreClient.CompositeMapper = {
  serializedName: "literal",
  type: {
    name: "Composite",
    className: "LiteralJobInput",
    uberParent: "JobInput",
    polymorphicDiscriminator: JobInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobInput.type.modelProperties,
      value: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoNCrossValidations: coreClient.CompositeMapper = {
  serializedName: "Auto",
  type: {
    name: "Composite",
    className: "AutoNCrossValidations",
    uberParent: "NCrossValidations",
    polymorphicDiscriminator: NCrossValidations.type.polymorphicDiscriminator,
    modelProperties: {
      ...NCrossValidations.type.modelProperties
    }
  }
};

export const CustomNCrossValidations: coreClient.CompositeMapper = {
  serializedName: "Custom",
  type: {
    name: "Composite",
    className: "CustomNCrossValidations",
    uberParent: "NCrossValidations",
    polymorphicDiscriminator: NCrossValidations.type.polymorphicDiscriminator,
    modelProperties: {
      ...NCrossValidations.type.modelProperties,
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoSeasonality: coreClient.CompositeMapper = {
  serializedName: "Auto",
  type: {
    name: "Composite",
    className: "AutoSeasonality",
    uberParent: "Seasonality",
    polymorphicDiscriminator: Seasonality.type.polymorphicDiscriminator,
    modelProperties: {
      ...Seasonality.type.modelProperties
    }
  }
};

export const CustomSeasonality: coreClient.CompositeMapper = {
  serializedName: "Custom",
  type: {
    name: "Composite",
    className: "CustomSeasonality",
    uberParent: "Seasonality",
    polymorphicDiscriminator: Seasonality.type.polymorphicDiscriminator,
    modelProperties: {
      ...Seasonality.type.modelProperties,
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoTargetLags: coreClient.CompositeMapper = {
  serializedName: "Auto",
  type: {
    name: "Composite",
    className: "AutoTargetLags",
    uberParent: "TargetLags",
    polymorphicDiscriminator: TargetLags.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetLags.type.modelProperties
    }
  }
};

export const CustomTargetLags: coreClient.CompositeMapper = {
  serializedName: "Custom",
  type: {
    name: "Composite",
    className: "CustomTargetLags",
    uberParent: "TargetLags",
    polymorphicDiscriminator: TargetLags.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetLags.type.modelProperties,
      values: {
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const AutoTargetRollingWindowSize: coreClient.CompositeMapper = {
  serializedName: "Auto",
  type: {
    name: "Composite",
    className: "AutoTargetRollingWindowSize",
    uberParent: "TargetRollingWindowSize",
    polymorphicDiscriminator:
      TargetRollingWindowSize.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetRollingWindowSize.type.modelProperties
    }
  }
};

export const CustomTargetRollingWindowSize: coreClient.CompositeMapper = {
  serializedName: "Custom",
  type: {
    name: "Composite",
    className: "CustomTargetRollingWindowSize",
    uberParent: "TargetRollingWindowSize",
    polymorphicDiscriminator:
      TargetRollingWindowSize.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetRollingWindowSize.type.modelProperties,
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BanditPolicy: coreClient.CompositeMapper = {
  serializedName: "Bandit",
  type: {
    name: "Composite",
    className: "BanditPolicy",
    uberParent: "EarlyTerminationPolicy",
    polymorphicDiscriminator:
      EarlyTerminationPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...EarlyTerminationPolicy.type.modelProperties,
      slackAmount: {
        defaultValue: 0,
        serializedName: "slackAmount",
        type: {
          name: "Number"
        }
      },
      slackFactor: {
        defaultValue: 0,
        serializedName: "slackFactor",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MedianStoppingPolicy: coreClient.CompositeMapper = {
  serializedName: "MedianStopping",
  type: {
    name: "Composite",
    className: "MedianStoppingPolicy",
    uberParent: "EarlyTerminationPolicy",
    polymorphicDiscriminator:
      EarlyTerminationPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...EarlyTerminationPolicy.type.modelProperties
    }
  }
};

export const TruncationSelectionPolicy: coreClient.CompositeMapper = {
  serializedName: "TruncationSelection",
  type: {
    name: "Composite",
    className: "TruncationSelectionPolicy",
    uberParent: "EarlyTerminationPolicy",
    polymorphicDiscriminator:
      EarlyTerminationPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...EarlyTerminationPolicy.type.modelProperties,
      truncationPercentage: {
        defaultValue: 0,
        serializedName: "truncationPercentage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BayesianSamplingAlgorithm: coreClient.CompositeMapper = {
  serializedName: "Bayesian",
  type: {
    name: "Composite",
    className: "BayesianSamplingAlgorithm",
    uberParent: "SamplingAlgorithm",
    polymorphicDiscriminator: SamplingAlgorithm.type.polymorphicDiscriminator,
    modelProperties: {
      ...SamplingAlgorithm.type.modelProperties
    }
  }
};

export const GridSamplingAlgorithm: coreClient.CompositeMapper = {
  serializedName: "Grid",
  type: {
    name: "Composite",
    className: "GridSamplingAlgorithm",
    uberParent: "SamplingAlgorithm",
    polymorphicDiscriminator: SamplingAlgorithm.type.polymorphicDiscriminator,
    modelProperties: {
      ...SamplingAlgorithm.type.modelProperties
    }
  }
};

export const RandomSamplingAlgorithm: coreClient.CompositeMapper = {
  serializedName: "Random",
  type: {
    name: "Composite",
    className: "RandomSamplingAlgorithm",
    uberParent: "SamplingAlgorithm",
    polymorphicDiscriminator: SamplingAlgorithm.type.polymorphicDiscriminator,
    modelProperties: {
      ...SamplingAlgorithm.type.modelProperties,
      rule: {
        serializedName: "rule",
        type: {
          name: "String"
        }
      },
      seed: {
        serializedName: "seed",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClassificationTrainingSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClassificationTrainingSettings",
    modelProperties: {
      ...TrainingSettings.type.modelProperties,
      allowedTrainingAlgorithms: {
        serializedName: "allowedTrainingAlgorithms",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blockedTrainingAlgorithms: {
        serializedName: "blockedTrainingAlgorithms",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ForecastingTrainingSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastingTrainingSettings",
    modelProperties: {
      ...TrainingSettings.type.modelProperties,
      allowedTrainingAlgorithms: {
        serializedName: "allowedTrainingAlgorithms",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blockedTrainingAlgorithms: {
        serializedName: "blockedTrainingAlgorithms",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RegressionTrainingSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegressionTrainingSettings",
    modelProperties: {
      ...TrainingSettings.type.modelProperties,
      allowedTrainingAlgorithms: {
        serializedName: "allowedTrainingAlgorithms",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blockedTrainingAlgorithms: {
        serializedName: "blockedTrainingAlgorithms",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TableVerticalFeaturizationSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableVerticalFeaturizationSettings",
    modelProperties: {
      ...FeaturizationSettings.type.modelProperties,
      blockedTransformers: {
        serializedName: "blockedTransformers",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      columnNameAndTypes: {
        serializedName: "columnNameAndTypes",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      enableDnnFeaturization: {
        defaultValue: false,
        serializedName: "enableDnnFeaturization",
        type: {
          name: "Boolean"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      transformerParams: {
        serializedName: "transformerParams",
        nullable: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: { name: "Composite", className: "ColumnTransformer" }
              }
            }
          }
        }
      }
    }
  }
};

export const NlpVerticalFeaturizationSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NlpVerticalFeaturizationSettings",
    modelProperties: {
      ...FeaturizationSettings.type.modelProperties
    }
  }
};

export const Mpi: coreClient.CompositeMapper = {
  serializedName: "Mpi",
  type: {
    name: "Composite",
    className: "Mpi",
    uberParent: "DistributionConfiguration",
    polymorphicDiscriminator:
      DistributionConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...DistributionConfiguration.type.modelProperties,
      processCountPerInstance: {
        serializedName: "processCountPerInstance",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PyTorch: coreClient.CompositeMapper = {
  serializedName: "PyTorch",
  type: {
    name: "Composite",
    className: "PyTorch",
    uberParent: "DistributionConfiguration",
    polymorphicDiscriminator:
      DistributionConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...DistributionConfiguration.type.modelProperties,
      processCountPerInstance: {
        serializedName: "processCountPerInstance",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TensorFlow: coreClient.CompositeMapper = {
  serializedName: "TensorFlow",
  type: {
    name: "Composite",
    className: "TensorFlow",
    uberParent: "DistributionConfiguration",
    polymorphicDiscriminator:
      DistributionConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...DistributionConfiguration.type.modelProperties,
      parameterServerCount: {
        defaultValue: 0,
        serializedName: "parameterServerCount",
        type: {
          name: "Number"
        }
      },
      workerCount: {
        serializedName: "workerCount",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CommandJobLimits: coreClient.CompositeMapper = {
  serializedName: "Command",
  type: {
    name: "Composite",
    className: "CommandJobLimits",
    uberParent: "JobLimits",
    polymorphicDiscriminator: JobLimits.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobLimits.type.modelProperties
    }
  }
};

export const SweepJobLimits: coreClient.CompositeMapper = {
  serializedName: "Sweep",
  type: {
    name: "Composite",
    className: "SweepJobLimits",
    uberParent: "JobLimits",
    polymorphicDiscriminator: JobLimits.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobLimits.type.modelProperties,
      maxConcurrentTrials: {
        serializedName: "maxConcurrentTrials",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      maxTotalTrials: {
        serializedName: "maxTotalTrials",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      trialTimeout: {
        serializedName: "trialTimeout",
        nullable: true,
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ImageModelSettingsClassification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageModelSettingsClassification",
    modelProperties: {
      ...ImageModelSettings.type.modelProperties,
      trainingCropSize: {
        serializedName: "trainingCropSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      validationCropSize: {
        serializedName: "validationCropSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      validationResizeSize: {
        serializedName: "validationResizeSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      weightedLoss: {
        serializedName: "weightedLoss",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImageModelSettingsObjectDetection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageModelSettingsObjectDetection",
    modelProperties: {
      ...ImageModelSettings.type.modelProperties,
      boxDetectionsPerImage: {
        serializedName: "boxDetectionsPerImage",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      boxScoreThreshold: {
        serializedName: "boxScoreThreshold",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      imageSize: {
        serializedName: "imageSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      maxSize: {
        serializedName: "maxSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      minSize: {
        serializedName: "minSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      modelSize: {
        serializedName: "modelSize",
        type: {
          name: "String"
        }
      },
      multiScale: {
        serializedName: "multiScale",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      nmsIouThreshold: {
        serializedName: "nmsIouThreshold",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      tileGridSize: {
        serializedName: "tileGridSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      tileOverlapRatio: {
        serializedName: "tileOverlapRatio",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      tilePredictionsNmsThreshold: {
        serializedName: "tilePredictionsNmsThreshold",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      validationIouThreshold: {
        serializedName: "validationIouThreshold",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      validationMetricType: {
        serializedName: "validationMetricType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageModelDistributionSettingsClassification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageModelDistributionSettingsClassification",
    modelProperties: {
      ...ImageModelDistributionSettings.type.modelProperties,
      trainingCropSize: {
        serializedName: "trainingCropSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      validationCropSize: {
        serializedName: "validationCropSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      validationResizeSize: {
        serializedName: "validationResizeSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      weightedLoss: {
        serializedName: "weightedLoss",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageModelDistributionSettingsObjectDetection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageModelDistributionSettingsObjectDetection",
    modelProperties: {
      ...ImageModelDistributionSettings.type.modelProperties,
      boxDetectionsPerImage: {
        serializedName: "boxDetectionsPerImage",
        nullable: true,
        type: {
          name: "String"
        }
      },
      boxScoreThreshold: {
        serializedName: "boxScoreThreshold",
        nullable: true,
        type: {
          name: "String"
        }
      },
      imageSize: {
        serializedName: "imageSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      maxSize: {
        serializedName: "maxSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      minSize: {
        serializedName: "minSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      modelSize: {
        serializedName: "modelSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      multiScale: {
        serializedName: "multiScale",
        nullable: true,
        type: {
          name: "String"
        }
      },
      nmsIouThreshold: {
        serializedName: "nmsIouThreshold",
        nullable: true,
        type: {
          name: "String"
        }
      },
      tileGridSize: {
        serializedName: "tileGridSize",
        nullable: true,
        type: {
          name: "String"
        }
      },
      tileOverlapRatio: {
        serializedName: "tileOverlapRatio",
        nullable: true,
        type: {
          name: "String"
        }
      },
      tilePredictionsNmsThreshold: {
        serializedName: "tilePredictionsNmsThreshold",
        nullable: true,
        type: {
          name: "String"
        }
      },
      validationIouThreshold: {
        serializedName: "validationIouThreshold",
        nullable: true,
        type: {
          name: "String"
        }
      },
      validationMetricType: {
        serializedName: "validationMetricType",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchEndpoint",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BatchEndpointProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const BatchDeployment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchDeployment",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BatchDeploymentProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const OnlineEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineEndpoint",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OnlineEndpointProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const OnlineDeployment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineDeployment",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OnlineDeploymentProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const KubernetesOnlineDeployment: coreClient.CompositeMapper = {
  serializedName: "Kubernetes",
  type: {
    name: "Composite",
    className: "KubernetesOnlineDeployment",
    uberParent: "OnlineDeploymentProperties",
    polymorphicDiscriminator:
      OnlineDeploymentProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...OnlineDeploymentProperties.type.modelProperties,
      containerResourceRequirements: {
        serializedName: "containerResourceRequirements",
        type: {
          name: "Composite",
          className: "ContainerResourceRequirements"
        }
      }
    }
  }
};

export const ManagedOnlineDeployment: coreClient.CompositeMapper = {
  serializedName: "Managed",
  type: {
    name: "Composite",
    className: "ManagedOnlineDeployment",
    uberParent: "OnlineDeploymentProperties",
    polymorphicDiscriminator:
      OnlineDeploymentProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...OnlineDeploymentProperties.type.modelProperties
    }
  }
};

export const CodeContainerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CodeContainerProperties",
    modelProperties: {
      ...AssetContainer.type.modelProperties
    }
  }
};

export const ComponentContainerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComponentContainerProperties",
    modelProperties: {
      ...AssetContainer.type.modelProperties
    }
  }
};

export const DataContainerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataContainerProperties",
    modelProperties: {
      ...AssetContainer.type.modelProperties,
      dataType: {
        serializedName: "dataType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentContainerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentContainerProperties",
    modelProperties: {
      ...AssetContainer.type.modelProperties
    }
  }
};

export const ModelContainerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelContainerProperties",
    modelProperties: {
      ...AssetContainer.type.modelProperties
    }
  }
};

export const CodeVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CodeVersionProperties",
    modelProperties: {
      ...AssetBase.type.modelProperties,
      codeUri: {
        serializedName: "codeUri",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComponentVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComponentVersionProperties",
    modelProperties: {
      ...AssetBase.type.modelProperties,
      componentSpec: {
        serializedName: "componentSpec",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const DataVersionBaseProperties: coreClient.CompositeMapper = {
  serializedName: "DataVersionBaseProperties",
  type: {
    name: "Composite",
    className: "DataVersionBaseProperties",
    uberParent: "AssetBase",
    polymorphicDiscriminator: {
      serializedName: "dataType",
      clientName: "dataType"
    },
    modelProperties: {
      ...AssetBase.type.modelProperties,
      dataType: {
        serializedName: "dataType",
        required: true,
        type: {
          name: "String"
        }
      },
      dataUri: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "dataUri",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentVersionProperties",
    modelProperties: {
      ...AssetBase.type.modelProperties,
      autoRebuild: {
        serializedName: "autoRebuild",
        type: {
          name: "String"
        }
      },
      build: {
        serializedName: "build",
        type: {
          name: "Composite",
          className: "BuildContext"
        }
      },
      condaFile: {
        serializedName: "condaFile",
        type: {
          name: "String"
        }
      },
      environmentType: {
        serializedName: "environmentType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      image: {
        serializedName: "image",
        type: {
          name: "String"
        }
      },
      inferenceConfig: {
        serializedName: "inferenceConfig",
        type: {
          name: "Composite",
          className: "InferenceContainerProperties"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelVersionProperties",
    modelProperties: {
      ...AssetBase.type.modelProperties,
      flavors: {
        serializedName: "flavors",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "FlavorData" } }
        }
      },
      jobName: {
        serializedName: "jobName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      modelType: {
        serializedName: "modelType",
        nullable: true,
        type: {
          name: "String"
        }
      },
      modelUri: {
        serializedName: "modelUri",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBlobDatastore: coreClient.CompositeMapper = {
  serializedName: "AzureBlob",
  type: {
    name: "Composite",
    className: "AzureBlobDatastore",
    uberParent: "DatastoreProperties",
    polymorphicDiscriminator: DatastoreProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreProperties.type.modelProperties,
      accountName: {
        serializedName: "accountName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        nullable: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        nullable: true,
        type: {
          name: "String"
        }
      },
      serviceDataAccessAuthIdentity: {
        serializedName: "serviceDataAccessAuthIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureDataLakeGen1Datastore: coreClient.CompositeMapper = {
  serializedName: "AzureDataLakeGen1",
  type: {
    name: "Composite",
    className: "AzureDataLakeGen1Datastore",
    uberParent: "DatastoreProperties",
    polymorphicDiscriminator: DatastoreProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreProperties.type.modelProperties,
      serviceDataAccessAuthIdentity: {
        serializedName: "serviceDataAccessAuthIdentity",
        type: {
          name: "String"
        }
      },
      storeName: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "storeName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureDataLakeGen2Datastore: coreClient.CompositeMapper = {
  serializedName: "AzureDataLakeGen2",
  type: {
    name: "Composite",
    className: "AzureDataLakeGen2Datastore",
    uberParent: "DatastoreProperties",
    polymorphicDiscriminator: DatastoreProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreProperties.type.modelProperties,
      accountName: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        nullable: true,
        type: {
          name: "String"
        }
      },
      filesystem: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "filesystem",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        nullable: true,
        type: {
          name: "String"
        }
      },
      serviceDataAccessAuthIdentity: {
        serializedName: "serviceDataAccessAuthIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFileDatastore: coreClient.CompositeMapper = {
  serializedName: "AzureFile",
  type: {
    name: "Composite",
    className: "AzureFileDatastore",
    uberParent: "DatastoreProperties",
    polymorphicDiscriminator: DatastoreProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatastoreProperties.type.modelProperties,
      accountName: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        nullable: true,
        type: {
          name: "String"
        }
      },
      fileShareName: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "fileShareName",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        nullable: true,
        type: {
          name: "String"
        }
      },
      serviceDataAccessAuthIdentity: {
        serializedName: "serviceDataAccessAuthIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoMLJob: coreClient.CompositeMapper = {
  serializedName: "AutoML",
  type: {
    name: "Composite",
    className: "AutoMLJob",
    uberParent: "JobBaseProperties",
    polymorphicDiscriminator: JobBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobBaseProperties.type.modelProperties,
      environmentId: {
        serializedName: "environmentId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      outputs: {
        serializedName: "outputs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "JobOutput" } }
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "JobResourceConfiguration"
        }
      },
      taskDetails: {
        serializedName: "taskDetails",
        type: {
          name: "Composite",
          className: "AutoMLVertical"
        }
      }
    }
  }
};

export const CommandJob: coreClient.CompositeMapper = {
  serializedName: "Command",
  type: {
    name: "Composite",
    className: "CommandJob",
    uberParent: "JobBaseProperties",
    polymorphicDiscriminator: JobBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobBaseProperties.type.modelProperties,
      codeId: {
        serializedName: "codeId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      command: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]"),
          MinLength: 1
        },
        serializedName: "command",
        required: true,
        type: {
          name: "String"
        }
      },
      distribution: {
        serializedName: "distribution",
        type: {
          name: "Composite",
          className: "DistributionConfiguration"
        }
      },
      environmentId: {
        constraints: {
          Pattern: new RegExp("[a-zA-Z0-9_]")
        },
        serializedName: "environmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      inputs: {
        serializedName: "inputs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "JobInput" } }
        }
      },
      limits: {
        serializedName: "limits",
        type: {
          name: "Composite",
          className: "CommandJobLimits"
        }
      },
      outputs: {
        serializedName: "outputs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "JobOutput" } }
        }
      },
      parameters: {
        serializedName: "parameters",
        readOnly: true,
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "JobResourceConfiguration"
        }
      }
    }
  }
};

export const PipelineJob: coreClient.CompositeMapper = {
  serializedName: "Pipeline",
  type: {
    name: "Composite",
    className: "PipelineJob",
    uberParent: "JobBaseProperties",
    polymorphicDiscriminator: JobBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobBaseProperties.type.modelProperties,
      inputs: {
        serializedName: "inputs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "JobInput" } }
        }
      },
      jobs: {
        serializedName: "jobs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      outputs: {
        serializedName: "outputs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "JobOutput" } }
        }
      },
      settings: {
        serializedName: "settings",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      sourceJobId: {
        serializedName: "sourceJobId",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SweepJob: coreClient.CompositeMapper = {
  serializedName: "Sweep",
  type: {
    name: "Composite",
    className: "SweepJob",
    uberParent: "JobBaseProperties",
    polymorphicDiscriminator: JobBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobBaseProperties.type.modelProperties,
      earlyTermination: {
        serializedName: "earlyTermination",
        type: {
          name: "Composite",
          className: "EarlyTerminationPolicy"
        }
      },
      inputs: {
        serializedName: "inputs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "JobInput" } }
        }
      },
      limits: {
        serializedName: "limits",
        type: {
          name: "Composite",
          className: "SweepJobLimits"
        }
      },
      objective: {
        serializedName: "objective",
        type: {
          name: "Composite",
          className: "Objective"
        }
      },
      outputs: {
        serializedName: "outputs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "JobOutput" } }
        }
      },
      samplingAlgorithm: {
        serializedName: "samplingAlgorithm",
        type: {
          name: "Composite",
          className: "SamplingAlgorithm"
        }
      },
      searchSpace: {
        serializedName: "searchSpace",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      trial: {
        serializedName: "trial",
        type: {
          name: "Composite",
          className: "TrialComponent"
        }
      }
    }
  }
};

export const MLTableData: coreClient.CompositeMapper = {
  serializedName: "mltable",
  type: {
    name: "Composite",
    className: "MLTableData",
    uberParent: "DataVersionBaseProperties",
    polymorphicDiscriminator:
      DataVersionBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataVersionBaseProperties.type.modelProperties,
      referencedUris: {
        serializedName: "referencedUris",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UriFileDataVersion: coreClient.CompositeMapper = {
  serializedName: "uri_file",
  type: {
    name: "Composite",
    className: "UriFileDataVersion",
    uberParent: "DataVersionBaseProperties",
    polymorphicDiscriminator:
      DataVersionBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataVersionBaseProperties.type.modelProperties
    }
  }
};

export const UriFolderDataVersion: coreClient.CompositeMapper = {
  serializedName: "uri_folder",
  type: {
    name: "Composite",
    className: "UriFolderDataVersion",
    uberParent: "DataVersionBaseProperties",
    polymorphicDiscriminator:
      DataVersionBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataVersionBaseProperties.type.modelProperties
    }
  }
};

export const WorkspacesDiagnoseHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspacesDiagnoseHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ComputeCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchEndpointsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchEndpointsDeleteHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BatchEndpointsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchEndpointsUpdateHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BatchEndpointsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchEndpointsCreateOrUpdateHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchDeploymentsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchDeploymentsDeleteHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BatchDeploymentsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchDeploymentsUpdateHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BatchDeploymentsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchDeploymentsCreateOrUpdateHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobsDeleteHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobsCancelHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobsCancelHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OnlineEndpointsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineEndpointsDeleteHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OnlineEndpointsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineEndpointsUpdateHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OnlineEndpointsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineEndpointsCreateOrUpdateHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OnlineEndpointsRegenerateKeysHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineEndpointsRegenerateKeysHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OnlineDeploymentsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineDeploymentsDeleteHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OnlineDeploymentsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineDeploymentsUpdateHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OnlineDeploymentsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnlineDeploymentsCreateOrUpdateHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SchedulesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SchedulesDeleteHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SchedulesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SchedulesCreateOrUpdateHeaders",
    modelProperties: {
      xMsAsyncOperationTimeout: {
        serializedName: "x-ms-async-operation-timeout",
        type: {
          name: "TimeSpan"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  Compute: Compute,
  ComputeSecrets: ComputeSecrets,
  WorkspaceConnectionPropertiesV2: WorkspaceConnectionPropertiesV2,
  AssetReferenceBase: AssetReferenceBase,
  DatastoreCredentials: DatastoreCredentials,
  DatastoreSecrets: DatastoreSecrets,
  IdentityConfiguration: IdentityConfiguration,
  OnlineScaleSettings: OnlineScaleSettings,
  ScheduleActionBase: ScheduleActionBase,
  TriggerBase: TriggerBase,
  ForecastHorizon: ForecastHorizon,
  JobOutput: JobOutput,
  AutoMLVertical: AutoMLVertical,
  JobInput: JobInput,
  NCrossValidations: NCrossValidations,
  Seasonality: Seasonality,
  TargetLags: TargetLags,
  TargetRollingWindowSize: TargetRollingWindowSize,
  EarlyTerminationPolicy: EarlyTerminationPolicy,
  SamplingAlgorithm: SamplingAlgorithm,
  DistributionConfiguration: DistributionConfiguration,
  JobLimits: JobLimits,
  "Compute.AKS": Aks,
  "Compute.Kubernetes": Kubernetes,
  "Compute.AmlCompute": AmlCompute,
  "Compute.ComputeInstance": ComputeInstance,
  "Compute.VirtualMachine": VirtualMachine,
  "Compute.HDInsight": HDInsight,
  "Compute.DataFactory": DataFactory,
  "Compute.Databricks": Databricks,
  "Compute.DataLakeAnalytics": DataLakeAnalytics,
  "Compute.SynapseSpark": SynapseSpark,
  "ComputeSecrets.AKS": AksComputeSecrets,
  "ComputeSecrets.VirtualMachine": VirtualMachineSecrets,
  "ComputeSecrets.Databricks": DatabricksComputeSecrets,
  "WorkspaceConnectionPropertiesV2.PAT": PATAuthTypeWorkspaceConnectionProperties,
  "WorkspaceConnectionPropertiesV2.SAS": SASAuthTypeWorkspaceConnectionProperties,
  "WorkspaceConnectionPropertiesV2.UsernamePassword": UsernamePasswordAuthTypeWorkspaceConnectionProperties,
  "WorkspaceConnectionPropertiesV2.None": NoneAuthTypeWorkspaceConnectionProperties,
  "WorkspaceConnectionPropertiesV2.ManagedIdentity": ManagedIdentityAuthTypeWorkspaceConnectionProperties,
  "AssetReferenceBase.DataPath": DataPathAssetReference,
  "AssetReferenceBase.Id": IdAssetReference,
  "AssetReferenceBase.OutputPath": OutputPathAssetReference,
  "EndpointDeploymentPropertiesBase.OnlineDeploymentProperties": OnlineDeploymentProperties,
  "ResourceBase.DatastoreProperties": DatastoreProperties,
  "ResourceBase.JobBaseProperties": JobBaseProperties,
  "DatastoreCredentials.AccountKey": AccountKeyDatastoreCredentials,
  "DatastoreCredentials.Certificate": CertificateDatastoreCredentials,
  "DatastoreCredentials.None": NoneDatastoreCredentials,
  "DatastoreCredentials.Sas": SasDatastoreCredentials,
  "DatastoreCredentials.ServicePrincipal": ServicePrincipalDatastoreCredentials,
  "DatastoreSecrets.AccountKey": AccountKeyDatastoreSecrets,
  "DatastoreSecrets.Certificate": CertificateDatastoreSecrets,
  "DatastoreSecrets.Sas": SasDatastoreSecrets,
  "DatastoreSecrets.ServicePrincipal": ServicePrincipalDatastoreSecrets,
  "IdentityConfiguration.AMLToken": AmlToken,
  "IdentityConfiguration.Managed": ManagedIdentity,
  "IdentityConfiguration.UserIdentity": UserIdentity,
  "OnlineScaleSettings.Default": DefaultScaleSettings,
  "OnlineScaleSettings.TargetUtilization": TargetUtilizationScaleSettings,
  "ScheduleActionBase.InvokeBatchEndpoint": EndpointScheduleAction,
  "ScheduleActionBase.CreateJob": JobScheduleAction,
  "TriggerBase.Recurrence": RecurrenceTrigger,
  "TriggerBase.Cron": CronTrigger,
  "AssetJobInput.mltable": MLTableJobInput,
  "AssetJobInput.custom_model": CustomModelJobInput,
  "AssetJobInput.mlflow_model": MLFlowModelJobInput,
  "AssetJobInput.triton_model": TritonModelJobInput,
  "AssetJobInput.uri_file": UriFileJobInput,
  "AssetJobInput.uri_folder": UriFolderJobInput,
  "AssetJobOutput.custom_model": CustomModelJobOutput,
  "AssetJobOutput.mlflow_model": MLFlowModelJobOutput,
  "AssetJobOutput.mltable": MLTableJobOutput,
  "AssetJobOutput.triton_model": TritonModelJobOutput,
  "AssetJobOutput.uri_file": UriFileJobOutput,
  "AssetJobOutput.uri_folder": UriFolderJobOutput,
  "ForecastHorizon.Auto": AutoForecastHorizon,
  "ForecastHorizon.Custom": CustomForecastHorizon,
  "TableVertical.Classification": Classification,
  "TableVertical.Forecasting": Forecasting,
  "ImageClassificationBase.ImageClassification": ImageClassification,
  "ImageClassificationBase.ImageClassificationMultilabel": ImageClassificationMultilabel,
  "ImageObjectDetectionBase.ImageInstanceSegmentation": ImageInstanceSegmentation,
  "ImageObjectDetectionBase.ImageObjectDetection": ImageObjectDetection,
  "TableVertical.Regression": Regression,
  "NlpVertical.TextClassification": TextClassification,
  "NlpVertical.TextClassificationMultilabel": TextClassificationMultilabel,
  "NlpVertical.TextNER": TextNer,
  "JobInput.literal": LiteralJobInput,
  "NCrossValidations.Auto": AutoNCrossValidations,
  "NCrossValidations.Custom": CustomNCrossValidations,
  "Seasonality.Auto": AutoSeasonality,
  "Seasonality.Custom": CustomSeasonality,
  "TargetLags.Auto": AutoTargetLags,
  "TargetLags.Custom": CustomTargetLags,
  "TargetRollingWindowSize.Auto": AutoTargetRollingWindowSize,
  "TargetRollingWindowSize.Custom": CustomTargetRollingWindowSize,
  "EarlyTerminationPolicy.Bandit": BanditPolicy,
  "EarlyTerminationPolicy.MedianStopping": MedianStoppingPolicy,
  "EarlyTerminationPolicy.TruncationSelection": TruncationSelectionPolicy,
  "SamplingAlgorithm.Bayesian": BayesianSamplingAlgorithm,
  "SamplingAlgorithm.Grid": GridSamplingAlgorithm,
  "SamplingAlgorithm.Random": RandomSamplingAlgorithm,
  "DistributionConfiguration.Mpi": Mpi,
  "DistributionConfiguration.PyTorch": PyTorch,
  "DistributionConfiguration.TensorFlow": TensorFlow,
  "JobLimits.Command": CommandJobLimits,
  "JobLimits.Sweep": SweepJobLimits,
  "OnlineDeploymentProperties.Kubernetes": KubernetesOnlineDeployment,
  "OnlineDeploymentProperties.Managed": ManagedOnlineDeployment,
  "AssetBase.DataVersionBaseProperties": DataVersionBaseProperties,
  "DatastoreProperties.AzureBlob": AzureBlobDatastore,
  "DatastoreProperties.AzureDataLakeGen1": AzureDataLakeGen1Datastore,
  "DatastoreProperties.AzureDataLakeGen2": AzureDataLakeGen2Datastore,
  "DatastoreProperties.AzureFile": AzureFileDatastore,
  "JobBaseProperties.AutoML": AutoMLJob,
  "JobBaseProperties.Command": CommandJob,
  "JobBaseProperties.Pipeline": PipelineJob,
  "JobBaseProperties.Sweep": SweepJob,
  "DataVersionBaseProperties.mltable": MLTableData,
  "DataVersionBaseProperties.uri_file": UriFileDataVersion,
  "DataVersionBaseProperties.uri_folder": UriFolderDataVersion
};
