/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { AzureMachineLearningWorkspaces } from "../src/azureMachineLearningWorkspaces";
import { JobBase, Workspace } from "../src/models";


const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("machinelearning test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: AzureMachineLearningWorkspaces;
  let location: string;
  let resourceGroup: string;
  let workspaceName: string;
  let parameters: Workspace;
  let body: JobBase;
  let id: string;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new AzureMachineLearningWorkspaces(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    workspaceName = "myworkspacenamexxx";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("workspace create test", async function () {
    const userID = "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/MicrosoftManagedIdentity/userAssignedIdentities/testuai"
    parameters = {
      description: "test description",
      applicationInsights:
        "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/microsoft.insights/components/testinsights",
      containerRegistry:
        "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.ContainerRegistry/registries/testRegistry",
      encryption: {
        identity: {
          userAssignedIdentity:
            "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"
        },
        keyVaultProperties: {
          identityClientId: "",
          keyIdentifier:
            "https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb",
          keyVaultArmId:
            "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.KeyVault/vaults/testkv"
        },
        status: "Enabled"
      },
      friendlyName: "HelloName",
      hbiWorkspace: false,
      identity: {
        type: "SystemAssigned,UserAssigned",
        userAssignedIdentities: {
          "/subscriptions/92f95d8f3c67412491c78cf07cdbf241/resourceGroups/myjstest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": {},
        }
      },
      keyVault:
        "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.KeyVault/vaults/testkv",
      location: "eastus2",
      sharedPrivateLinkResources: [
        {
          name: "testdbresource",
          groupId: "Sql",
          privateLinkResourceId:
            "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource/privateLinkResources/Sql",
          requestMessage: "Please approve",
          status: "Approved"
        }
      ],
      storageAccount:
        "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Storage/storageAccounts/testStorageAccount"

    }
    const res = await client.workspaces.beginCreateOrUpdateAndWait(resourceGroup, workspaceName, parameters);
    assert.equal(res.name, workspaceName);
  })

  it("job create test", async function () {
    id = "string";
    body = {
      properties: {
        description: "string",
        computeId: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.MAchineLearningServices/workspace/" + workspaceName + "/computes/computetest",
        displayName: "string",
        environmentId: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.MAchineLearningServices/workspaces/" + workspaceName + "/environments/environmenttests",
        command: "export TEST_MODE=record && rushx test",
        jobType: "Command",
      }
    };
    const res = await client.jobs.createOrUpdate(resourceGroup, workspaceName, id, body);

  })

  // it("workspace delete test", async function () {
  //   const res = await client.workspaces.beginDeleteAndWait(resourceGroup, workspaceName);
  //   const resArray = new Array();
  //   for await (let item of client.workspaces.listByResourceGroup(resourceGroup)) {
  //     resArray.push(item);
  //   }
  //   assert.equal(resArray.length, 0);
  // })
})
