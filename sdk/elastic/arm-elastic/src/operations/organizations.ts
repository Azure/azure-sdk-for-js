// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import { Organizations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { MicrosoftElastic } from "../microsoftElastic.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  OrganizationsGetApiKeyOptionalParams,
  OrganizationsGetApiKeyResponse,
  OrganizationsGetElasticToAzureSubscriptionMappingOptionalParams,
  OrganizationsGetElasticToAzureSubscriptionMappingResponse,
  OrganizationsResubscribeOptionalParams,
  OrganizationsResubscribeResponse,
} from "../models/index.js";

/** Class containing Organizations operations. */
export class OrganizationsImpl implements Organizations {
  private readonly client: MicrosoftElastic;

  /**
   * Initialize a new instance of the class Organizations class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftElastic) {
    this.client = client;
  }

  /**
   * Fetch the User API Key from the internal database, if it was generated and stored during the
   * creation of the Elasticsearch Organization.
   * @param options The options parameters.
   */
  getApiKey(
    options?: OrganizationsGetApiKeyOptionalParams,
  ): Promise<OrganizationsGetApiKeyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getApiKeyOperationSpec,
    );
  }

  /**
   * Retrieve mapping details between the Elastic Organization and Azure Subscription for the logged-in
   * user.
   * @param options The options parameters.
   */
  getElasticToAzureSubscriptionMapping(
    options?: OrganizationsGetElasticToAzureSubscriptionMappingOptionalParams,
  ): Promise<OrganizationsGetElasticToAzureSubscriptionMappingResponse> {
    return this.client.sendOperationRequest(
      { options },
      getElasticToAzureSubscriptionMappingOperationSpec,
    );
  }

  /**
   * Resubscribe the Elasticsearch Organization.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The options parameters.
   */
  async beginResubscribe(
    resourceGroupName: string,
    monitorName: string,
    options?: OrganizationsResubscribeOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<OrganizationsResubscribeResponse>,
      OrganizationsResubscribeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<OrganizationsResubscribeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, monitorName, options },
      spec: resubscribeOperationSpec,
    });
    const poller = await createHttpPoller<
      OrganizationsResubscribeResponse,
      OperationState<OrganizationsResubscribeResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Resubscribe the Elasticsearch Organization.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The options parameters.
   */
  async beginResubscribeAndWait(
    resourceGroupName: string,
    monitorName: string,
    options?: OrganizationsResubscribeOptionalParams,
  ): Promise<OrganizationsResubscribeResponse> {
    const poller = await this.beginResubscribe(
      resourceGroupName,
      monitorName,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getApiKeyOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Elastic/getOrganizationApiKey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UserApiKeyResponse,
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
    },
  },
  requestBody: Parameters.body8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getElasticToAzureSubscriptionMappingOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Elastic/getElasticOrganizationToAzureSubscriptionMapping",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper:
          Mappers.ElasticOrganizationToAzureSubscriptionMappingResponse,
      },
      default: {
        bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
      },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer,
  };
const resubscribeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Elastic/monitors/{monitorName}/resubscribe",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ElasticMonitorResource,
    },
    201: {
      bodyMapper: Mappers.ElasticMonitorResource,
    },
    202: {
      bodyMapper: Mappers.ElasticMonitorResource,
    },
    204: {
      bodyMapper: Mappers.ElasticMonitorResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
