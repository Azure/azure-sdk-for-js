/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { MarketplaceAgreements } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MarketplaceOrderingAgreements } from "../marketplaceOrderingAgreements";
import {
  OfferType,
  MarketplaceAgreementsGetOptionalParams,
  MarketplaceAgreementsGetResponse,
  AgreementTerms,
  MarketplaceAgreementsCreateOptionalParams,
  MarketplaceAgreementsCreateResponse,
  MarketplaceAgreementsSignOptionalParams,
  MarketplaceAgreementsSignResponse,
  MarketplaceAgreementsCancelOptionalParams,
  MarketplaceAgreementsCancelResponse,
  MarketplaceAgreementsGetAgreementOptionalParams,
  MarketplaceAgreementsGetAgreementResponse,
  MarketplaceAgreementsListOptionalParams,
  MarketplaceAgreementsListResponse
} from "../models";

/** Class containing MarketplaceAgreements operations. */
export class MarketplaceAgreementsImpl implements MarketplaceAgreements {
  private readonly client: MarketplaceOrderingAgreements;

  /**
   * Initialize a new instance of the class MarketplaceAgreements class.
   * @param client Reference to the service client
   */
  constructor(client: MarketplaceOrderingAgreements) {
    this.client = client;
  }

  /**
   * Get marketplace terms.
   * @param offerType Offer Type, currently only virtualmachine type is supported.
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param options The options parameters.
   */
  get(
    offerType: OfferType,
    publisherId: string,
    offerId: string,
    planId: string,
    options?: MarketplaceAgreementsGetOptionalParams
  ): Promise<MarketplaceAgreementsGetResponse> {
    return this.client.sendOperationRequest(
      { offerType, publisherId, offerId, planId, options },
      getOperationSpec
    );
  }

  /**
   * Save marketplace terms.
   * @param offerType Offer Type, currently only virtualmachine type is supported.
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param parameters Parameters supplied to the Create Marketplace Terms operation.
   * @param options The options parameters.
   */
  create(
    offerType: OfferType,
    publisherId: string,
    offerId: string,
    planId: string,
    parameters: AgreementTerms,
    options?: MarketplaceAgreementsCreateOptionalParams
  ): Promise<MarketplaceAgreementsCreateResponse> {
    return this.client.sendOperationRequest(
      { offerType, publisherId, offerId, planId, parameters, options },
      createOperationSpec
    );
  }

  /**
   * Sign marketplace terms.
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param options The options parameters.
   */
  sign(
    publisherId: string,
    offerId: string,
    planId: string,
    options?: MarketplaceAgreementsSignOptionalParams
  ): Promise<MarketplaceAgreementsSignResponse> {
    return this.client.sendOperationRequest(
      { publisherId, offerId, planId, options },
      signOperationSpec
    );
  }

  /**
   * Cancel marketplace terms.
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param options The options parameters.
   */
  cancel(
    publisherId: string,
    offerId: string,
    planId: string,
    options?: MarketplaceAgreementsCancelOptionalParams
  ): Promise<MarketplaceAgreementsCancelResponse> {
    return this.client.sendOperationRequest(
      { publisherId, offerId, planId, options },
      cancelOperationSpec
    );
  }

  /**
   * Get marketplace agreement.
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param options The options parameters.
   */
  getAgreement(
    publisherId: string,
    offerId: string,
    planId: string,
    options?: MarketplaceAgreementsGetAgreementOptionalParams
  ): Promise<MarketplaceAgreementsGetAgreementResponse> {
    return this.client.sendOperationRequest(
      { publisherId, offerId, planId, options },
      getAgreementOperationSpec
    );
  }

  /**
   * List marketplace agreements in the subscription.
   * @param options The options parameters.
   */
  list(
    options?: MarketplaceAgreementsListOptionalParams
  ): Promise<MarketplaceAgreementsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AgreementTerms
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.offerType,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AgreementTerms
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.offerType,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const signOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/sign",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AgreementTerms
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AgreementTerms
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAgreementOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AgreementTerms
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AgreementTerms" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
