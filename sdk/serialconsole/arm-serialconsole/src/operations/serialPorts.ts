/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SerialPorts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftSerialConsoleClient } from "../microsoftSerialConsoleClient";
import {
  SerialPortsListOptionalParams,
  SerialPortsListResponse,
  SerialPortsGetOptionalParams,
  SerialPortsGetResponse,
  SerialPort,
  SerialPortsCreateOptionalParams,
  SerialPortsCreateResponse,
  SerialPortsDeleteOptionalParams,
  SerialPortsListBySubscriptionsOptionalParams,
  SerialPortsListBySubscriptionsResponse,
  SerialPortsConnectOptionalParams,
  SerialPortsConnectResponse
} from "../models";

/** Class containing SerialPorts operations. */
export class SerialPortsImpl implements SerialPorts {
  private readonly client: MicrosoftSerialConsoleClient;

  /**
   * Initialize a new instance of the class SerialPorts class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftSerialConsoleClient) {
    this.client = client;
  }

  /**
   * Lists all of the configured serial ports for a parent resource
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
   *                           or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
   *                       example: the name of the virtual machine.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourceType: string,
    parentResource: string,
    options?: SerialPortsListOptionalParams
  ): Promise<SerialPortsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        options
      },
      listOperationSpec
    );
  }

  /**
   * Gets the configured settings for a serial port
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
   *                           or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
   *                       example: the name of the virtual machine.
   * @param serialPort The name of the serial port to connect to.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourceType: string,
    parentResource: string,
    serialPort: string,
    options?: SerialPortsGetOptionalParams
  ): Promise<SerialPortsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a serial port
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
   *                           or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
   *                       example: the name of the virtual machine.
   * @param serialPort The name of the serial port to create.
   * @param parameters Parameters supplied to create the serial port.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourceType: string,
    parentResource: string,
    serialPort: string,
    parameters: SerialPort,
    options?: SerialPortsCreateOptionalParams
  ): Promise<SerialPortsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort,
        parameters,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Deletes a serial port
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
   *                           or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
   *                       example: the name of the virtual machine.
   * @param serialPort The name of the serial port to delete.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourceType: string,
    parentResource: string,
    serialPort: string,
    options?: SerialPortsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Handles requests to list all SerialPort resources in a subscription.
   * @param options The options parameters.
   */
  listBySubscriptions(
    options?: SerialPortsListBySubscriptionsOptionalParams
  ): Promise<SerialPortsListBySubscriptionsResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionsOperationSpec
    );
  }

  /**
   * Connect to serial port of the target resource
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
   *                           or 'virtualMachineScaleSets'
   * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
   *                       example: the name of the virtual machine.
   * @param serialPort The name of the serial port to connect to.
   * @param options The options parameters.
   */
  connect(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourceType: string,
    parentResource: string,
    serialPort: string,
    options?: SerialPortsConnectOptionalParams
  ): Promise<SerialPortsConnectResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort,
        options
      },
      connectOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SerialPortListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SerialPort
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResource,
    Parameters.serialPort
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.SerialPort
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResource,
    Parameters.serialPort
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResource,
    Parameters.serialPort
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/serialPorts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SerialPortListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const connectOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}/connect",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SerialPortConnectResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResource,
    Parameters.serialPort
  ],
  headerParameters: [Parameters.accept],
  serializer
};
