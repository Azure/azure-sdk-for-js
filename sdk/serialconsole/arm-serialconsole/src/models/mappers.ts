/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const SerialConsoleGetResult: msRest.CompositeMapper = {
  serializedName: "SerialConsoleGetResult",
  type: {
    name: "Composite",
    className: "SerialConsoleGetResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const GetDisabledResult: msRest.CompositeMapper = {
  serializedName: "GetDisabledResult",
  type: {
    name: "Composite",
    className: "GetDisabledResult",
    modelProperties: {
      disabled: {
        serializedName: "disabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SetDisabledResult: msRest.CompositeMapper = {
  serializedName: "SetDisabledResult",
  type: {
    name: "Composite",
    className: "SetDisabledResult",
    modelProperties: {
      disabled: {
        serializedName: "disabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DeploymentValidateResult: msRest.CompositeMapper = {
  serializedName: "DeploymentValidateResult",
  type: {
    name: "Composite",
    className: "DeploymentValidateResult",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SerialConsoleOperations: msRest.CompositeMapper = {
  serializedName: "SerialConsoleOperations",
  type: {
    name: "Composite",
    className: "SerialConsoleOperations",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};
