/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Identity for the Provisioned cluster. */
export interface ProvisionedClusterIdentity {
  /**
   * The principal id of provisioned cluster identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant id associated with the provisioned cluster. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster. */
  type: ResourceIdentityType;
}

/** Properties of provisioned clusters without the corresponding secrets */
export interface ProvisionedClustersPropertiesWithoutSecrets {
  /** AAD profile for the provisioned cluster. */
  aadProfile?: AADProfileResponse;
  /** WindowsProfile - Profile for Windows VMs in the Provisioned Cluster. */
  windowsProfile?: WindowsProfileResponse;
  /** HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers. */
  httpProxyConfig?: HttpProxyConfigResponse;
}

/** AAD Profile specifies attributes for Azure Active Directory integration. */
export interface AADProfileResponse {
  /** The list of AAD group object IDs that will have admin role of the cluster. */
  adminGroupObjectIDs?: string[];
  /** The client AAD application ID. */
  clientAppID?: string;
  /** Whether to enable Azure RBAC for Kubernetes authorization. */
  enableAzureRbac?: boolean;
  /** Whether to enable managed AAD. */
  managed?: boolean;
  /** The server AAD application ID. */
  serverAppID?: string;
  /** The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription. */
  tenantID?: string;
}

/** Profile for Windows VMs in the container service cluster. */
export interface WindowsProfileResponse {
  /** AdminUsername - Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters */
  adminUsername?: string;
  /** EnableCSIProxy - Whether to enable CSI proxy. */
  enableCsiProxy?: boolean;
  /** LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server' */
  licenseType?: LicenseType;
}

/** Configurations for provisioning the cluster with HTTP proxy servers. */
export interface HttpProxyConfigResponse {
  /** The HTTP proxy server endpoint to use. */
  httpProxy?: string;
  /** The HTTPS proxy server endpoint to use. */
  httpsProxy?: string;
  /** The endpoints that should not go through proxy. */
  noProxy?: string[];
  /** Alternative CA cert to use for connecting to proxy servers. */
  trustedCa?: string;
  /** Username to use for connecting to proxy server */
  username?: string;
}

/** HybridAKSClusterSpec defines the desired state of HybridAKSCluster */
export interface ProvisionedClustersCommonProperties {
  /** EnableRBAC - Whether to enable Kubernetes Role-Based Access Control. */
  enableRbac?: boolean;
  /** LinuxProfile - The profile for Linux VMs in the Provisioned Cluster. */
  linuxProfile?: LinuxProfileProperties;
  /** Additional features specs like Arc Agent Onboarding. */
  features?: ProvisionedClustersCommonPropertiesFeatures;
  /** AddonProfiles - Profile of managed cluster add-on. */
  addonProfiles?: { [propertyName: string]: AddonProfiles };
  /** ControlPlane - ControlPlane Configuration */
  controlPlane?: ControlPlaneProfile;
  /** KubernetesVersion - Version of Kubernetes specified when creating the managed cluster. */
  kubernetesVersion?: string;
  /** NetworkProfile - Profile of network configuration. */
  networkProfile?: NetworkProfile;
  /** NodeResourceGroup - Name of the resource group containing agent pool nodes. */
  nodeResourceGroup?: string;
  /** The agent pools of the cluster. */
  agentPoolProfiles?: NamedAgentPoolProfile[];
  /** The underlying cloud infra provider properties. */
  cloudProviderProfile?: CloudProviderProfile;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningState?: ProvisioningState;
  /**
   * HybridAKSClusterStatus defines the observed state of HybridAKSCluster
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ProvisionedClustersCommonPropertiesStatus;
}

/** LinuxProfile - Profile for Linux VMs in the container service cluster. */
export interface LinuxProfileProperties {
  /** AdminUsername - The administrator username to use for Linux VMs. */
  adminUsername?: string;
  /** SSH - SSH configuration for Linux-based VMs running on Azure. */
  ssh?: LinuxProfilePropertiesSsh;
}

/** SSH - SSH configuration for Linux-based VMs running on Azure. */
export interface LinuxProfilePropertiesSsh {
  /** PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified. */
  publicKeys?: LinuxProfilePropertiesSshPublicKeysItem[];
}

export interface LinuxProfilePropertiesSshPublicKeysItem {
  /** KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers. */
  keyData?: string;
}

/** Additional features specs like Arc Agent Onboarding. */
export interface ProvisionedClustersCommonPropertiesFeatures {
  /** Arc agentry configuration for the provisioned cluster. */
  arcAgentProfile?: ArcAgentProfile;
}

/** Defines the Arc Agent properties for the Provisioned clusters. */
export interface ArcAgentProfile {
  /** Version of the Arc agents to be installed on the provisioned Provisioned cluster resource */
  agentVersion?: string;
  /** Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled. */
  agentAutoUpgrade?: AutoUpgradeOptions;
}

/** Addon configurations */
export interface AddonProfiles {
  /** Config - Key-value pairs for configuring an add-on. */
  config?: { [propertyName: string]: string };
  /** Enabled - Whether the add-on is enabled or not. */
  enabled?: boolean;
}

/** NodePool configuration */
export interface AgentPoolProfile {
  /** Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. */
  count?: number;
  /** AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones */
  availabilityZones?: string[];
  /** The maximum number of nodes for auto-scaling */
  maxCount?: number;
  /** The maximum number of pods that can run on a node. */
  maxPods?: number;
  /** The minimum number of nodes for auto-scaling */
  minCount?: number;
  /** Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User' */
  mode?: Mode;
  /** NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool. */
  nodeLabels?: { [propertyName: string]: string };
  /** NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. */
  nodeTaints?: string[];
  /** OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows' */
  osType?: OsType;
  /** The version of node image */
  nodeImageVersion?: string;
  /** VmSize - The size of the agent pool VMs. */
  vmSize?: string;
  /** The underlying cloud infra provider properties. */
  cloudProviderProfile?: CloudProviderProfile;
}

/** CloudProviderProfile - The underlying cloud infra provider properties. */
export interface CloudProviderProfile {
  /** InfraNetworkProfile - List of infra network profiles for the provisioned cluster */
  infraNetworkProfile?: CloudProviderProfileInfraNetworkProfile;
  /** InfraStorageProfile - List of infra storage profiles for the provisioned cluster */
  infraStorageProfile?: CloudProviderProfileInfraStorageProfile;
}

/** InfraNetworkProfile - List of infra network profiles for the provisioned cluster */
export interface CloudProviderProfileInfraNetworkProfile {
  /** Array of references to azure resource corresponding to the new HybridAKSNetwork object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName} */
  vnetSubnetIds?: string[];
}

/** InfraStorageProfile - List of infra storage profiles for the provisioned cluster */
export interface CloudProviderProfileInfraStorageProfile {
  /** Reference to azure resource corresponding to the new HybridAKSStorage object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/storageSpaces/{storageSpaceName} */
  storageSpaceIds?: string[];
}

/** AgentPool Name */
export interface AgentPoolName {
  /** Unique name of the agent pool profile in the context of the subscription and resource group. */
  name?: string;
}

/** controlPlaneEndpoint - API server endpoint for the control plane */
export interface ControlPlaneEndpointProfile {
  /** API server endpoint for the control plane */
  controlPlaneEndpoint?: ControlPlaneEndpointProfileControlPlaneEndpoint;
}

/** API server endpoint for the control plane */
export interface ControlPlaneEndpointProfileControlPlaneEndpoint {
  /** Host IP address for API server */
  hostIP?: string;
  /** Port for the API server */
  port?: string;
}

/** LinuxProfile - Profile for Linux VMs in the container service cluster. */
export interface LinuxProfile {
  /** Profile for Linux VMs in the container service cluster. */
  linuxProfile?: LinuxProfileProperties;
}

/** NetworkProfile - Profile of network configuration. */
export interface NetworkProfile {
  /** LoadBalancerProfile - Profile of the cluster load balancer. */
  loadBalancerProfile?: LoadBalancerProfile;
  /** LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'. */
  loadBalancerSku?: LoadBalancerSku;
  /** DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr. */
  dnsServiceIP?: string;
  /** NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico' */
  networkPolicy?: NetworkPolicy;
  /** PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used. */
  podCidr?: string;
  /** The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. */
  podCidrs?: string[];
  /** ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges. */
  serviceCidr?: string;
  /** The CIDR notation IP ranges from which to assign service cluster IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges. */
  serviceCidrs?: string[];
}

/** HybridAKSClusterStatus defines the observed state of HybridAKSCluster */
export interface ProvisionedClustersCommonPropertiesStatus {
  /** Additional features status like Arc Agent Onboarding. */
  featuresStatus?: ProvisionedClustersCommonPropertiesStatusFeaturesStatus;
  /** AddonStatus - Status of Addons */
  addonStatus?: { [propertyName: string]: AddonStatus };
  /** ErrorMessage - Error messages during creation of cluster */
  errorMessage?: string;
  /** Contains Provisioning errors */
  provisioningStatus?: ProvisionedClustersCommonPropertiesStatusProvisioningStatus;
}

/** Additional features status like Arc Agent Onboarding. */
export interface ProvisionedClustersCommonPropertiesStatusFeaturesStatus {
  /** Defines the observed Arc Agent status that is resourceSynced back to the ARM resource. */
  arcAgentStatus?: ArcAgentStatus;
}

/** Defines the observed Arc Agent status that is resourceSynced back to the ARM resource. */
export interface ArcAgentStatus {
  /** Observed deployment state of the Arc Agents on the target cluster. Possible values include: 'pending', 'provisioning', 'provisioned', 'deleting', 'failed', 'upgrading' */
  deploymentState?: DeploymentState;
  /** Error messages while onboarding/upgrading/uninstalling the Arc agents */
  errorMessage?: string;
  /** Onboarding public key for provisioning the Managed identity for the HybridAKS cluster. Will be used to create the hybridIdentityMetadata proxy resource and will not be persisted. */
  onboardingPublicKey?: string;
  /** Version of the Arc agents currently running on the Provisioned cluster resource. */
  agentVersion?: string;
  /** Number of CPU cores present in the Provisioned cluster resource */
  coreCount?: number;
  /** ManagedIdentity certificate expiration time (ValidUntil). */
  managedIdentityCertificateExpirationTime?: Date;
  /** Last connected timestamp of the Provisioned cluster resource. */
  lastConnectivityTime?: Date;
}

/** Status of the addon */
export interface AddonStatus {
  /** ErrorMessage will be set in the event that there is a terminal problem reconciling the AddOn and will contain a more verbose string suitable for logging and human consumption. */
  errorMessage?: string;
  /** Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc. */
  phase?: string;
  ready?: boolean;
}

/** Contains Provisioning errors */
export interface ProvisionedClustersCommonPropertiesStatusProvisioningStatus {
  error?: ProvisionedClustersCommonPropertiesStatusProvisioningStatusError;
  operationId?: string;
  /** Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc. */
  phase?: string;
  status?: string;
}

export interface ProvisionedClustersCommonPropertiesStatusProvisioningStatusError {
  code?: string;
  message?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

export interface ProvisionedClustersResponseExtendedLocation {
  /** The extended location type. */
  type?: string;
  /** The extended location name. */
  name?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Properties of provisioned clusters that contain secrets */
export interface ProvisionedClustersPropertiesWithSecrets {
  /** AAD profile for the provisioned cluster. */
  aadProfile?: AADProfile;
  /** WindowsProfile - Profile for Windows VMs in the Provisioned Cluster. */
  windowsProfile?: WindowsProfile;
  /** HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers. */
  httpProxyConfig?: HttpProxyConfig;
}

/** The server AAD application secret. */
export interface AADProfileSecret {
  /** The server AAD application secret. */
  serverAppSecret?: string;
}

/** Password for the Windows Profile to be used by the Windows VMs in the cluster */
export interface WindowsProfilePassword {
  /** AdminPassword - Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" */
  adminPassword?: string;
}

export interface HttpProxyConfigPassword {
  /** Password to use for connecting to proxy server */
  password?: string;
}

export interface ProvisionedClustersExtendedLocation {
  /** The extended location type. */
  type?: string;
  /** The extended location name. */
  name?: string;
}

/** The provisionedClusters resource patch definition. */
export interface ProvisionedClustersPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

export interface ProvisionedClustersResponseListResult {
  value?: ProvisionedClustersResponse[];
  nextLink?: string;
}

/** The list of available upgrade versions. */
export interface ProvisionedClusterPoolUpgradeProfile {
  /**
   * The Kubernetes version (major.minor.patch).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kubernetesVersion?: string;
  /**
   * The Agent Pool name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /** List of orchestrator types and versions available for upgrade. */
  upgrades?: ProvisionedClusterPoolUpgradeProfileProperties[];
}

/** The upgrade properties. */
export interface ProvisionedClusterPoolUpgradeProfileProperties {
  /**
   * The Kubernetes version (major.minor.patch).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kubernetesVersion?: string;
  /**
   * Whether the Kubernetes version is currently in preview.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isPreview?: boolean;
}

/** List of hybridIdentityMetadata. */
export interface HybridIdentityMetadataList {
  /** Url to follow for getting next page of hybridIdentityMetadata. */
  nextLink?: string;
  /** Array of hybridIdentityMetadata */
  value: HybridIdentityMetadata[];
}

/** The agentPool resource definition */
export interface AgentPool {
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource Type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The resource location */
  location?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  extendedLocation?: AgentPoolExtendedLocation;
  /** Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. */
  count?: number;
  /** AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones */
  availabilityZones?: string[];
  /** The maximum number of nodes for auto-scaling */
  maxCount?: number;
  /** The maximum number of pods that can run on a node. */
  maxPods?: number;
  /** The minimum number of nodes for auto-scaling */
  minCount?: number;
  /** Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User' */
  mode?: Mode;
  /** NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool. */
  nodeLabels?: { [propertyName: string]: string };
  /** NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. */
  nodeTaints?: string[];
  /** OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows' */
  osType?: OsType;
  /** The version of node image */
  nodeImageVersion?: string;
  /** VmSize - The size of the agent pool VMs. */
  vmSize?: string;
  /** The underlying cloud infra provider properties. */
  cloudProviderProfile?: CloudProviderProfile;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningState?: AgentPoolProvisioningState;
  /** HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool */
  status?: AgentPoolProvisioningStatusStatus;
}

/** The agentPool resource provisioning status definition */
export interface AgentPoolProvisioningStatus {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningState?: AgentPoolProvisioningState;
  /** HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool */
  status?: AgentPoolProvisioningStatusStatus;
}

/** HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool */
export interface AgentPoolProvisioningStatusStatus {
  /** ErrorMessage - Error messages during creation of cluster */
  errorMessage?: string;
  /** Contains Provisioning errors */
  provisioningStatus?: AgentPoolProvisioningStatusStatusProvisioningStatus;
  /** Total number of ready machines targeted by this deployment. */
  readyReplicas?: number;
  /** Total number of non-terminated machines targeted by this deployment */
  replicas?: number;
}

/** Contains Provisioning errors */
export interface AgentPoolProvisioningStatusStatusProvisioningStatus {
  error?: AgentPoolProvisioningStatusError;
  operationId?: string;
  /** Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc. */
  phase?: string;
  status?: string;
}

export interface AgentPoolProvisioningStatusError {
  code?: string;
  message?: string;
}

export interface AgentPoolExtendedLocation {
  /** The extended location type. */
  type?: string;
  /** The extended location name. */
  name?: string;
}

export interface AgentPoolListResult {
  value?: AgentPool[];
  nextLink?: string;
}

/** The list of versions for supported orchestrators. */
export interface OrchestratorVersionProfileListResult {
  /** Profile of the orchestrator versions */
  orchestrators?: OrchestratorVersionProfile[];
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource Type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The profile of an orchestrator and its available versions. */
export interface OrchestratorVersionProfile {
  /**
   * Whether Kubernetes version is currently in preview.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isPreview?: boolean;
  /**
   * Installed by default if version is not specified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly default?: boolean;
  /**
   * Orchestrator type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly orchestratorType?: string;
  /**
   * Orchestrator version major.minor.patch, for example 1.21.9
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly orchestratorVersion?: string;
  /** The list of available upgrade versions. */
  upgrades?: OrchestratorProfile[];
}

/** Contains information about orchestrator. */
export interface OrchestratorProfile {
  /**
   * Whether Kubernetes version is currently in preview.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isPreview?: boolean;
  /**
   * Orchestrator type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly orchestratorType?: string;
  /**
   * Orchestrator version (major, minor, patch).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly orchestratorVersion?: string;
}

/** The list of supported VM SKUs. */
export interface VMSkuListResult {
  /**
   * Supported VM SKUs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmSKUs?: string[];
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource Type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Results of the request to list operations. */
export interface ResourceProviderOperationList {
  value?: ResourceProviderOperation[];
  nextLink?: string;
}

/** Results of the request to list operations. */
export interface ResourceProviderOperation {
  /** Indicates whether the operation applies to data-plane. */
  isDataAction?: string;
  /** Operation name, in format of {provider}/{resource}/{operation} */
  name?: string;
  /** Display metadata associated with the operation. */
  display?: ResourceProviderOperationDisplay;
}

/** Display metadata associated with the operation. */
export interface ResourceProviderOperationDisplay {
  /** The resource provider. */
  provider?: string;
  /** Resource on which the operation is performed. */
  resource?: string;
  /** Type of operation: get, read, delete, etc. */
  operation?: string;
  /** Description of this operation. */
  description?: string;
}

/** HybridAKSStorageSpec defines the desired state of HybridAKSStorage */
export interface StorageSpacesProperties {
  hciStorageProfile?: StorageSpacesPropertiesHciStorageProfile;
  vmwareStorageProfile?: StorageSpacesPropertiesVmwareStorageProfile;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningState?: ProvisioningState;
  /** HybridAKSStorageStatus defines the observed state of HybridAKSStorage */
  status?: StorageSpacesPropertiesStatus;
}

export interface StorageSpacesPropertiesHciStorageProfile {
  /** Resource group in MOC(Microsoft On-premises Cloud) */
  mocGroup?: string;
  /** Location in MOC(Microsoft On-premises Cloud) */
  mocLocation?: string;
  /** Name of the storage container in MOC(Microsoft On-premises Cloud) */
  mocStorageContainer?: string;
}

export interface StorageSpacesPropertiesVmwareStorageProfile {
  /** Name of the datacenter in VSphere */
  datacenter?: string;
  /** Name of the datastore in VSphere */
  datastore?: string;
  /** Name of the folder in VSphere */
  folder?: string;
  /** Name of the resource pool in VSphere */
  resourcePool?: string;
}

/** HybridAKSStorageStatus defines the observed state of HybridAKSStorage */
export interface StorageSpacesPropertiesStatus {
  /** Contains Provisioning errors */
  provisioningStatus?: StorageSpacesPropertiesStatusProvisioningStatus;
}

/** Contains Provisioning errors */
export interface StorageSpacesPropertiesStatusProvisioningStatus {
  error?: StorageSpacesPropertiesStatusProvisioningStatusError;
  operationId?: string;
  /** Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc. */
  phase?: string;
  status?: string;
}

export interface StorageSpacesPropertiesStatusProvisioningStatusError {
  code?: string;
  message?: string;
}

export interface StorageSpacesExtendedLocation {
  /** The extended location type. */
  type?: string;
  /** The extended location name. */
  name?: string;
}

/** The storageSpaces resource patch definition. */
export interface StorageSpacesPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

export interface StorageSpacesListResult {
  value?: StorageSpaces[];
  nextLink?: string;
}

/** HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork */
export interface VirtualNetworksProperties {
  infraVnetProfile?: VirtualNetworksPropertiesInfraVnetProfile;
  /** Virtual IP Pool for Kubernetes */
  vipPool?: VirtualNetworksPropertiesVipPoolItem[];
  /** IP Pool for Virtual Machines */
  vmipPool?: VirtualNetworksPropertiesVmipPoolItem[];
  /**
   * Address of the DHCP servers associated with the network
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dhcpServers?: string[];
  /** Address of the DNS servers associated with the network */
  dnsServers?: string[];
  /** Address of the Gateway associated with the network */
  gateway?: string;
  /** IP Address Prefix of the network */
  ipAddressPrefix?: string;
  /**
   * VLAN Id used by the network
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vlanID?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningState?: ProvisioningState;
  /**
   * HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: VirtualNetworksPropertiesStatus;
}

export interface VirtualNetworksPropertiesInfraVnetProfile {
  /** Infra network profile for HCI platform */
  hci?: VirtualNetworksPropertiesInfraVnetProfileHci;
  /** Infra network profile for the NetworkCloud platform */
  networkCloud?: VirtualNetworksPropertiesInfraVnetProfileNetworkCloud;
  /** Infra network profile for VMware platform */
  vmware?: VirtualNetworksPropertiesInfraVnetProfileVmware;
}

/** Infra network profile for HCI platform */
export interface VirtualNetworksPropertiesInfraVnetProfileHci {
  /** Resource group in MOC(Microsoft On-premises Cloud) */
  mocGroup?: string;
  /** Location in MOC(Microsoft On-premises Cloud) */
  mocLocation?: string;
  /** Virtual Network name in MOC(Microsoft On-premises Cloud) */
  mocVnetName?: string;
}

/** Infra network profile for the NetworkCloud platform */
export interface VirtualNetworksPropertiesInfraVnetProfileNetworkCloud {
  /** The ARM ID of Network Cloud Network Resource to Associate with this VirtualNetwork */
  networkId?: string;
}

/** Infra network profile for VMware platform */
export interface VirtualNetworksPropertiesInfraVnetProfileVmware {
  /** Name of the network segment in VSphere */
  segmentName?: string;
}

export interface VirtualNetworksPropertiesVipPoolItem {
  /** Ending IP address for the IP Pool */
  endIP?: string;
  /** Starting IP address for the IP Pool */
  startIP?: string;
}

export interface VirtualNetworksPropertiesVmipPoolItem {
  /** Ending IP address for the IP Pool */
  endIP?: string;
  /** Starting IP address for the IP Pool */
  startIP?: string;
}

/** HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork */
export interface VirtualNetworksPropertiesStatus {
  /** Contains Provisioning errors */
  provisioningStatus?: VirtualNetworksPropertiesStatusProvisioningStatus;
}

/** Contains Provisioning errors */
export interface VirtualNetworksPropertiesStatusProvisioningStatus {
  error?: VirtualNetworksPropertiesStatusProvisioningStatusError;
  operationId?: string;
  /** Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc. */
  phase?: string;
  status?: string;
}

export interface VirtualNetworksPropertiesStatusProvisioningStatusError {
  code?: string;
  message?: string;
}

export interface VirtualNetworksExtendedLocation {
  /** The extended location type. */
  type?: string;
  /** The extended location name. */
  name?: string;
}

/** The virtualNetworks resource patch definition. */
export interface VirtualNetworksPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

export interface VirtualNetworksListResult {
  value?: VirtualNetworks[];
  nextLink?: string;
}

export interface ProvisionedClustersResponseProperties
  extends ProvisionedClustersPropertiesWithoutSecrets,
    ProvisionedClustersCommonProperties {}

/** AAD Profile specifies attributes for Azure Active Directory integration. */
export interface AADProfile extends AADProfileSecret, AADProfileResponse {}

/** WindowsProfile - Profile for Windows VMs in the container service cluster. */
export interface WindowsProfile
  extends WindowsProfileResponse,
    WindowsProfilePassword {}

/** Configurations for provisioning the cluster with HTTP proxy servers. */
export interface HttpProxyConfig
  extends HttpProxyConfigResponse,
    HttpProxyConfigPassword {}

/** All properties of the provisioned cluster */
export interface ProvisionedClustersAllProperties
  extends ProvisionedClustersPropertiesWithSecrets,
    ProvisionedClustersCommonProperties {}

/** Agent pool profile along with a name parameter */
export interface NamedAgentPoolProfile
  extends AgentPoolProfile,
    AgentPoolName {}

export interface AgentPoolProperties
  extends AgentPoolProfile,
    AgentPoolProvisioningStatus {}

/** ControlPlaneProfile - The control plane properties for the provisioned cluster. */
export interface ControlPlaneProfile
  extends NamedAgentPoolProfile,
    ControlPlaneEndpointProfile,
    LinuxProfile {}

/** LoadBalancerProfile - Profile of the cluster load balancer. */
export interface LoadBalancerProfile
  extends NamedAgentPoolProfile,
    LinuxProfile {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The provisionedClusters resource definition. */
export interface ProvisionedClustersResponse extends TrackedResource {
  /** Identity for the Provisioned cluster. */
  identity?: ProvisionedClusterIdentity;
  properties?: ProvisionedClustersResponseProperties;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  extendedLocation?: ProvisionedClustersResponseExtendedLocation;
}

/** The provisionedClusters resource definition. */
export interface ProvisionedClusters extends TrackedResource {
  /** Identity for the Provisioned cluster. */
  identity?: ProvisionedClusterIdentity;
  /** All properties of the provisioned cluster */
  properties?: ProvisionedClustersAllProperties;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  extendedLocation?: ProvisionedClustersExtendedLocation;
}

/** The storageSpaces resource definition. */
export interface StorageSpaces extends TrackedResource {
  /** HybridAKSStorageSpec defines the desired state of HybridAKSStorage */
  properties?: StorageSpacesProperties;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  extendedLocation?: StorageSpacesExtendedLocation;
}

/** The virtualNetworks resource definition. */
export interface VirtualNetworks extends TrackedResource {
  /** HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork */
  properties?: VirtualNetworksProperties;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  extendedLocation?: VirtualNetworksExtendedLocation;
}

/** The list of available upgrades for compute pools. */
export interface ProvisionedClusterUpgradeProfile extends ProxyResource {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningState?: string;
  /** The list of available upgrade versions for the control plane. */
  controlPlaneProfile: ProvisionedClusterPoolUpgradeProfile;
  /** The list of available upgrade versions for agent pools. */
  agentPoolProfiles: ProvisionedClusterPoolUpgradeProfile[];
}

/** Defines the hybridIdentityMetadata. */
export interface HybridIdentityMetadata extends ProxyResource {
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Unique id of the parent provisioned cluster resource. */
  resourceUid?: string;
  /** Onboarding public key for provisioning the Managed identity for the HybridAKS cluster. */
  publicKey?: string;
  /** The identity of the provisioned cluster. */
  identity?: ProvisionedClusterIdentity;
  /**
   * provisioning state of the hybridIdentityMetadata resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Known values of {@link LicenseType} that the service accepts. */
export enum KnownLicenseType {
  /** WindowsServer */
  WindowsServer = "Windows_Server",
  /** None */
  None = "None"
}

/**
 * Defines values for LicenseType. \
 * {@link KnownLicenseType} can be used interchangeably with LicenseType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows_Server** \
 * **None**
 */
export type LicenseType = string;

/** Known values of {@link AutoUpgradeOptions} that the service accepts. */
export enum KnownAutoUpgradeOptions {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for AutoUpgradeOptions. \
 * {@link KnownAutoUpgradeOptions} can be used interchangeably with AutoUpgradeOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type AutoUpgradeOptions = string;

/** Known values of {@link Mode} that the service accepts. */
export enum KnownMode {
  /** System */
  System = "System",
  /** LB */
  LB = "LB",
  /** User */
  User = "User"
}

/**
 * Defines values for Mode. \
 * {@link KnownMode} can be used interchangeably with Mode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **System** \
 * **LB** \
 * **User**
 */
export type Mode = string;

/** Known values of {@link OsType} that the service accepts. */
export enum KnownOsType {
  /** Linux */
  Linux = "Linux",
  /** Windows */
  Windows = "Windows"
}

/**
 * Defines values for OsType. \
 * {@link KnownOsType} can be used interchangeably with OsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Linux** \
 * **Windows**
 */
export type OsType = string;

/** Known values of {@link LoadBalancerSku} that the service accepts. */
export enum KnownLoadBalancerSku {
  /** UnstackedHaproxy */
  UnstackedHaproxy = "unstacked-haproxy",
  /** StackedKubeVip */
  StackedKubeVip = "stacked-kube-vip",
  /** StackedMetallb */
  StackedMetallb = "stacked-metallb",
  /** Unmanaged */
  Unmanaged = "unmanaged"
}

/**
 * Defines values for LoadBalancerSku. \
 * {@link KnownLoadBalancerSku} can be used interchangeably with LoadBalancerSku,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unstacked-haproxy** \
 * **stacked-kube-vip** \
 * **stacked-metallb** \
 * **unmanaged**
 */
export type LoadBalancerSku = string;

/** Known values of {@link NetworkPolicy} that the service accepts. */
export enum KnownNetworkPolicy {
  /** Calico */
  Calico = "calico",
  /** Flannel */
  Flannel = "flannel"
}

/**
 * Defines values for NetworkPolicy. \
 * {@link KnownNetworkPolicy} can be used interchangeably with NetworkPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **calico** \
 * **flannel**
 */
export type NetworkPolicy = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** InProgress */
  InProgress = "InProgress",
  /** Deleting */
  Deleting = "Deleting",
  /** Updating */
  Updating = "Updating",
  /** Accepted */
  Accepted = "Accepted",
  /** Created */
  Created = "Created"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **InProgress** \
 * **Deleting** \
 * **Updating** \
 * **Accepted** \
 * **Created**
 */
export type ProvisioningState = string;

/** Known values of {@link DeploymentState} that the service accepts. */
export enum KnownDeploymentState {
  /** Pending */
  Pending = "pending",
  /** Provisioning */
  Provisioning = "provisioning",
  /** Provisioned */
  Provisioned = "provisioned",
  /** Deleting */
  Deleting = "deleting",
  /** Failed */
  Failed = "failed",
  /** Upgrading */
  Upgrading = "upgrading"
}

/**
 * Defines values for DeploymentState. \
 * {@link KnownDeploymentState} can be used interchangeably with DeploymentState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **pending** \
 * **provisioning** \
 * **provisioned** \
 * **deleting** \
 * **failed** \
 * **upgrading**
 */
export type DeploymentState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link AgentPoolProvisioningState} that the service accepts. */
export enum KnownAgentPoolProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting",
  /** InProgress */
  InProgress = "InProgress",
  /** Canceled */
  Canceled = "Canceled"
}

/**
 * Defines values for AgentPoolProvisioningState. \
 * {@link KnownAgentPoolProvisioningState} can be used interchangeably with AgentPoolProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Deleting** \
 * **InProgress** \
 * **Canceled**
 */
export type AgentPoolProvisioningState = string;
/** Defines values for ResourceIdentityType. */
export type ResourceIdentityType = "None" | "SystemAssigned";

/** Optional parameters. */
export interface ProvisionedClustersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProvisionedClustersGetResponse = ProvisionedClustersResponse;

/** Optional parameters. */
export interface ProvisionedClustersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ProvisionedClustersCreateOrUpdateResponse = ProvisionedClustersResponse;

/** Optional parameters. */
export interface ProvisionedClustersDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ProvisionedClustersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ProvisionedClustersUpdateResponse = ProvisionedClustersResponse;

/** Optional parameters. */
export interface ProvisionedClustersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ProvisionedClustersListByResourceGroupResponse = ProvisionedClustersResponseListResult;

/** Optional parameters. */
export interface ProvisionedClustersListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ProvisionedClustersListBySubscriptionResponse = ProvisionedClustersResponseListResult;

/** Optional parameters. */
export interface ProvisionedClustersGetUpgradeProfileOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getUpgradeProfile operation. */
export type ProvisionedClustersGetUpgradeProfileResponse = ProvisionedClusterUpgradeProfile;

/** Optional parameters. */
export interface ProvisionedClustersUpgradeNodeImageVersionForEntireClusterOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ProvisionedClustersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ProvisionedClustersListByResourceGroupNextResponse = ProvisionedClustersResponseListResult;

/** Optional parameters. */
export interface ProvisionedClustersListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ProvisionedClustersListBySubscriptionNextResponse = ProvisionedClustersResponseListResult;

/** Optional parameters. */
export interface HybridIdentityMetadataPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the put operation. */
export type HybridIdentityMetadataPutResponse = HybridIdentityMetadata;

/** Optional parameters. */
export interface HybridIdentityMetadataGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type HybridIdentityMetadataGetResponse = HybridIdentityMetadata;

/** Optional parameters. */
export interface HybridIdentityMetadataDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface HybridIdentityMetadataListByClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCluster operation. */
export type HybridIdentityMetadataListByClusterResponse = HybridIdentityMetadataList;

/** Optional parameters. */
export interface HybridIdentityMetadataListByClusterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByClusterNext operation. */
export type HybridIdentityMetadataListByClusterNextResponse = HybridIdentityMetadataList;

/** Optional parameters. */
export interface AgentPoolGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AgentPoolGetResponse = AgentPool;

/** Optional parameters. */
export interface AgentPoolCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AgentPoolCreateOrUpdateResponse = AgentPool;

/** Optional parameters. */
export interface AgentPoolDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AgentPoolUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type AgentPoolUpdateResponse = AgentPool;

/** Optional parameters. */
export interface AgentPoolListByProvisionedClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProvisionedCluster operation. */
export type AgentPoolListByProvisionedClusterResponse = AgentPoolListResult;

/** Optional parameters. */
export interface HybridContainerServiceListOrchestratorsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listOrchestrators operation. */
export type HybridContainerServiceListOrchestratorsResponse = OrchestratorVersionProfileListResult;

/** Optional parameters. */
export interface HybridContainerServiceListVMSkusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVMSkus operation. */
export type HybridContainerServiceListVMSkusResponse = VMSkuListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = ResourceProviderOperationList;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = ResourceProviderOperationList;

/** Optional parameters. */
export interface StorageSpacesRetrieveOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the retrieve operation. */
export type StorageSpacesRetrieveResponse = StorageSpaces;

/** Optional parameters. */
export interface StorageSpacesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type StorageSpacesCreateOrUpdateResponse = StorageSpaces;

/** Optional parameters. */
export interface StorageSpacesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface StorageSpacesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type StorageSpacesUpdateResponse = StorageSpaces;

/** Optional parameters. */
export interface StorageSpacesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type StorageSpacesListByResourceGroupResponse = StorageSpacesListResult;

/** Optional parameters. */
export interface StorageSpacesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type StorageSpacesListBySubscriptionResponse = StorageSpacesListResult;

/** Optional parameters. */
export interface StorageSpacesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type StorageSpacesListByResourceGroupNextResponse = StorageSpacesListResult;

/** Optional parameters. */
export interface StorageSpacesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type StorageSpacesListBySubscriptionNextResponse = StorageSpacesListResult;

/** Optional parameters. */
export interface VirtualNetworksRetrieveOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the retrieve operation. */
export type VirtualNetworksRetrieveResponse = VirtualNetworks;

/** Optional parameters. */
export interface VirtualNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetworks;

/** Optional parameters. */
export interface VirtualNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VirtualNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualNetworksUpdateResponse = VirtualNetworks;

/** Optional parameters. */
export interface VirtualNetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VirtualNetworksListByResourceGroupResponse = VirtualNetworksListResult;

/** Optional parameters. */
export interface VirtualNetworksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type VirtualNetworksListBySubscriptionResponse = VirtualNetworksListResult;

/** Optional parameters. */
export interface VirtualNetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VirtualNetworksListByResourceGroupNextResponse = VirtualNetworksListResult;

/** Optional parameters. */
export interface VirtualNetworksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type VirtualNetworksListBySubscriptionNextResponse = VirtualNetworksListResult;

/** Optional parameters. */
export interface HybridContainerServiceClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
