/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ProvisionedClusterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterProperties",
    modelProperties: {
      linuxProfile: {
        serializedName: "linuxProfile",
        type: {
          name: "Composite",
          className: "LinuxProfileProperties"
        }
      },
      controlPlane: {
        serializedName: "controlPlane",
        type: {
          name: "Composite",
          className: "ControlPlaneProfile"
        }
      },
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      },
      networkProfile: {
        serializedName: "networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfile"
        }
      },
      agentPoolProfiles: {
        serializedName: "agentPoolProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamedAgentPoolProfile"
            }
          }
        }
      },
      cloudProviderProfile: {
        serializedName: "cloudProviderProfile",
        type: {
          name: "Composite",
          className: "CloudProviderProfile"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "ProvisionedClusterPropertiesStatus"
        }
      },
      licenseProfile: {
        serializedName: "licenseProfile",
        type: {
          name: "Composite",
          className: "ProvisionedClusterLicenseProfile"
        }
      }
    }
  }
};

export const LinuxProfileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxProfileProperties",
    modelProperties: {
      ssh: {
        serializedName: "ssh",
        type: {
          name: "Composite",
          className: "LinuxProfilePropertiesSsh"
        }
      }
    }
  }
};

export const LinuxProfilePropertiesSsh: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxProfilePropertiesSsh",
    modelProperties: {
      publicKeys: {
        serializedName: "publicKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LinuxProfilePropertiesSshPublicKeysItem"
            }
          }
        }
      }
    }
  }
};

export const LinuxProfilePropertiesSshPublicKeysItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxProfilePropertiesSshPublicKeysItem",
    modelProperties: {
      keyData: {
        serializedName: "keyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProfile",
    modelProperties: {
      availabilityZones: {
        serializedName: "availabilityZones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      osSKU: {
        serializedName: "osSKU",
        type: {
          name: "String"
        }
      },
      nodeImageVersion: {
        serializedName: "nodeImageVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolUpdateProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolUpdateProfile",
    modelProperties: {
      count: {
        defaultValue: 1,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolName",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ControlPlaneEndpointProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ControlPlaneEndpointProfile",
    modelProperties: {
      controlPlaneEndpoint: {
        serializedName: "controlPlaneEndpoint",
        type: {
          name: "Composite",
          className: "ControlPlaneEndpointProfileControlPlaneEndpoint"
        }
      }
    }
  }
};

export const ControlPlaneEndpointProfileControlPlaneEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ControlPlaneEndpointProfileControlPlaneEndpoint",
    modelProperties: {
      hostIP: {
        serializedName: "hostIP",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LinuxProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxProfile",
    modelProperties: {
      linuxProfile: {
        serializedName: "linuxProfile",
        type: {
          name: "Composite",
          className: "LinuxProfileProperties"
        }
      }
    }
  }
};

export const NetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfile",
    modelProperties: {
      loadBalancerProfile: {
        serializedName: "loadBalancerProfile",
        type: {
          name: "Composite",
          className: "NetworkProfileLoadBalancerProfile"
        }
      },
      networkPolicy: {
        defaultValue: "calico",
        serializedName: "networkPolicy",
        type: {
          name: "String"
        }
      },
      podCidr: {
        serializedName: "podCidr",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProfileLoadBalancerProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfileLoadBalancerProfile",
    modelProperties: {
      count: {
        defaultValue: 0,
        serializedName: "count",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CloudProviderProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudProviderProfile",
    modelProperties: {
      infraNetworkProfile: {
        serializedName: "infraNetworkProfile",
        type: {
          name: "Composite",
          className: "CloudProviderProfileInfraNetworkProfile"
        }
      }
    }
  }
};

export const CloudProviderProfileInfraNetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudProviderProfileInfraNetworkProfile",
    modelProperties: {
      vnetSubnetIds: {
        serializedName: "vnetSubnetIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ProvisionedClusterPropertiesStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterPropertiesStatus",
    modelProperties: {
      controlPlaneStatus: {
        serializedName: "controlPlaneStatus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AddonStatusProfile"
            }
          }
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      operationStatus: {
        serializedName: "operationStatus",
        type: {
          name: "Composite",
          className: "ProvisionedClusterPropertiesStatusOperationStatus"
        }
      }
    }
  }
};

export const AddonStatusProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddonStatusProfile",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      phase: {
        serializedName: "phase",
        type: {
          name: "String"
        }
      },
      ready: {
        serializedName: "ready",
        type: {
          name: "Boolean"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClusterPropertiesStatusOperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterPropertiesStatusOperationStatus",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ProvisionedClusterPropertiesStatusOperationStatusError"
        }
      },
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClusterPropertiesStatusOperationStatusError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterPropertiesStatusOperationStatusError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClusterLicenseProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterLicenseProfile",
    modelProperties: {
      azureHybridBenefit: {
        defaultValue: "NotApplicable",
        serializedName: "azureHybridBenefit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ProvisionedClustersListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProvisionedClusters"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClusterPoolUpgradeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterPoolUpgradeProfile",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      upgrades: {
        serializedName: "upgrades",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProvisionedClusterPoolUpgradeProfileProperties"
            }
          }
        }
      }
    }
  }
};

export const ProvisionedClusterPoolUpgradeProfileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterPoolUpgradeProfileProperties",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const HybridIdentityMetadataList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridIdentityMetadataList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridIdentityMetadata"
            }
          }
        }
      }
    }
  }
};

export const AgentPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPool",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      availabilityZones: {
        serializedName: "properties.availabilityZones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      osType: {
        serializedName: "properties.osType",
        type: {
          name: "String"
        }
      },
      osSKU: {
        serializedName: "properties.osSKU",
        type: {
          name: "String"
        }
      },
      nodeImageVersion: {
        serializedName: "properties.nodeImageVersion",
        type: {
          name: "String"
        }
      },
      count: {
        defaultValue: 1,
        serializedName: "properties.count",
        type: {
          name: "Number"
        }
      },
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "AgentPoolProvisioningStatusStatus"
        }
      }
    }
  }
};

export const AgentPoolProvisioningStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProvisioningStatus",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "AgentPoolProvisioningStatusStatus"
        }
      }
    }
  }
};

export const AgentPoolProvisioningStatusStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProvisioningStatusStatus",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      operationStatus: {
        serializedName: "operationStatus",
        type: {
          name: "Composite",
          className: "AgentPoolProvisioningStatusOperationStatus"
        }
      },
      readyReplicas: {
        serializedName: "readyReplicas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentPoolUpdateProfile"
            }
          }
        }
      }
    }
  }
};

export const AgentPoolProvisioningStatusOperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProvisioningStatusOperationStatus",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "AgentPoolProvisioningStatusOperationStatusError"
        }
      },
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolProvisioningStatusOperationStatusError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProvisioningStatusOperationStatusError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AgentPoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentPool"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListCredentialResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListCredentialResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ListCredentialResponseError"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ListCredentialResponseProperties"
        }
      }
    }
  }
};

export const ListCredentialResponseError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListCredentialResponseError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListCredentialResponseProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListCredentialResponseProperties",
    modelProperties: {
      kubeconfigs: {
        serializedName: "kubeconfigs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CredentialResult"
            }
          }
        }
      }
    }
  }
};

export const CredentialResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CredentialResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const KubernetesVersionProfileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesVersionProfileProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KubernetesVersionProperties"
            }
          }
        }
      }
    }
  }
};

export const KubernetesVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesVersionProperties",
    modelProperties: {
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Composite",
          className: "KubernetesVersionCapabilities"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      patchVersions: {
        serializedName: "patchVersions",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "KubernetesPatchVersions" }
          }
        }
      }
    }
  }
};

export const KubernetesVersionCapabilities: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesVersionCapabilities",
    modelProperties: {
      supportPlan: {
        serializedName: "supportPlan",
        type: {
          name: "Sequence",
          element: {
            defaultValue: "KubernetesOfficial",
            isConstant: true,
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const KubernetesPatchVersions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesPatchVersions",
    modelProperties: {
      readiness: {
        serializedName: "readiness",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KubernetesVersionReadiness"
            }
          }
        }
      },
      upgrades: {
        serializedName: "upgrades",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const KubernetesVersionReadiness: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesVersionReadiness",
    modelProperties: {
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osSku: {
        serializedName: "osSku",
        type: {
          name: "String"
        }
      },
      ready: {
        serializedName: "ready",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesVersionProfileList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesVersionProfileList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KubernetesVersionProfile"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmSkuProfileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmSkuProfileProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VmSkuProperties"
            }
          }
        }
      }
    }
  }
};

export const VmSkuProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmSkuProperties",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VmSkuCapabilities"
            }
          }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmSkuCapabilities: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmSkuCapabilities",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmSkuProfileList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmSkuProfileList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VmSkuProfile"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkProperties",
    modelProperties: {
      infraVnetProfile: {
        serializedName: "infraVnetProfile",
        type: {
          name: "Composite",
          className: "VirtualNetworkPropertiesInfraVnetProfile"
        }
      },
      vipPool: {
        serializedName: "vipPool",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkPropertiesVipPoolItem"
            }
          }
        }
      },
      vmipPool: {
        serializedName: "vmipPool",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkPropertiesVmipPoolItem"
            }
          }
        }
      },
      dhcpServers: {
        serializedName: "dhcpServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      gateway: {
        serializedName: "gateway",
        type: {
          name: "String"
        }
      },
      ipAddressPrefix: {
        serializedName: "ipAddressPrefix",
        type: {
          name: "String"
        }
      },
      vlanID: {
        serializedName: "vlanID",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "VirtualNetworkPropertiesStatus"
        }
      }
    }
  }
};

export const VirtualNetworkPropertiesInfraVnetProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkPropertiesInfraVnetProfile",
    modelProperties: {
      hci: {
        serializedName: "hci",
        type: {
          name: "Composite",
          className: "VirtualNetworkPropertiesInfraVnetProfileHci"
        }
      },
      vmware: {
        serializedName: "vmware",
        type: {
          name: "Composite",
          className: "VirtualNetworkPropertiesInfraVnetProfileVmware"
        }
      }
    }
  }
};

export const VirtualNetworkPropertiesInfraVnetProfileHci: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkPropertiesInfraVnetProfileHci",
    modelProperties: {
      mocGroup: {
        serializedName: "mocGroup",
        type: {
          name: "String"
        }
      },
      mocLocation: {
        serializedName: "mocLocation",
        type: {
          name: "String"
        }
      },
      mocVnetName: {
        serializedName: "mocVnetName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkPropertiesInfraVnetProfileVmware: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkPropertiesInfraVnetProfileVmware",
    modelProperties: {
      segmentName: {
        serializedName: "segmentName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkPropertiesVipPoolItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkPropertiesVipPoolItem",
    modelProperties: {
      endIP: {
        serializedName: "endIP",
        type: {
          name: "String"
        }
      },
      startIP: {
        serializedName: "startIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkPropertiesVmipPoolItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkPropertiesVmipPoolItem",
    modelProperties: {
      endIP: {
        serializedName: "endIP",
        type: {
          name: "String"
        }
      },
      startIP: {
        serializedName: "startIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkPropertiesStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkPropertiesStatus",
    modelProperties: {
      operationStatus: {
        serializedName: "operationStatus",
        type: {
          name: "Composite",
          className: "VirtualNetworkPropertiesStatusOperationStatus"
        }
      }
    }
  }
};

export const VirtualNetworkPropertiesStatusOperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkPropertiesStatusOperationStatus",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "VirtualNetworkPropertiesStatusOperationStatusError"
        }
      },
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      phase: {
        serializedName: "phase",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkPropertiesStatusOperationStatusError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkPropertiesStatusOperationStatusError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualNetworksListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NamedAgentPoolProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NamedAgentPoolProfile",
    modelProperties: {
      ...AgentPoolProfile.type.modelProperties,
      ...AgentPoolUpdateProfile.type.modelProperties,
      ...AgentPoolName.type.modelProperties
    }
  }
};

export const AgentPoolProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProperties",
    modelProperties: {
      ...AgentPoolProfile.type.modelProperties,
      ...AgentPoolUpdateProfile.type.modelProperties,
      ...AgentPoolProvisioningStatus.type.modelProperties
    }
  }
};

export const ControlPlaneProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ControlPlaneProfile",
    modelProperties: {
      ...NamedAgentPoolProfile.type.modelProperties,
      ...ControlPlaneEndpointProfile.type.modelProperties,
      ...LinuxProfile.type.modelProperties
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClusters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusters",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProvisionedClusterProperties"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      }
    }
  }
};

export const ProvisionedClusterUpgradeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterUpgradeProfile",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlPlaneProfile: {
        serializedName: "properties.controlPlaneProfile",
        type: {
          name: "Composite",
          className: "ProvisionedClusterPoolUpgradeProfile"
        }
      },
      agentPoolProfiles: {
        serializedName: "properties.agentPoolProfiles",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProvisionedClusterPoolUpgradeProfile"
            }
          }
        }
      }
    }
  }
};

export const HybridIdentityMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridIdentityMetadata",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      resourceUid: {
        serializedName: "properties.resourceUid",
        type: {
          name: "String"
        }
      },
      publicKey: {
        serializedName: "properties.publicKey",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesVersionProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesVersionProfile",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "KubernetesVersionProfileProperties"
        }
      }
    }
  }
};

export const VmSkuProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmSkuProfile",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VmSkuProfileProperties"
        }
      }
    }
  }
};

export const VirtualNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetwork",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VirtualNetworkProperties"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "VirtualNetworkExtendedLocation"
        }
      }
    }
  }
};

export const ProvisionedClusterInstancesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterInstancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClusterInstancesListUserKubeconfigHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterInstancesListUserKubeconfigHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClusterInstancesListAdminKubeconfigHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterInstancesListAdminKubeconfigHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridIdentityMetadataDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridIdentityMetadataDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridContainerServiceClientDeleteKubernetesVersionsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridContainerServiceClientDeleteKubernetesVersionsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridContainerServiceClientDeleteVMSkusHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridContainerServiceClientDeleteVMSkusHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};
