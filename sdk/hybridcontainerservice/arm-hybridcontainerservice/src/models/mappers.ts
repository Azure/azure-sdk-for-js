/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ProvisionedClusterIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["None", "SystemAssigned"]
        }
      }
    }
  }
};

export const ProvisionedClustersPropertiesWithoutSecrets: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersPropertiesWithoutSecrets",
    modelProperties: {
      aadProfile: {
        serializedName: "aadProfile",
        type: {
          name: "Composite",
          className: "AADProfileResponse"
        }
      },
      windowsProfile: {
        serializedName: "windowsProfile",
        type: {
          name: "Composite",
          className: "WindowsProfileResponse"
        }
      },
      httpProxyConfig: {
        serializedName: "httpProxyConfig",
        type: {
          name: "Composite",
          className: "HttpProxyConfigResponse"
        }
      }
    }
  }
};

export const AADProfileResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AADProfileResponse",
    modelProperties: {
      adminGroupObjectIDs: {
        serializedName: "adminGroupObjectIDs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      clientAppID: {
        serializedName: "clientAppID",
        type: {
          name: "String"
        }
      },
      enableAzureRbac: {
        serializedName: "enableAzureRbac",
        type: {
          name: "Boolean"
        }
      },
      managed: {
        serializedName: "managed",
        type: {
          name: "Boolean"
        }
      },
      serverAppID: {
        serializedName: "serverAppID",
        type: {
          name: "String"
        }
      },
      tenantID: {
        serializedName: "tenantID",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsProfileResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsProfileResponse",
    modelProperties: {
      adminUsername: {
        serializedName: "adminUsername",
        type: {
          name: "String"
        }
      },
      enableCsiProxy: {
        serializedName: "enableCsiProxy",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpProxyConfigResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpProxyConfigResponse",
    modelProperties: {
      httpProxy: {
        serializedName: "httpProxy",
        type: {
          name: "String"
        }
      },
      httpsProxy: {
        serializedName: "httpsProxy",
        type: {
          name: "String"
        }
      },
      noProxy: {
        serializedName: "noProxy",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      trustedCa: {
        serializedName: "trustedCa",
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClustersCommonProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersCommonProperties",
    modelProperties: {
      enableRbac: {
        serializedName: "enableRbac",
        type: {
          name: "Boolean"
        }
      },
      linuxProfile: {
        serializedName: "linuxProfile",
        type: {
          name: "Composite",
          className: "LinuxProfileProperties"
        }
      },
      features: {
        serializedName: "features",
        type: {
          name: "Composite",
          className: "ProvisionedClustersCommonPropertiesFeatures"
        }
      },
      addonProfiles: {
        serializedName: "addonProfiles",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "AddonProfiles" } }
        }
      },
      controlPlane: {
        serializedName: "controlPlane",
        type: {
          name: "Composite",
          className: "ControlPlaneProfile"
        }
      },
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      },
      networkProfile: {
        serializedName: "networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfile"
        }
      },
      nodeResourceGroup: {
        serializedName: "nodeResourceGroup",
        type: {
          name: "String"
        }
      },
      agentPoolProfiles: {
        serializedName: "agentPoolProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamedAgentPoolProfile"
            }
          }
        }
      },
      cloudProviderProfile: {
        serializedName: "cloudProviderProfile",
        type: {
          name: "Composite",
          className: "CloudProviderProfile"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "ProvisionedClustersCommonPropertiesStatus"
        }
      }
    }
  }
};

export const LinuxProfileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxProfileProperties",
    modelProperties: {
      adminUsername: {
        serializedName: "adminUsername",
        type: {
          name: "String"
        }
      },
      ssh: {
        serializedName: "ssh",
        type: {
          name: "Composite",
          className: "LinuxProfilePropertiesSsh"
        }
      }
    }
  }
};

export const LinuxProfilePropertiesSsh: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxProfilePropertiesSsh",
    modelProperties: {
      publicKeys: {
        serializedName: "publicKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LinuxProfilePropertiesSshPublicKeysItem"
            }
          }
        }
      }
    }
  }
};

export const LinuxProfilePropertiesSshPublicKeysItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxProfilePropertiesSshPublicKeysItem",
    modelProperties: {
      keyData: {
        serializedName: "keyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClustersCommonPropertiesFeatures: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersCommonPropertiesFeatures",
    modelProperties: {
      arcAgentProfile: {
        serializedName: "arcAgentProfile",
        type: {
          name: "Composite",
          className: "ArcAgentProfile"
        }
      }
    }
  }
};

export const ArcAgentProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArcAgentProfile",
    modelProperties: {
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      agentAutoUpgrade: {
        defaultValue: "Enabled",
        serializedName: "agentAutoUpgrade",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddonProfiles: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddonProfiles",
    modelProperties: {
      config: {
        serializedName: "config",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AgentPoolProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProfile",
    modelProperties: {
      count: {
        defaultValue: 1,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      availabilityZones: {
        serializedName: "availabilityZones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      maxCount: {
        serializedName: "maxCount",
        type: {
          name: "Number"
        }
      },
      maxPods: {
        serializedName: "maxPods",
        type: {
          name: "Number"
        }
      },
      minCount: {
        serializedName: "minCount",
        type: {
          name: "Number"
        }
      },
      mode: {
        defaultValue: "User",
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      nodeLabels: {
        serializedName: "nodeLabels",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      nodeTaints: {
        serializedName: "nodeTaints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      osType: {
        defaultValue: "Linux",
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      nodeImageVersion: {
        serializedName: "nodeImageVersion",
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      cloudProviderProfile: {
        serializedName: "cloudProviderProfile",
        type: {
          name: "Composite",
          className: "CloudProviderProfile"
        }
      }
    }
  }
};

export const CloudProviderProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudProviderProfile",
    modelProperties: {
      infraNetworkProfile: {
        serializedName: "infraNetworkProfile",
        type: {
          name: "Composite",
          className: "CloudProviderProfileInfraNetworkProfile"
        }
      },
      infraStorageProfile: {
        serializedName: "infraStorageProfile",
        type: {
          name: "Composite",
          className: "CloudProviderProfileInfraStorageProfile"
        }
      }
    }
  }
};

export const CloudProviderProfileInfraNetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudProviderProfileInfraNetworkProfile",
    modelProperties: {
      vnetSubnetIds: {
        serializedName: "vnetSubnetIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CloudProviderProfileInfraStorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudProviderProfileInfraStorageProfile",
    modelProperties: {
      storageSpaceIds: {
        serializedName: "storageSpaceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AgentPoolName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolName",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ControlPlaneEndpointProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ControlPlaneEndpointProfile",
    modelProperties: {
      controlPlaneEndpoint: {
        serializedName: "controlPlaneEndpoint",
        type: {
          name: "Composite",
          className: "ControlPlaneEndpointProfileControlPlaneEndpoint"
        }
      }
    }
  }
};

export const ControlPlaneEndpointProfileControlPlaneEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ControlPlaneEndpointProfileControlPlaneEndpoint",
    modelProperties: {
      hostIP: {
        serializedName: "hostIP",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LinuxProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxProfile",
    modelProperties: {
      linuxProfile: {
        serializedName: "linuxProfile",
        type: {
          name: "Composite",
          className: "LinuxProfileProperties"
        }
      }
    }
  }
};

export const NetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfile",
    modelProperties: {
      loadBalancerProfile: {
        serializedName: "loadBalancerProfile",
        type: {
          name: "Composite",
          className: "LoadBalancerProfile"
        }
      },
      loadBalancerSku: {
        defaultValue: "unmanaged",
        serializedName: "loadBalancerSku",
        type: {
          name: "String"
        }
      },
      dnsServiceIP: {
        serializedName: "dnsServiceIP",
        type: {
          name: "String"
        }
      },
      networkPolicy: {
        defaultValue: "calico",
        serializedName: "networkPolicy",
        type: {
          name: "String"
        }
      },
      podCidr: {
        serializedName: "podCidr",
        type: {
          name: "String"
        }
      },
      podCidrs: {
        serializedName: "podCidrs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      serviceCidr: {
        serializedName: "serviceCidr",
        type: {
          name: "String"
        }
      },
      serviceCidrs: {
        serializedName: "serviceCidrs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ProvisionedClustersCommonPropertiesStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersCommonPropertiesStatus",
    modelProperties: {
      featuresStatus: {
        serializedName: "featuresStatus",
        type: {
          name: "Composite",
          className: "ProvisionedClustersCommonPropertiesStatusFeaturesStatus"
        }
      },
      addonStatus: {
        serializedName: "addonStatus",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "AddonStatus" } }
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      provisioningStatus: {
        serializedName: "provisioningStatus",
        type: {
          name: "Composite",
          className:
            "ProvisionedClustersCommonPropertiesStatusProvisioningStatus"
        }
      }
    }
  }
};

export const ProvisionedClustersCommonPropertiesStatusFeaturesStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersCommonPropertiesStatusFeaturesStatus",
    modelProperties: {
      arcAgentStatus: {
        serializedName: "arcAgentStatus",
        type: {
          name: "Composite",
          className: "ArcAgentStatus"
        }
      }
    }
  }
};

export const ArcAgentStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArcAgentStatus",
    modelProperties: {
      deploymentState: {
        serializedName: "deploymentState",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      onboardingPublicKey: {
        serializedName: "onboardingPublicKey",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      coreCount: {
        serializedName: "coreCount",
        type: {
          name: "Number"
        }
      },
      managedIdentityCertificateExpirationTime: {
        serializedName: "managedIdentityCertificateExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      lastConnectivityTime: {
        serializedName: "lastConnectivityTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AddonStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddonStatus",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      phase: {
        serializedName: "phase",
        type: {
          name: "String"
        }
      },
      ready: {
        serializedName: "ready",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ProvisionedClustersCommonPropertiesStatusProvisioningStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersCommonPropertiesStatusProvisioningStatus",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className:
            "ProvisionedClustersCommonPropertiesStatusProvisioningStatusError"
        }
      },
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      phase: {
        serializedName: "phase",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClustersCommonPropertiesStatusProvisioningStatusError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "ProvisionedClustersCommonPropertiesStatusProvisioningStatusError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ProvisionedClustersResponseExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersResponseExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ProvisionedClustersPropertiesWithSecrets: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersPropertiesWithSecrets",
    modelProperties: {
      aadProfile: {
        serializedName: "aadProfile",
        type: {
          name: "Composite",
          className: "AADProfile"
        }
      },
      windowsProfile: {
        serializedName: "windowsProfile",
        type: {
          name: "Composite",
          className: "WindowsProfile"
        }
      },
      httpProxyConfig: {
        serializedName: "httpProxyConfig",
        type: {
          name: "Composite",
          className: "HttpProxyConfig"
        }
      }
    }
  }
};

export const AADProfileSecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AADProfileSecret",
    modelProperties: {
      serverAppSecret: {
        serializedName: "serverAppSecret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsProfilePassword: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsProfilePassword",
    modelProperties: {
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpProxyConfigPassword: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpProxyConfigPassword",
    modelProperties: {
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClustersExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClustersPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ProvisionedClustersResponseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersResponseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProvisionedClustersResponse"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClusterPoolUpgradeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterPoolUpgradeProfile",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        defaultValue: "Linux",
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      upgrades: {
        serializedName: "upgrades",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProvisionedClusterPoolUpgradeProfileProperties"
            }
          }
        }
      }
    }
  }
};

export const ProvisionedClusterPoolUpgradeProfileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterPoolUpgradeProfileProperties",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const HybridIdentityMetadataList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridIdentityMetadataList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridIdentityMetadata"
            }
          }
        }
      }
    }
  }
};

export const AgentPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPool",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "AgentPoolExtendedLocation"
        }
      },
      count: {
        defaultValue: 1,
        serializedName: "properties.count",
        type: {
          name: "Number"
        }
      },
      availabilityZones: {
        serializedName: "properties.availabilityZones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      maxCount: {
        serializedName: "properties.maxCount",
        type: {
          name: "Number"
        }
      },
      maxPods: {
        serializedName: "properties.maxPods",
        type: {
          name: "Number"
        }
      },
      minCount: {
        serializedName: "properties.minCount",
        type: {
          name: "Number"
        }
      },
      mode: {
        defaultValue: "User",
        serializedName: "properties.mode",
        type: {
          name: "String"
        }
      },
      nodeLabels: {
        serializedName: "properties.nodeLabels",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      nodeTaints: {
        serializedName: "properties.nodeTaints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      osType: {
        defaultValue: "Linux",
        serializedName: "properties.osType",
        type: {
          name: "String"
        }
      },
      nodeImageVersion: {
        serializedName: "properties.nodeImageVersion",
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      },
      cloudProviderProfile: {
        serializedName: "properties.cloudProviderProfile",
        type: {
          name: "Composite",
          className: "CloudProviderProfile"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "AgentPoolProvisioningStatusStatus"
        }
      }
    }
  }
};

export const AgentPoolProvisioningStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProvisioningStatus",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "AgentPoolProvisioningStatusStatus"
        }
      }
    }
  }
};

export const AgentPoolProvisioningStatusStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProvisioningStatusStatus",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      provisioningStatus: {
        serializedName: "provisioningStatus",
        type: {
          name: "Composite",
          className: "AgentPoolProvisioningStatusStatusProvisioningStatus"
        }
      },
      readyReplicas: {
        serializedName: "readyReplicas",
        type: {
          name: "Number"
        }
      },
      replicas: {
        serializedName: "replicas",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AgentPoolProvisioningStatusStatusProvisioningStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProvisioningStatusStatusProvisioningStatus",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "AgentPoolProvisioningStatusError"
        }
      },
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      phase: {
        serializedName: "phase",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolProvisioningStatusError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProvisioningStatusError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentPool"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OrchestratorVersionProfileListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OrchestratorVersionProfileListResult",
    modelProperties: {
      orchestrators: {
        serializedName: "orchestrators",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OrchestratorVersionProfile"
            }
          }
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OrchestratorVersionProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OrchestratorVersionProfile",
    modelProperties: {
      isPreview: {
        serializedName: "isPreview",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      default: {
        serializedName: "default",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      orchestratorType: {
        serializedName: "orchestratorType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      orchestratorVersion: {
        serializedName: "orchestratorVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      upgrades: {
        serializedName: "upgrades",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OrchestratorProfile"
            }
          }
        }
      }
    }
  }
};

export const OrchestratorProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OrchestratorProfile",
    modelProperties: {
      isPreview: {
        serializedName: "isPreview",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      orchestratorType: {
        serializedName: "orchestratorType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      orchestratorVersion: {
        serializedName: "orchestratorVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMSkuListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMSkuListResult",
    modelProperties: {
      vmSKUs: {
        serializedName: "vmSKUs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceProviderOperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceProviderOperation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceProviderOperation",
    modelProperties: {
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplay"
        }
      }
    }
  }
};

export const ResourceProviderOperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSpacesProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSpacesProperties",
    modelProperties: {
      hciStorageProfile: {
        serializedName: "hciStorageProfile",
        type: {
          name: "Composite",
          className: "StorageSpacesPropertiesHciStorageProfile"
        }
      },
      vmwareStorageProfile: {
        serializedName: "vmwareStorageProfile",
        type: {
          name: "Composite",
          className: "StorageSpacesPropertiesVmwareStorageProfile"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "StorageSpacesPropertiesStatus"
        }
      }
    }
  }
};

export const StorageSpacesPropertiesHciStorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSpacesPropertiesHciStorageProfile",
    modelProperties: {
      mocGroup: {
        serializedName: "mocGroup",
        type: {
          name: "String"
        }
      },
      mocLocation: {
        serializedName: "mocLocation",
        type: {
          name: "String"
        }
      },
      mocStorageContainer: {
        serializedName: "mocStorageContainer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSpacesPropertiesVmwareStorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSpacesPropertiesVmwareStorageProfile",
    modelProperties: {
      datacenter: {
        serializedName: "datacenter",
        type: {
          name: "String"
        }
      },
      datastore: {
        serializedName: "datastore",
        type: {
          name: "String"
        }
      },
      folder: {
        serializedName: "folder",
        type: {
          name: "String"
        }
      },
      resourcePool: {
        serializedName: "resourcePool",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSpacesPropertiesStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSpacesPropertiesStatus",
    modelProperties: {
      provisioningStatus: {
        serializedName: "provisioningStatus",
        type: {
          name: "Composite",
          className: "StorageSpacesPropertiesStatusProvisioningStatus"
        }
      }
    }
  }
};

export const StorageSpacesPropertiesStatusProvisioningStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSpacesPropertiesStatusProvisioningStatus",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "StorageSpacesPropertiesStatusProvisioningStatusError"
        }
      },
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      phase: {
        serializedName: "phase",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSpacesPropertiesStatusProvisioningStatusError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSpacesPropertiesStatusProvisioningStatusError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSpacesExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSpacesExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSpacesPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSpacesPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const StorageSpacesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSpacesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageSpaces"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksProperties",
    modelProperties: {
      infraVnetProfile: {
        serializedName: "infraVnetProfile",
        type: {
          name: "Composite",
          className: "VirtualNetworksPropertiesInfraVnetProfile"
        }
      },
      vipPool: {
        serializedName: "vipPool",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworksPropertiesVipPoolItem"
            }
          }
        }
      },
      vmipPool: {
        serializedName: "vmipPool",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworksPropertiesVmipPoolItem"
            }
          }
        }
      },
      dhcpServers: {
        serializedName: "dhcpServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      gateway: {
        serializedName: "gateway",
        type: {
          name: "String"
        }
      },
      ipAddressPrefix: {
        serializedName: "ipAddressPrefix",
        type: {
          name: "String"
        }
      },
      vlanID: {
        serializedName: "vlanID",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "VirtualNetworksPropertiesStatus"
        }
      }
    }
  }
};

export const VirtualNetworksPropertiesInfraVnetProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPropertiesInfraVnetProfile",
    modelProperties: {
      hci: {
        serializedName: "hci",
        type: {
          name: "Composite",
          className: "VirtualNetworksPropertiesInfraVnetProfileHci"
        }
      },
      networkCloud: {
        serializedName: "networkCloud",
        type: {
          name: "Composite",
          className: "VirtualNetworksPropertiesInfraVnetProfileNetworkCloud"
        }
      },
      vmware: {
        serializedName: "vmware",
        type: {
          name: "Composite",
          className: "VirtualNetworksPropertiesInfraVnetProfileVmware"
        }
      }
    }
  }
};

export const VirtualNetworksPropertiesInfraVnetProfileHci: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPropertiesInfraVnetProfileHci",
    modelProperties: {
      mocGroup: {
        serializedName: "mocGroup",
        type: {
          name: "String"
        }
      },
      mocLocation: {
        serializedName: "mocLocation",
        type: {
          name: "String"
        }
      },
      mocVnetName: {
        serializedName: "mocVnetName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksPropertiesInfraVnetProfileNetworkCloud: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPropertiesInfraVnetProfileNetworkCloud",
    modelProperties: {
      networkId: {
        serializedName: "networkId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksPropertiesInfraVnetProfileVmware: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPropertiesInfraVnetProfileVmware",
    modelProperties: {
      segmentName: {
        serializedName: "segmentName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksPropertiesVipPoolItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPropertiesVipPoolItem",
    modelProperties: {
      endIP: {
        serializedName: "endIP",
        type: {
          name: "String"
        }
      },
      startIP: {
        serializedName: "startIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksPropertiesVmipPoolItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPropertiesVmipPoolItem",
    modelProperties: {
      endIP: {
        serializedName: "endIP",
        type: {
          name: "String"
        }
      },
      startIP: {
        serializedName: "startIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksPropertiesStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPropertiesStatus",
    modelProperties: {
      provisioningStatus: {
        serializedName: "provisioningStatus",
        type: {
          name: "Composite",
          className: "VirtualNetworksPropertiesStatusProvisioningStatus"
        }
      }
    }
  }
};

export const VirtualNetworksPropertiesStatusProvisioningStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPropertiesStatusProvisioningStatus",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "VirtualNetworksPropertiesStatusProvisioningStatusError"
        }
      },
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      phase: {
        serializedName: "phase",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksPropertiesStatusProvisioningStatusError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPropertiesStatusProvisioningStatusError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualNetworksListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworks"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedClustersResponseProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersResponseProperties",
    modelProperties: {
      ...ProvisionedClustersPropertiesWithoutSecrets.type.modelProperties,
      ...ProvisionedClustersCommonProperties.type.modelProperties
    }
  }
};

export const AADProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AADProfile",
    modelProperties: {
      ...AADProfileSecret.type.modelProperties,
      ...AADProfileResponse.type.modelProperties
    }
  }
};

export const WindowsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsProfile",
    modelProperties: {
      ...WindowsProfileResponse.type.modelProperties,
      ...WindowsProfilePassword.type.modelProperties
    }
  }
};

export const HttpProxyConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpProxyConfig",
    modelProperties: {
      ...HttpProxyConfigResponse.type.modelProperties,
      ...HttpProxyConfigPassword.type.modelProperties
    }
  }
};

export const ProvisionedClustersAllProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersAllProperties",
    modelProperties: {
      ...ProvisionedClustersPropertiesWithSecrets.type.modelProperties,
      ...ProvisionedClustersCommonProperties.type.modelProperties
    }
  }
};

export const NamedAgentPoolProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NamedAgentPoolProfile",
    modelProperties: {
      ...AgentPoolProfile.type.modelProperties,
      ...AgentPoolName.type.modelProperties
    }
  }
};

export const AgentPoolProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolProperties",
    modelProperties: {
      ...AgentPoolProfile.type.modelProperties,
      ...AgentPoolProvisioningStatus.type.modelProperties
    }
  }
};

export const ControlPlaneProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ControlPlaneProfile",
    modelProperties: {
      ...NamedAgentPoolProfile.type.modelProperties,
      ...ControlPlaneEndpointProfile.type.modelProperties,
      ...LinuxProfile.type.modelProperties
    }
  }
};

export const LoadBalancerProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerProfile",
    modelProperties: {
      ...NamedAgentPoolProfile.type.modelProperties,
      ...LinuxProfile.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ProvisionedClustersResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClustersResponse",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ProvisionedClusterIdentity"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProvisionedClustersResponseProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ProvisionedClustersResponseExtendedLocation"
        }
      }
    }
  }
};

export const ProvisionedClusters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusters",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ProvisionedClusterIdentity"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProvisionedClustersAllProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ProvisionedClustersExtendedLocation"
        }
      }
    }
  }
};

export const StorageSpaces: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSpaces",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageSpacesProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "StorageSpacesExtendedLocation"
        }
      }
    }
  }
};

export const VirtualNetworks: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworks",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VirtualNetworksProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "VirtualNetworksExtendedLocation"
        }
      }
    }
  }
};

export const ProvisionedClusterUpgradeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedClusterUpgradeProfile",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlPlaneProfile: {
        serializedName: "properties.controlPlaneProfile",
        type: {
          name: "Composite",
          className: "ProvisionedClusterPoolUpgradeProfile"
        }
      },
      agentPoolProfiles: {
        serializedName: "properties.agentPoolProfiles",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProvisionedClusterPoolUpgradeProfile"
            }
          }
        }
      }
    }
  }
};

export const HybridIdentityMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridIdentityMetadata",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      resourceUid: {
        serializedName: "properties.resourceUid",
        type: {
          name: "String"
        }
      },
      publicKey: {
        serializedName: "properties.publicKey",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "properties.identity",
        type: {
          name: "Composite",
          className: "ProvisionedClusterIdentity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
