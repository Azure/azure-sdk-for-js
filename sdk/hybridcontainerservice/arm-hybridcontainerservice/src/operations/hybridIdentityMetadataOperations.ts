/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { HybridIdentityMetadataOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridContainerServiceClient } from "../hybridContainerServiceClient";
import {
  HybridIdentityMetadata,
  HybridIdentityMetadataListByClusterNextOptionalParams,
  HybridIdentityMetadataListByClusterOptionalParams,
  HybridIdentityMetadataListByClusterResponse,
  HybridIdentityMetadataPutOptionalParams,
  HybridIdentityMetadataPutResponse,
  HybridIdentityMetadataGetOptionalParams,
  HybridIdentityMetadataGetResponse,
  HybridIdentityMetadataDeleteOptionalParams,
  HybridIdentityMetadataListByClusterNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HybridIdentityMetadataOperations operations. */
export class HybridIdentityMetadataOperationsImpl
  implements HybridIdentityMetadataOperations {
  private readonly client: HybridContainerServiceClient;

  /**
   * Initialize a new instance of the class HybridIdentityMetadataOperations class.
   * @param client Reference to the service client
   */
  constructor(client: HybridContainerServiceClient) {
    this.client = client;
  }

  /**
   * Lists the hybrid identity metadata proxy resource in a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisionedClustersName Parameter for the name of the provisioned cluster
   * @param options The options parameters.
   */
  public listByCluster(
    resourceGroupName: string,
    provisionedClustersName: string,
    options?: HybridIdentityMetadataListByClusterOptionalParams
  ): PagedAsyncIterableIterator<HybridIdentityMetadata> {
    const iter = this.listByClusterPagingAll(
      resourceGroupName,
      provisionedClustersName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByClusterPagingPage(
          resourceGroupName,
          provisionedClustersName,
          options,
          settings
        );
      }
    };
  }

  private async *listByClusterPagingPage(
    resourceGroupName: string,
    provisionedClustersName: string,
    options?: HybridIdentityMetadataListByClusterOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<HybridIdentityMetadata[]> {
    let result: HybridIdentityMetadataListByClusterResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCluster(
        resourceGroupName,
        provisionedClustersName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByClusterNext(
        resourceGroupName,
        provisionedClustersName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByClusterPagingAll(
    resourceGroupName: string,
    provisionedClustersName: string,
    options?: HybridIdentityMetadataListByClusterOptionalParams
  ): AsyncIterableIterator<HybridIdentityMetadata> {
    for await (const page of this.listByClusterPagingPage(
      resourceGroupName,
      provisionedClustersName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates the hybrid identity metadata proxy resource that facilitates the managed identity
   * provisioning.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisionedClustersName Parameter for the name of the provisioned cluster
   * @param hybridIdentityMetadataResourceName Parameter for the name of the hybrid identity metadata
   *                                           resource.
   * @param body Defines the hybridIdentityMetadata.
   * @param options The options parameters.
   */
  put(
    resourceGroupName: string,
    provisionedClustersName: string,
    hybridIdentityMetadataResourceName: string,
    body: HybridIdentityMetadata,
    options?: HybridIdentityMetadataPutOptionalParams
  ): Promise<HybridIdentityMetadataPutResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisionedClustersName,
        hybridIdentityMetadataResourceName,
        body,
        options
      },
      putOperationSpec
    );
  }

  /**
   * Get the hybrid identity metadata proxy resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisionedClustersName Parameter for the name of the provisioned cluster
   * @param hybridIdentityMetadataResourceName Parameter for the name of the hybrid identity metadata
   *                                           resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    provisionedClustersName: string,
    hybridIdentityMetadataResourceName: string,
    options?: HybridIdentityMetadataGetOptionalParams
  ): Promise<HybridIdentityMetadataGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisionedClustersName,
        hybridIdentityMetadataResourceName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Deletes the hybrid identity metadata proxy resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisionedClustersName Parameter for the name of the provisioned cluster
   * @param hybridIdentityMetadataResourceName Parameter for the name of the hybrid identity metadata
   *                                           resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    provisionedClustersName: string,
    hybridIdentityMetadataResourceName: string,
    options?: HybridIdentityMetadataDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisionedClustersName,
        hybridIdentityMetadataResourceName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Lists the hybrid identity metadata proxy resource in a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisionedClustersName Parameter for the name of the provisioned cluster
   * @param options The options parameters.
   */
  private _listByCluster(
    resourceGroupName: string,
    provisionedClustersName: string,
    options?: HybridIdentityMetadataListByClusterOptionalParams
  ): Promise<HybridIdentityMetadataListByClusterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, provisionedClustersName, options },
      listByClusterOperationSpec
    );
  }

  /**
   * ListByClusterNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisionedClustersName Parameter for the name of the provisioned cluster
   * @param nextLink The nextLink from the previous successful call to the ListByCluster method.
   * @param options The options parameters.
   */
  private _listByClusterNext(
    resourceGroupName: string,
    provisionedClustersName: string,
    nextLink: string,
    options?: HybridIdentityMetadataListByClusterNextOptionalParams
  ): Promise<HybridIdentityMetadataListByClusterNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, provisionedClustersName, nextLink, options },
      listByClusterNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const putOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/provisionedClusters/{provisionedClustersName}/hybridIdentityMetadata/{hybridIdentityMetadataResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadata
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisionedClustersName,
    Parameters.hybridIdentityMetadataResourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/provisionedClusters/{provisionedClustersName}/hybridIdentityMetadata/{hybridIdentityMetadataResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadata
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisionedClustersName,
    Parameters.hybridIdentityMetadataResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/provisionedClusters/{provisionedClustersName}/hybridIdentityMetadata/{hybridIdentityMetadataResourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisionedClustersName,
    Parameters.hybridIdentityMetadataResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByClusterOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/provisionedClusters/{provisionedClustersName}/hybridIdentityMetadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadataList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisionedClustersName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByClusterNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadataList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisionedClustersName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
