/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { HybridContainerService } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridContainerServiceClient } from "../hybridContainerServiceClient";
import {
  HybridContainerServiceListOrchestratorsOptionalParams,
  HybridContainerServiceListOrchestratorsResponse,
  HybridContainerServiceListVMSkusOptionalParams,
  HybridContainerServiceListVMSkusResponse
} from "../models";

/** Class containing HybridContainerService operations. */
export class HybridContainerServiceImpl implements HybridContainerService {
  private readonly client: HybridContainerServiceClient;

  /**
   * Initialize a new instance of the class HybridContainerService class.
   * @param client Reference to the service client
   */
  constructor(client: HybridContainerServiceClient) {
    this.client = client;
  }

  /**
   * Lists the available orchestrators in a custom location for HybridAKS
   * @param customLocationResourceUri The fully qualified Azure Resource manager identifier of the custom
   *                                  location resource.
   * @param options The options parameters.
   */
  listOrchestrators(
    customLocationResourceUri: string,
    options?: HybridContainerServiceListOrchestratorsOptionalParams
  ): Promise<HybridContainerServiceListOrchestratorsResponse> {
    return this.client.sendOperationRequest(
      { customLocationResourceUri, options },
      listOrchestratorsOperationSpec
    );
  }

  /**
   * Lists the available VM SKUs in a custom location for HybridAKS
   * @param customLocationResourceUri The fully qualified Azure Resource manager identifier of the custom
   *                                  location resource.
   * @param options The options parameters.
   */
  listVMSkus(
    customLocationResourceUri: string,
    options?: HybridContainerServiceListVMSkusOptionalParams
  ): Promise<HybridContainerServiceListVMSkusResponse> {
    return this.client.sendOperationRequest(
      { customLocationResourceUri, options },
      listVMSkusOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOrchestratorsOperationSpec: coreClient.OperationSpec = {
  path:
    "/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/orchestrators",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OrchestratorVersionProfileListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.customLocationResourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const listVMSkusOperationSpec: coreClient.OperationSpec = {
  path:
    "/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/vmSkus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMSkuListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.customLocationResourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
