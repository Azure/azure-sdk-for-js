/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "./lroImpl";
import {
  ProvisionedClusterInstancesImpl,
  HybridIdentityMetadataOperationsImpl,
  AgentPoolOperationsImpl,
  KubernetesVersionsImpl,
  VMSkusImpl,
  OperationsImpl,
  VirtualNetworksImpl
} from "./operations";
import {
  ProvisionedClusterInstances,
  HybridIdentityMetadataOperations,
  AgentPoolOperations,
  KubernetesVersions,
  VMSkus,
  Operations,
  VirtualNetworks
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  HybridContainerServiceClientOptionalParams,
  GetKubernetesVersionsOptionalParams,
  GetKubernetesVersionsResponse,
  KubernetesVersionProfile,
  PutKubernetesVersionsOptionalParams,
  PutKubernetesVersionsResponse,
  DeleteKubernetesVersionsOptionalParams,
  DeleteKubernetesVersionsResponse,
  GetVMSkusOptionalParams,
  GetVMSkusResponse,
  VmSkuProfile,
  PutVMSkusOptionalParams,
  PutVMSkusResponse,
  DeleteVMSkusOptionalParams,
  DeleteVMSkusResponse
} from "./models";

export class HybridContainerServiceClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId?: string;

  /**
   * Initializes a new instance of the HybridContainerServiceClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription. The value must be an UUID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: HybridContainerServiceClientOptionalParams
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    options?: HybridContainerServiceClientOptionalParams
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionIdOrOptions?:
      | HybridContainerServiceClientOptionalParams
      | string,
    options?: HybridContainerServiceClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }

    let subscriptionId: string | undefined;

    if (typeof subscriptionIdOrOptions === "string") {
      subscriptionId = subscriptionIdOrOptions;
    } else if (typeof subscriptionIdOrOptions === "object") {
      options = subscriptionIdOrOptions;
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: HybridContainerServiceClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-hybridcontainerservice/1.0.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2024-01-01";
    this.provisionedClusterInstances = new ProvisionedClusterInstancesImpl(
      this
    );
    this.hybridIdentityMetadataOperations = new HybridIdentityMetadataOperationsImpl(
      this
    );
    this.agentPoolOperations = new AgentPoolOperationsImpl(this);
    this.kubernetesVersions = new KubernetesVersionsImpl(this);
    this.vMSkus = new VMSkusImpl(this);
    this.operations = new OperationsImpl(this);
    this.virtualNetworks = new VirtualNetworksImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * Lists the supported kubernetes versions for the specified custom location
   * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom
   *                                  location resource.
   * @param options The options parameters.
   */
  getKubernetesVersions(
    customLocationResourceUri: string,
    options?: GetKubernetesVersionsOptionalParams
  ): Promise<GetKubernetesVersionsResponse> {
    return this.sendOperationRequest(
      { customLocationResourceUri, options },
      getKubernetesVersionsOperationSpec
    );
  }

  /**
   * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes
   * versions)
   * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom
   *                                  location resource.
   * @param kubernetesVersions Kubernetes Versions resource definition
   * @param options The options parameters.
   */
  async beginPutKubernetesVersions(
    customLocationResourceUri: string,
    kubernetesVersions: KubernetesVersionProfile,
    options?: PutKubernetesVersionsOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PutKubernetesVersionsResponse>,
      PutKubernetesVersionsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PutKubernetesVersionsResponse> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { customLocationResourceUri, kubernetesVersions, options },
      spec: putKubernetesVersionsOperationSpec
    });
    const poller = await createHttpPoller<
      PutKubernetesVersionsResponse,
      OperationState<PutKubernetesVersionsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Puts the default kubernetes version resource type (one time operation, before listing the kubernetes
   * versions)
   * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom
   *                                  location resource.
   * @param kubernetesVersions Kubernetes Versions resource definition
   * @param options The options parameters.
   */
  async beginPutKubernetesVersionsAndWait(
    customLocationResourceUri: string,
    kubernetesVersions: KubernetesVersionProfile,
    options?: PutKubernetesVersionsOptionalParams
  ): Promise<PutKubernetesVersionsResponse> {
    const poller = await this.beginPutKubernetesVersions(
      customLocationResourceUri,
      kubernetesVersions,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete the default kubernetes versions resource type
   * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom
   *                                  location resource.
   * @param options The options parameters.
   */
  async beginDeleteKubernetesVersions(
    customLocationResourceUri: string,
    options?: DeleteKubernetesVersionsOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DeleteKubernetesVersionsResponse>,
      DeleteKubernetesVersionsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeleteKubernetesVersionsResponse> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { customLocationResourceUri, options },
      spec: deleteKubernetesVersionsOperationSpec
    });
    const poller = await createHttpPoller<
      DeleteKubernetesVersionsResponse,
      OperationState<DeleteKubernetesVersionsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete the default kubernetes versions resource type
   * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom
   *                                  location resource.
   * @param options The options parameters.
   */
  async beginDeleteKubernetesVersionsAndWait(
    customLocationResourceUri: string,
    options?: DeleteKubernetesVersionsOptionalParams
  ): Promise<DeleteKubernetesVersionsResponse> {
    const poller = await this.beginDeleteKubernetesVersions(
      customLocationResourceUri,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the supported VM skus for the specified custom location
   * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom
   *                                  location resource.
   * @param options The options parameters.
   */
  getVMSkus(
    customLocationResourceUri: string,
    options?: GetVMSkusOptionalParams
  ): Promise<GetVMSkusResponse> {
    return this.sendOperationRequest(
      { customLocationResourceUri, options },
      getVMSkusOperationSpec
    );
  }

  /**
   * Puts the default VM skus resource type (one time operation, before listing the VM skus)
   * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom
   *                                  location resource.
   * @param skus VM SKUs resource definition
   * @param options The options parameters.
   */
  async beginPutVMSkus(
    customLocationResourceUri: string,
    skus: VmSkuProfile,
    options?: PutVMSkusOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<PutVMSkusResponse>, PutVMSkusResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PutVMSkusResponse> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { customLocationResourceUri, skus, options },
      spec: putVMSkusOperationSpec
    });
    const poller = await createHttpPoller<
      PutVMSkusResponse,
      OperationState<PutVMSkusResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Puts the default VM skus resource type (one time operation, before listing the VM skus)
   * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom
   *                                  location resource.
   * @param skus VM SKUs resource definition
   * @param options The options parameters.
   */
  async beginPutVMSkusAndWait(
    customLocationResourceUri: string,
    skus: VmSkuProfile,
    options?: PutVMSkusOptionalParams
  ): Promise<PutVMSkusResponse> {
    const poller = await this.beginPutVMSkus(
      customLocationResourceUri,
      skus,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the default VM skus resource type
   * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom
   *                                  location resource.
   * @param options The options parameters.
   */
  async beginDeleteVMSkus(
    customLocationResourceUri: string,
    options?: DeleteVMSkusOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<DeleteVMSkusResponse>, DeleteVMSkusResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeleteVMSkusResponse> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { customLocationResourceUri, options },
      spec: deleteVMSkusOperationSpec
    });
    const poller = await createHttpPoller<
      DeleteVMSkusResponse,
      OperationState<DeleteVMSkusResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the default VM skus resource type
   * @param customLocationResourceUri The fully qualified Azure Resource Manager identifier of the custom
   *                                  location resource.
   * @param options The options parameters.
   */
  async beginDeleteVMSkusAndWait(
    customLocationResourceUri: string,
    options?: DeleteVMSkusOptionalParams
  ): Promise<DeleteVMSkusResponse> {
    const poller = await this.beginDeleteVMSkus(
      customLocationResourceUri,
      options
    );
    return poller.pollUntilDone();
  }

  provisionedClusterInstances: ProvisionedClusterInstances;
  hybridIdentityMetadataOperations: HybridIdentityMetadataOperations;
  agentPoolOperations: AgentPoolOperations;
  kubernetesVersions: KubernetesVersions;
  vMSkus: VMSkus;
  operations: Operations;
  virtualNetworks: VirtualNetworks;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getKubernetesVersionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/kubernetesVersions/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesVersionProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.customLocationResourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const putKubernetesVersionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/kubernetesVersions/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesVersionProfile
    },
    201: {
      bodyMapper: Mappers.KubernetesVersionProfile
    },
    202: {
      bodyMapper: Mappers.KubernetesVersionProfile
    },
    204: {
      bodyMapper: Mappers.KubernetesVersionProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.kubernetesVersions,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.customLocationResourceUri],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteKubernetesVersionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/kubernetesVersions/default",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper:
        Mappers.HybridContainerServiceClientDeleteKubernetesVersionsHeaders
    },
    201: {
      headersMapper:
        Mappers.HybridContainerServiceClientDeleteKubernetesVersionsHeaders
    },
    202: {
      headersMapper:
        Mappers.HybridContainerServiceClientDeleteKubernetesVersionsHeaders
    },
    204: {
      headersMapper:
        Mappers.HybridContainerServiceClientDeleteKubernetesVersionsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.customLocationResourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const getVMSkusOperationSpec: coreClient.OperationSpec = {
  path:
    "/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/skus/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VmSkuProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.customLocationResourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const putVMSkusOperationSpec: coreClient.OperationSpec = {
  path:
    "/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/skus/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VmSkuProfile
    },
    201: {
      bodyMapper: Mappers.VmSkuProfile
    },
    202: {
      bodyMapper: Mappers.VmSkuProfile
    },
    204: {
      bodyMapper: Mappers.VmSkuProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.skus,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.customLocationResourceUri],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteVMSkusOperationSpec: coreClient.OperationSpec = {
  path:
    "/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/skus/default",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.HybridContainerServiceClientDeleteVMSkusHeaders
    },
    201: {
      headersMapper: Mappers.HybridContainerServiceClientDeleteVMSkusHeaders
    },
    202: {
      headersMapper: Mappers.HybridContainerServiceClientDeleteVMSkusHeaders
    },
    204: {
      headersMapper: Mappers.HybridContainerServiceClientDeleteVMSkusHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.customLocationResourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
