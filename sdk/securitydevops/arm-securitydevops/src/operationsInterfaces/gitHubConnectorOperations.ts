/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  GitHubConnector,
  GitHubConnectorListByResourceGroupOptionalParams,
  GitHubConnectorListBySubscriptionOptionalParams,
  GitHubConnectorGetOptionalParams,
  GitHubConnectorGetResponse,
  GitHubConnectorCreateOrUpdateOptionalParams,
  GitHubConnectorCreateOrUpdateResponse,
  GitHubConnectorUpdateOptionalParams,
  GitHubConnectorUpdateResponse,
  GitHubConnectorDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a GitHubConnectorOperations. */
export interface GitHubConnectorOperations {
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: GitHubConnectorListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<GitHubConnector>;
  /**
   * Returns a list of monitored GitHub Connectors.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: GitHubConnectorListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<GitHubConnector>;
  /**
   * Returns a monitored GitHub Connector resource for a given ID.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gitHubConnectorName Name of the GitHub Connector.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    gitHubConnectorName: string,
    options?: GitHubConnectorGetOptionalParams
  ): Promise<GitHubConnectorGetResponse>;
  /**
   * Create or update a monitored GitHub Connector resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gitHubConnectorName Name of the GitHub Connector.
   * @param gitHubConnector Connector resource payload.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    gitHubConnectorName: string,
    gitHubConnector: GitHubConnector,
    options?: GitHubConnectorCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<GitHubConnectorCreateOrUpdateResponse>,
      GitHubConnectorCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a monitored GitHub Connector resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gitHubConnectorName Name of the GitHub Connector.
   * @param gitHubConnector Connector resource payload.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    gitHubConnectorName: string,
    gitHubConnector: GitHubConnector,
    options?: GitHubConnectorCreateOrUpdateOptionalParams
  ): Promise<GitHubConnectorCreateOrUpdateResponse>;
  /**
   * Update monitored GitHub Connector details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gitHubConnectorName Name of the GitHub Connector.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    gitHubConnectorName: string,
    options?: GitHubConnectorUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<GitHubConnectorUpdateResponse>,
      GitHubConnectorUpdateResponse
    >
  >;
  /**
   * Update monitored GitHub Connector details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gitHubConnectorName Name of the GitHub Connector.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    gitHubConnectorName: string,
    options?: GitHubConnectorUpdateOptionalParams
  ): Promise<GitHubConnectorUpdateResponse>;
  /**
   * Delete monitored GitHub Connector details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gitHubConnectorName Name of the GitHub Connector.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    gitHubConnectorName: string,
    options?: GitHubConnectorDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete monitored GitHub Connector details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gitHubConnectorName Name of the GitHub Connector.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    gitHubConnectorName: string,
    options?: GitHubConnectorDeleteOptionalParams
  ): Promise<void>;
}
