[1mdiff --git a/sdk/identity/identity/test/internal/node/msalClient.spec.ts b/sdk/identity/identity/test/internal/node/msalClient.spec.ts[m
[1mindex 409db1afaa..bbe326227e 100644[m
[1m--- a/sdk/identity/identity/test/internal/node/msalClient.spec.ts[m
[1m+++ b/sdk/identity/identity/test/internal/node/msalClient.spec.ts[m
[36m@@ -72,7 +72,7 @@[m [mdescribe("MsalClient", function () {[m
 [m
       const accessToken = await client.getTokenByDeviceCode(scopes, (info) => {[m
         console.log([m
[31m-          `To complete the test recording, please go to ${info.verificationUri} and use code ${info.userCode} to authenticate.`,[m
[32m+[m[32m          `To complete the test recording, please go to ${info.verificationUri} and use code ${info.userCode} to authenticate.`[m
         );[m
       });[m
       assert.isNotEmpty(accessToken.token);[m
[36m@@ -146,7 +146,7 @@[m [mdescribe("MsalClient", function () {[m
       it("throws when tenantId is invalid", function () {[m
         assert.throws([m
           () => msalClient.generateMsalConfiguration("client-id", "invalid-tenant-id$%*^@#(;"),[m
[31m-          /Invalid tenant id provided/,[m
[32m+[m[32m          /Invalid tenant id provided/[m
         );[m
       });[m
     });[m
[36m@@ -196,7 +196,7 @@[m [mdescribe("MsalClient", function () {[m
           await subject.getTokenByClientSecret([m
             ["https://vault.azure.net/.default"],[m
             "client-secret",[m
[31m-            { enableCae },[m
[32m+[m[32m            { enableCae }[m
           );[m
         } catch (e) {[m
           // ignore errors[m
[36m@@ -240,7 +240,7 @@[m [mdescribe("MsalClient", function () {[m
           await subject.getTokenByClientSecret([m
             ["https://vault.azure.net/.default"],[m
             "client-secret",[m
[31m-            { enableCae },[m
[32m+[m[32m            { enableCae }[m
           );[m
         } catch (e) {[m
           // ignore errors[m
[36m@@ -278,7 +278,7 @@[m [mdescribe("MsalClient", function () {[m
 [m
         const publicClientStub = sinon.stub([m
           PublicClientApplication.prototype,[m
[31m-          "acquireTokenByCode",[m
[32m+[m[32m          "acquireTokenByCode"[m
         );[m
         const confidentialClientStub = sinon[m
           .stub(ConfidentialClientApplication.prototype, "acquireTokenByCode")[m
[36m@@ -300,14 +300,14 @@[m [mdescribe("MsalClient", function () {[m
           .resolves(fakeTokenResponse as AuthenticationResult);[m
         const confidentialClientStub = sinon.stub([m
           ConfidentialClientApplication.prototype,[m
[31m-          "acquireTokenByCode",[m
[32m+[m[32m          "acquireTokenByCode"[m
         );[m
 [m
         await client.getTokenByAuthorizationCode([m
           scopes,[m
           "code",[m
           "redirectUri",[m
[31m-          undefined /* clientSecret */,[m
[32m+[m[32m          undefined /* clientSecret */[m
         );[m
 [m
         assert.equal(publicClientStub.callCount, 1);[m
[36m@@ -392,12 +392,12 @@[m [mdescribe("MsalClient", function () {[m
         assert.equal([m
           clientCredentialAuthStub.callCount,[m
           1,[m
[31m-          "expected acquireTokenByClientCredential to have been called once",[m
[32m+[m[32m          "expected acquireTokenByClientCredential to have been called once"[m
         );[m
         assert.equal([m
           silentAuthStub.callCount,[m
           1,[m
[31m-          "expected acquireTokenSilent to have been called once",[m
[32m+[m[32m          "expected acquireTokenSilent to have been called once"[m
         );[m
       });[m
 [m
[36m@@ -421,7 +421,7 @@[m [mdescribe("MsalClient", function () {[m
 [m
         await assert.isRejected([m
           client.getTokenByDeviceCode(scopes, deviceCodeCallback),[m
[31m-          "operation has been aborted",[m
[32m+[m[32m          "operation has been aborted"[m
         );[m
       });[m
 [m
[36m@@ -448,9 +448,9 @@[m [mdescribe("MsalClient", function () {[m
             () => {[m
               // no-op[m
             },[m
[31m-            { disableAutomaticAuthentication: true },[m
[32m+[m[32m            { disableAutomaticAuthentication: true }[m
           ),[m
[31m-          /Automatic authentication has been disabled/,[m
[32m+[m[32m          /Automatic authentication has been disabled/[m
         );[m
       });[m
     });[m
[36m@@ -468,7 +468,7 @@[m [mdescribe("MsalClient", function () {[m
         },[m
         {[m
           abortSignal,[m
[31m-        },[m
[32m+[m[32m        }[m
       );[m
       await assert.isRejected(request, AbortError);[m
     });[m
[36m@@ -500,7 +500,7 @@[m [mdescribe("MsalClient", function () {[m
         assert.equal(requestAuthority, expectedAuthority);[m
       });[m
 [m
[31m-      it("allows using the AZURE_AUTHORITY_HOST environment variable", async function (this: Context) {[m
[32m+[m[32m      it.only("allows using the AZURE_AUTHORITY_HOST environment variable", async function (this: Context) {[m
         const tenantIdOne = "tenantOne";[m
         const tenantIdTwo = "tenantTwo";[m
         const authorityHost = "https://custom.authority.com";[m
